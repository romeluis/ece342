
bluetoothconfigure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d4  080042d4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042dc  080042dc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080042e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  2000005c  08004340  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08004340  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c272  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001db3  00000000  00000000  0002c341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c4  00000000  00000000  0002eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a2f  00000000  00000000  0002f2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb98  00000000  00000000  00050d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac08  00000000  00000000  0005d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ee4  00000000  00000000  001284b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041ac 	.word	0x080041ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080041ac 	.word	0x080041ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fc3e 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f80c 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8f8 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f89e 	bl	800070c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d0:	f000 f8c6 	bl	8000760 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f870 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  masterConfigure();
 80005d8:	f000 f9f2 	bl	80009c0 <masterConfigure>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x20>
	...

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f958 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SystemClock_Config+0xd4>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000640:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000654:	23a8      	movs	r3, #168	; 0xa8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065c:	2307      	movs	r3, #7
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fec1 	bl	80023f0 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 fa2e 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2105      	movs	r1, #5
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f836 	bl	8001708 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 fa17 	bl	8000ad4 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f002 f91c 	bl	800292c <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f9eb 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000078 	.word	0x20000078
 8000708:	40004400 	.word	0x40004400

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART3_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000744:	f002 f8f2 	bl	800292c <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f9c1 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000c0 	.word	0x200000c0
 800075c:	40004800 	.word	0x40004800

08000760 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800076a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2206      	movs	r2, #6
 8000770:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2202      	movs	r2, #2
 8000776:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2202      	movs	r2, #2
 8000782:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2201      	movs	r2, #1
 8000788:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2201      	movs	r2, #1
 800079a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	f000 fe75 	bl	8001492 <HAL_PCD_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f991 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000108 	.word	0x20000108

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a4b      	ldr	r2, [pc, #300]	; (8000908 <MX_GPIO_Init+0x14c>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b49      	ldr	r3, [pc, #292]	; (8000908 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a44      	ldr	r2, [pc, #272]	; (8000908 <MX_GPIO_Init+0x14c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b42      	ldr	r3, [pc, #264]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a3d      	ldr	r2, [pc, #244]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b37      	ldr	r3, [pc, #220]	; (8000908 <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a36      	ldr	r2, [pc, #216]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b34      	ldr	r3, [pc, #208]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a2f      	ldr	r2, [pc, #188]	; (8000908 <MX_GPIO_Init+0x14c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <MX_GPIO_Init+0x150>)
 8000882:	f000 fded 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AT_MODE_ENABLE_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2141      	movs	r1, #65	; 0x41
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x154>)
 800088c:	f000 fde8 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_GPIO_Init+0x158>)
 80008a8:	f000 fc46 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_GPIO_Init+0x150>)
 80008c6:	f000 fc37 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : AT_MODE_ENABLE_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = AT_MODE_ENABLE_Pin|USB_PowerSwitchOn_Pin;
 80008ca:	2341      	movs	r3, #65	; 0x41
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x154>)
 80008e2:	f000 fc29 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0x154>)
 80008fa:	f000 fc1d 	bl	8001138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <sendMessage>:

/* USER CODE BEGIN 4 */
void sendMessage(char* message) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100)!=HAL_OK){
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fc75 	bl	8000210 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <sendMessage+0x34>)
 8000930:	f002 f84c 	bl	80029cc <HAL_UART_Transmit>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d004      	beq.n	8000944 <sendMessage+0x2c>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <sendMessage+0x38>)
 8000940:	f000 fd8e 	bl	8001460 <HAL_GPIO_WritePin>
	}
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000078 	.word	0x20000078
 8000950:	40020400 	.word	0x40020400

08000954 <recieveMessage>:

void recieveMessage(char* message) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&huart2, (uint8_t*)message, 4, 100)!=HAL_OK){
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	2204      	movs	r2, #4
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <recieveMessage+0x30>)
 8000964:	f002 f8bd 	bl	8002ae2 <HAL_UART_Receive>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d005      	beq.n	800097a <recieveMessage+0x26>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <recieveMessage+0x34>)
 8000976:	f000 fd73 	bl	8001460 <HAL_GPIO_WritePin>
	}
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000078 	.word	0x20000078
 8000988:	40020400 	.word	0x40020400

0800098c <checkResponse>:

void checkResponse(char* message) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if (message[0] != 'O' && message[1] != 'K') {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b4f      	cmp	r3, #79	; 0x4f
 800099a:	d00a      	beq.n	80009b2 <checkResponse+0x26>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3301      	adds	r3, #1
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b4b      	cmp	r3, #75	; 0x4b
 80009a4:	d005      	beq.n	80009b2 <checkResponse+0x26>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2101      	movs	r1, #1
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <checkResponse+0x30>)
 80009ac:	f000 fd58 	bl	8001460 <HAL_GPIO_WritePin>
		while(1) {}
 80009b0:	e7fe      	b.n	80009b0 <checkResponse+0x24>
	}
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40020400 	.word	0x40020400

080009c0 <masterConfigure>:
	sprintf(message, "AT+ADDR?\r\n");
	sendMessage(message);
	HAL_UART_Receive(&huart2, (uint8_t*)message, 100, 100);
}

void masterConfigure() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	//Confirm AT mode
	sprintf(message, "AT\r\n");
 80009c4:	4939      	ldr	r1, [pc, #228]	; (8000aac <masterConfigure+0xec>)
 80009c6:	483a      	ldr	r0, [pc, #232]	; (8000ab0 <masterConfigure+0xf0>)
 80009c8:	f002 ff4c 	bl	8003864 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 80009cc:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <masterConfigure+0xf0>)
 80009ce:	f7ff fc1f 	bl	8000210 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	4935      	ldr	r1, [pc, #212]	; (8000ab0 <masterConfigure+0xf0>)
 80009da:	4836      	ldr	r0, [pc, #216]	; (8000ab4 <masterConfigure+0xf4>)
 80009dc:	f001 fff6 	bl	80029cc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)message, 4, 100);
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	2204      	movs	r2, #4
 80009e4:	4932      	ldr	r1, [pc, #200]	; (8000ab0 <masterConfigure+0xf0>)
 80009e6:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <masterConfigure+0xf4>)
 80009e8:	f002 f87b 	bl	8002ae2 <HAL_UART_Receive>

	//Check response
	checkResponse(message);
 80009ec:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <masterConfigure+0xf0>)
 80009ee:	f7ff ffcd 	bl	800098c <checkResponse>

	//Set name
	sprintf(message, "AT+NAME=CAMERA-TRANSMITTER\r\n");
 80009f2:	4931      	ldr	r1, [pc, #196]	; (8000ab8 <masterConfigure+0xf8>)
 80009f4:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <masterConfigure+0xf0>)
 80009f6:	f002 ff35 	bl	8003864 <siprintf>
	sendMessage(message);
 80009fa:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <masterConfigure+0xf0>)
 80009fc:	f7ff ff8c 	bl	8000918 <sendMessage>
	recieveMessage(message);
 8000a00:	482b      	ldr	r0, [pc, #172]	; (8000ab0 <masterConfigure+0xf0>)
 8000a02:	f7ff ffa7 	bl	8000954 <recieveMessage>

	//Check response
	checkResponse(message);
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <masterConfigure+0xf0>)
 8000a08:	f7ff ffc0 	bl	800098c <checkResponse>

	//Set role
	sprintf(message, "AT+ROLE=1\r\n");
 8000a0c:	492b      	ldr	r1, [pc, #172]	; (8000abc <masterConfigure+0xfc>)
 8000a0e:	4828      	ldr	r0, [pc, #160]	; (8000ab0 <masterConfigure+0xf0>)
 8000a10:	f002 ff28 	bl	8003864 <siprintf>
	sendMessage(message);
 8000a14:	4826      	ldr	r0, [pc, #152]	; (8000ab0 <masterConfigure+0xf0>)
 8000a16:	f7ff ff7f 	bl	8000918 <sendMessage>
	recieveMessage(message);
 8000a1a:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <masterConfigure+0xf0>)
 8000a1c:	f7ff ff9a 	bl	8000954 <recieveMessage>

	//Check response
	checkResponse(message);
 8000a20:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <masterConfigure+0xf0>)
 8000a22:	f7ff ffb3 	bl	800098c <checkResponse>

	//Set mode
	sprintf(message, "AT+CMODE=0\r\n");
 8000a26:	4926      	ldr	r1, [pc, #152]	; (8000ac0 <masterConfigure+0x100>)
 8000a28:	4821      	ldr	r0, [pc, #132]	; (8000ab0 <masterConfigure+0xf0>)
 8000a2a:	f002 ff1b 	bl	8003864 <siprintf>
	sendMessage(message);
 8000a2e:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <masterConfigure+0xf0>)
 8000a30:	f7ff ff72 	bl	8000918 <sendMessage>
	recieveMessage(message);
 8000a34:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <masterConfigure+0xf0>)
 8000a36:	f7ff ff8d 	bl	8000954 <recieveMessage>

	//Check response
	checkResponse(message);
 8000a3a:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <masterConfigure+0xf0>)
 8000a3c:	f7ff ffa6 	bl	800098c <checkResponse>

	//Set fixed address
	sprintf(message, "AT+BIND=0023,00,000394\r\n");
 8000a40:	4920      	ldr	r1, [pc, #128]	; (8000ac4 <masterConfigure+0x104>)
 8000a42:	481b      	ldr	r0, [pc, #108]	; (8000ab0 <masterConfigure+0xf0>)
 8000a44:	f002 ff0e 	bl	8003864 <siprintf>
	sendMessage(message);
 8000a48:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <masterConfigure+0xf0>)
 8000a4a:	f7ff ff65 	bl	8000918 <sendMessage>
	recieveMessage(message);
 8000a4e:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <masterConfigure+0xf0>)
 8000a50:	f7ff ff80 	bl	8000954 <recieveMessage>

	//Check response
	checkResponse(message);
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <masterConfigure+0xf0>)
 8000a56:	f7ff ff99 	bl	800098c <checkResponse>

	//Check fixed address
	sprintf(message, "AT+BIND?\r\n");
 8000a5a:	491b      	ldr	r1, [pc, #108]	; (8000ac8 <masterConfigure+0x108>)
 8000a5c:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <masterConfigure+0xf0>)
 8000a5e:	f002 ff01 	bl	8003864 <siprintf>
	sendMessage(message);
 8000a62:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <masterConfigure+0xf0>)
 8000a64:	f7ff ff58 	bl	8000918 <sendMessage>
	HAL_UART_Receive(&huart2, (uint8_t*)message, 100, 100);
 8000a68:	2364      	movs	r3, #100	; 0x64
 8000a6a:	2264      	movs	r2, #100	; 0x64
 8000a6c:	4910      	ldr	r1, [pc, #64]	; (8000ab0 <masterConfigure+0xf0>)
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <masterConfigure+0xf4>)
 8000a70:	f002 f837 	bl	8002ae2 <HAL_UART_Receive>

	//Set Password
	sprintf(message, "AT+PSWD=0000\r\n");
 8000a74:	4915      	ldr	r1, [pc, #84]	; (8000acc <masterConfigure+0x10c>)
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <masterConfigure+0xf0>)
 8000a78:	f002 fef4 	bl	8003864 <siprintf>
	sendMessage(message);
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <masterConfigure+0xf0>)
 8000a7e:	f7ff ff4b 	bl	8000918 <sendMessage>
	recieveMessage(message);
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <masterConfigure+0xf0>)
 8000a84:	f7ff ff66 	bl	8000954 <recieveMessage>

	//Check response
	checkResponse(message);
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <masterConfigure+0xf0>)
 8000a8a:	f7ff ff7f 	bl	800098c <checkResponse>

	//Set UART
	sprintf(message, "AT+UART=38400,1,0\r\n");
 8000a8e:	4910      	ldr	r1, [pc, #64]	; (8000ad0 <masterConfigure+0x110>)
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <masterConfigure+0xf0>)
 8000a92:	f002 fee7 	bl	8003864 <siprintf>
	sendMessage(message);
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <masterConfigure+0xf0>)
 8000a98:	f7ff ff3e 	bl	8000918 <sendMessage>
	recieveMessage(message);
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <masterConfigure+0xf0>)
 8000a9e:	f7ff ff59 	bl	8000954 <recieveMessage>

	//Check response
	checkResponse(message);
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <masterConfigure+0xf0>)
 8000aa4:	f7ff ff72 	bl	800098c <checkResponse>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	080041c4 	.word	0x080041c4
 8000ab0:	200005ec 	.word	0x200005ec
 8000ab4:	20000078 	.word	0x20000078
 8000ab8:	08004214 	.word	0x08004214
 8000abc:	08004234 	.word	0x08004234
 8000ac0:	08004240 	.word	0x08004240
 8000ac4:	08004250 	.word	0x08004250
 8000ac8:	0800426c 	.word	0x0800426c
 8000acc:	08004278 	.word	0x08004278
 8000ad0:	080041f4 	.word	0x080041f4

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a32      	ldr	r2, [pc, #200]	; (8000c18 <HAL_UART_MspInit+0xe8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a30      	ldr	r2, [pc, #192]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b8a:	2360      	movs	r3, #96	; 0x60
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	; (8000c20 <HAL_UART_MspInit+0xf0>)
 8000ba6:	f000 fac7 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000baa:	e031      	b.n	8000c10 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <HAL_UART_MspInit+0xf4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c00:	2307      	movs	r3, #7
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_UART_MspInit+0xf0>)
 8000c0c:	f000 fa94 	bl	8001138 <HAL_GPIO_Init>
}
 8000c10:	bf00      	nop
 8000c12:	3730      	adds	r7, #48	; 0x30
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020c00 	.word	0x40020c00
 8000c24:	40004800 	.word	0x40004800

08000c28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0a0      	sub	sp, #128	; 0x80
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	225c      	movs	r2, #92	; 0x5c
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fe2b 	bl	80038a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c56:	d14e      	bne.n	8000cf6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fe68 	bl	800193c <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000c72:	f7ff ff2f 	bl	8000ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cac:	4619      	mov	r1, r3
 8000cae:	4815      	ldr	r0, [pc, #84]	; (8000d04 <HAL_PCD_MspInit+0xdc>)
 8000cb0:	f000 fa42 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <HAL_PCD_MspInit+0xdc>)
 8000cca:	f000 fa35 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6353      	str	r3, [r2, #52]	; 0x34
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_PCD_MspInit+0xd8>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3780      	adds	r7, #128	; 0x80
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8c6 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f002 fd92 	bl	80038b4 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20020000 	.word	0x20020000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	20000650 	.word	0x20000650
 8000dc4:	200007a0 	.word	0x200007a0

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f002 fd51 	bl	80038c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fbcd 	bl	80005bc <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e30:	080042e4 	.word	0x080042e4
  ldr r2, =_sbss
 8000e34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e38:	200007a0 	.word	0x200007a0

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f931 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe34 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f93b 	bl	800111e <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 f911 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000654 	.word	0x20000654

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000654 	.word	0x20000654

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff47 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff5c 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb0 	bl	800108c <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e165      	b.n	8001420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8154 	bne.w	800141a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80ae 	beq.w	800141a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_GPIO_Init+0x300>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a5c      	ldr	r2, [pc, #368]	; (8001438 <HAL_GPIO_Init+0x300>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b5a      	ldr	r3, [pc, #360]	; (8001438 <HAL_GPIO_Init+0x300>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a58      	ldr	r2, [pc, #352]	; (800143c <HAL_GPIO_Init+0x304>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4f      	ldr	r2, [pc, #316]	; (8001440 <HAL_GPIO_Init+0x308>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x21a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4e      	ldr	r2, [pc, #312]	; (8001444 <HAL_GPIO_Init+0x30c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x216>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <HAL_GPIO_Init+0x310>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x212>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x314>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_GPIO_Init+0x318>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x20a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <HAL_GPIO_Init+0x31c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x206>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a49      	ldr	r2, [pc, #292]	; (8001458 <HAL_GPIO_Init+0x320>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x202>
 8001336:	2306      	movs	r3, #6
 8001338:	e00c      	b.n	8001354 <HAL_GPIO_Init+0x21c>
 800133a:	2307      	movs	r3, #7
 800133c:	e00a      	b.n	8001354 <HAL_GPIO_Init+0x21c>
 800133e:	2305      	movs	r3, #5
 8001340:	e008      	b.n	8001354 <HAL_GPIO_Init+0x21c>
 8001342:	2304      	movs	r3, #4
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x21c>
 8001346:	2303      	movs	r3, #3
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x21c>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x21c>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x21c>
 8001352:	2300      	movs	r3, #0
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f002 0203 	and.w	r2, r2, #3
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_GPIO_Init+0x304>)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b3a      	ldr	r3, [pc, #232]	; (800145c <HAL_GPIO_Init+0x324>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001396:	4a31      	ldr	r2, [pc, #196]	; (800145c <HAL_GPIO_Init+0x324>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <HAL_GPIO_Init+0x324>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c0:	4a26      	ldr	r2, [pc, #152]	; (800145c <HAL_GPIO_Init+0x324>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_GPIO_Init+0x324>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ea:	4a1c      	ldr	r2, [pc, #112]	; (800145c <HAL_GPIO_Init+0x324>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_GPIO_Init+0x324>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_GPIO_Init+0x324>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	f67f ae96 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40021000 	.word	0x40021000
 8001454:	40021400 	.word	0x40021400
 8001458:	40021800 	.word	0x40021800
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e108      	b.n	80016b6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fbb2 	bl	8000c28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2203      	movs	r2, #3
 80014c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d2:	d102      	bne.n	80014da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 ff2a 	bl	8003338 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7c1a      	ldrb	r2, [r3, #16]
 80014ec:	f88d 2000 	strb.w	r2, [sp]
 80014f0:	3304      	adds	r3, #4
 80014f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f4:	f001 febc 	bl	8003270 <USB_CoreInit>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2202      	movs	r2, #2
 8001502:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0d5      	b.n	80016b6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f001 ff22 	bl	800335a <USB_SetCurrentMode>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0c6      	b.n	80016b6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e04a      	b.n	80015c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3315      	adds	r3, #21
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3314      	adds	r3, #20
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	b298      	uxth	r0, r3
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	332e      	adds	r3, #46	; 0x2e
 800156a:	4602      	mov	r2, r0
 800156c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	3318      	adds	r3, #24
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	331c      	adds	r3, #28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3320      	adds	r3, #32
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3324      	adds	r3, #36	; 0x24
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3301      	adds	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d3af      	bcc.n	800152e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e044      	b.n	800165e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	3301      	adds	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3b5      	bcc.n	80015d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7c1a      	ldrb	r2, [r3, #16]
 8001670:	f88d 2000 	strb.w	r2, [sp]
 8001674:	3304      	adds	r3, #4
 8001676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001678:	f001 febc 	bl	80033f4 <USB_DevInit>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2202      	movs	r2, #2
 8001686:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e013      	b.n	80016b6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7b1b      	ldrb	r3, [r3, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f80a 	bl	80016be <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 f877 	bl	80037a2 <USB_DevDisconnect>

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016be:	b480      	push	{r7}
 80016c0:	b085      	sub	sp, #20
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	f043 0303 	orr.w	r3, r3, #3
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0cc      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d90c      	bls.n	8001744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800177e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d044      	beq.n	8001828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d119      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e06f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e067      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 0203 	bic.w	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4934      	ldr	r1, [pc, #208]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fb88 	bl	8000f0c <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff fb84 	bl	8000f0c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e04f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	429a      	cmp	r2, r3
 8001826:	d1eb      	bne.n	8001800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20c      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800188e:	f000 fb7f 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fae8 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	08004288 	.word	0x08004288
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000000 	.word	0x20000000

080018ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	08004298 	.word	0x08004298

08001914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001918:	f7ff ffdc 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	08004298 	.word	0x08004298

0800193c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d010      	beq.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800197a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	496c      	ldr	r1, [pc, #432]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001984:	4313      	orrs	r3, r2
 8001986:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001992:	2301      	movs	r3, #1
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019a2:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019a8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	4960      	ldr	r1, [pc, #384]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d017      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019d0:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4955      	ldr	r1, [pc, #340]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ee:	d101      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d017      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a0c:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	4946      	ldr	r1, [pc, #280]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 808a 	beq.w	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a72:	f7ff fa4b 	bl	8000f0c <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff fa47 	bl	8000f0c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e278      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02f      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab0:	6a3a      	ldr	r2, [r7, #32]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d028      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001abe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d114      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff fa15 	bl	8000f0c <HAL_GetTick>
 8001ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fa11 	bl	8000f0c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e240      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b14:	d114      	bne.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2a:	4902      	ldr	r1, [pc, #8]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
 8001b30:	e00c      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42470e40 	.word	0x42470e40
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b4a:	6093      	str	r3, [r2, #8]
 8001b4c:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	4944      	ldr	r1, [pc, #272]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b72:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00a      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4937      	ldr	r1, [pc, #220]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb0:	492e      	ldr	r1, [pc, #184]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d011      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd2:	4926      	ldr	r1, [pc, #152]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001be2:	d101      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00a      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	491a      	ldr	r1, [pc, #104]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d011      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c24:	4911      	ldr	r1, [pc, #68]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */

    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c34:	d101      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c36:	2301      	movs	r3, #1
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c48:	f040 80ff 	bne.w	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c52:	f7ff f95b 	bl	8000f0c <HAL_GetTick>
 8001c56:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c58:	e00e      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c5a:	f7ff f957 	bl	8000f0c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d907      	bls.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e188      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	424711e0 	.word	0x424711e0
 8001c74:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c78:	4b7e      	ldr	r3, [pc, #504]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ea      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d028      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d124      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cac:	4b71      	ldr	r3, [pc, #452]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cb2:	0c1b      	lsrs	r3, r3, #16
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cc4:	0e1b      	lsrs	r3, r3, #24
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	071b      	lsls	r3, r3, #28
 8001cee:	4961      	ldr	r1, [pc, #388]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d0a:	d00a      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d035      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d20:	d130      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d22:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d34:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3a:	0f1b      	lsrs	r3, r3, #28
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	019b      	lsls	r3, r3, #6
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	071b      	lsls	r3, r3, #28
 8001d64:	4943      	ldr	r1, [pc, #268]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d6c:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d72:	f023 021f 	bic.w	r2, r3, #31
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	493d      	ldr	r1, [pc, #244]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d029      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d98:	d124      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	3301      	adds	r3, #1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db2:	0f1b      	lsrs	r3, r3, #28
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	019b      	lsls	r3, r3, #6
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	071b      	lsls	r3, r3, #28
 8001ddc:	4925      	ldr	r1, [pc, #148]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d016      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	071b      	lsls	r3, r3, #28
 8001e16:	4917      	ldr	r1, [pc, #92]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f872 	bl	8000f0c <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e2c:	f7ff f86e 	bl	8000f0c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e09f      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	f040 8095 	bne.w	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e58:	f7ff f858 	bl	8000f0c <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e60:	f7ff f854 	bl	8000f0c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e085      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	42470068 	.word	0x42470068
 8001e7c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e80:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e8c:	d0e8      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d02b      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d127      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	4928      	ldr	r1, [pc, #160]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	3b01      	subs	r3, #1
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	4922      	ldr	r1, [pc, #136]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01d      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f1a:	d118      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	0e1b      	lsrs	r3, r3, #24
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	019b      	lsls	r3, r3, #6
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	4910      	ldr	r1, [pc, #64]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f54:	f7fe ffda 	bl	8000f0c <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f5c:	f7fe ffd6 	bl	8000f0c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e007      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f7a:	d1ef      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3730      	adds	r7, #48	; 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470070 	.word	0x42470070

08001f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f94:	b0ae      	sub	sp, #184	; 0xb8
 8001f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb6:	4bcb      	ldr	r3, [pc, #812]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	f200 8206 	bhi.w	80023d0 <HAL_RCC_GetSysClockFreq+0x440>
 8001fc4:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08002001 	.word	0x08002001
 8001fd0:	080023d1 	.word	0x080023d1
 8001fd4:	080023d1 	.word	0x080023d1
 8001fd8:	080023d1 	.word	0x080023d1
 8001fdc:	08002009 	.word	0x08002009
 8001fe0:	080023d1 	.word	0x080023d1
 8001fe4:	080023d1 	.word	0x080023d1
 8001fe8:	080023d1 	.word	0x080023d1
 8001fec:	08002011 	.word	0x08002011
 8001ff0:	080023d1 	.word	0x080023d1
 8001ff4:	080023d1 	.word	0x080023d1
 8001ff8:	080023d1 	.word	0x080023d1
 8001ffc:	08002201 	.word	0x08002201
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4bb9      	ldr	r3, [pc, #740]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002006:	e1e7      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002008:	4bb8      	ldr	r3, [pc, #736]	; (80022ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800200a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800200e:	e1e3      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002010:	4bb4      	ldr	r3, [pc, #720]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201c:	4bb1      	ldr	r3, [pc, #708]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d071      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002028:	4bae      	ldr	r3, [pc, #696]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	2200      	movs	r2, #0
 8002030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002034:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800203c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002040:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800204a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800204e:	4622      	mov	r2, r4
 8002050:	462b      	mov	r3, r5
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	0159      	lsls	r1, r3, #5
 800205c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002060:	0150      	lsls	r0, r2, #5
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4621      	mov	r1, r4
 8002068:	1a51      	subs	r1, r2, r1
 800206a:	6439      	str	r1, [r7, #64]	; 0x40
 800206c:	4629      	mov	r1, r5
 800206e:	eb63 0301 	sbc.w	r3, r3, r1
 8002072:	647b      	str	r3, [r7, #68]	; 0x44
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002080:	4649      	mov	r1, r9
 8002082:	018b      	lsls	r3, r1, #6
 8002084:	4641      	mov	r1, r8
 8002086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800208a:	4641      	mov	r1, r8
 800208c:	018a      	lsls	r2, r1, #6
 800208e:	4641      	mov	r1, r8
 8002090:	1a51      	subs	r1, r2, r1
 8002092:	63b9      	str	r1, [r7, #56]	; 0x38
 8002094:	4649      	mov	r1, r9
 8002096:	eb63 0301 	sbc.w	r3, r3, r1
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80020a8:	4649      	mov	r1, r9
 80020aa:	00cb      	lsls	r3, r1, #3
 80020ac:	4641      	mov	r1, r8
 80020ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020b2:	4641      	mov	r1, r8
 80020b4:	00ca      	lsls	r2, r1, #3
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	4622      	mov	r2, r4
 80020be:	189b      	adds	r3, r3, r2
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
 80020c2:	462b      	mov	r3, r5
 80020c4:	460a      	mov	r2, r1
 80020c6:	eb42 0303 	adc.w	r3, r2, r3
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020d8:	4629      	mov	r1, r5
 80020da:	024b      	lsls	r3, r1, #9
 80020dc:	4621      	mov	r1, r4
 80020de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020e2:	4621      	mov	r1, r4
 80020e4:	024a      	lsls	r2, r1, #9
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ee:	2200      	movs	r2, #0
 80020f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80020fc:	f7fe f8e0 	bl	80002c0 <__aeabi_uldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4613      	mov	r3, r2
 8002106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800210a:	e067      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210c:	4b75      	ldr	r3, [pc, #468]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	2200      	movs	r2, #0
 8002114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002118:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800211c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002124:	67bb      	str	r3, [r7, #120]	; 0x78
 8002126:	2300      	movs	r3, #0
 8002128:	67fb      	str	r3, [r7, #124]	; 0x7c
 800212a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800212e:	4622      	mov	r2, r4
 8002130:	462b      	mov	r3, r5
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	0159      	lsls	r1, r3, #5
 800213c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002140:	0150      	lsls	r0, r2, #5
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4621      	mov	r1, r4
 8002148:	1a51      	subs	r1, r2, r1
 800214a:	62b9      	str	r1, [r7, #40]	; 0x28
 800214c:	4629      	mov	r1, r5
 800214e:	eb63 0301 	sbc.w	r3, r3, r1
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002160:	4649      	mov	r1, r9
 8002162:	018b      	lsls	r3, r1, #6
 8002164:	4641      	mov	r1, r8
 8002166:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800216a:	4641      	mov	r1, r8
 800216c:	018a      	lsls	r2, r1, #6
 800216e:	4641      	mov	r1, r8
 8002170:	ebb2 0a01 	subs.w	sl, r2, r1
 8002174:	4649      	mov	r1, r9
 8002176:	eb63 0b01 	sbc.w	fp, r3, r1
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002186:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800218a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800218e:	4692      	mov	sl, r2
 8002190:	469b      	mov	fp, r3
 8002192:	4623      	mov	r3, r4
 8002194:	eb1a 0303 	adds.w	r3, sl, r3
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	462b      	mov	r3, r5
 800219c:	eb4b 0303 	adc.w	r3, fp, r3
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021ae:	4629      	mov	r1, r5
 80021b0:	028b      	lsls	r3, r1, #10
 80021b2:	4621      	mov	r1, r4
 80021b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b8:	4621      	mov	r1, r4
 80021ba:	028a      	lsls	r2, r1, #10
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021c4:	2200      	movs	r2, #0
 80021c6:	673b      	str	r3, [r7, #112]	; 0x70
 80021c8:	677a      	str	r2, [r7, #116]	; 0x74
 80021ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021ce:	f7fe f877 	bl	80002c0 <__aeabi_uldivmod>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4613      	mov	r3, r2
 80021d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021dc:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80021ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021fe:	e0eb      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d06b      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002218:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	2200      	movs	r2, #0
 8002220:	66bb      	str	r3, [r7, #104]	; 0x68
 8002222:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222a:	663b      	str	r3, [r7, #96]	; 0x60
 800222c:	2300      	movs	r3, #0
 800222e:	667b      	str	r3, [r7, #100]	; 0x64
 8002230:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002234:	4622      	mov	r2, r4
 8002236:	462b      	mov	r3, r5
 8002238:	f04f 0000 	mov.w	r0, #0
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	0159      	lsls	r1, r3, #5
 8002242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002246:	0150      	lsls	r0, r2, #5
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4621      	mov	r1, r4
 800224e:	1a51      	subs	r1, r2, r1
 8002250:	61b9      	str	r1, [r7, #24]
 8002252:	4629      	mov	r1, r5
 8002254:	eb63 0301 	sbc.w	r3, r3, r1
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002266:	4659      	mov	r1, fp
 8002268:	018b      	lsls	r3, r1, #6
 800226a:	4651      	mov	r1, sl
 800226c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002270:	4651      	mov	r1, sl
 8002272:	018a      	lsls	r2, r1, #6
 8002274:	4651      	mov	r1, sl
 8002276:	ebb2 0801 	subs.w	r8, r2, r1
 800227a:	4659      	mov	r1, fp
 800227c:	eb63 0901 	sbc.w	r9, r3, r1
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002290:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002294:	4690      	mov	r8, r2
 8002296:	4699      	mov	r9, r3
 8002298:	4623      	mov	r3, r4
 800229a:	eb18 0303 	adds.w	r3, r8, r3
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	462b      	mov	r3, r5
 80022a2:	eb49 0303 	adc.w	r3, r9, r3
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022b4:	4629      	mov	r1, r5
 80022b6:	024b      	lsls	r3, r1, #9
 80022b8:	4621      	mov	r1, r4
 80022ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022be:	4621      	mov	r1, r4
 80022c0:	024a      	lsls	r2, r1, #9
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ca:	2200      	movs	r2, #0
 80022cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80022ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022d4:	f7fd fff4 	bl	80002c0 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4613      	mov	r3, r2
 80022de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022e2:	e065      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x420>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	2200      	movs	r2, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	4611      	mov	r1, r2
 80022fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002300:	653b      	str	r3, [r7, #80]	; 0x50
 8002302:	2300      	movs	r3, #0
 8002304:	657b      	str	r3, [r7, #84]	; 0x54
 8002306:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800230a:	4642      	mov	r2, r8
 800230c:	464b      	mov	r3, r9
 800230e:	f04f 0000 	mov.w	r0, #0
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	0159      	lsls	r1, r3, #5
 8002318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231c:	0150      	lsls	r0, r2, #5
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4641      	mov	r1, r8
 8002324:	1a51      	subs	r1, r2, r1
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	4649      	mov	r1, r9
 800232a:	eb63 0301 	sbc.w	r3, r3, r1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800233c:	4659      	mov	r1, fp
 800233e:	018b      	lsls	r3, r1, #6
 8002340:	4651      	mov	r1, sl
 8002342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002346:	4651      	mov	r1, sl
 8002348:	018a      	lsls	r2, r1, #6
 800234a:	4651      	mov	r1, sl
 800234c:	1a54      	subs	r4, r2, r1
 800234e:	4659      	mov	r1, fp
 8002350:	eb63 0501 	sbc.w	r5, r3, r1
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	00eb      	lsls	r3, r5, #3
 800235e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002362:	00e2      	lsls	r2, r4, #3
 8002364:	4614      	mov	r4, r2
 8002366:	461d      	mov	r5, r3
 8002368:	4643      	mov	r3, r8
 800236a:	18e3      	adds	r3, r4, r3
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	464b      	mov	r3, r9
 8002370:	eb45 0303 	adc.w	r3, r5, r3
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002382:	4629      	mov	r1, r5
 8002384:	028b      	lsls	r3, r1, #10
 8002386:	4621      	mov	r1, r4
 8002388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800238c:	4621      	mov	r1, r4
 800238e:	028a      	lsls	r2, r1, #10
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002398:	2200      	movs	r2, #0
 800239a:	64bb      	str	r3, [r7, #72]	; 0x48
 800239c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800239e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023a2:	f7fd ff8d 	bl	80002c0 <__aeabi_uldivmod>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4613      	mov	r3, r2
 80023ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	0f1b      	lsrs	r3, r3, #28
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80023be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023ce:	e003      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80023d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	37b8      	adds	r7, #184	; 0xb8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	00f42400 	.word	0x00f42400

080023f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e28d      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8083 	beq.w	8002516 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002410:	4b94      	ldr	r3, [pc, #592]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	d019      	beq.n	8002450 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800241c:	4b91      	ldr	r3, [pc, #580]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002424:	2b08      	cmp	r3, #8
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002428:	4b8e      	ldr	r3, [pc, #568]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002434:	d00c      	beq.n	8002450 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4b8b      	ldr	r3, [pc, #556]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d112      	bne.n	8002468 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244e:	d10b      	bne.n	8002468 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	4b84      	ldr	r3, [pc, #528]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05b      	beq.n	8002514 <HAL_RCC_OscConfig+0x124>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d157      	bne.n	8002514 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e25a      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x90>
 8002472:	4b7c      	ldr	r3, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7b      	ldr	r2, [pc, #492]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e01d      	b.n	80024bc <HAL_RCC_OscConfig+0xcc>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0xb4>
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a75      	ldr	r2, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b73      	ldr	r3, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a72      	ldr	r2, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0xcc>
 80024a4:	4b6f      	ldr	r3, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6e      	ldr	r2, [pc, #440]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b6c      	ldr	r3, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd22 	bl	8000f0c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fd1e 	bl	8000f0c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e21f      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b61      	ldr	r3, [pc, #388]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0xdc>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd0e 	bl	8000f0c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fd0a 	bl	8000f0c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e20b      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x104>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d06f      	beq.n	8002602 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002522:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b00      	cmp	r3, #0
 800252c:	d017      	beq.n	800255e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800252e:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d105      	bne.n	8002546 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x186>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1d3      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_RCC_OscConfig+0x278>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fcb7 	bl	8000f0c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fcb3 	bl	8000f0c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1b4      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4925      	ldr	r1, [pc, #148]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x278>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fc96 	bl	8000f0c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fc92 	bl	8000f0c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e193      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d036      	beq.n	800267c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_RCC_OscConfig+0x27c>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fc76 	bl	8000f0c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fc72 	bl	8000f0c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e173      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x274>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x234>
 8002642:	e01b      	b.n	800267c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_OscConfig+0x27c>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fe fc5f 	bl	8000f0c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	e00e      	b.n	8002670 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002652:	f7fe fc5b 	bl	8000f0c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d907      	bls.n	8002670 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e15c      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
 8002664:	40023800 	.word	0x40023800
 8002668:	42470000 	.word	0x42470000
 800266c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	4b8a      	ldr	r3, [pc, #552]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ea      	bne.n	8002652 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8097 	beq.w	80027b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b83      	ldr	r3, [pc, #524]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b7f      	ldr	r3, [pc, #508]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a7e      	ldr	r2, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b7c      	ldr	r3, [pc, #496]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b79      	ldr	r3, [pc, #484]	; (80028a0 <HAL_RCC_OscConfig+0x4b0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x4b0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <HAL_RCC_OscConfig+0x4b0>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fc1b 	bl	8000f0c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe fc17 	bl	8000f0c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e118      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x4b0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x31e>
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x358>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x340>
 8002716:	4b61      	ldr	r3, [pc, #388]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a60      	ldr	r2, [pc, #384]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a5d      	ldr	r2, [pc, #372]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x358>
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a59      	ldr	r2, [pc, #356]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	4b57      	ldr	r3, [pc, #348]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a56      	ldr	r2, [pc, #344]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002742:	f023 0304 	bic.w	r3, r3, #4
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fbdc 	bl	8000f0c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe fbd8 	bl	8000f0c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0d7      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	4b4b      	ldr	r3, [pc, #300]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ee      	beq.n	8002758 <HAL_RCC_OscConfig+0x368>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fbc6 	bl	8000f0c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe fbc2 	bl	8000f0c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0c1      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279a:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ee      	bne.n	8002784 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a3a      	ldr	r2, [pc, #232]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80ad 	beq.w	800291c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c2:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d060      	beq.n	8002890 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d145      	bne.n	8002862 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <HAL_RCC_OscConfig+0x4b4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fb96 	bl	8000f0c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe fb92 	bl	8000f0c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e093      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	071b      	lsls	r3, r3, #28
 800282e:	491b      	ldr	r1, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x4b4>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fb67 	bl	8000f0c <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fb63 	bl	8000f0c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e064      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x452>
 8002860:	e05c      	b.n	800291c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x4b4>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fb50 	bl	8000f0c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fb4c 	bl	8000f0c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e04d      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x4ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x480>
 800288e:	e045      	b.n	800291c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e040      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <HAL_RCC_OscConfig+0x538>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d030      	beq.n	8002918 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d129      	bne.n	8002918 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d122      	bne.n	8002918 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d119      	bne.n	8002918 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	3b01      	subs	r3, #1
 80028f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d10f      	bne.n	8002918 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e042      	b.n	80029c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe f8ec 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	; 0x24
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800296e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fa09 	bl	8002d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d175      	bne.n	8002ad8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Transmit+0x2c>
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e06e      	b.n	8002ada <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2221      	movs	r2, #33	; 0x21
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fa7f 	bl	8000f0c <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	88fa      	ldrh	r2, [r7, #6]
 8002a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a24:	d108      	bne.n	8002a38 <HAL_UART_Transmit+0x6c>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d104      	bne.n	8002a38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e003      	b.n	8002a40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a40:	e02e      	b.n	8002aa0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2180      	movs	r1, #128	; 0x80
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f8df 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e03a      	b.n	8002ada <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10b      	bne.n	8002a82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e007      	b.n	8002a92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1cb      	bne.n	8002a42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2140      	movs	r1, #64	; 0x40
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f8ab 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e006      	b.n	8002ada <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08a      	sub	sp, #40	; 0x28
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	f040 8081 	bne.w	8002c06 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_UART_Receive+0x2e>
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e079      	b.n	8002c08 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2222      	movs	r2, #34	; 0x22
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b28:	f7fe f9f0 	bl	8000f0c <HAL_GetTick>
 8002b2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	d108      	bne.n	8002b56 <HAL_UART_Receive+0x74>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e003      	b.n	8002b5e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b5e:	e047      	b.n	8002bf0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2120      	movs	r1, #32
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f850 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e042      	b.n	8002c08 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	e01f      	b.n	8002be2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	d007      	beq.n	8002bbc <HAL_UART_Receive+0xda>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_UART_Receive+0xe8>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e008      	b.n	8002bdc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3301      	adds	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1b2      	bne.n	8002b60 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e000      	b.n	8002c08 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
  }
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c20:	e03b      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c28:	d037      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	f7fe f96f 	bl	8000f0c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e03a      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d020      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d01d      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d116      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f81d 	bl	8002cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0b4      	beq.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b095      	sub	sp, #84	; 0x54
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cea:	643a      	str	r2, [r7, #64]	; 0x40
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1e5      	bne.n	8002cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e5      	bne.n	8002cfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d119      	bne.n	8002d6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f023 0310 	bic.w	r3, r3, #16
 8002d50:	647b      	str	r3, [r7, #68]	; 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d5a:	61ba      	str	r2, [r7, #24]
 8002d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6979      	ldr	r1, [r7, #20]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	613b      	str	r3, [r7, #16]
   return(result);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e5      	bne.n	8002d3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d7c:	bf00      	nop
 8002d7e:	3754      	adds	r7, #84	; 0x54
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b0c0      	sub	sp, #256	; 0x100
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	ea40 0301 	orr.w	r3, r0, r1
 8002db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002de0:	f021 010c 	bic.w	r1, r1, #12
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dee:	430b      	orrs	r3, r1
 8002df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	6999      	ldr	r1, [r3, #24]
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	ea40 0301 	orr.w	r3, r0, r1
 8002e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b8f      	ldr	r3, [pc, #572]	; (8003054 <UART_SetConfig+0x2cc>)
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d005      	beq.n	8002e28 <UART_SetConfig+0xa0>
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b8d      	ldr	r3, [pc, #564]	; (8003058 <UART_SetConfig+0x2d0>)
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d104      	bne.n	8002e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e28:	f7fe fd74 	bl	8001914 <HAL_RCC_GetPCLK2Freq>
 8002e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e30:	e003      	b.n	8002e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e32:	f7fe fd5b 	bl	80018ec <HAL_RCC_GetPCLK1Freq>
 8002e36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e44:	f040 810c 	bne.w	8003060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	462b      	mov	r3, r5
 8002e5e:	1891      	adds	r1, r2, r2
 8002e60:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e62:	415b      	adcs	r3, r3
 8002e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	eb12 0801 	adds.w	r8, r2, r1
 8002e70:	4629      	mov	r1, r5
 8002e72:	eb43 0901 	adc.w	r9, r3, r1
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8a:	4690      	mov	r8, r2
 8002e8c:	4699      	mov	r9, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	eb18 0303 	adds.w	r3, r8, r3
 8002e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e98:	462b      	mov	r3, r5
 8002e9a:	eb49 0303 	adc.w	r3, r9, r3
 8002e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	18db      	adds	r3, r3, r3
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	eb42 0303 	adc.w	r3, r2, r3
 8002ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ecc:	f7fd f9f8 	bl	80002c0 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <UART_SetConfig+0x2d4>)
 8002ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	011c      	lsls	r4, r3, #4
 8002ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	1891      	adds	r1, r2, r2
 8002ef6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ef8:	415b      	adcs	r3, r3
 8002efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f00:	4641      	mov	r1, r8
 8002f02:	eb12 0a01 	adds.w	sl, r2, r1
 8002f06:	4649      	mov	r1, r9
 8002f08:	eb43 0b01 	adc.w	fp, r3, r1
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f20:	4692      	mov	sl, r2
 8002f22:	469b      	mov	fp, r3
 8002f24:	4643      	mov	r3, r8
 8002f26:	eb1a 0303 	adds.w	r3, sl, r3
 8002f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f2e:	464b      	mov	r3, r9
 8002f30:	eb4b 0303 	adc.w	r3, fp, r3
 8002f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	18db      	adds	r3, r3, r3
 8002f50:	643b      	str	r3, [r7, #64]	; 0x40
 8002f52:	4613      	mov	r3, r2
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	647b      	str	r3, [r7, #68]	; 0x44
 8002f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f62:	f7fd f9ad 	bl	80002c0 <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <UART_SetConfig+0x2d4>)
 8002f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2264      	movs	r2, #100	; 0x64
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	1acb      	subs	r3, r1, r3
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <UART_SetConfig+0x2d4>)
 8002f84:	fba3 2302 	umull	r2, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f90:	441c      	add	r4, r3
 8002f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fac:	415b      	adcs	r3, r3
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	1851      	adds	r1, r2, r1
 8002fb8:	6339      	str	r1, [r7, #48]	; 0x30
 8002fba:	4649      	mov	r1, r9
 8002fbc:	414b      	adcs	r3, r1
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fcc:	4659      	mov	r1, fp
 8002fce:	00cb      	lsls	r3, r1, #3
 8002fd0:	4651      	mov	r1, sl
 8002fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	00ca      	lsls	r2, r1, #3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	189b      	adds	r3, r3, r2
 8002fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fe8:	464b      	mov	r3, r9
 8002fea:	460a      	mov	r2, r1
 8002fec:	eb42 0303 	adc.w	r3, r2, r3
 8002ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003000:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003008:	460b      	mov	r3, r1
 800300a:	18db      	adds	r3, r3, r3
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
 800300e:	4613      	mov	r3, r2
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800301a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800301e:	f7fd f94f 	bl	80002c0 <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <UART_SetConfig+0x2d4>)
 8003028:	fba3 1302 	umull	r1, r3, r3, r2
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	2164      	movs	r1, #100	; 0x64
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	3332      	adds	r3, #50	; 0x32
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <UART_SetConfig+0x2d4>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	f003 0207 	and.w	r2, r3, #7
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4422      	add	r2, r4
 800304e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003050:	e106      	b.n	8003260 <UART_SetConfig+0x4d8>
 8003052:	bf00      	nop
 8003054:	40011000 	.word	0x40011000
 8003058:	40011400 	.word	0x40011400
 800305c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003064:	2200      	movs	r2, #0
 8003066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800306a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800306e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003072:	4642      	mov	r2, r8
 8003074:	464b      	mov	r3, r9
 8003076:	1891      	adds	r1, r2, r2
 8003078:	6239      	str	r1, [r7, #32]
 800307a:	415b      	adcs	r3, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003082:	4641      	mov	r1, r8
 8003084:	1854      	adds	r4, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb43 0501 	adc.w	r5, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	00eb      	lsls	r3, r5, #3
 8003096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309a:	00e2      	lsls	r2, r4, #3
 800309c:	4614      	mov	r4, r2
 800309e:	461d      	mov	r5, r3
 80030a0:	4643      	mov	r3, r8
 80030a2:	18e3      	adds	r3, r4, r3
 80030a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030a8:	464b      	mov	r3, r9
 80030aa:	eb45 0303 	adc.w	r3, r5, r3
 80030ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030ce:	4629      	mov	r1, r5
 80030d0:	008b      	lsls	r3, r1, #2
 80030d2:	4621      	mov	r1, r4
 80030d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d8:	4621      	mov	r1, r4
 80030da:	008a      	lsls	r2, r1, #2
 80030dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030e0:	f7fd f8ee 	bl	80002c0 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b60      	ldr	r3, [pc, #384]	; (800326c <UART_SetConfig+0x4e4>)
 80030ea:	fba3 2302 	umull	r2, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	011c      	lsls	r4, r3, #4
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	61b9      	str	r1, [r7, #24]
 800310c:	415b      	adcs	r3, r3
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003114:	4641      	mov	r1, r8
 8003116:	1851      	adds	r1, r2, r1
 8003118:	6139      	str	r1, [r7, #16]
 800311a:	4649      	mov	r1, r9
 800311c:	414b      	adcs	r3, r1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312c:	4659      	mov	r1, fp
 800312e:	00cb      	lsls	r3, r1, #3
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003136:	4651      	mov	r1, sl
 8003138:	00ca      	lsls	r2, r1, #3
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	4603      	mov	r3, r0
 8003140:	4642      	mov	r2, r8
 8003142:	189b      	adds	r3, r3, r2
 8003144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003148:	464b      	mov	r3, r9
 800314a:	460a      	mov	r2, r1
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	67bb      	str	r3, [r7, #120]	; 0x78
 800315e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800316c:	4649      	mov	r1, r9
 800316e:	008b      	lsls	r3, r1, #2
 8003170:	4641      	mov	r1, r8
 8003172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003176:	4641      	mov	r1, r8
 8003178:	008a      	lsls	r2, r1, #2
 800317a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800317e:	f7fd f89f 	bl	80002c0 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4611      	mov	r1, r2
 8003188:	4b38      	ldr	r3, [pc, #224]	; (800326c <UART_SetConfig+0x4e4>)
 800318a:	fba3 2301 	umull	r2, r3, r3, r1
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2264      	movs	r2, #100	; 0x64
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	1acb      	subs	r3, r1, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a33      	ldr	r2, [pc, #204]	; (800326c <UART_SetConfig+0x4e4>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031a8:	441c      	add	r4, r3
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ae:	2200      	movs	r2, #0
 80031b0:	673b      	str	r3, [r7, #112]	; 0x70
 80031b2:	677a      	str	r2, [r7, #116]	; 0x74
 80031b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	415b      	adcs	r3, r3
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c8:	4641      	mov	r1, r8
 80031ca:	1851      	adds	r1, r2, r1
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	4649      	mov	r1, r9
 80031d0:	414b      	adcs	r3, r1
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031e0:	4659      	mov	r1, fp
 80031e2:	00cb      	lsls	r3, r1, #3
 80031e4:	4651      	mov	r1, sl
 80031e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ea:	4651      	mov	r1, sl
 80031ec:	00ca      	lsls	r2, r1, #3
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	4642      	mov	r2, r8
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80031fa:	464b      	mov	r3, r9
 80031fc:	460a      	mov	r2, r1
 80031fe:	eb42 0303 	adc.w	r3, r2, r3
 8003202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	663b      	str	r3, [r7, #96]	; 0x60
 800320e:	667a      	str	r2, [r7, #100]	; 0x64
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800321c:	4649      	mov	r1, r9
 800321e:	008b      	lsls	r3, r1, #2
 8003220:	4641      	mov	r1, r8
 8003222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003226:	4641      	mov	r1, r8
 8003228:	008a      	lsls	r2, r1, #2
 800322a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800322e:	f7fd f847 	bl	80002c0 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <UART_SetConfig+0x4e4>)
 8003238:	fba3 1302 	umull	r1, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	2164      	movs	r1, #100	; 0x64
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	3332      	adds	r3, #50	; 0x32
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <UART_SetConfig+0x4e4>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4422      	add	r2, r4
 800325e:	609a      	str	r2, [r3, #8]
}
 8003260:	bf00      	nop
 8003262:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003266:	46bd      	mov	sp, r7
 8003268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326c:	51eb851f 	.word	0x51eb851f

08003270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003270:	b084      	sub	sp, #16
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	f107 001c 	add.w	r0, r7, #28
 800327e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003282:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003286:	2b01      	cmp	r3, #1
 8003288:	d123      	bne.n	80032d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800329e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80032b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d105      	bne.n	80032c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa9a 	bl	8003800 <USB_CoreReset>
 80032cc:	4603      	mov	r3, r0
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e01b      	b.n	800330a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa8e 	bl	8003800 <USB_CoreReset>
 80032e4:	4603      	mov	r3, r0
 80032e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80032e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
 80032fc:	e005      	b.n	800330a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800330a:	7fbb      	ldrb	r3, [r7, #30]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10b      	bne.n	8003328 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f043 0206 	orr.w	r2, r3, #6
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003334:	b004      	add	sp, #16
 8003336:	4770      	bx	lr

08003338 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 0201 	bic.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d115      	bne.n	80033a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003388:	200a      	movs	r0, #10
 800338a:	f7fd fdcb 	bl	8000f24 <HAL_Delay>
      ms += 10U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	330a      	adds	r3, #10
 8003392:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fa25 	bl	80037e4 <USB_GetMode>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d01e      	beq.n	80033de <USB_SetCurrentMode+0x84>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2bc7      	cmp	r3, #199	; 0xc7
 80033a4:	d9f0      	bls.n	8003388 <USB_SetCurrentMode+0x2e>
 80033a6:	e01a      	b.n	80033de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d115      	bne.n	80033da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033ba:	200a      	movs	r0, #10
 80033bc:	f7fd fdb2 	bl	8000f24 <HAL_Delay>
      ms += 10U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	330a      	adds	r3, #10
 80033c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa0c 	bl	80037e4 <USB_GetMode>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <USB_SetCurrentMode+0x84>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2bc7      	cmp	r3, #199	; 0xc7
 80033d6:	d9f0      	bls.n	80033ba <USB_SetCurrentMode+0x60>
 80033d8:	e001      	b.n	80033de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e005      	b.n	80033ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2bc8      	cmp	r3, #200	; 0xc8
 80033e2:	d101      	bne.n	80033e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033f4:	b084      	sub	sp, #16
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	e009      	b.n	8003428 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3340      	adds	r3, #64	; 0x40
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	2200      	movs	r2, #0
 8003420:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	3301      	adds	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0e      	cmp	r3, #14
 800342c:	d9f2      	bls.n	8003414 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800342e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11c      	bne.n	8003470 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e005      	b.n	800347c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003482:	461a      	mov	r2, r3
 8003484:	2300      	movs	r3, #0
 8003486:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003488:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10d      	bne.n	80034ac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003498:	2100      	movs	r1, #0
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f968 	bl	8003770 <USB_SetDevSpeed>
 80034a0:	e008      	b.n	80034b4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034a2:	2101      	movs	r1, #1
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f963 	bl	8003770 <USB_SetDevSpeed>
 80034aa:	e003      	b.n	80034b4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80034ac:	2103      	movs	r1, #3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f95e 	bl	8003770 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80034b4:	2110      	movs	r1, #16
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8fa 	bl	80036b0 <USB_FlushTxFifo>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f924 	bl	8003714 <USB_FlushRxFifo>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	461a      	mov	r2, r3
 80034de:	2300      	movs	r3, #0
 80034e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	461a      	mov	r2, r3
 80034ea:	2300      	movs	r3, #0
 80034ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f4:	461a      	mov	r2, r3
 80034f6:	2300      	movs	r3, #0
 80034f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	e043      	b.n	8003588 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003516:	d118      	bne.n	800354a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	461a      	mov	r2, r3
 800352c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e013      	b.n	800355c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	461a      	mov	r2, r3
 8003542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e008      	b.n	800355c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003556:	461a      	mov	r2, r3
 8003558:	2300      	movs	r3, #0
 800355a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	461a      	mov	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357a:	461a      	mov	r2, r3
 800357c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	3301      	adds	r3, #1
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800358c:	461a      	mov	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4293      	cmp	r3, r2
 8003592:	d3b5      	bcc.n	8003500 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e043      	b.n	8003622 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035b0:	d118      	bne.n	80035e4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	461a      	mov	r2, r3
 80035c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e013      	b.n	80035f6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e008      	b.n	80035f6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	2300      	movs	r3, #0
 80035f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003602:	461a      	mov	r2, r3
 8003604:	2300      	movs	r3, #0
 8003606:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003614:	461a      	mov	r2, r3
 8003616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800361a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	3301      	adds	r3, #1
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003626:	461a      	mov	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4293      	cmp	r3, r2
 800362c:	d3b5      	bcc.n	800359a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800364e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003650:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <USB_DevInit+0x2b8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003670:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f043 0208 	orr.w	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003684:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a8:	b004      	add	sp, #16
 80036aa:	4770      	bx	lr
 80036ac:	803c3800 	.word	0x803c3800

080036b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3301      	adds	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80036ca:	d901      	bls.n	80036d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e01b      	b.n	8003708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	daf2      	bge.n	80036be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	019b      	lsls	r3, r3, #6
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80036f4:	d901      	bls.n	80036fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e006      	b.n	8003708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b20      	cmp	r3, #32
 8003704:	d0f0      	beq.n	80036e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800372c:	d901      	bls.n	8003732 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e018      	b.n	8003764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	daf2      	bge.n	8003720 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2210      	movs	r2, #16
 8003742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003750:	d901      	bls.n	8003756 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e006      	b.n	8003764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d0f0      	beq.n	8003744 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80037bc:	f023 0303 	bic.w	r3, r3, #3
 80037c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0301 	and.w	r3, r3, #1
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3301      	adds	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003818:	d901      	bls.n	800381e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e01b      	b.n	8003856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	daf2      	bge.n	800380c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3301      	adds	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003842:	d901      	bls.n	8003848 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e006      	b.n	8003856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d0f0      	beq.n	8003836 <USB_CoreReset+0x36>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <siprintf>:
 8003864:	b40e      	push	{r1, r2, r3}
 8003866:	b500      	push	{lr}
 8003868:	b09c      	sub	sp, #112	; 0x70
 800386a:	ab1d      	add	r3, sp, #116	; 0x74
 800386c:	9002      	str	r0, [sp, #8]
 800386e:	9006      	str	r0, [sp, #24]
 8003870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003874:	4809      	ldr	r0, [pc, #36]	; (800389c <siprintf+0x38>)
 8003876:	9107      	str	r1, [sp, #28]
 8003878:	9104      	str	r1, [sp, #16]
 800387a:	4909      	ldr	r1, [pc, #36]	; (80038a0 <siprintf+0x3c>)
 800387c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003880:	9105      	str	r1, [sp, #20]
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	a902      	add	r1, sp, #8
 8003888:	f000 f89a 	bl	80039c0 <_svfiprintf_r>
 800388c:	9b02      	ldr	r3, [sp, #8]
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	b01c      	add	sp, #112	; 0x70
 8003894:	f85d eb04 	ldr.w	lr, [sp], #4
 8003898:	b003      	add	sp, #12
 800389a:	4770      	bx	lr
 800389c:	20000058 	.word	0x20000058
 80038a0:	ffff0208 	.word	0xffff0208

080038a4 <memset>:
 80038a4:	4402      	add	r2, r0
 80038a6:	4603      	mov	r3, r0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	f803 1b01 	strb.w	r1, [r3], #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <__errno>:
 80038b4:	4b01      	ldr	r3, [pc, #4]	; (80038bc <__errno+0x8>)
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000058 	.word	0x20000058

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4d0d      	ldr	r5, [pc, #52]	; (80038f8 <__libc_init_array+0x38>)
 80038c4:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c6:	1b64      	subs	r4, r4, r5
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	2600      	movs	r6, #0
 80038cc:	42a6      	cmp	r6, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	4d0b      	ldr	r5, [pc, #44]	; (8003900 <__libc_init_array+0x40>)
 80038d2:	4c0c      	ldr	r4, [pc, #48]	; (8003904 <__libc_init_array+0x44>)
 80038d4:	f000 fc6a 	bl	80041ac <_init>
 80038d8:	1b64      	subs	r4, r4, r5
 80038da:	10a4      	asrs	r4, r4, #2
 80038dc:	2600      	movs	r6, #0
 80038de:	42a6      	cmp	r6, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e8:	4798      	blx	r3
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f2:	4798      	blx	r3
 80038f4:	3601      	adds	r6, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	080042dc 	.word	0x080042dc
 80038fc:	080042dc 	.word	0x080042dc
 8003900:	080042dc 	.word	0x080042dc
 8003904:	080042e0 	.word	0x080042e0

08003908 <__retarget_lock_acquire_recursive>:
 8003908:	4770      	bx	lr

0800390a <__retarget_lock_release_recursive>:
 800390a:	4770      	bx	lr

0800390c <__ssputs_r>:
 800390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	688e      	ldr	r6, [r1, #8]
 8003912:	461f      	mov	r7, r3
 8003914:	42be      	cmp	r6, r7
 8003916:	680b      	ldr	r3, [r1, #0]
 8003918:	4682      	mov	sl, r0
 800391a:	460c      	mov	r4, r1
 800391c:	4690      	mov	r8, r2
 800391e:	d82c      	bhi.n	800397a <__ssputs_r+0x6e>
 8003920:	898a      	ldrh	r2, [r1, #12]
 8003922:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003926:	d026      	beq.n	8003976 <__ssputs_r+0x6a>
 8003928:	6965      	ldr	r5, [r4, #20]
 800392a:	6909      	ldr	r1, [r1, #16]
 800392c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003930:	eba3 0901 	sub.w	r9, r3, r1
 8003934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003938:	1c7b      	adds	r3, r7, #1
 800393a:	444b      	add	r3, r9
 800393c:	106d      	asrs	r5, r5, #1
 800393e:	429d      	cmp	r5, r3
 8003940:	bf38      	it	cc
 8003942:	461d      	movcc	r5, r3
 8003944:	0553      	lsls	r3, r2, #21
 8003946:	d527      	bpl.n	8003998 <__ssputs_r+0x8c>
 8003948:	4629      	mov	r1, r5
 800394a:	f000 f957 	bl	8003bfc <_malloc_r>
 800394e:	4606      	mov	r6, r0
 8003950:	b360      	cbz	r0, 80039ac <__ssputs_r+0xa0>
 8003952:	6921      	ldr	r1, [r4, #16]
 8003954:	464a      	mov	r2, r9
 8003956:	f000 fbc7 	bl	80040e8 <memcpy>
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	6126      	str	r6, [r4, #16]
 8003968:	6165      	str	r5, [r4, #20]
 800396a:	444e      	add	r6, r9
 800396c:	eba5 0509 	sub.w	r5, r5, r9
 8003970:	6026      	str	r6, [r4, #0]
 8003972:	60a5      	str	r5, [r4, #8]
 8003974:	463e      	mov	r6, r7
 8003976:	42be      	cmp	r6, r7
 8003978:	d900      	bls.n	800397c <__ssputs_r+0x70>
 800397a:	463e      	mov	r6, r7
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	4632      	mov	r2, r6
 8003980:	4641      	mov	r1, r8
 8003982:	f000 fb86 	bl	8004092 <memmove>
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	1b9b      	subs	r3, r3, r6
 800398a:	60a3      	str	r3, [r4, #8]
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	4433      	add	r3, r6
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	2000      	movs	r0, #0
 8003994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003998:	462a      	mov	r2, r5
 800399a:	f000 fb4b 	bl	8004034 <_realloc_r>
 800399e:	4606      	mov	r6, r0
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d1e0      	bne.n	8003966 <__ssputs_r+0x5a>
 80039a4:	6921      	ldr	r1, [r4, #16]
 80039a6:	4650      	mov	r0, sl
 80039a8:	f000 fbac 	bl	8004104 <_free_r>
 80039ac:	230c      	movs	r3, #12
 80039ae:	f8ca 3000 	str.w	r3, [sl]
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039be:	e7e9      	b.n	8003994 <__ssputs_r+0x88>

080039c0 <_svfiprintf_r>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	4698      	mov	r8, r3
 80039c6:	898b      	ldrh	r3, [r1, #12]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	b09d      	sub	sp, #116	; 0x74
 80039cc:	4607      	mov	r7, r0
 80039ce:	460d      	mov	r5, r1
 80039d0:	4614      	mov	r4, r2
 80039d2:	d50e      	bpl.n	80039f2 <_svfiprintf_r+0x32>
 80039d4:	690b      	ldr	r3, [r1, #16]
 80039d6:	b963      	cbnz	r3, 80039f2 <_svfiprintf_r+0x32>
 80039d8:	2140      	movs	r1, #64	; 0x40
 80039da:	f000 f90f 	bl	8003bfc <_malloc_r>
 80039de:	6028      	str	r0, [r5, #0]
 80039e0:	6128      	str	r0, [r5, #16]
 80039e2:	b920      	cbnz	r0, 80039ee <_svfiprintf_r+0x2e>
 80039e4:	230c      	movs	r3, #12
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ec:	e0d0      	b.n	8003b90 <_svfiprintf_r+0x1d0>
 80039ee:	2340      	movs	r3, #64	; 0x40
 80039f0:	616b      	str	r3, [r5, #20]
 80039f2:	2300      	movs	r3, #0
 80039f4:	9309      	str	r3, [sp, #36]	; 0x24
 80039f6:	2320      	movs	r3, #32
 80039f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a00:	2330      	movs	r3, #48	; 0x30
 8003a02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ba8 <_svfiprintf_r+0x1e8>
 8003a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a0a:	f04f 0901 	mov.w	r9, #1
 8003a0e:	4623      	mov	r3, r4
 8003a10:	469a      	mov	sl, r3
 8003a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a16:	b10a      	cbz	r2, 8003a1c <_svfiprintf_r+0x5c>
 8003a18:	2a25      	cmp	r2, #37	; 0x25
 8003a1a:	d1f9      	bne.n	8003a10 <_svfiprintf_r+0x50>
 8003a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a20:	d00b      	beq.n	8003a3a <_svfiprintf_r+0x7a>
 8003a22:	465b      	mov	r3, fp
 8003a24:	4622      	mov	r2, r4
 8003a26:	4629      	mov	r1, r5
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f7ff ff6f 	bl	800390c <__ssputs_r>
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f000 80a9 	beq.w	8003b86 <_svfiprintf_r+0x1c6>
 8003a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a36:	445a      	add	r2, fp
 8003a38:	9209      	str	r2, [sp, #36]	; 0x24
 8003a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80a1 	beq.w	8003b86 <_svfiprintf_r+0x1c6>
 8003a44:	2300      	movs	r3, #0
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a4e:	f10a 0a01 	add.w	sl, sl, #1
 8003a52:	9304      	str	r3, [sp, #16]
 8003a54:	9307      	str	r3, [sp, #28]
 8003a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a5c:	4654      	mov	r4, sl
 8003a5e:	2205      	movs	r2, #5
 8003a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a64:	4850      	ldr	r0, [pc, #320]	; (8003ba8 <_svfiprintf_r+0x1e8>)
 8003a66:	f7fc fbdb 	bl	8000220 <memchr>
 8003a6a:	9a04      	ldr	r2, [sp, #16]
 8003a6c:	b9d8      	cbnz	r0, 8003aa6 <_svfiprintf_r+0xe6>
 8003a6e:	06d0      	lsls	r0, r2, #27
 8003a70:	bf44      	itt	mi
 8003a72:	2320      	movmi	r3, #32
 8003a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a78:	0711      	lsls	r1, r2, #28
 8003a7a:	bf44      	itt	mi
 8003a7c:	232b      	movmi	r3, #43	; 0x2b
 8003a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a82:	f89a 3000 	ldrb.w	r3, [sl]
 8003a86:	2b2a      	cmp	r3, #42	; 0x2a
 8003a88:	d015      	beq.n	8003ab6 <_svfiprintf_r+0xf6>
 8003a8a:	9a07      	ldr	r2, [sp, #28]
 8003a8c:	4654      	mov	r4, sl
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f04f 0c0a 	mov.w	ip, #10
 8003a94:	4621      	mov	r1, r4
 8003a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a9a:	3b30      	subs	r3, #48	; 0x30
 8003a9c:	2b09      	cmp	r3, #9
 8003a9e:	d94d      	bls.n	8003b3c <_svfiprintf_r+0x17c>
 8003aa0:	b1b0      	cbz	r0, 8003ad0 <_svfiprintf_r+0x110>
 8003aa2:	9207      	str	r2, [sp, #28]
 8003aa4:	e014      	b.n	8003ad0 <_svfiprintf_r+0x110>
 8003aa6:	eba0 0308 	sub.w	r3, r0, r8
 8003aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	9304      	str	r3, [sp, #16]
 8003ab2:	46a2      	mov	sl, r4
 8003ab4:	e7d2      	b.n	8003a5c <_svfiprintf_r+0x9c>
 8003ab6:	9b03      	ldr	r3, [sp, #12]
 8003ab8:	1d19      	adds	r1, r3, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	9103      	str	r1, [sp, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bfbb      	ittet	lt
 8003ac2:	425b      	neglt	r3, r3
 8003ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ac8:	9307      	strge	r3, [sp, #28]
 8003aca:	9307      	strlt	r3, [sp, #28]
 8003acc:	bfb8      	it	lt
 8003ace:	9204      	strlt	r2, [sp, #16]
 8003ad0:	7823      	ldrb	r3, [r4, #0]
 8003ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad4:	d10c      	bne.n	8003af0 <_svfiprintf_r+0x130>
 8003ad6:	7863      	ldrb	r3, [r4, #1]
 8003ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8003ada:	d134      	bne.n	8003b46 <_svfiprintf_r+0x186>
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	1d1a      	adds	r2, r3, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	9203      	str	r2, [sp, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bfb8      	it	lt
 8003ae8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003aec:	3402      	adds	r4, #2
 8003aee:	9305      	str	r3, [sp, #20]
 8003af0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003bb8 <_svfiprintf_r+0x1f8>
 8003af4:	7821      	ldrb	r1, [r4, #0]
 8003af6:	2203      	movs	r2, #3
 8003af8:	4650      	mov	r0, sl
 8003afa:	f7fc fb91 	bl	8000220 <memchr>
 8003afe:	b138      	cbz	r0, 8003b10 <_svfiprintf_r+0x150>
 8003b00:	9b04      	ldr	r3, [sp, #16]
 8003b02:	eba0 000a 	sub.w	r0, r0, sl
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	4082      	lsls	r2, r0
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	3401      	adds	r4, #1
 8003b0e:	9304      	str	r3, [sp, #16]
 8003b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b14:	4825      	ldr	r0, [pc, #148]	; (8003bac <_svfiprintf_r+0x1ec>)
 8003b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	f7fc fb80 	bl	8000220 <memchr>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d038      	beq.n	8003b96 <_svfiprintf_r+0x1d6>
 8003b24:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <_svfiprintf_r+0x1f0>)
 8003b26:	bb1b      	cbnz	r3, 8003b70 <_svfiprintf_r+0x1b0>
 8003b28:	9b03      	ldr	r3, [sp, #12]
 8003b2a:	3307      	adds	r3, #7
 8003b2c:	f023 0307 	bic.w	r3, r3, #7
 8003b30:	3308      	adds	r3, #8
 8003b32:	9303      	str	r3, [sp, #12]
 8003b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b36:	4433      	add	r3, r6
 8003b38:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3a:	e768      	b.n	8003a0e <_svfiprintf_r+0x4e>
 8003b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b40:	460c      	mov	r4, r1
 8003b42:	2001      	movs	r0, #1
 8003b44:	e7a6      	b.n	8003a94 <_svfiprintf_r+0xd4>
 8003b46:	2300      	movs	r3, #0
 8003b48:	3401      	adds	r4, #1
 8003b4a:	9305      	str	r3, [sp, #20]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f04f 0c0a 	mov.w	ip, #10
 8003b52:	4620      	mov	r0, r4
 8003b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b58:	3a30      	subs	r2, #48	; 0x30
 8003b5a:	2a09      	cmp	r2, #9
 8003b5c:	d903      	bls.n	8003b66 <_svfiprintf_r+0x1a6>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0c6      	beq.n	8003af0 <_svfiprintf_r+0x130>
 8003b62:	9105      	str	r1, [sp, #20]
 8003b64:	e7c4      	b.n	8003af0 <_svfiprintf_r+0x130>
 8003b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e7f0      	b.n	8003b52 <_svfiprintf_r+0x192>
 8003b70:	ab03      	add	r3, sp, #12
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	462a      	mov	r2, r5
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <_svfiprintf_r+0x1f4>)
 8003b78:	a904      	add	r1, sp, #16
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	f3af 8000 	nop.w
 8003b80:	1c42      	adds	r2, r0, #1
 8003b82:	4606      	mov	r6, r0
 8003b84:	d1d6      	bne.n	8003b34 <_svfiprintf_r+0x174>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	065b      	lsls	r3, r3, #25
 8003b8a:	f53f af2d 	bmi.w	80039e8 <_svfiprintf_r+0x28>
 8003b8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b90:	b01d      	add	sp, #116	; 0x74
 8003b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b96:	ab03      	add	r3, sp, #12
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	462a      	mov	r2, r5
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <_svfiprintf_r+0x1f4>)
 8003b9e:	a904      	add	r1, sp, #16
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f000 f919 	bl	8003dd8 <_printf_i>
 8003ba6:	e7eb      	b.n	8003b80 <_svfiprintf_r+0x1c0>
 8003ba8:	080042a0 	.word	0x080042a0
 8003bac:	080042aa 	.word	0x080042aa
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	0800390d 	.word	0x0800390d
 8003bb8:	080042a6 	.word	0x080042a6

08003bbc <sbrk_aligned>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4e0e      	ldr	r6, [pc, #56]	; (8003bf8 <sbrk_aligned+0x3c>)
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	6831      	ldr	r1, [r6, #0]
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	b911      	cbnz	r1, 8003bce <sbrk_aligned+0x12>
 8003bc8:	f000 fa7e 	bl	80040c8 <_sbrk_r>
 8003bcc:	6030      	str	r0, [r6, #0]
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 fa79 	bl	80040c8 <_sbrk_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	d00a      	beq.n	8003bf0 <sbrk_aligned+0x34>
 8003bda:	1cc4      	adds	r4, r0, #3
 8003bdc:	f024 0403 	bic.w	r4, r4, #3
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d007      	beq.n	8003bf4 <sbrk_aligned+0x38>
 8003be4:	1a21      	subs	r1, r4, r0
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 fa6e 	bl	80040c8 <_sbrk_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d101      	bne.n	8003bf4 <sbrk_aligned+0x38>
 8003bf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	20000798 	.word	0x20000798

08003bfc <_malloc_r>:
 8003bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c00:	1ccd      	adds	r5, r1, #3
 8003c02:	f025 0503 	bic.w	r5, r5, #3
 8003c06:	3508      	adds	r5, #8
 8003c08:	2d0c      	cmp	r5, #12
 8003c0a:	bf38      	it	cc
 8003c0c:	250c      	movcc	r5, #12
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	4607      	mov	r7, r0
 8003c12:	db01      	blt.n	8003c18 <_malloc_r+0x1c>
 8003c14:	42a9      	cmp	r1, r5
 8003c16:	d905      	bls.n	8003c24 <_malloc_r+0x28>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	4630      	mov	r0, r6
 8003c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003cf8 <_malloc_r+0xfc>
 8003c28:	f000 f9f8 	bl	800401c <__malloc_lock>
 8003c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c30:	461c      	mov	r4, r3
 8003c32:	bb5c      	cbnz	r4, 8003c8c <_malloc_r+0x90>
 8003c34:	4629      	mov	r1, r5
 8003c36:	4638      	mov	r0, r7
 8003c38:	f7ff ffc0 	bl	8003bbc <sbrk_aligned>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	4604      	mov	r4, r0
 8003c40:	d155      	bne.n	8003cee <_malloc_r+0xf2>
 8003c42:	f8d8 4000 	ldr.w	r4, [r8]
 8003c46:	4626      	mov	r6, r4
 8003c48:	2e00      	cmp	r6, #0
 8003c4a:	d145      	bne.n	8003cd8 <_malloc_r+0xdc>
 8003c4c:	2c00      	cmp	r4, #0
 8003c4e:	d048      	beq.n	8003ce2 <_malloc_r+0xe6>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	4631      	mov	r1, r6
 8003c54:	4638      	mov	r0, r7
 8003c56:	eb04 0903 	add.w	r9, r4, r3
 8003c5a:	f000 fa35 	bl	80040c8 <_sbrk_r>
 8003c5e:	4581      	cmp	r9, r0
 8003c60:	d13f      	bne.n	8003ce2 <_malloc_r+0xe6>
 8003c62:	6821      	ldr	r1, [r4, #0]
 8003c64:	1a6d      	subs	r5, r5, r1
 8003c66:	4629      	mov	r1, r5
 8003c68:	4638      	mov	r0, r7
 8003c6a:	f7ff ffa7 	bl	8003bbc <sbrk_aligned>
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d037      	beq.n	8003ce2 <_malloc_r+0xe6>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	442b      	add	r3, r5
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d038      	beq.n	8003cf2 <_malloc_r+0xf6>
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	42a2      	cmp	r2, r4
 8003c84:	d12b      	bne.n	8003cde <_malloc_r+0xe2>
 8003c86:	2200      	movs	r2, #0
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	e00f      	b.n	8003cac <_malloc_r+0xb0>
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	1b52      	subs	r2, r2, r5
 8003c90:	d41f      	bmi.n	8003cd2 <_malloc_r+0xd6>
 8003c92:	2a0b      	cmp	r2, #11
 8003c94:	d917      	bls.n	8003cc6 <_malloc_r+0xca>
 8003c96:	1961      	adds	r1, r4, r5
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	6025      	str	r5, [r4, #0]
 8003c9c:	bf18      	it	ne
 8003c9e:	6059      	strne	r1, [r3, #4]
 8003ca0:	6863      	ldr	r3, [r4, #4]
 8003ca2:	bf08      	it	eq
 8003ca4:	f8c8 1000 	streq.w	r1, [r8]
 8003ca8:	5162      	str	r2, [r4, r5]
 8003caa:	604b      	str	r3, [r1, #4]
 8003cac:	4638      	mov	r0, r7
 8003cae:	f104 060b 	add.w	r6, r4, #11
 8003cb2:	f000 f9b9 	bl	8004028 <__malloc_unlock>
 8003cb6:	f026 0607 	bic.w	r6, r6, #7
 8003cba:	1d23      	adds	r3, r4, #4
 8003cbc:	1af2      	subs	r2, r6, r3
 8003cbe:	d0ae      	beq.n	8003c1e <_malloc_r+0x22>
 8003cc0:	1b9b      	subs	r3, r3, r6
 8003cc2:	50a3      	str	r3, [r4, r2]
 8003cc4:	e7ab      	b.n	8003c1e <_malloc_r+0x22>
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	6862      	ldr	r2, [r4, #4]
 8003cca:	d1dd      	bne.n	8003c88 <_malloc_r+0x8c>
 8003ccc:	f8c8 2000 	str.w	r2, [r8]
 8003cd0:	e7ec      	b.n	8003cac <_malloc_r+0xb0>
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	6864      	ldr	r4, [r4, #4]
 8003cd6:	e7ac      	b.n	8003c32 <_malloc_r+0x36>
 8003cd8:	4634      	mov	r4, r6
 8003cda:	6876      	ldr	r6, [r6, #4]
 8003cdc:	e7b4      	b.n	8003c48 <_malloc_r+0x4c>
 8003cde:	4613      	mov	r3, r2
 8003ce0:	e7cc      	b.n	8003c7c <_malloc_r+0x80>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	f000 f99e 	bl	8004028 <__malloc_unlock>
 8003cec:	e797      	b.n	8003c1e <_malloc_r+0x22>
 8003cee:	6025      	str	r5, [r4, #0]
 8003cf0:	e7dc      	b.n	8003cac <_malloc_r+0xb0>
 8003cf2:	605b      	str	r3, [r3, #4]
 8003cf4:	deff      	udf	#255	; 0xff
 8003cf6:	bf00      	nop
 8003cf8:	20000794 	.word	0x20000794

08003cfc <_printf_common>:
 8003cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d00:	4616      	mov	r6, r2
 8003d02:	4699      	mov	r9, r3
 8003d04:	688a      	ldr	r2, [r1, #8]
 8003d06:	690b      	ldr	r3, [r1, #16]
 8003d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	bfb8      	it	lt
 8003d10:	4613      	movlt	r3, r2
 8003d12:	6033      	str	r3, [r6, #0]
 8003d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d18:	4607      	mov	r7, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	b10a      	cbz	r2, 8003d22 <_printf_common+0x26>
 8003d1e:	3301      	adds	r3, #1
 8003d20:	6033      	str	r3, [r6, #0]
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	0699      	lsls	r1, r3, #26
 8003d26:	bf42      	ittt	mi
 8003d28:	6833      	ldrmi	r3, [r6, #0]
 8003d2a:	3302      	addmi	r3, #2
 8003d2c:	6033      	strmi	r3, [r6, #0]
 8003d2e:	6825      	ldr	r5, [r4, #0]
 8003d30:	f015 0506 	ands.w	r5, r5, #6
 8003d34:	d106      	bne.n	8003d44 <_printf_common+0x48>
 8003d36:	f104 0a19 	add.w	sl, r4, #25
 8003d3a:	68e3      	ldr	r3, [r4, #12]
 8003d3c:	6832      	ldr	r2, [r6, #0]
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	42ab      	cmp	r3, r5
 8003d42:	dc26      	bgt.n	8003d92 <_printf_common+0x96>
 8003d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d48:	1e13      	subs	r3, r2, #0
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	bf18      	it	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	0692      	lsls	r2, r2, #26
 8003d52:	d42b      	bmi.n	8003dac <_printf_common+0xb0>
 8003d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d58:	4649      	mov	r1, r9
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	47c0      	blx	r8
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d01e      	beq.n	8003da0 <_printf_common+0xa4>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	6922      	ldr	r2, [r4, #16]
 8003d66:	f003 0306 	and.w	r3, r3, #6
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	bf02      	ittt	eq
 8003d6e:	68e5      	ldreq	r5, [r4, #12]
 8003d70:	6833      	ldreq	r3, [r6, #0]
 8003d72:	1aed      	subeq	r5, r5, r3
 8003d74:	68a3      	ldr	r3, [r4, #8]
 8003d76:	bf0c      	ite	eq
 8003d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d7c:	2500      	movne	r5, #0
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	bfc4      	itt	gt
 8003d82:	1a9b      	subgt	r3, r3, r2
 8003d84:	18ed      	addgt	r5, r5, r3
 8003d86:	2600      	movs	r6, #0
 8003d88:	341a      	adds	r4, #26
 8003d8a:	42b5      	cmp	r5, r6
 8003d8c:	d11a      	bne.n	8003dc4 <_printf_common+0xc8>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e008      	b.n	8003da4 <_printf_common+0xa8>
 8003d92:	2301      	movs	r3, #1
 8003d94:	4652      	mov	r2, sl
 8003d96:	4649      	mov	r1, r9
 8003d98:	4638      	mov	r0, r7
 8003d9a:	47c0      	blx	r8
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d103      	bne.n	8003da8 <_printf_common+0xac>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da8:	3501      	adds	r5, #1
 8003daa:	e7c6      	b.n	8003d3a <_printf_common+0x3e>
 8003dac:	18e1      	adds	r1, r4, r3
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	2030      	movs	r0, #48	; 0x30
 8003db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003db6:	4422      	add	r2, r4
 8003db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	e7c7      	b.n	8003d54 <_printf_common+0x58>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	4649      	mov	r1, r9
 8003dca:	4638      	mov	r0, r7
 8003dcc:	47c0      	blx	r8
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d0e6      	beq.n	8003da0 <_printf_common+0xa4>
 8003dd2:	3601      	adds	r6, #1
 8003dd4:	e7d9      	b.n	8003d8a <_printf_common+0x8e>
	...

08003dd8 <_printf_i>:
 8003dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ddc:	7e0f      	ldrb	r7, [r1, #24]
 8003dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003de0:	2f78      	cmp	r7, #120	; 0x78
 8003de2:	4691      	mov	r9, r2
 8003de4:	4680      	mov	r8, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	469a      	mov	sl, r3
 8003dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dee:	d807      	bhi.n	8003e00 <_printf_i+0x28>
 8003df0:	2f62      	cmp	r7, #98	; 0x62
 8003df2:	d80a      	bhi.n	8003e0a <_printf_i+0x32>
 8003df4:	2f00      	cmp	r7, #0
 8003df6:	f000 80d4 	beq.w	8003fa2 <_printf_i+0x1ca>
 8003dfa:	2f58      	cmp	r7, #88	; 0x58
 8003dfc:	f000 80c0 	beq.w	8003f80 <_printf_i+0x1a8>
 8003e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e08:	e03a      	b.n	8003e80 <_printf_i+0xa8>
 8003e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e0e:	2b15      	cmp	r3, #21
 8003e10:	d8f6      	bhi.n	8003e00 <_printf_i+0x28>
 8003e12:	a101      	add	r1, pc, #4	; (adr r1, 8003e18 <_printf_i+0x40>)
 8003e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e85 	.word	0x08003e85
 8003e20:	08003e01 	.word	0x08003e01
 8003e24:	08003e01 	.word	0x08003e01
 8003e28:	08003e01 	.word	0x08003e01
 8003e2c:	08003e01 	.word	0x08003e01
 8003e30:	08003e85 	.word	0x08003e85
 8003e34:	08003e01 	.word	0x08003e01
 8003e38:	08003e01 	.word	0x08003e01
 8003e3c:	08003e01 	.word	0x08003e01
 8003e40:	08003e01 	.word	0x08003e01
 8003e44:	08003f89 	.word	0x08003f89
 8003e48:	08003eb1 	.word	0x08003eb1
 8003e4c:	08003f43 	.word	0x08003f43
 8003e50:	08003e01 	.word	0x08003e01
 8003e54:	08003e01 	.word	0x08003e01
 8003e58:	08003fab 	.word	0x08003fab
 8003e5c:	08003e01 	.word	0x08003e01
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003e01 	.word	0x08003e01
 8003e68:	08003e01 	.word	0x08003e01
 8003e6c:	08003f4b 	.word	0x08003f4b
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	1d1a      	adds	r2, r3, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	602a      	str	r2, [r5, #0]
 8003e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e80:	2301      	movs	r3, #1
 8003e82:	e09f      	b.n	8003fc4 <_printf_i+0x1ec>
 8003e84:	6820      	ldr	r0, [r4, #0]
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	0607      	lsls	r7, r0, #24
 8003e8a:	f103 0104 	add.w	r1, r3, #4
 8003e8e:	6029      	str	r1, [r5, #0]
 8003e90:	d501      	bpl.n	8003e96 <_printf_i+0xbe>
 8003e92:	681e      	ldr	r6, [r3, #0]
 8003e94:	e003      	b.n	8003e9e <_printf_i+0xc6>
 8003e96:	0646      	lsls	r6, r0, #25
 8003e98:	d5fb      	bpl.n	8003e92 <_printf_i+0xba>
 8003e9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	da03      	bge.n	8003eaa <_printf_i+0xd2>
 8003ea2:	232d      	movs	r3, #45	; 0x2d
 8003ea4:	4276      	negs	r6, r6
 8003ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eaa:	485a      	ldr	r0, [pc, #360]	; (8004014 <_printf_i+0x23c>)
 8003eac:	230a      	movs	r3, #10
 8003eae:	e012      	b.n	8003ed6 <_printf_i+0xfe>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	1d19      	adds	r1, r3, #4
 8003eb6:	6029      	str	r1, [r5, #0]
 8003eb8:	0605      	lsls	r5, r0, #24
 8003eba:	d501      	bpl.n	8003ec0 <_printf_i+0xe8>
 8003ebc:	681e      	ldr	r6, [r3, #0]
 8003ebe:	e002      	b.n	8003ec6 <_printf_i+0xee>
 8003ec0:	0641      	lsls	r1, r0, #25
 8003ec2:	d5fb      	bpl.n	8003ebc <_printf_i+0xe4>
 8003ec4:	881e      	ldrh	r6, [r3, #0]
 8003ec6:	4853      	ldr	r0, [pc, #332]	; (8004014 <_printf_i+0x23c>)
 8003ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8003eca:	bf0c      	ite	eq
 8003ecc:	2308      	moveq	r3, #8
 8003ece:	230a      	movne	r3, #10
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ed6:	6865      	ldr	r5, [r4, #4]
 8003ed8:	60a5      	str	r5, [r4, #8]
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	bfa2      	ittt	ge
 8003ede:	6821      	ldrge	r1, [r4, #0]
 8003ee0:	f021 0104 	bicge.w	r1, r1, #4
 8003ee4:	6021      	strge	r1, [r4, #0]
 8003ee6:	b90e      	cbnz	r6, 8003eec <_printf_i+0x114>
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	d04b      	beq.n	8003f84 <_printf_i+0x1ac>
 8003eec:	4615      	mov	r5, r2
 8003eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ef6:	5dc7      	ldrb	r7, [r0, r7]
 8003ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003efc:	4637      	mov	r7, r6
 8003efe:	42bb      	cmp	r3, r7
 8003f00:	460e      	mov	r6, r1
 8003f02:	d9f4      	bls.n	8003eee <_printf_i+0x116>
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d10b      	bne.n	8003f20 <_printf_i+0x148>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	07de      	lsls	r6, r3, #31
 8003f0c:	d508      	bpl.n	8003f20 <_printf_i+0x148>
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	6861      	ldr	r1, [r4, #4]
 8003f12:	4299      	cmp	r1, r3
 8003f14:	bfde      	ittt	le
 8003f16:	2330      	movle	r3, #48	; 0x30
 8003f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f20:	1b52      	subs	r2, r2, r5
 8003f22:	6122      	str	r2, [r4, #16]
 8003f24:	f8cd a000 	str.w	sl, [sp]
 8003f28:	464b      	mov	r3, r9
 8003f2a:	aa03      	add	r2, sp, #12
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	4640      	mov	r0, r8
 8003f30:	f7ff fee4 	bl	8003cfc <_printf_common>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d14a      	bne.n	8003fce <_printf_i+0x1f6>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f3c:	b004      	add	sp, #16
 8003f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	f043 0320 	orr.w	r3, r3, #32
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	4833      	ldr	r0, [pc, #204]	; (8004018 <_printf_i+0x240>)
 8003f4c:	2778      	movs	r7, #120	; 0x78
 8003f4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	6829      	ldr	r1, [r5, #0]
 8003f56:	061f      	lsls	r7, r3, #24
 8003f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f5c:	d402      	bmi.n	8003f64 <_printf_i+0x18c>
 8003f5e:	065f      	lsls	r7, r3, #25
 8003f60:	bf48      	it	mi
 8003f62:	b2b6      	uxthmi	r6, r6
 8003f64:	07df      	lsls	r7, r3, #31
 8003f66:	bf48      	it	mi
 8003f68:	f043 0320 	orrmi.w	r3, r3, #32
 8003f6c:	6029      	str	r1, [r5, #0]
 8003f6e:	bf48      	it	mi
 8003f70:	6023      	strmi	r3, [r4, #0]
 8003f72:	b91e      	cbnz	r6, 8003f7c <_printf_i+0x1a4>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f023 0320 	bic.w	r3, r3, #32
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	e7a7      	b.n	8003ed0 <_printf_i+0xf8>
 8003f80:	4824      	ldr	r0, [pc, #144]	; (8004014 <_printf_i+0x23c>)
 8003f82:	e7e4      	b.n	8003f4e <_printf_i+0x176>
 8003f84:	4615      	mov	r5, r2
 8003f86:	e7bd      	b.n	8003f04 <_printf_i+0x12c>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	6826      	ldr	r6, [r4, #0]
 8003f8c:	6961      	ldr	r1, [r4, #20]
 8003f8e:	1d18      	adds	r0, r3, #4
 8003f90:	6028      	str	r0, [r5, #0]
 8003f92:	0635      	lsls	r5, r6, #24
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	d501      	bpl.n	8003f9c <_printf_i+0x1c4>
 8003f98:	6019      	str	r1, [r3, #0]
 8003f9a:	e002      	b.n	8003fa2 <_printf_i+0x1ca>
 8003f9c:	0670      	lsls	r0, r6, #25
 8003f9e:	d5fb      	bpl.n	8003f98 <_printf_i+0x1c0>
 8003fa0:	8019      	strh	r1, [r3, #0]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6123      	str	r3, [r4, #16]
 8003fa6:	4615      	mov	r5, r2
 8003fa8:	e7bc      	b.n	8003f24 <_printf_i+0x14c>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	1d1a      	adds	r2, r3, #4
 8003fae:	602a      	str	r2, [r5, #0]
 8003fb0:	681d      	ldr	r5, [r3, #0]
 8003fb2:	6862      	ldr	r2, [r4, #4]
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f7fc f932 	bl	8000220 <memchr>
 8003fbc:	b108      	cbz	r0, 8003fc2 <_printf_i+0x1ea>
 8003fbe:	1b40      	subs	r0, r0, r5
 8003fc0:	6060      	str	r0, [r4, #4]
 8003fc2:	6863      	ldr	r3, [r4, #4]
 8003fc4:	6123      	str	r3, [r4, #16]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fcc:	e7aa      	b.n	8003f24 <_printf_i+0x14c>
 8003fce:	6923      	ldr	r3, [r4, #16]
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	47d0      	blx	sl
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d0ad      	beq.n	8003f38 <_printf_i+0x160>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	079b      	lsls	r3, r3, #30
 8003fe0:	d413      	bmi.n	800400a <_printf_i+0x232>
 8003fe2:	68e0      	ldr	r0, [r4, #12]
 8003fe4:	9b03      	ldr	r3, [sp, #12]
 8003fe6:	4298      	cmp	r0, r3
 8003fe8:	bfb8      	it	lt
 8003fea:	4618      	movlt	r0, r3
 8003fec:	e7a6      	b.n	8003f3c <_printf_i+0x164>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4632      	mov	r2, r6
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	4640      	mov	r0, r8
 8003ff6:	47d0      	blx	sl
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d09d      	beq.n	8003f38 <_printf_i+0x160>
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	68e3      	ldr	r3, [r4, #12]
 8004000:	9903      	ldr	r1, [sp, #12]
 8004002:	1a5b      	subs	r3, r3, r1
 8004004:	42ab      	cmp	r3, r5
 8004006:	dcf2      	bgt.n	8003fee <_printf_i+0x216>
 8004008:	e7eb      	b.n	8003fe2 <_printf_i+0x20a>
 800400a:	2500      	movs	r5, #0
 800400c:	f104 0619 	add.w	r6, r4, #25
 8004010:	e7f5      	b.n	8003ffe <_printf_i+0x226>
 8004012:	bf00      	nop
 8004014:	080042b1 	.word	0x080042b1
 8004018:	080042c2 	.word	0x080042c2

0800401c <__malloc_lock>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__malloc_lock+0x8>)
 800401e:	f7ff bc73 	b.w	8003908 <__retarget_lock_acquire_recursive>
 8004022:	bf00      	nop
 8004024:	20000790 	.word	0x20000790

08004028 <__malloc_unlock>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__malloc_unlock+0x8>)
 800402a:	f7ff bc6e 	b.w	800390a <__retarget_lock_release_recursive>
 800402e:	bf00      	nop
 8004030:	20000790 	.word	0x20000790

08004034 <_realloc_r>:
 8004034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004038:	4680      	mov	r8, r0
 800403a:	4614      	mov	r4, r2
 800403c:	460e      	mov	r6, r1
 800403e:	b921      	cbnz	r1, 800404a <_realloc_r+0x16>
 8004040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004044:	4611      	mov	r1, r2
 8004046:	f7ff bdd9 	b.w	8003bfc <_malloc_r>
 800404a:	b92a      	cbnz	r2, 8004058 <_realloc_r+0x24>
 800404c:	f000 f85a 	bl	8004104 <_free_r>
 8004050:	4625      	mov	r5, r4
 8004052:	4628      	mov	r0, r5
 8004054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004058:	f000 f8a0 	bl	800419c <_malloc_usable_size_r>
 800405c:	4284      	cmp	r4, r0
 800405e:	4607      	mov	r7, r0
 8004060:	d802      	bhi.n	8004068 <_realloc_r+0x34>
 8004062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004066:	d812      	bhi.n	800408e <_realloc_r+0x5a>
 8004068:	4621      	mov	r1, r4
 800406a:	4640      	mov	r0, r8
 800406c:	f7ff fdc6 	bl	8003bfc <_malloc_r>
 8004070:	4605      	mov	r5, r0
 8004072:	2800      	cmp	r0, #0
 8004074:	d0ed      	beq.n	8004052 <_realloc_r+0x1e>
 8004076:	42bc      	cmp	r4, r7
 8004078:	4622      	mov	r2, r4
 800407a:	4631      	mov	r1, r6
 800407c:	bf28      	it	cs
 800407e:	463a      	movcs	r2, r7
 8004080:	f000 f832 	bl	80040e8 <memcpy>
 8004084:	4631      	mov	r1, r6
 8004086:	4640      	mov	r0, r8
 8004088:	f000 f83c 	bl	8004104 <_free_r>
 800408c:	e7e1      	b.n	8004052 <_realloc_r+0x1e>
 800408e:	4635      	mov	r5, r6
 8004090:	e7df      	b.n	8004052 <_realloc_r+0x1e>

08004092 <memmove>:
 8004092:	4288      	cmp	r0, r1
 8004094:	b510      	push	{r4, lr}
 8004096:	eb01 0402 	add.w	r4, r1, r2
 800409a:	d902      	bls.n	80040a2 <memmove+0x10>
 800409c:	4284      	cmp	r4, r0
 800409e:	4623      	mov	r3, r4
 80040a0:	d807      	bhi.n	80040b2 <memmove+0x20>
 80040a2:	1e43      	subs	r3, r0, #1
 80040a4:	42a1      	cmp	r1, r4
 80040a6:	d008      	beq.n	80040ba <memmove+0x28>
 80040a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040b0:	e7f8      	b.n	80040a4 <memmove+0x12>
 80040b2:	4402      	add	r2, r0
 80040b4:	4601      	mov	r1, r0
 80040b6:	428a      	cmp	r2, r1
 80040b8:	d100      	bne.n	80040bc <memmove+0x2a>
 80040ba:	bd10      	pop	{r4, pc}
 80040bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040c4:	e7f7      	b.n	80040b6 <memmove+0x24>
	...

080040c8 <_sbrk_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4d06      	ldr	r5, [pc, #24]	; (80040e4 <_sbrk_r+0x1c>)
 80040cc:	2300      	movs	r3, #0
 80040ce:	4604      	mov	r4, r0
 80040d0:	4608      	mov	r0, r1
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	f7fc fe42 	bl	8000d5c <_sbrk>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_sbrk_r+0x1a>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_sbrk_r+0x1a>
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	2000079c 	.word	0x2000079c

080040e8 <memcpy>:
 80040e8:	440a      	add	r2, r1
 80040ea:	4291      	cmp	r1, r2
 80040ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80040f0:	d100      	bne.n	80040f4 <memcpy+0xc>
 80040f2:	4770      	bx	lr
 80040f4:	b510      	push	{r4, lr}
 80040f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040fe:	4291      	cmp	r1, r2
 8004100:	d1f9      	bne.n	80040f6 <memcpy+0xe>
 8004102:	bd10      	pop	{r4, pc}

08004104 <_free_r>:
 8004104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004106:	2900      	cmp	r1, #0
 8004108:	d044      	beq.n	8004194 <_free_r+0x90>
 800410a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410e:	9001      	str	r0, [sp, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f1a1 0404 	sub.w	r4, r1, #4
 8004116:	bfb8      	it	lt
 8004118:	18e4      	addlt	r4, r4, r3
 800411a:	f7ff ff7f 	bl	800401c <__malloc_lock>
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <_free_r+0x94>)
 8004120:	9801      	ldr	r0, [sp, #4]
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	b933      	cbnz	r3, 8004134 <_free_r+0x30>
 8004126:	6063      	str	r3, [r4, #4]
 8004128:	6014      	str	r4, [r2, #0]
 800412a:	b003      	add	sp, #12
 800412c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004130:	f7ff bf7a 	b.w	8004028 <__malloc_unlock>
 8004134:	42a3      	cmp	r3, r4
 8004136:	d908      	bls.n	800414a <_free_r+0x46>
 8004138:	6825      	ldr	r5, [r4, #0]
 800413a:	1961      	adds	r1, r4, r5
 800413c:	428b      	cmp	r3, r1
 800413e:	bf01      	itttt	eq
 8004140:	6819      	ldreq	r1, [r3, #0]
 8004142:	685b      	ldreq	r3, [r3, #4]
 8004144:	1949      	addeq	r1, r1, r5
 8004146:	6021      	streq	r1, [r4, #0]
 8004148:	e7ed      	b.n	8004126 <_free_r+0x22>
 800414a:	461a      	mov	r2, r3
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	b10b      	cbz	r3, 8004154 <_free_r+0x50>
 8004150:	42a3      	cmp	r3, r4
 8004152:	d9fa      	bls.n	800414a <_free_r+0x46>
 8004154:	6811      	ldr	r1, [r2, #0]
 8004156:	1855      	adds	r5, r2, r1
 8004158:	42a5      	cmp	r5, r4
 800415a:	d10b      	bne.n	8004174 <_free_r+0x70>
 800415c:	6824      	ldr	r4, [r4, #0]
 800415e:	4421      	add	r1, r4
 8004160:	1854      	adds	r4, r2, r1
 8004162:	42a3      	cmp	r3, r4
 8004164:	6011      	str	r1, [r2, #0]
 8004166:	d1e0      	bne.n	800412a <_free_r+0x26>
 8004168:	681c      	ldr	r4, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	6053      	str	r3, [r2, #4]
 800416e:	440c      	add	r4, r1
 8004170:	6014      	str	r4, [r2, #0]
 8004172:	e7da      	b.n	800412a <_free_r+0x26>
 8004174:	d902      	bls.n	800417c <_free_r+0x78>
 8004176:	230c      	movs	r3, #12
 8004178:	6003      	str	r3, [r0, #0]
 800417a:	e7d6      	b.n	800412a <_free_r+0x26>
 800417c:	6825      	ldr	r5, [r4, #0]
 800417e:	1961      	adds	r1, r4, r5
 8004180:	428b      	cmp	r3, r1
 8004182:	bf04      	itt	eq
 8004184:	6819      	ldreq	r1, [r3, #0]
 8004186:	685b      	ldreq	r3, [r3, #4]
 8004188:	6063      	str	r3, [r4, #4]
 800418a:	bf04      	itt	eq
 800418c:	1949      	addeq	r1, r1, r5
 800418e:	6021      	streq	r1, [r4, #0]
 8004190:	6054      	str	r4, [r2, #4]
 8004192:	e7ca      	b.n	800412a <_free_r+0x26>
 8004194:	b003      	add	sp, #12
 8004196:	bd30      	pop	{r4, r5, pc}
 8004198:	20000794 	.word	0x20000794

0800419c <_malloc_usable_size_r>:
 800419c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a0:	1f18      	subs	r0, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bfbc      	itt	lt
 80041a6:	580b      	ldrlt	r3, [r1, r0]
 80041a8:	18c0      	addlt	r0, r0, r3
 80041aa:	4770      	bx	lr

080041ac <_init>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr

080041b8 <_fini>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr
