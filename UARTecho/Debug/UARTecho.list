
UARTecho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f4c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800523c  0800523c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a50  20000068  080052ac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ab8  080052ac  00026ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e15e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a1  00000000  00000000  0002e239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  000305e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087e  00000000  00000000  000310f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cd4  00000000  00000000  00031976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1a0  00000000  00000000  0005364a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cada8  00000000  00000000  000617ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f68  00000000  00000000  0012c594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080050f8 	.word	0x080050f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080050f8 	.word	0x080050f8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <hc05Init>:
bool exportingData = false;

UART_HandleTypeDef* BT_huart;
UART_HandleTypeDef* USB_huart;

void hc05Init(UART_HandleTypeDef* moduleHuart, UART_HandleTypeDef* sisterHuart) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	BT_huart = moduleHuart;
 800050a:	4a06      	ldr	r2, [pc, #24]	; (8000524 <hc05Init+0x24>)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6013      	str	r3, [r2, #0]
	USB_huart = sisterHuart;
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <hc05Init+0x28>)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	6013      	str	r3, [r2, #0]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	2000009c 	.word	0x2000009c
 8000528:	200000a0 	.word	0x200000a0

0800052c <checkConnection>:

bool checkConnection() {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin)) {
 8000530:	2101      	movs	r1, #1
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <checkConnection+0x28>)
 8000534:	f001 fcf2 	bl	8001f1c <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d004      	beq.n	8000548 <checkConnection+0x1c>
		moduleState = IDLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <checkConnection+0x2c>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		return true;
 8000544:	2301      	movs	r3, #1
 8000546:	e003      	b.n	8000550 <checkConnection+0x24>
	} else {
		moduleState = DISCONNECTED;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <checkConnection+0x2c>)
 800054a:	2204      	movs	r2, #4
 800054c:	701a      	strb	r2, [r3, #0]
		return false;
 800054e:	2300      	movs	r3, #0
	}
}
 8000550:	4618      	mov	r0, r3
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021800 	.word	0x40021800
 8000558:	20000000 	.word	0x20000000

0800055c <receiveData>:
	}

	return true; //Transfer complete
}

bool receiveData(uint8_t* pdata, uint16_t* psize) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	//Start UART transfer to receive data size
	waitingForSize = true;
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <receiveData+0x8c>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(BT_huart, sizeBuffer, SIZE_BUFFER_LENGTH);
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <receiveData+0x90>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	220a      	movs	r2, #10
 8000572:	491f      	ldr	r1, [pc, #124]	; (80005f0 <receiveData+0x94>)
 8000574:	4618      	mov	r0, r3
 8000576:	f003 f89b 	bl	80036b0 <HAL_UART_Receive_DMA>
	while(waitingForSize) { //Wait until the DMA transfer completes
 800057a:	e002      	b.n	8000582 <receiveData+0x26>
		HAL_Delay(0);
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fe01 	bl	8001184 <HAL_Delay>
	while(waitingForSize) { //Wait until the DMA transfer completes
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <receiveData+0x8c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1f8      	bne.n	800057c <receiveData+0x20>
	}

	//Convert string to integer
	if (sizeBuffer[0] == 0) { //Sometimes the first character is zero so the number must be shifted
 800058a:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <receiveData+0x94>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <receiveData+0x3a>
		shiftSizeBuffer();
 8000592:	f000 f853 	bl	800063c <shiftSizeBuffer>
	}
	dataSize = atoi((char*)sizeBuffer);
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <receiveData+0x94>)
 8000598:	f004 fceb 	bl	8004f72 <atoi>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <receiveData+0x98>)
 80005a2:	801a      	strh	r2, [r3, #0]
	psize = &dataSize;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <receiveData+0x98>)
 80005a6:	603b      	str	r3, [r7, #0]

	//Send confirmation signal
	HAL_UART_Transmit(BT_huart, okBuffer, OK_SIGNAL_LENGTH, USART_TIMEOUT);
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <receiveData+0x90>)
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	2205      	movs	r2, #5
 80005b2:	4911      	ldr	r1, [pc, #68]	; (80005f8 <receiveData+0x9c>)
 80005b4:	f002 ff80 	bl	80034b8 <HAL_UART_Transmit>

	//Begin data transfer
	waitingForData = true;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <receiveData+0xa0>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(BT_huart, pdata, dataSize);
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <receiveData+0x90>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <receiveData+0x98>)
 80005c4:	8812      	ldrh	r2, [r2, #0]
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f871 	bl	80036b0 <HAL_UART_Receive_DMA>
	while(waitingForData) { //Wait until the DMA transfer completes
 80005ce:	e002      	b.n	80005d6 <receiveData+0x7a>
		HAL_Delay(0);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fdd7 	bl	8001184 <HAL_Delay>
	while(waitingForData) { //Wait until the DMA transfer completes
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <receiveData+0xa0>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f8      	bne.n	80005d0 <receiveData+0x74>
	}

	return true; //Transfer complete
 80005de:	2301      	movs	r3, #1
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000093 	.word	0x20000093
 80005ec:	2000009c 	.word	0x2000009c
 80005f0:	20000088 	.word	0x20000088
 80005f4:	20000084 	.word	0x20000084
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000092 	.word	0x20000092

08000600 <requestNextFrame>:

void requestNextFrame() {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	//Send confirmation signal
	sendingOK = true;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <requestNextFrame+0x30>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(BT_huart, okBuffer, OK_SIGNAL_LENGTH);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <requestNextFrame+0x34>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2205      	movs	r2, #5
 8000610:	4909      	ldr	r1, [pc, #36]	; (8000638 <requestNextFrame+0x38>)
 8000612:	4618      	mov	r0, r3
 8000614:	f002 ffdc 	bl	80035d0 <HAL_UART_Transmit_DMA>
	while(sendingOK) {
 8000618:	e002      	b.n	8000620 <requestNextFrame+0x20>
		HAL_Delay(0);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fdb2 	bl	8001184 <HAL_Delay>
	while(sendingOK) {
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <requestNextFrame+0x30>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f8      	bne.n	800061a <requestNextFrame+0x1a>
	}
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000097 	.word	0x20000097
 8000634:	2000009c 	.word	0x2000009c
 8000638:	20000004 	.word	0x20000004

0800063c <shiftSizeBuffer>:
		}
	}
	memset(okBuffer, 0, OK_SIGNAL_LENGTH);
}

void shiftSizeBuffer() {
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	sizeBuffer[0] = sizeBuffer[1];
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000642:	785a      	ldrb	r2, [r3, #1]
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000646:	701a      	strb	r2, [r3, #0]
	sizeBuffer[1] = sizeBuffer[2];
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <shiftSizeBuffer+0x5c>)
 800064a:	789a      	ldrb	r2, [r3, #2]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <shiftSizeBuffer+0x5c>)
 800064e:	705a      	strb	r2, [r3, #1]
	sizeBuffer[2] = sizeBuffer[3];
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000652:	78da      	ldrb	r2, [r3, #3]
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000656:	709a      	strb	r2, [r3, #2]
	sizeBuffer[3] = sizeBuffer[4];
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <shiftSizeBuffer+0x5c>)
 800065a:	791a      	ldrb	r2, [r3, #4]
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <shiftSizeBuffer+0x5c>)
 800065e:	70da      	strb	r2, [r3, #3]
	sizeBuffer[4] = sizeBuffer[5];
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000662:	795a      	ldrb	r2, [r3, #5]
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000666:	711a      	strb	r2, [r3, #4]
	sizeBuffer[5] = sizeBuffer[6];
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <shiftSizeBuffer+0x5c>)
 800066a:	799a      	ldrb	r2, [r3, #6]
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <shiftSizeBuffer+0x5c>)
 800066e:	715a      	strb	r2, [r3, #5]
	sizeBuffer[6] = sizeBuffer[7];
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000672:	79da      	ldrb	r2, [r3, #7]
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000676:	719a      	strb	r2, [r3, #6]
	sizeBuffer[7] = sizeBuffer[8];
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <shiftSizeBuffer+0x5c>)
 800067a:	7a1a      	ldrb	r2, [r3, #8]
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <shiftSizeBuffer+0x5c>)
 800067e:	71da      	strb	r2, [r3, #7]
	sizeBuffer[8] = sizeBuffer[9];
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000682:	7a5a      	ldrb	r2, [r3, #9]
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <shiftSizeBuffer+0x5c>)
 8000686:	721a      	strb	r2, [r3, #8]
	sizeBuffer[9] = 0;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <shiftSizeBuffer+0x5c>)
 800068a:	2200      	movs	r2, #0
 800068c:	725a      	strb	r2, [r3, #9]
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000088 	.word	0x20000088

0800069c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	if (huart != BT_huart) {
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_UART_RxCpltCallback+0x50>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d117      	bne.n	80006de <HAL_UART_RxCpltCallback+0x42>
		return;
	}

	if (waitingForSize) {
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_UART_RxCpltCallback+0x54>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <HAL_UART_RxCpltCallback+0x22>
		waitingForSize = false;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_UART_RxCpltCallback+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
		return;
 80006bc:	e010      	b.n	80006e0 <HAL_UART_RxCpltCallback+0x44>
	}

	if (waitingForData) {
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_UART_RxCpltCallback+0x58>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <HAL_UART_RxCpltCallback+0x32>
		waitingForData = false;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_UART_RxCpltCallback+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
		return;
 80006cc:	e008      	b.n	80006e0 <HAL_UART_RxCpltCallback+0x44>
	}

	if (waitingForOK) {
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_UART_RxCpltCallback+0x5c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d004      	beq.n	80006e0 <HAL_UART_RxCpltCallback+0x44>
		waitingForOK = false;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_UART_RxCpltCallback+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		return;
 80006dc:	e000      	b.n	80006e0 <HAL_UART_RxCpltCallback+0x44>
		return;
 80006de:	bf00      	nop
	}
}
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000009c 	.word	0x2000009c
 80006f0:	20000093 	.word	0x20000093
 80006f4:	20000092 	.word	0x20000092
 80006f8:	20000094 	.word	0x20000094

080006fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if (sendingSize) {
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_UART_TxCpltCallback+0x54>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d003      	beq.n	8000714 <HAL_UART_TxCpltCallback+0x18>
		sendingSize = false;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_UART_TxCpltCallback+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
		return;
 8000712:	e017      	b.n	8000744 <HAL_UART_TxCpltCallback+0x48>
	}

	if (sendingData) {
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_UART_TxCpltCallback+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <HAL_UART_TxCpltCallback+0x28>
		sendingData = false;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_UART_TxCpltCallback+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
		return;
 8000722:	e00f      	b.n	8000744 <HAL_UART_TxCpltCallback+0x48>
	}

	if (sendingOK) {
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_UART_TxCpltCallback+0x5c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <HAL_UART_TxCpltCallback+0x38>
		sendingOK = false;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_UART_TxCpltCallback+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
		return;
 8000732:	e007      	b.n	8000744 <HAL_UART_TxCpltCallback+0x48>
	}

	if (exportingData) {
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_UART_TxCpltCallback+0x60>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <HAL_UART_TxCpltCallback+0x48>
		exportingData = false;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <HAL_UART_TxCpltCallback+0x60>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
		return;
 8000742:	bf00      	nop
	}
}
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000096 	.word	0x20000096
 8000754:	20000095 	.word	0x20000095
 8000758:	20000097 	.word	0x20000097
 800075c:	20000098 	.word	0x20000098

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fc9b 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f843 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f95f 	bl	8000a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000772:	f000 f92d 	bl	80009d0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000776:	f000 f8d3 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800077a:	f000 f8fb 	bl	8000974 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800077e:	f000 f8a5 	bl	80008cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hc05Init(&huart2, &huart3);
 8000782:	4918      	ldr	r1, [pc, #96]	; (80007e4 <main+0x84>)
 8000784:	4818      	ldr	r0, [pc, #96]	; (80007e8 <main+0x88>)
 8000786:	f7ff febb 	bl	8000500 <hc05Init>
  uint16_t size;
  uint16_t* sizeReceived = &size;
 800078a:	1cbb      	adds	r3, r7, #2
 800078c:	607b      	str	r3, [r7, #4]
  //Establish BT connection
  while(!checkConnection()) {
 800078e:	e002      	b.n	8000796 <main+0x36>
	  HAL_Delay(0);
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fcf7 	bl	8001184 <HAL_Delay>
  while(!checkConnection()) {
 8000796:	f7ff fec9 	bl	800052c <checkConnection>
 800079a:	4603      	mov	r3, r0
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f4      	bne.n	8000790 <main+0x30>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receiveData(buffer, sizeReceived);
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <main+0x8c>)
 80007aa:	f7ff fed7 	bl	800055c <receiveData>

	  exportingData = true;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <main+0x90>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit_DMA(&huart3, buffer, *sizeReceived);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	490c      	ldr	r1, [pc, #48]	; (80007ec <main+0x8c>)
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x84>)
 80007be:	f002 ff07 	bl	80035d0 <HAL_UART_Transmit_DMA>
	  while(exportingData) {
 80007c2:	e002      	b.n	80007ca <main+0x6a>
		  HAL_Delay(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 fcdd 	bl	8001184 <HAL_Delay>
	  while(exportingData) {
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <main+0x90>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f8      	bne.n	80007c4 <main+0x64>
	  }

	  memset(buffer, 0, DATA_SIZE);
 80007d2:	f246 2244 	movw	r2, #25156	; 0x6244
 80007d6:	2100      	movs	r1, #0
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <main+0x8c>)
 80007da:	f004 fc5b 	bl	8005094 <memset>
	  requestNextFrame();
 80007de:	f7ff ff0f 	bl	8000600 <requestNextFrame>
	  receiveData(buffer, sizeReceived);
 80007e2:	e7e0      	b.n	80007a6 <main+0x46>
 80007e4:	200000ec 	.word	0x200000ec
 80007e8:	200000a4 	.word	0x200000a4
 80007ec:	20000738 	.word	0x20000738
 80007f0:	20000098 	.word	0x20000098

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fc46 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <SystemClock_Config+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <SystemClock_Config+0xd0>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <SystemClock_Config+0xd0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SystemClock_Config+0xd4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <SystemClock_Config+0xd4>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <SystemClock_Config+0xd4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000854:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000858:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000864:	2304      	movs	r3, #4
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000868:	23a8      	movs	r3, #168	; 0xa8
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000870:	2307      	movs	r3, #7
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fb2d 	bl	8002edc <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000888:	f000 f994 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000898:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	2105      	movs	r1, #5
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fca2 	bl	80021f4 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008b6:	f000 f97d 	bl	8000bb4 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3750      	adds	r7, #80	; 0x50
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART2_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 8000904:	f002 fd88 	bl	8003418 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f951 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000a4 	.word	0x200000a4
 800091c:	40004400 	.word	0x40004400

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART3_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART3_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART3_UART_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART3_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART3_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART3_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART3_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART3_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART3_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART3_UART_Init+0x4c>)
 8000958:	f002 fd5e 	bl	8003418 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f927 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000ec 	.word	0x200000ec
 8000970:	40004800 	.word	0x40004800

08000974 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800097e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2206      	movs	r2, #6
 8000984:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2202      	movs	r2, #2
 800098a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2201      	movs	r2, #1
 800099c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	f001 fae1 	bl	8001f7e <HAL_PCD_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f8f7 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000254 	.word	0x20000254

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_DMA_Init+0x5c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MX_DMA_Init+0x5c>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_DMA_Init+0x5c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	200e      	movs	r0, #14
 80009f8:	f000 fcc3 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009fc:	200e      	movs	r0, #14
 80009fe:	f000 fcdc 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2010      	movs	r0, #16
 8000a08:	f000 fcbb 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a0c:	2010      	movs	r0, #16
 8000a0e:	f000 fcd4 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2011      	movs	r0, #17
 8000a18:	f000 fcb3 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a1c:	2011      	movs	r0, #17
 8000a1e:	f000 fccc 	bl	80013ba <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a55      	ldr	r2, [pc, #340]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	4b4f      	ldr	r3, [pc, #316]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a47      	ldr	r2, [pc, #284]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a40      	ldr	r2, [pc, #256]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a39      	ldr	r2, [pc, #228]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_GPIO_Init+0x174>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af4:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <MX_GPIO_Init+0x178>)
 8000af6:	f001 fa29 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	482b      	ldr	r0, [pc, #172]	; (8000bac <MX_GPIO_Init+0x17c>)
 8000b00:	f001 fa24 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x180>)
 8000b1c:	f001 f86a 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b20:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <MX_GPIO_Init+0x178>)
 8000b3a:	f001 f85b 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_STATE_Pin */
  GPIO_InitStruct.Pin = BT_STATE_Pin;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4816      	ldr	r0, [pc, #88]	; (8000bac <MX_GPIO_Init+0x17c>)
 8000b54:	f001 f84e 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <MX_GPIO_Init+0x17c>)
 8000b70:	f001 f840 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <MX_GPIO_Init+0x17c>)
 8000b88:	f001 f834 	bl	8001bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2006      	movs	r0, #6
 8000b92:	f000 fbf6 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b96:	2006      	movs	r0, #6
 8000b98:	f000 fc0f 	bl	80013ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3730      	adds	r7, #48	; 0x30
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a81      	ldr	r2, [pc, #516]	; (8000e34 <HAL_UART_MspInit+0x224>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	f040 8093 	bne.w	8000d5a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	4b7f      	ldr	r3, [pc, #508]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a7e      	ldr	r2, [pc, #504]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
 8000c44:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	4b78      	ldr	r3, [pc, #480]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a77      	ldr	r2, [pc, #476]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c60:	4b75      	ldr	r3, [pc, #468]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c6c:	2360      	movs	r3, #96	; 0x60
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7c:	2307      	movs	r3, #7
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	486d      	ldr	r0, [pc, #436]	; (8000e3c <HAL_UART_MspInit+0x22c>)
 8000c88:	f000 ffb4 	bl	8001bf4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c8c:	4b6c      	ldr	r3, [pc, #432]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000c8e:	4a6d      	ldr	r2, [pc, #436]	; (8000e44 <HAL_UART_MspInit+0x234>)
 8000c90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c92:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9a:	4b69      	ldr	r3, [pc, #420]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cae:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	4b62      	ldr	r3, [pc, #392]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000cba:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cc0:	4b5f      	ldr	r3, [pc, #380]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000cc2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cc6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cce:	485c      	ldr	r0, [pc, #368]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000cd0:	f000 fb8e 	bl	80013f0 <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000cda:	f7ff ff6b 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce4:	4a56      	ldr	r2, [pc, #344]	; (8000e40 <HAL_UART_MspInit+0x230>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000cea:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000cec:	4a57      	ldr	r2, [pc, #348]	; (8000e4c <HAL_UART_MspInit+0x23c>)
 8000cee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf8:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000cfa:	2240      	movs	r2, #64	; 0x40
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0c:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d12:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d18:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d1e:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d24:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d26:	4b48      	ldr	r3, [pc, #288]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d2c:	4846      	ldr	r0, [pc, #280]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d2e:	f000 fb5f 	bl	80013f0 <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8000d38:	f7ff ff3c 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a42      	ldr	r2, [pc, #264]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
 8000d42:	4a41      	ldr	r2, [pc, #260]	; (8000e48 <HAL_UART_MspInit+0x238>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2026      	movs	r0, #38	; 0x26
 8000d4e:	f000 fb18 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d52:	2026      	movs	r0, #38	; 0x26
 8000d54:	f000 fb31 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d58:	e068      	b.n	8000e2c <HAL_UART_MspInit+0x21c>
  else if(huart->Instance==USART3)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a3c      	ldr	r2, [pc, #240]	; (8000e50 <HAL_UART_MspInit+0x240>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d163      	bne.n	8000e2c <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a2b      	ldr	r2, [pc, #172]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <HAL_UART_MspInit+0x228>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dae:	2307      	movs	r3, #7
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4820      	ldr	r0, [pc, #128]	; (8000e3c <HAL_UART_MspInit+0x22c>)
 8000dba:	f000 ff1b 	bl	8001bf4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <HAL_UART_MspInit+0x248>)
 8000dc2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000dce:	2240      	movs	r2, #64	; 0x40
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000df4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000df8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000e02:	f000 faf5 	bl	80013f0 <HAL_DMA_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8000e0c:	f7ff fed2 	bl	8000bb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_UART_MspInit+0x244>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2027      	movs	r0, #39	; 0x27
 8000e22:	f000 faae 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e26:	2027      	movs	r0, #39	; 0x27
 8000e28:	f000 fac7 	bl	80013ba <HAL_NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020c00 	.word	0x40020c00
 8000e40:	20000134 	.word	0x20000134
 8000e44:	40026088 	.word	0x40026088
 8000e48:	20000194 	.word	0x20000194
 8000e4c:	400260a0 	.word	0x400260a0
 8000e50:	40004800 	.word	0x40004800
 8000e54:	200001f4 	.word	0x200001f4
 8000e58:	40026058 	.word	0x40026058

08000e5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0a0      	sub	sp, #128	; 0x80
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	225c      	movs	r2, #92	; 0x5c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 f909 	bl	8005094 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e8a:	d14e      	bne.n	8000f2a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e92:	2300      	movs	r3, #0
 8000e94:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fac4 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000ea6:	f7ff fe85 	bl	8000bb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ec6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4815      	ldr	r0, [pc, #84]	; (8000f38 <HAL_PCD_MspInit+0xdc>)
 8000ee4:	f000 fe86 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000efa:	4619      	mov	r1, r3
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <HAL_PCD_MspInit+0xdc>)
 8000efe:	f000 fe79 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_PCD_MspInit+0xd8>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3780      	adds	r7, #128	; 0x80
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000f40:	f3bf 8f4f 	dsb	sy
}
 8000f44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <__NVIC_SystemReset+0x24>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f4e:	4904      	ldr	r1, [pc, #16]	; (8000f60 <__NVIC_SystemReset+0x24>)
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_SystemReset+0x28>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f56:	f3bf 8f4f 	dsb	sy
}
 8000f5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <__NVIC_SystemReset+0x20>
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	05fa0004 	.word	0x05fa0004

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f8c6 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	NVIC_SystemReset();
 8000fc0:	f7ff ffbc 	bl	8000f3c <__NVIC_SystemReset>

08000fc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <DMA1_Stream3_IRQHandler+0x10>)
 8000fca:	f000 fba9 	bl	8001720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001f4 	.word	0x200001f4

08000fd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fde:	f000 fb9f 	bl	8001720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000134 	.word	0x20000134

08000fec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <DMA1_Stream6_IRQHandler+0x10>)
 8000ff2:	f000 fb95 	bl	8001720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000194 	.word	0x20000194

08001000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USART2_IRQHandler+0x10>)
 8001006:	f002 fb79 	bl	80036fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000a4 	.word	0x200000a4

08001014 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <USART3_IRQHandler+0x10>)
 800101a:	f002 fb6f 	bl	80036fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000ec 	.word	0x200000ec

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001050:	f7ff ffea 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800107a:	f004 f819 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fb6f 	bl	8000760 <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001090:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 8001094:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001098:	20006ab8 	.word	0x20006ab8

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_Init+0x40>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_Init+0x40>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x40>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f94f 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fd74 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f967 	bl	80013d6 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	f000 f92f 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000014 	.word	0x20000014
 8001140:	20000010 	.word	0x20000010

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000014 	.word	0x20000014
 8001168:	2000697c 	.word	0x2000697c

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000697c 	.word	0x2000697c

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000014 	.word	0x20000014

080011cc <__NVIC_SetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff feb6 	bl	800116c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e099      	b.n	8001540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142c:	e00f      	b.n	800144e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142e:	f7ff fe9d 	bl	800116c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b05      	cmp	r3, #5
 800143a:	d908      	bls.n	800144e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2220      	movs	r2, #32
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2203      	movs	r2, #3
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e078      	b.n	8001540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e8      	bne.n	800142e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_DMA_Init+0x158>)
 8001468:	4013      	ands	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800147a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4313      	orrs	r3, r2
 800149e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d107      	bne.n	80014b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4313      	orrs	r3, r2
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f023 0307 	bic.w	r3, r3, #7
 80014ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d117      	bne.n	8001512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00e      	beq.n	8001512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fb01 	bl	8001afc <DMA_CheckFifoParam>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800150e:	2301      	movs	r3, #1
 8001510:	e016      	b.n	8001540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fab8 	bl	8001a90 <DMA_CalcBaseAndBitshift>
 8001520:	4603      	mov	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	223f      	movs	r2, #63	; 0x3f
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	f010803f 	.word	0xf010803f

0800154c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_DMA_Start_IT+0x26>
 800156e:	2302      	movs	r3, #2
 8001570:	e040      	b.n	80015f4 <HAL_DMA_Start_IT+0xa8>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d12f      	bne.n	80015e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 fa4a 	bl	8001a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	223f      	movs	r2, #63	; 0x3f
 80015a6:	409a      	lsls	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0216 	orr.w	r2, r2, #22
 80015ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0208 	orr.w	r2, r2, #8
 80015d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e005      	b.n	80015f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
 80015f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800160a:	f7ff fdaf 	bl	800116c <HAL_GetTick>
 800160e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d008      	beq.n	800162e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e052      	b.n	80016d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0216 	bic.w	r2, r2, #22
 800163c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800164c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d103      	bne.n	800165e <HAL_DMA_Abort+0x62>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0208 	bic.w	r2, r2, #8
 800166c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167e:	e013      	b.n	80016a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001680:	f7ff fd74 	bl	800116c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b05      	cmp	r3, #5
 800168c:	d90c      	bls.n	80016a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2220      	movs	r2, #32
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2203      	movs	r2, #3
 8001698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e015      	b.n	80016d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1e4      	bne.n	8001680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	223f      	movs	r2, #63	; 0x3f
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d004      	beq.n	80016fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00c      	b.n	8001714 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2205      	movs	r2, #5
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800172c:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <HAL_DMA_IRQHandler+0x248>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a8e      	ldr	r2, [pc, #568]	; (800196c <HAL_DMA_IRQHandler+0x24c>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0a9b      	lsrs	r3, r3, #10
 8001738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	2208      	movs	r2, #8
 800174c:	409a      	lsls	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01a      	beq.n	800178c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0204 	bic.w	r2, r2, #4
 8001772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2208      	movs	r2, #8
 800177a:	409a      	lsls	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	2201      	movs	r2, #1
 8001792:	409a      	lsls	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2201      	movs	r2, #1
 80017b0:	409a      	lsls	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f043 0202 	orr.w	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	2204      	movs	r2, #4
 80017c8:	409a      	lsls	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d012      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00b      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2204      	movs	r2, #4
 80017e6:	409a      	lsls	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f0:	f043 0204 	orr.w	r2, r3, #4
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	2210      	movs	r2, #16
 80017fe:	409a      	lsls	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d043      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d03c      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2210      	movs	r2, #16
 800181c:	409a      	lsls	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d018      	beq.n	8001862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2b00      	cmp	r3, #0
 8001844:	d024      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
 800184e:	e01f      	b.n	8001890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01b      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
 8001860:	e016      	b.n	8001890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0208 	bic.w	r2, r2, #8
 800187e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	2220      	movs	r2, #32
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 808f 	beq.w	80019c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 8087 	beq.w	80019c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	2220      	movs	r2, #32
 80018b8:	409a      	lsls	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d136      	bne.n	8001938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0216 	bic.w	r2, r2, #22
 80018d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_DMA_IRQHandler+0x1da>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0208 	bic.w	r2, r2, #8
 8001908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	223f      	movs	r2, #63	; 0x3f
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	2b00      	cmp	r3, #0
 800192c:	d07e      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
        }
        return;
 8001936:	e079      	b.n	8001a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01d      	beq.n	8001982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10d      	bne.n	8001970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	2b00      	cmp	r3, #0
 800195a:	d031      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
 8001964:	e02c      	b.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c
 800196c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d023      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
 8001980:	e01e      	b.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10f      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0210 	bic.w	r2, r2, #16
 800199e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d032      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	3301      	adds	r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d307      	bcc.n	8001a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f2      	bne.n	80019ec <HAL_DMA_IRQHandler+0x2cc>
 8001a06:	e000      	b.n	8001a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
 8001a2a:	e000      	b.n	8001a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a2c:	bf00      	nop
    }
  }
}
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b40      	cmp	r3, #64	; 0x40
 8001a60:	d108      	bne.n	8001a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a72:	e007      	b.n	8001a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	60da      	str	r2, [r3, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3b10      	subs	r3, #16
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <DMA_CalcBaseAndBitshift+0x64>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aaa:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <DMA_CalcBaseAndBitshift+0x68>)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d909      	bls.n	8001ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	1d1a      	adds	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad0:	e007      	b.n	8001ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	aaaaaaab 	.word	0xaaaaaaab
 8001af8:	08005128 	.word	0x08005128

08001afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11f      	bne.n	8001b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d856      	bhi.n	8001bca <DMA_CheckFifoParam+0xce>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <DMA_CheckFifoParam+0x28>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b47 	.word	0x08001b47
 8001b2c:	08001b35 	.word	0x08001b35
 8001b30:	08001bcb 	.word	0x08001bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d046      	beq.n	8001bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b44:	e043      	b.n	8001bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b4e:	d140      	bne.n	8001bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b54:	e03d      	b.n	8001bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b5e:	d121      	bne.n	8001ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d837      	bhi.n	8001bd6 <DMA_CheckFifoParam+0xda>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <DMA_CheckFifoParam+0x70>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b83 	.word	0x08001b83
 8001b74:	08001b7d 	.word	0x08001b7d
 8001b78:	08001b95 	.word	0x08001b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b80:	e030      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d025      	beq.n	8001bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b92:	e022      	b.n	8001bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b9c:	d11f      	bne.n	8001bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ba2:	e01c      	b.n	8001bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d903      	bls.n	8001bb2 <DMA_CheckFifoParam+0xb6>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d003      	beq.n	8001bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bb0:	e018      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb6:	e015      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00e      	beq.n	8001be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc8:	e00b      	b.n	8001be2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bca:	bf00      	nop
 8001bcc:	e00a      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e008      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e006      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e004      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e002      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bde:	bf00      	nop
 8001be0:	e000      	b.n	8001be4 <DMA_CheckFifoParam+0xe8>
      break;
 8001be2:	bf00      	nop
    }
  } 
  
  return status; 
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e165      	b.n	8001edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8154 	bne.w	8001ed6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d005      	beq.n	8001c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d017      	beq.n	8001ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80ae 	beq.w	8001ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a5c      	ldr	r2, [pc, #368]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d96:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_GPIO_Init+0x304>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x308>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x30c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x216>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x310>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x212>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x20e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x20a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x206>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x202>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00c      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001df6:	2307      	movs	r3, #7
 8001df8:	e00a      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x21c>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed0:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f67f ae96 	bls.w	8001c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40013c00 	.word	0x40013c00

08001f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e001      	b.n	8001f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f68:	e003      	b.n	8001f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af02      	add	r7, sp, #8
 8001f84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e108      	b.n	80021a2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe ff56 	bl	8000e5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fd3c 	bl	8004a48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7c1a      	ldrb	r2, [r3, #16]
 8001fd8:	f88d 2000 	strb.w	r2, [sp]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe0:	f002 fcce 	bl	8004980 <USB_CoreInit>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0d5      	b.n	80021a2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 fd34 	bl	8004a6a <USB_SetCurrentMode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0c6      	b.n	80021a2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e04a      	b.n	80020b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3315      	adds	r3, #21
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	3314      	adds	r3, #20
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	b298      	uxth	r0, r3
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	332e      	adds	r3, #46	; 0x2e
 8002056:	4602      	mov	r2, r0
 8002058:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3318      	adds	r3, #24
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	331c      	adds	r3, #28
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3320      	adds	r3, #32
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3324      	adds	r3, #36	; 0x24
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3301      	adds	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	791b      	ldrb	r3, [r3, #4]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3af      	bcc.n	800201a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e044      	b.n	800214a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f203 2355 	addw	r3, r3, #597	; 0x255
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	3301      	adds	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3b5      	bcc.n	80020c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7c1a      	ldrb	r2, [r3, #16]
 800215c:	f88d 2000 	strb.w	r2, [sp]
 8002160:	3304      	adds	r3, #4
 8002162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002164:	f002 fcce 	bl	8004b04 <USB_DevInit>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e013      	b.n	80021a2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7b1b      	ldrb	r3, [r3, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f80a 	bl	80021aa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f002 fe89 	bl	8004eb2 <USB_DevDisconnect>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	f043 0303 	orr.w	r3, r3, #3
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0cc      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d90c      	bls.n	8002230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	494d      	ldr	r1, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d044      	beq.n	8002314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e067      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4934      	ldr	r1, [pc, #208]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7fe ff42 	bl	800116c <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7fe ff3e 	bl	800116c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e04f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d20c      	bcs.n	800233c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e032      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4916      	ldr	r1, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237a:	f000 fb7f 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 800237e:	4602      	mov	r2, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	490a      	ldr	r1, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	5ccb      	ldrb	r3, [r1, r3]
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fea2 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023c00 	.word	0x40023c00
 80023b0:	40023800 	.word	0x40023800
 80023b4:	08005110 	.word	0x08005110
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	20000010 	.word	0x20000010

080023c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	2000000c 	.word	0x2000000c

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023dc:	f7ff fff0 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0a9b      	lsrs	r3, r3, #10
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08005120 	.word	0x08005120

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002404:	f7ff ffdc 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0b5b      	lsrs	r3, r3, #13
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4903      	ldr	r1, [pc, #12]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	08005120 	.word	0x08005120

08002428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d010      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002466:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	496c      	ldr	r1, [pc, #432]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800247e:	2301      	movs	r3, #1
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d010      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800248e:	4b64      	ldr	r3, [pc, #400]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002494:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	4960      	ldr	r1, [pc, #384]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024ac:	2301      	movs	r3, #1
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d017      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4955      	ldr	r1, [pc, #340]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024da:	d101      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80024dc:	2301      	movs	r3, #1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80024e8:	2301      	movs	r3, #1
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d017      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f8:	4b49      	ldr	r3, [pc, #292]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	4946      	ldr	r1, [pc, #280]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002516:	d101      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002518:	2301      	movs	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002524:	2301      	movs	r3, #1
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 808a 	beq.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a38      	ldr	r2, [pc, #224]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a33      	ldr	r2, [pc, #204]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800255e:	f7fe fe05 	bl	800116c <HAL_GetTick>
 8002562:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe fe01 	bl	800116c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e278      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02f      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d028      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025aa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d114      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fdcf 	bl	800116c <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fdcb 	bl	800116c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e240      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ee      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002600:	d114      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002616:	4902      	ldr	r1, [pc, #8]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
 800261c:	e00c      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40007000 	.word	0x40007000
 8002628:	42470e40 	.word	0x42470e40
 800262c:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002636:	6093      	str	r3, [r2, #8]
 8002638:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800263a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	4944      	ldr	r1, [pc, #272]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002646:	4313      	orrs	r3, r2
 8002648:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800265c:	4b3f      	ldr	r3, [pc, #252]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800265e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4937      	ldr	r1, [pc, #220]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002694:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	492e      	ldr	r1, [pc, #184]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d011      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	4926      	ldr	r1, [pc, #152]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ce:	d101      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80026d0:	2301      	movs	r3, #1
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	491a      	ldr	r1, [pc, #104]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d011      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002708:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	4911      	ldr	r1, [pc, #68]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002720:	d101      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002722:	2301      	movs	r3, #1
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d005      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002734:	f040 80ff 	bne.w	8002936 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800273e:	f7fe fd15 	bl	800116c <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002744:	e00e      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002746:	f7fe fd11 	bl	800116c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d907      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e188      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002758:	40023800 	.word	0x40023800
 800275c:	424711e0 	.word	0x424711e0
 8002760:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002764:	4b7e      	ldr	r3, [pc, #504]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1ea      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800278c:	2b00      	cmp	r3, #0
 800278e:	d028      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d124      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002798:	4b71      	ldr	r3, [pc, #452]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800279a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	3301      	adds	r3, #1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027aa:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b0:	0e1b      	lsrs	r3, r3, #24
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	019b      	lsls	r3, r3, #6
 80027c2:	431a      	orrs	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	3b01      	subs	r3, #1
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	431a      	orrs	r2, r3
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	4961      	ldr	r1, [pc, #388]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002800:	2b00      	cmp	r3, #0
 8002802:	d035      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280c:	d130      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002820:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002826:	0f1b      	lsrs	r3, r3, #28
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	019b      	lsls	r3, r3, #6
 8002838:	431a      	orrs	r2, r3
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	431a      	orrs	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	071b      	lsls	r3, r3, #28
 8002850:	4943      	ldr	r1, [pc, #268]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800285a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800285e:	f023 021f 	bic.w	r2, r3, #31
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	493d      	ldr	r1, [pc, #244]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d029      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002884:	d124      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800289a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289e:	0f1b      	lsrs	r3, r3, #28
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	019b      	lsls	r3, r3, #6
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	3b01      	subs	r3, #1
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	431a      	orrs	r2, r3
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	431a      	orrs	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	071b      	lsls	r3, r3, #28
 80028c8:	4925      	ldr	r1, [pc, #148]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	071b      	lsls	r3, r3, #28
 8002902:	4917      	ldr	r1, [pc, #92]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe fc2c 	bl	800116c <HAL_GetTick>
 8002914:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002918:	f7fe fc28 	bl	800116c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e09f      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 8095 	bne.w	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fc12 	bl	800116c <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800294a:	e00f      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800294c:	f7fe fc0e 	bl	800116c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d908      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e085      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	42470068 	.word	0x42470068
 8002968:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002978:	d0e8      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002996:	2b00      	cmp	r3, #0
 8002998:	d02b      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d127      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	061b      	lsls	r3, r3, #24
 80029d0:	4928      	ldr	r1, [pc, #160]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	3b01      	subs	r3, #1
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	4922      	ldr	r1, [pc, #136]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01d      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a06:	d118      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	0e1b      	lsrs	r3, r3, #24
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	4910      	ldr	r1, [pc, #64]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fb94 	bl	800116c <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a48:	f7fe fb90 	bl	800116c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e007      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a66:	d1ef      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3730      	adds	r7, #48	; 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	42470070 	.word	0x42470070

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b0ae      	sub	sp, #184	; 0xb8
 8002a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa2:	4bcb      	ldr	r3, [pc, #812]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	f200 8206 	bhi.w	8002ebc <HAL_RCC_GetSysClockFreq+0x440>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002ebd 	.word	0x08002ebd
 8002ac0:	08002ebd 	.word	0x08002ebd
 8002ac4:	08002ebd 	.word	0x08002ebd
 8002ac8:	08002af5 	.word	0x08002af5
 8002acc:	08002ebd 	.word	0x08002ebd
 8002ad0:	08002ebd 	.word	0x08002ebd
 8002ad4:	08002ebd 	.word	0x08002ebd
 8002ad8:	08002afd 	.word	0x08002afd
 8002adc:	08002ebd 	.word	0x08002ebd
 8002ae0:	08002ebd 	.word	0x08002ebd
 8002ae4:	08002ebd 	.word	0x08002ebd
 8002ae8:	08002ced 	.word	0x08002ced
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4bb9      	ldr	r3, [pc, #740]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002af2:	e1e7      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af4:	4bb8      	ldr	r3, [pc, #736]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002afa:	e1e3      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4bb4      	ldr	r3, [pc, #720]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b08:	4bb1      	ldr	r3, [pc, #708]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d071      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b14:	4bae      	ldr	r3, [pc, #696]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	0159      	lsls	r1, r3, #5
 8002b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4c:	0150      	lsls	r0, r2, #5
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4621      	mov	r1, r4
 8002b54:	1a51      	subs	r1, r2, r1
 8002b56:	6439      	str	r1, [r7, #64]	; 0x40
 8002b58:	4629      	mov	r1, r5
 8002b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	018b      	lsls	r3, r1, #6
 8002b70:	4641      	mov	r1, r8
 8002b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b76:	4641      	mov	r1, r8
 8002b78:	018a      	lsls	r2, r1, #6
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	1a51      	subs	r1, r2, r1
 8002b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b80:	4649      	mov	r1, r9
 8002b82:	eb63 0301 	sbc.w	r3, r3, r1
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b94:	4649      	mov	r1, r9
 8002b96:	00cb      	lsls	r3, r1, #3
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	00ca      	lsls	r2, r1, #3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4622      	mov	r2, r4
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
 8002bae:	462b      	mov	r3, r5
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	eb42 0303 	adc.w	r3, r2, r3
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	024b      	lsls	r3, r1, #9
 8002bc8:	4621      	mov	r1, r4
 8002bca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bce:	4621      	mov	r1, r4
 8002bd0:	024a      	lsls	r2, r1, #9
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002be4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002be8:	f7fd fb0c 	bl	8000204 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bf6:	e067      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4b75      	ldr	r3, [pc, #468]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c12:	2300      	movs	r3, #0
 8002c14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2c:	0150      	lsls	r0, r2, #5
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4621      	mov	r1, r4
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	018b      	lsls	r3, r1, #6
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c56:	4641      	mov	r1, r8
 8002c58:	018a      	lsls	r2, r1, #6
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c60:	4649      	mov	r1, r9
 8002c62:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c7a:	4692      	mov	sl, r2
 8002c7c:	469b      	mov	fp, r3
 8002c7e:	4623      	mov	r3, r4
 8002c80:	eb1a 0303 	adds.w	r3, sl, r3
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	462b      	mov	r3, r5
 8002c88:	eb4b 0303 	adc.w	r3, fp, r3
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8002cb4:	677a      	str	r2, [r7, #116]	; 0x74
 8002cb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cba:	f7fd faa3 	bl	8000204 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cea:	e0eb      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf8:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d06b      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d16:	663b      	str	r3, [r7, #96]	; 0x60
 8002d18:	2300      	movs	r3, #0
 8002d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d20:	4622      	mov	r2, r4
 8002d22:	462b      	mov	r3, r5
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4621      	mov	r1, r4
 8002d3a:	1a51      	subs	r1, r2, r1
 8002d3c:	61b9      	str	r1, [r7, #24]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	eb63 0301 	sbc.w	r3, r3, r1
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d52:	4659      	mov	r1, fp
 8002d54:	018b      	lsls	r3, r1, #6
 8002d56:	4651      	mov	r1, sl
 8002d58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	018a      	lsls	r2, r1, #6
 8002d60:	4651      	mov	r1, sl
 8002d62:	ebb2 0801 	subs.w	r8, r2, r1
 8002d66:	4659      	mov	r1, fp
 8002d68:	eb63 0901 	sbc.w	r9, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d80:	4690      	mov	r8, r2
 8002d82:	4699      	mov	r9, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	eb18 0303 	adds.w	r3, r8, r3
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	eb49 0303 	adc.w	r3, r9, r3
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002da0:	4629      	mov	r1, r5
 8002da2:	024b      	lsls	r3, r1, #9
 8002da4:	4621      	mov	r1, r4
 8002da6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002daa:	4621      	mov	r1, r4
 8002dac:	024a      	lsls	r2, r1, #9
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002db6:	2200      	movs	r2, #0
 8002db8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dc0:	f7fd fa20 	bl	8000204 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dce:	e065      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x420>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	4611      	mov	r1, r2
 8002de8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dec:	653b      	str	r3, [r7, #80]	; 0x50
 8002dee:	2300      	movs	r3, #0
 8002df0:	657b      	str	r3, [r7, #84]	; 0x54
 8002df2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002df6:	4642      	mov	r2, r8
 8002df8:	464b      	mov	r3, r9
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4641      	mov	r1, r8
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	4649      	mov	r1, r9
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e28:	4659      	mov	r1, fp
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4651      	mov	r1, sl
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	4651      	mov	r1, sl
 8002e38:	1a54      	subs	r4, r2, r1
 8002e3a:	4659      	mov	r1, fp
 8002e3c:	eb63 0501 	sbc.w	r5, r3, r1
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e84:	2200      	movs	r2, #0
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e8e:	f7fd f9b9 	bl	8000204 <__aeabi_uldivmod>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4613      	mov	r3, r2
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0f1b      	lsrs	r3, r3, #28
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eba:	e003      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	37b8      	adds	r7, #184	; 0xb8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400

08002edc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e28d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8083 	beq.w	8003002 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002efc:	4b94      	ldr	r3, [pc, #592]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d019      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f08:	4b91      	ldr	r3, [pc, #580]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f14:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b8b      	ldr	r3, [pc, #556]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b88      	ldr	r3, [pc, #544]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b84      	ldr	r3, [pc, #528]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05b      	beq.n	8003000 <HAL_RCC_OscConfig+0x124>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d157      	bne.n	8003000 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e25a      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCC_OscConfig+0x90>
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7b      	ldr	r2, [pc, #492]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xb4>
 8002f76:	4b76      	ldr	r3, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a75      	ldr	r2, [pc, #468]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a72      	ldr	r2, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f90:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b6c      	ldr	r3, [pc, #432]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6b      	ldr	r2, [pc, #428]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f8dc 	bl	800116c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe f8d8 	bl	800116c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e21f      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xdc>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f8c8 	bl	800116c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe f8c4 	bl	800116c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e20b      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x104>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06f      	beq.n	80030ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800300e:	4b50      	ldr	r3, [pc, #320]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d017      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800301a:	4b4d      	ldr	r3, [pc, #308]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d11c      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d116      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	4b41      	ldr	r3, [pc, #260]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1d3      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4937      	ldr	r1, [pc, #220]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	e03a      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_RCC_OscConfig+0x278>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe f871 	bl	800116c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe f86d 	bl	800116c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1b4      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4925      	ldr	r1, [pc, #148]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e015      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_RCC_OscConfig+0x278>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe f850 	bl	800116c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d0:	f7fe f84c 	bl	800116c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e193      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d036      	beq.n	8003168 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fe f830 	bl	800116c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe f82c 	bl	800116c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e173      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_OscConfig+0x274>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x234>
 800312e:	e01b      	b.n	8003168 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe f819 	bl	800116c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	e00e      	b.n	800315c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313e:	f7fe f815 	bl	800116c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d907      	bls.n	800315c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e15c      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003150:	40023800 	.word	0x40023800
 8003154:	42470000 	.word	0x42470000
 8003158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8097 	beq.w	80032a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b83      	ldr	r3, [pc, #524]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10f      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b7f      	ldr	r3, [pc, #508]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a7e      	ldr	r2, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b7c      	ldr	r3, [pc, #496]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b79      	ldr	r3, [pc, #484]	; (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a75      	ldr	r2, [pc, #468]	; (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fd ffd5 	bl	800116c <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fd ffd1 	bl	800116c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e118      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x31e>
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	; 0x70
 80031f8:	e01c      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x340>
 8003202:	4b61      	ldr	r3, [pc, #388]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a60      	ldr	r2, [pc, #384]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a5d      	ldr	r2, [pc, #372]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 800321c:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a59      	ldr	r2, [pc, #356]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	4b57      	ldr	r3, [pc, #348]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a56      	ldr	r2, [pc, #344]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f023 0304 	bic.w	r3, r3, #4
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fd ff96 	bl	800116c <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fd ff92 	bl	800116c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0d7      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ee      	beq.n	8003244 <HAL_RCC_OscConfig+0x368>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd ff80 	bl	800116c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fd ff7c 	bl	800116c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0c1      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ee      	bne.n	8003270 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003298:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4a3a      	ldr	r2, [pc, #232]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80ad 	beq.w	8003408 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d060      	beq.n	800337c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d145      	bne.n	800334e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <HAL_RCC_OscConfig+0x4b4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fd ff50 	bl	800116c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd ff4c 	bl	800116c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e093      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	019b      	lsls	r3, r3, #6
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	071b      	lsls	r3, r3, #28
 800331a:	491b      	ldr	r1, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fd ff21 	bl	800116c <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332e:	f7fd ff1d 	bl	800116c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e064      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x452>
 800334c:	e05c      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fd ff0a 	bl	800116c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fd ff06 	bl	800116c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x480>
 800337a:	e045      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e040      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
 8003390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <HAL_RCC_OscConfig+0x538>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d030      	beq.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d129      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d122      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d119      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d10f      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e042      	b.n	80034b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fbe6 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	; 0x24
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f001 f81b 	bl	8004498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d175      	bne.n	80035c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Transmit+0x2c>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e06e      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2221      	movs	r2, #33	; 0x21
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f6:	f7fd fe39 	bl	800116c <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352c:	e02e      	b.n	800358c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fcf4 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e03a      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3302      	adds	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e007      	b.n	800357e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fcc0 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e006      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	; 0x30
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d156      	bne.n	8003698 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_UART_Transmit_DMA+0x26>
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e04f      	b.n	800369a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2221      	movs	r2, #33	; 0x21
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <HAL_UART_Transmit_DMA+0xd4>)
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <HAL_UART_Transmit_DMA+0xd8>)
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <HAL_UART_Transmit_DMA+0xdc>)
 8003630:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	2200      	movs	r2, #0
 8003638:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	6819      	ldr	r1, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3304      	adds	r3, #4
 800364e:	461a      	mov	r2, r3
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	f7fd ff7b 	bl	800154c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800365e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3314      	adds	r3, #20
 8003666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	617b      	str	r3, [r7, #20]
   return(result);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3314      	adds	r3, #20
 800367e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003680:	627a      	str	r2, [r7, #36]	; 0x24
 8003682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6a39      	ldr	r1, [r7, #32]
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	61fb      	str	r3, [r7, #28]
   return(result);
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3730      	adds	r7, #48	; 0x30
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08003c75 	.word	0x08003c75
 80036a8:	08003d0f 	.word	0x08003d0f
 80036ac:	08003e93 	.word	0x08003e93

080036b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d112      	bne.n	80036f0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_Receive_DMA+0x26>
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00b      	b.n	80036f2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	461a      	mov	r2, r3
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fc76 	bl	8003fd8 <UART_Start_Receive_DMA>
 80036ec:	4603      	mov	r3, r0
 80036ee:	e000      	b.n	80036f2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0ba      	sub	sp, #232	; 0xe8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800373a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_UART_IRQHandler+0x66>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fddd 	bl	800431a <UART_Receive_IT>
      return;
 8003760:	e25b      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80de 	beq.w	8003928 <HAL_UART_IRQHandler+0x22c>
 800376c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80d1 	beq.w	8003928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_UART_IRQHandler+0xae>
 8003792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0xd2>
 80037b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_UART_IRQHandler+0xf6>
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d011      	beq.n	8003822 <HAL_UART_IRQHandler+0x126>
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f043 0208 	orr.w	r2, r3, #8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 81f2 	beq.w	8003c10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_UART_IRQHandler+0x14e>
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fd68 	bl	800431a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_UART_IRQHandler+0x17a>
 800386e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04f      	beq.n	8003916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fc70 	bl	800415c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d141      	bne.n	800390e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1d9      	bne.n	800388a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d013      	beq.n	8003906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	4a7e      	ldr	r2, [pc, #504]	; (8003adc <HAL_UART_IRQHandler+0x3e0>)
 80038e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd fef6 	bl	80016dc <HAL_DMA_Abort_IT>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003900:	4610      	mov	r0, r2
 8003902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e00e      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f99e 	bl	8003c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e00a      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f99a 	bl	8003c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	e006      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f996 	bl	8003c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003922:	e175      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	bf00      	nop
    return;
 8003926:	e173      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 814f 	bne.w	8003bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8148 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8141 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	f040 80b6 	bne.w	8003ae0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8145 	beq.w	8003c14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800398e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003992:	429a      	cmp	r2, r3
 8003994:	f080 813e 	bcs.w	8003c14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800399e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	f000 8088 	beq.w	8003abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1d9      	bne.n	80039ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e1      	bne.n	80039fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003aa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fd9f 	bl	80015fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f8c1 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ada:	e09b      	b.n	8003c14 <HAL_UART_IRQHandler+0x518>
 8003adc:	08004223 	.word	0x08004223
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 808e 	beq.w	8003c18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8089 	beq.w	8003c18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b2a:	647a      	str	r2, [r7, #68]	; 0x44
 8003b2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e3      	bne.n	8003b06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3314      	adds	r3, #20
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b62:	633a      	str	r2, [r7, #48]	; 0x30
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e3      	bne.n	8003b3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0310 	bic.w	r3, r3, #16
 8003b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ba8:	61fa      	str	r2, [r7, #28]
 8003baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e3      	bne.n	8003b84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f847 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bce:	e023      	b.n	8003c18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x4f4>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fb2e 	bl	800424a <UART_Transmit_IT>
    return;
 8003bee:	e014      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00e      	beq.n	8003c1a <HAL_UART_IRQHandler+0x51e>
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fb6e 	bl	80042ea <UART_EndTransmit_IT>
    return;
 8003c0e:	e004      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c10:	bf00      	nop
 8003c12:	e002      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c18:	bf00      	nop
  }
}
 8003c1a:	37e8      	adds	r7, #232	; 0xe8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b090      	sub	sp, #64	; 0x40
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d137      	bne.n	8003d00 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	2200      	movs	r2, #0
 8003c94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb6:	633a      	str	r2, [r7, #48]	; 0x30
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cea:	61fa      	str	r2, [r7, #28]
 8003cec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	69b9      	ldr	r1, [r7, #24]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cfe:	e002      	b.n	8003d06 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003d00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d02:	f7fc fcfb 	bl	80006fc <HAL_UART_TxCpltCallback>
}
 8003d06:	bf00      	nop
 8003d08:	3740      	adds	r7, #64	; 0x40
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff ff7f 	bl	8003c20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b09c      	sub	sp, #112	; 0x70
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d172      	bne.n	8003e2c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	2200      	movs	r2, #0
 8003d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	667b      	str	r3, [r7, #100]	; 0x64
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3314      	adds	r3, #20
 8003d9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003da0:	647a      	str	r2, [r7, #68]	; 0x44
 8003da2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e5      	bne.n	8003d80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dca:	663b      	str	r3, [r7, #96]	; 0x60
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dd4:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d119      	bne.n	8003e2c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e18:	61fa      	str	r2, [r7, #28]
 8003e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	617b      	str	r3, [r7, #20]
   return(result);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	2200      	movs	r2, #0
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d106      	bne.n	8003e48 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e42:	f7ff ff0b 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e46:	e002      	b.n	8003e4e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e4a:	f7fc fc27 	bl	800069c <HAL_UART_RxCpltCallback>
}
 8003e4e:	bf00      	nop
 8003e50:	3770      	adds	r7, #112	; 0x70
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d108      	bne.n	8003e84 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff feed 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e82:	e002      	b.n	8003e8a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff fed5 	bl	8003c34 <HAL_UART_RxHalfCpltCallback>
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b80      	cmp	r3, #128	; 0x80
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b21      	cmp	r3, #33	; 0x21
 8003ec4:	d108      	bne.n	8003ed8 <UART_DMAError+0x46>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ed2:	68b8      	ldr	r0, [r7, #8]
 8003ed4:	f000 f91a 	bl	800410c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b22      	cmp	r3, #34	; 0x22
 8003ef8:	d108      	bne.n	8003f0c <UART_DMAError+0x7a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2200      	movs	r2, #0
 8003f04:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f06:	68b8      	ldr	r0, [r7, #8]
 8003f08:	f000 f928 	bl	800415c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	f043 0210 	orr.w	r2, r3, #16
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f18:	68b8      	ldr	r0, [r7, #8]
 8003f1a:	f7ff fe95 	bl	8003c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f36:	e03b      	b.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f3e:	d037      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7fd f914 	bl	800116c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	6a3a      	ldr	r2, [r7, #32]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e03a      	b.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d023      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d020      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d01d      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d116      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f8df 	bl	800415c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e00f      	b.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d0b4      	beq.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b098      	sub	sp, #96	; 0x60
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2222      	movs	r2, #34	; 0x22
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	4a3e      	ldr	r2, [pc, #248]	; (8004100 <UART_Start_Receive_DMA+0x128>)
 8004006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <UART_Start_Receive_DMA+0x12c>)
 800400e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <UART_Start_Receive_DMA+0x130>)
 8004016:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401c:	2200      	movs	r2, #0
 800401e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004020:	f107 0308 	add.w	r3, r7, #8
 8004024:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	f7fd fa88 	bl	800154c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d019      	beq.n	800408e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	65bb      	str	r3, [r7, #88]	; 0x58
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800407a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800407c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e5      	bne.n	800405a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3314      	adds	r3, #20
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	657b      	str	r3, [r7, #84]	; 0x54
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3314      	adds	r3, #20
 80040ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e5      	bne.n	800408e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	617b      	str	r3, [r7, #20]
   return(result);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d8:	653b      	str	r3, [r7, #80]	; 0x50
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040e2:	627a      	str	r2, [r7, #36]	; 0x24
 80040e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6a39      	ldr	r1, [r7, #32]
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e5      	bne.n	80040c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3760      	adds	r7, #96	; 0x60
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	08003d2b 	.word	0x08003d2b
 8004104:	08003e57 	.word	0x08003e57
 8004108:	08003e93 	.word	0x08003e93

0800410c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	60bb      	str	r3, [r7, #8]
   return(result);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	61ba      	str	r2, [r7, #24]
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6979      	ldr	r1, [r7, #20]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004150:	bf00      	nop
 8004152:	3724      	adds	r7, #36	; 0x24
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b095      	sub	sp, #84	; 0x54
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800417a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004184:	643a      	str	r2, [r7, #64]	; 0x40
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800418a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d119      	bne.n	8004208 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f4:	61ba      	str	r2, [r7, #24]
 80041f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6979      	ldr	r1, [r7, #20]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	613b      	str	r3, [r7, #16]
   return(result);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e5      	bne.n	80041d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004216:	bf00      	nop
 8004218:	3754      	adds	r7, #84	; 0x54
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fd03 	bl	8003c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b21      	cmp	r3, #33	; 0x21
 800425c:	d13e      	bne.n	80042dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d114      	bne.n	8004292 <UART_Transmit_IT+0x48>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d110      	bne.n	8004292 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004284:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]
 8004290:	e008      	b.n	80042a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6211      	str	r1, [r2, #32]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4619      	mov	r1, r3
 80042b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004300:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc f9f6 	bl	80006fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b08c      	sub	sp, #48	; 0x30
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b22      	cmp	r3, #34	; 0x22
 800432c:	f040 80ae 	bne.w	800448c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d117      	bne.n	800436a <UART_Receive_IT+0x50>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d113      	bne.n	800436a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004358:	b29a      	uxth	r2, r3
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
 8004368:	e026      	b.n	80043b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d007      	beq.n	800438e <UART_Receive_IT+0x74>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <UART_Receive_IT+0x82>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e008      	b.n	80043ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4619      	mov	r1, r3
 80043c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d15d      	bne.n	8004488 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0220 	bic.w	r2, r2, #32
 80043da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	2b01      	cmp	r3, #1
 8004410:	d135      	bne.n	800447e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	330c      	adds	r3, #12
 800441e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	613b      	str	r3, [r7, #16]
   return(result);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f023 0310 	bic.w	r3, r3, #16
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004438:	623a      	str	r2, [r7, #32]
 800443a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	69f9      	ldr	r1, [r7, #28]
 800443e:	6a3a      	ldr	r2, [r7, #32]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	61bb      	str	r3, [r7, #24]
   return(result);
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e5      	bne.n	8004418 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b10      	cmp	r3, #16
 8004458:	d10a      	bne.n	8004470 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fbf0 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
 800447c:	e002      	b.n	8004484 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc f90c 	bl	800069c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	e002      	b.n	800448e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3730      	adds	r7, #48	; 0x30
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449c:	b0c0      	sub	sp, #256	; 0x100
 800449e:	af00      	add	r7, sp, #0
 80044a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	68d9      	ldr	r1, [r3, #12]
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	ea40 0301 	orr.w	r3, r0, r1
 80044c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f0:	f021 010c 	bic.w	r1, r1, #12
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044fe:	430b      	orrs	r3, r1
 8004500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	6999      	ldr	r1, [r3, #24]
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	ea40 0301 	orr.w	r3, r0, r1
 800451e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b8f      	ldr	r3, [pc, #572]	; (8004764 <UART_SetConfig+0x2cc>)
 8004528:	429a      	cmp	r2, r3
 800452a:	d005      	beq.n	8004538 <UART_SetConfig+0xa0>
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <UART_SetConfig+0x2d0>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d104      	bne.n	8004542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7fd ff62 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 800453c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004540:	e003      	b.n	800454a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004542:	f7fd ff49 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8004546:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004554:	f040 810c 	bne.w	8004770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455c:	2200      	movs	r2, #0
 800455e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004562:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800456a:	4622      	mov	r2, r4
 800456c:	462b      	mov	r3, r5
 800456e:	1891      	adds	r1, r2, r2
 8004570:	65b9      	str	r1, [r7, #88]	; 0x58
 8004572:	415b      	adcs	r3, r3
 8004574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800457a:	4621      	mov	r1, r4
 800457c:	eb12 0801 	adds.w	r8, r2, r1
 8004580:	4629      	mov	r1, r5
 8004582:	eb43 0901 	adc.w	r9, r3, r1
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800459a:	4690      	mov	r8, r2
 800459c:	4699      	mov	r9, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	eb18 0303 	adds.w	r3, r8, r3
 80045a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045a8:	462b      	mov	r3, r5
 80045aa:	eb49 0303 	adc.w	r3, r9, r3
 80045ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045c6:	460b      	mov	r3, r1
 80045c8:	18db      	adds	r3, r3, r3
 80045ca:	653b      	str	r3, [r7, #80]	; 0x50
 80045cc:	4613      	mov	r3, r2
 80045ce:	eb42 0303 	adc.w	r3, r2, r3
 80045d2:	657b      	str	r3, [r7, #84]	; 0x54
 80045d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045dc:	f7fb fe12 	bl	8000204 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4b61      	ldr	r3, [pc, #388]	; (800476c <UART_SetConfig+0x2d4>)
 80045e6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	011c      	lsls	r4, r3, #4
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	64b9      	str	r1, [r7, #72]	; 0x48
 8004608:	415b      	adcs	r3, r3
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004610:	4641      	mov	r1, r8
 8004612:	eb12 0a01 	adds.w	sl, r2, r1
 8004616:	4649      	mov	r1, r9
 8004618:	eb43 0b01 	adc.w	fp, r3, r1
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800462c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004630:	4692      	mov	sl, r2
 8004632:	469b      	mov	fp, r3
 8004634:	4643      	mov	r3, r8
 8004636:	eb1a 0303 	adds.w	r3, sl, r3
 800463a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463e:	464b      	mov	r3, r9
 8004640:	eb4b 0303 	adc.w	r3, fp, r3
 8004644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004654:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800465c:	460b      	mov	r3, r1
 800465e:	18db      	adds	r3, r3, r3
 8004660:	643b      	str	r3, [r7, #64]	; 0x40
 8004662:	4613      	mov	r3, r2
 8004664:	eb42 0303 	adc.w	r3, r2, r3
 8004668:	647b      	str	r3, [r7, #68]	; 0x44
 800466a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800466e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004672:	f7fb fdc7 	bl	8000204 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4611      	mov	r1, r2
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <UART_SetConfig+0x2d4>)
 800467e:	fba3 2301 	umull	r2, r3, r3, r1
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2264      	movs	r2, #100	; 0x64
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	1acb      	subs	r3, r1, r3
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004692:	4b36      	ldr	r3, [pc, #216]	; (800476c <UART_SetConfig+0x2d4>)
 8004694:	fba3 2302 	umull	r2, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a0:	441c      	add	r4, r3
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80046bc:	415b      	adcs	r3, r3
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046c4:	4641      	mov	r1, r8
 80046c6:	1851      	adds	r1, r2, r1
 80046c8:	6339      	str	r1, [r7, #48]	; 0x30
 80046ca:	4649      	mov	r1, r9
 80046cc:	414b      	adcs	r3, r1
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046dc:	4659      	mov	r1, fp
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e6:	4651      	mov	r1, sl
 80046e8:	00ca      	lsls	r2, r1, #3
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	4642      	mov	r2, r8
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046f8:	464b      	mov	r3, r9
 80046fa:	460a      	mov	r2, r1
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004710:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004718:	460b      	mov	r3, r1
 800471a:	18db      	adds	r3, r3, r3
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	4613      	mov	r3, r2
 8004720:	eb42 0303 	adc.w	r3, r2, r3
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800472a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800472e:	f7fb fd69 	bl	8000204 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <UART_SetConfig+0x2d4>)
 8004738:	fba3 1302 	umull	r1, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	2164      	movs	r1, #100	; 0x64
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	3332      	adds	r3, #50	; 0x32
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <UART_SetConfig+0x2d4>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f003 0207 	and.w	r2, r3, #7
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4422      	add	r2, r4
 800475e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004760:	e106      	b.n	8004970 <UART_SetConfig+0x4d8>
 8004762:	bf00      	nop
 8004764:	40011000 	.word	0x40011000
 8004768:	40011400 	.word	0x40011400
 800476c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004774:	2200      	movs	r2, #0
 8004776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800477a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800477e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004782:	4642      	mov	r2, r8
 8004784:	464b      	mov	r3, r9
 8004786:	1891      	adds	r1, r2, r2
 8004788:	6239      	str	r1, [r7, #32]
 800478a:	415b      	adcs	r3, r3
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
 800478e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004792:	4641      	mov	r1, r8
 8004794:	1854      	adds	r4, r2, r1
 8004796:	4649      	mov	r1, r9
 8004798:	eb43 0501 	adc.w	r5, r3, r1
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	00eb      	lsls	r3, r5, #3
 80047a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047aa:	00e2      	lsls	r2, r4, #3
 80047ac:	4614      	mov	r4, r2
 80047ae:	461d      	mov	r5, r3
 80047b0:	4643      	mov	r3, r8
 80047b2:	18e3      	adds	r3, r4, r3
 80047b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047b8:	464b      	mov	r3, r9
 80047ba:	eb45 0303 	adc.w	r3, r5, r3
 80047be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047de:	4629      	mov	r1, r5
 80047e0:	008b      	lsls	r3, r1, #2
 80047e2:	4621      	mov	r1, r4
 80047e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e8:	4621      	mov	r1, r4
 80047ea:	008a      	lsls	r2, r1, #2
 80047ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047f0:	f7fb fd08 	bl	8000204 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4b60      	ldr	r3, [pc, #384]	; (800497c <UART_SetConfig+0x4e4>)
 80047fa:	fba3 2302 	umull	r2, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	011c      	lsls	r4, r3, #4
 8004802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800480c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	1891      	adds	r1, r2, r2
 800481a:	61b9      	str	r1, [r7, #24]
 800481c:	415b      	adcs	r3, r3
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004824:	4641      	mov	r1, r8
 8004826:	1851      	adds	r1, r2, r1
 8004828:	6139      	str	r1, [r7, #16]
 800482a:	4649      	mov	r1, r9
 800482c:	414b      	adcs	r3, r1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800483c:	4659      	mov	r1, fp
 800483e:	00cb      	lsls	r3, r1, #3
 8004840:	4651      	mov	r1, sl
 8004842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004846:	4651      	mov	r1, sl
 8004848:	00ca      	lsls	r2, r1, #3
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	4603      	mov	r3, r0
 8004850:	4642      	mov	r2, r8
 8004852:	189b      	adds	r3, r3, r2
 8004854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004858:	464b      	mov	r3, r9
 800485a:	460a      	mov	r2, r1
 800485c:	eb42 0303 	adc.w	r3, r2, r3
 8004860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	67bb      	str	r3, [r7, #120]	; 0x78
 800486e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800487c:	4649      	mov	r1, r9
 800487e:	008b      	lsls	r3, r1, #2
 8004880:	4641      	mov	r1, r8
 8004882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004886:	4641      	mov	r1, r8
 8004888:	008a      	lsls	r2, r1, #2
 800488a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800488e:	f7fb fcb9 	bl	8000204 <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4611      	mov	r1, r2
 8004898:	4b38      	ldr	r3, [pc, #224]	; (800497c <UART_SetConfig+0x4e4>)
 800489a:	fba3 2301 	umull	r2, r3, r3, r1
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	2264      	movs	r2, #100	; 0x64
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	1acb      	subs	r3, r1, r3
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	3332      	adds	r3, #50	; 0x32
 80048ac:	4a33      	ldr	r2, [pc, #204]	; (800497c <UART_SetConfig+0x4e4>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b8:	441c      	add	r4, r3
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	673b      	str	r3, [r7, #112]	; 0x70
 80048c2:	677a      	str	r2, [r7, #116]	; 0x74
 80048c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	1891      	adds	r1, r2, r2
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	415b      	adcs	r3, r3
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d8:	4641      	mov	r1, r8
 80048da:	1851      	adds	r1, r2, r1
 80048dc:	6039      	str	r1, [r7, #0]
 80048de:	4649      	mov	r1, r9
 80048e0:	414b      	adcs	r3, r1
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048f0:	4659      	mov	r1, fp
 80048f2:	00cb      	lsls	r3, r1, #3
 80048f4:	4651      	mov	r1, sl
 80048f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fa:	4651      	mov	r1, sl
 80048fc:	00ca      	lsls	r2, r1, #3
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	4603      	mov	r3, r0
 8004904:	4642      	mov	r2, r8
 8004906:	189b      	adds	r3, r3, r2
 8004908:	66bb      	str	r3, [r7, #104]	; 0x68
 800490a:	464b      	mov	r3, r9
 800490c:	460a      	mov	r2, r1
 800490e:	eb42 0303 	adc.w	r3, r2, r3
 8004912:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	663b      	str	r3, [r7, #96]	; 0x60
 800491e:	667a      	str	r2, [r7, #100]	; 0x64
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800492c:	4649      	mov	r1, r9
 800492e:	008b      	lsls	r3, r1, #2
 8004930:	4641      	mov	r1, r8
 8004932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004936:	4641      	mov	r1, r8
 8004938:	008a      	lsls	r2, r1, #2
 800493a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800493e:	f7fb fc61 	bl	8000204 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <UART_SetConfig+0x4e4>)
 8004948:	fba3 1302 	umull	r1, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	2164      	movs	r1, #100	; 0x64
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	3332      	adds	r3, #50	; 0x32
 800495a:	4a08      	ldr	r2, [pc, #32]	; (800497c <UART_SetConfig+0x4e4>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4422      	add	r2, r4
 800496e:	609a      	str	r2, [r3, #8]
}
 8004970:	bf00      	nop
 8004972:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004976:	46bd      	mov	sp, r7
 8004978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800497c:	51eb851f 	.word	0x51eb851f

08004980 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004980:	b084      	sub	sp, #16
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	f107 001c 	add.w	r0, r7, #28
 800498e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004992:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004996:	2b01      	cmp	r3, #1
 8004998:	d123      	bne.n	80049e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fa9a 	bl	8004f10 <USB_CoreReset>
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e01b      	b.n	8004a1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa8e 	bl	8004f10 <USB_CoreReset>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a0c:	e005      	b.n	8004a1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a1a:	7fbb      	ldrb	r3, [r7, #30]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10b      	bne.n	8004a38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f043 0206 	orr.w	r2, r3, #6
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a44:	b004      	add	sp, #16
 8004a46:	4770      	bx	lr

08004a48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f023 0201 	bic.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d115      	bne.n	8004ab8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a98:	200a      	movs	r0, #10
 8004a9a:	f7fc fb73 	bl	8001184 <HAL_Delay>
      ms += 10U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	330a      	adds	r3, #10
 8004aa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa25 	bl	8004ef4 <USB_GetMode>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d01e      	beq.n	8004aee <USB_SetCurrentMode+0x84>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2bc7      	cmp	r3, #199	; 0xc7
 8004ab4:	d9f0      	bls.n	8004a98 <USB_SetCurrentMode+0x2e>
 8004ab6:	e01a      	b.n	8004aee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d115      	bne.n	8004aea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004aca:	200a      	movs	r0, #10
 8004acc:	f7fc fb5a 	bl	8001184 <HAL_Delay>
      ms += 10U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	330a      	adds	r3, #10
 8004ad4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa0c 	bl	8004ef4 <USB_GetMode>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <USB_SetCurrentMode+0x84>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2bc7      	cmp	r3, #199	; 0xc7
 8004ae6:	d9f0      	bls.n	8004aca <USB_SetCurrentMode+0x60>
 8004ae8:	e001      	b.n	8004aee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e005      	b.n	8004afa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2bc8      	cmp	r3, #200	; 0xc8
 8004af2:	d101      	bne.n	8004af8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b04:	b084      	sub	sp, #16
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e009      	b.n	8004b38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3340      	adds	r3, #64	; 0x40
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	3301      	adds	r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b0e      	cmp	r3, #14
 8004b3c:	d9f2      	bls.n	8004b24 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11c      	bne.n	8004b80 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b54:	f043 0302 	orr.w	r3, r3, #2
 8004b58:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e005      	b.n	8004b8c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b98:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10d      	bne.n	8004bbc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f968 	bl	8004e80 <USB_SetDevSpeed>
 8004bb0:	e008      	b.n	8004bc4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f963 	bl	8004e80 <USB_SetDevSpeed>
 8004bba:	e003      	b.n	8004bc4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bbc:	2103      	movs	r1, #3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f95e 	bl	8004e80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bc4:	2110      	movs	r1, #16
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8fa 	bl	8004dc0 <USB_FlushTxFifo>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f924 	bl	8004e24 <USB_FlushRxFifo>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	461a      	mov	r2, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	461a      	mov	r2, r3
 8004c06:	2300      	movs	r3, #0
 8004c08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e043      	b.n	8004c98 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c26:	d118      	bne.n	8004c5a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e013      	b.n	8004c6c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e008      	b.n	8004c6c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3301      	adds	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d3b5      	bcc.n	8004c10 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e043      	b.n	8004d32 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cc0:	d118      	bne.n	8004cf4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e013      	b.n	8004d06 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	461a      	mov	r2, r3
 8004cec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e008      	b.n	8004d06 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	461a      	mov	r2, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d36:	461a      	mov	r2, r3
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d3b5      	bcc.n	8004caa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f043 0210 	orr.w	r2, r3, #16
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <USB_DevInit+0x2b8>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f043 0208 	orr.w	r2, r3, #8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d107      	bne.n	8004dac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	803c3800 	.word	0x803c3800

08004dc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004dda:	d901      	bls.n	8004de0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e01b      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	daf2      	bge.n	8004dce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	019b      	lsls	r3, r3, #6
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e04:	d901      	bls.n	8004e0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e3c:	d901      	bls.n	8004e42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e018      	b.n	8004e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	daf2      	bge.n	8004e30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2210      	movs	r2, #16
 8004e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e60:	d901      	bls.n	8004e66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e006      	b.n	8004e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d0f0      	beq.n	8004e54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ecc:	f023 0303 	bic.w	r3, r3, #3
 8004ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	f003 0301 	and.w	r3, r3, #1
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f28:	d901      	bls.n	8004f2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e01b      	b.n	8004f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	daf2      	bge.n	8004f1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f043 0201 	orr.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f52:	d901      	bls.n	8004f58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e006      	b.n	8004f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d0f0      	beq.n	8004f46 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <atoi>:
 8004f72:	220a      	movs	r2, #10
 8004f74:	2100      	movs	r1, #0
 8004f76:	f000 b883 	b.w	8005080 <strtol>
	...

08004f7c <_strtol_l.constprop.0>:
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f82:	d001      	beq.n	8004f88 <_strtol_l.constprop.0+0xc>
 8004f84:	2b24      	cmp	r3, #36	; 0x24
 8004f86:	d906      	bls.n	8004f96 <_strtol_l.constprop.0+0x1a>
 8004f88:	f000 f88c 	bl	80050a4 <__errno>
 8004f8c:	2316      	movs	r3, #22
 8004f8e:	6003      	str	r3, [r0, #0]
 8004f90:	2000      	movs	r0, #0
 8004f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800507c <_strtol_l.constprop.0+0x100>
 8004f9a:	460d      	mov	r5, r1
 8004f9c:	462e      	mov	r6, r5
 8004f9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fa2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004fa6:	f017 0708 	ands.w	r7, r7, #8
 8004faa:	d1f7      	bne.n	8004f9c <_strtol_l.constprop.0+0x20>
 8004fac:	2c2d      	cmp	r4, #45	; 0x2d
 8004fae:	d132      	bne.n	8005016 <_strtol_l.constprop.0+0x9a>
 8004fb0:	782c      	ldrb	r4, [r5, #0]
 8004fb2:	2701      	movs	r7, #1
 8004fb4:	1cb5      	adds	r5, r6, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d05b      	beq.n	8005072 <_strtol_l.constprop.0+0xf6>
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d109      	bne.n	8004fd2 <_strtol_l.constprop.0+0x56>
 8004fbe:	2c30      	cmp	r4, #48	; 0x30
 8004fc0:	d107      	bne.n	8004fd2 <_strtol_l.constprop.0+0x56>
 8004fc2:	782c      	ldrb	r4, [r5, #0]
 8004fc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004fc8:	2c58      	cmp	r4, #88	; 0x58
 8004fca:	d14d      	bne.n	8005068 <_strtol_l.constprop.0+0xec>
 8004fcc:	786c      	ldrb	r4, [r5, #1]
 8004fce:	2310      	movs	r3, #16
 8004fd0:	3502      	adds	r5, #2
 8004fd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004fd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004fda:	f04f 0e00 	mov.w	lr, #0
 8004fde:	fbb8 f9f3 	udiv	r9, r8, r3
 8004fe2:	4676      	mov	r6, lr
 8004fe4:	fb03 8a19 	mls	sl, r3, r9, r8
 8004fe8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004fec:	f1bc 0f09 	cmp.w	ip, #9
 8004ff0:	d816      	bhi.n	8005020 <_strtol_l.constprop.0+0xa4>
 8004ff2:	4664      	mov	r4, ip
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	dd24      	ble.n	8005042 <_strtol_l.constprop.0+0xc6>
 8004ff8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004ffc:	d008      	beq.n	8005010 <_strtol_l.constprop.0+0x94>
 8004ffe:	45b1      	cmp	r9, r6
 8005000:	d31c      	bcc.n	800503c <_strtol_l.constprop.0+0xc0>
 8005002:	d101      	bne.n	8005008 <_strtol_l.constprop.0+0x8c>
 8005004:	45a2      	cmp	sl, r4
 8005006:	db19      	blt.n	800503c <_strtol_l.constprop.0+0xc0>
 8005008:	fb06 4603 	mla	r6, r6, r3, r4
 800500c:	f04f 0e01 	mov.w	lr, #1
 8005010:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005014:	e7e8      	b.n	8004fe8 <_strtol_l.constprop.0+0x6c>
 8005016:	2c2b      	cmp	r4, #43	; 0x2b
 8005018:	bf04      	itt	eq
 800501a:	782c      	ldrbeq	r4, [r5, #0]
 800501c:	1cb5      	addeq	r5, r6, #2
 800501e:	e7ca      	b.n	8004fb6 <_strtol_l.constprop.0+0x3a>
 8005020:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005024:	f1bc 0f19 	cmp.w	ip, #25
 8005028:	d801      	bhi.n	800502e <_strtol_l.constprop.0+0xb2>
 800502a:	3c37      	subs	r4, #55	; 0x37
 800502c:	e7e2      	b.n	8004ff4 <_strtol_l.constprop.0+0x78>
 800502e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005032:	f1bc 0f19 	cmp.w	ip, #25
 8005036:	d804      	bhi.n	8005042 <_strtol_l.constprop.0+0xc6>
 8005038:	3c57      	subs	r4, #87	; 0x57
 800503a:	e7db      	b.n	8004ff4 <_strtol_l.constprop.0+0x78>
 800503c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8005040:	e7e6      	b.n	8005010 <_strtol_l.constprop.0+0x94>
 8005042:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8005046:	d105      	bne.n	8005054 <_strtol_l.constprop.0+0xd8>
 8005048:	2322      	movs	r3, #34	; 0x22
 800504a:	6003      	str	r3, [r0, #0]
 800504c:	4646      	mov	r6, r8
 800504e:	b942      	cbnz	r2, 8005062 <_strtol_l.constprop.0+0xe6>
 8005050:	4630      	mov	r0, r6
 8005052:	e79e      	b.n	8004f92 <_strtol_l.constprop.0+0x16>
 8005054:	b107      	cbz	r7, 8005058 <_strtol_l.constprop.0+0xdc>
 8005056:	4276      	negs	r6, r6
 8005058:	2a00      	cmp	r2, #0
 800505a:	d0f9      	beq.n	8005050 <_strtol_l.constprop.0+0xd4>
 800505c:	f1be 0f00 	cmp.w	lr, #0
 8005060:	d000      	beq.n	8005064 <_strtol_l.constprop.0+0xe8>
 8005062:	1e69      	subs	r1, r5, #1
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	e7f3      	b.n	8005050 <_strtol_l.constprop.0+0xd4>
 8005068:	2430      	movs	r4, #48	; 0x30
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1b1      	bne.n	8004fd2 <_strtol_l.constprop.0+0x56>
 800506e:	2308      	movs	r3, #8
 8005070:	e7af      	b.n	8004fd2 <_strtol_l.constprop.0+0x56>
 8005072:	2c30      	cmp	r4, #48	; 0x30
 8005074:	d0a5      	beq.n	8004fc2 <_strtol_l.constprop.0+0x46>
 8005076:	230a      	movs	r3, #10
 8005078:	e7ab      	b.n	8004fd2 <_strtol_l.constprop.0+0x56>
 800507a:	bf00      	nop
 800507c:	08005131 	.word	0x08005131

08005080 <strtol>:
 8005080:	4613      	mov	r3, r2
 8005082:	460a      	mov	r2, r1
 8005084:	4601      	mov	r1, r0
 8005086:	4802      	ldr	r0, [pc, #8]	; (8005090 <strtol+0x10>)
 8005088:	6800      	ldr	r0, [r0, #0]
 800508a:	f7ff bf77 	b.w	8004f7c <_strtol_l.constprop.0>
 800508e:	bf00      	nop
 8005090:	20000064 	.word	0x20000064

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <__errno>:
 80050a4:	4b01      	ldr	r3, [pc, #4]	; (80050ac <__errno+0x8>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000064 	.word	0x20000064

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4d0d      	ldr	r5, [pc, #52]	; (80050e8 <__libc_init_array+0x38>)
 80050b4:	4c0d      	ldr	r4, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b6:	1b64      	subs	r4, r4, r5
 80050b8:	10a4      	asrs	r4, r4, #2
 80050ba:	2600      	movs	r6, #0
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	4d0b      	ldr	r5, [pc, #44]	; (80050f0 <__libc_init_array+0x40>)
 80050c2:	4c0c      	ldr	r4, [pc, #48]	; (80050f4 <__libc_init_array+0x44>)
 80050c4:	f000 f818 	bl	80050f8 <_init>
 80050c8:	1b64      	subs	r4, r4, r5
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	2600      	movs	r6, #0
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d8:	4798      	blx	r3
 80050da:	3601      	adds	r6, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e2:	4798      	blx	r3
 80050e4:	3601      	adds	r6, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	0800523c 	.word	0x0800523c
 80050ec:	0800523c 	.word	0x0800523c
 80050f0:	0800523c 	.word	0x0800523c
 80050f4:	08005240 	.word	0x08005240

080050f8 <_init>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	bf00      	nop
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr

08005104 <_fini>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	bf00      	nop
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr
