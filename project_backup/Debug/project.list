
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007610  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e8  080078e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f0  080078f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f0  080078f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  2000000c  08007904  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08007904  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001764f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f78  00000000  00000000  000376ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001098  00000000  00000000  0003bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b7d  00000000  00000000  0003cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195cc  00000000  00000000  00060775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d744d  00000000  00000000  00079d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a7c  00000000  00000000  00151190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00156c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080077bc 	.word	0x080077bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080077bc 	.word	0x080077bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 fc28 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f8e4 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 faf6 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 fabe 	bl	8000a90 <MX_DMA_Init>
  MX_DCMI_Init();
 8000514:	f000 f94a 	bl	80007ac <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000518:	f000 fa62 	bl	80009e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 fa8a 	bl	8000a34 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000520:	f000 f978 	bl	8000814 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000524:	f000 f9a4 	bl	8000870 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000528:	f000 fa24 	bl	8000974 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800052c:	2100      	movs	r1, #0
 800052e:	4863      	ldr	r0, [pc, #396]	; (80006bc <main+0x1bc>)
 8000530:	f005 f8ec 	bl	800570c <HAL_TIM_PWM_Start>
  ov7670_init();
 8000534:	f000 ff6a 	bl	800140c <ov7670_init>
  vehicleStop();
 8000538:	f000 fc2d 	bl	8000d96 <vehicleStop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 800053c:	e002      	b.n	8000544 <main+0x44>
	  HAL_Delay(10);
 800053e:	200a      	movs	r0, #10
 8000540:	f001 fc7c 	bl	8001e3c <HAL_Delay>
  while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000548:	485d      	ldr	r0, [pc, #372]	; (80006c0 <main+0x1c0>)
 800054a:	f002 fc51 	bl	8002df0 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f4      	beq.n	800053e <main+0x3e>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Continue forward until obstacle detected
	  vehicleForwardUntilUnClear();
 8000554:	f000 fc0a 	bl	8000d6c <vehicleForwardUntilUnClear>

	  //***OBSTACLE DETECTED***//
	  currentObstacleTime = HAL_GetTick();
 8000558:	f001 fc64 	bl	8001e24 <HAL_GetTick>
 800055c:	4603      	mov	r3, r0
 800055e:	4a59      	ldr	r2, [pc, #356]	; (80006c4 <main+0x1c4>)
 8000560:	6013      	str	r3, [r2, #0]
	  //Determine Location of obstacle
	  findObstacle();
 8000562:	f000 fe19 	bl	8001198 <findObstacle>
	  previousObstacle = currentObstacle;
 8000566:	4b58      	ldr	r3, [pc, #352]	; (80006c8 <main+0x1c8>)
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	4b58      	ldr	r3, [pc, #352]	; (80006cc <main+0x1cc>)
 800056c:	701a      	strb	r2, [r3, #0]

	  //Feedback loop escape
	  if (currentObstacleTime - previousObstacleTime <= TIME_THRESHOLD) {
 800056e:	4b55      	ldr	r3, [pc, #340]	; (80006c4 <main+0x1c4>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b57      	ldr	r3, [pc, #348]	; (80006d0 <main+0x1d0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800057c:	d816      	bhi.n	80005ac <main+0xac>
		  vehicleReverse();
 800057e:	f000 fc26 	bl	8000dce <vehicleReverse>
		  HAL_Delay(LONG_REVERSE);
 8000582:	20c8      	movs	r0, #200	; 0xc8
 8000584:	f001 fc5a 	bl	8001e3c <HAL_Delay>
		  vehicleStop();
 8000588:	f000 fc05 	bl	8000d96 <vehicleStop>
		  if (HAL_GetTick() % 2 == 0) {
 800058c:	f001 fc4a 	bl	8001e24 <HAL_GetTick>
 8000590:	4603      	mov	r3, r0
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d102      	bne.n	80005a0 <main+0xa0>
			  vehicleLeft();
 800059a:	f000 fc24 	bl	8000de6 <vehicleLeft>
 800059e:	e001      	b.n	80005a4 <main+0xa4>
		  } else {
			  vehicleRight();
 80005a0:	f000 fc40 	bl	8000e24 <vehicleRight>
		  }
		  HAL_Delay(HALF_TURN);
 80005a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a8:	f001 fc48 	bl	8001e3c <HAL_Delay>
	  }
	  previousObstacleTime = currentObstacleTime;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <main+0x1c4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a47      	ldr	r2, [pc, #284]	; (80006d0 <main+0x1d0>)
 80005b2:	6013      	str	r3, [r2, #0]
	  //Navigate Obstacle
	  if (currentObstacle == NONE) { //Nothing detected
 80005b4:	4b44      	ldr	r3, [pc, #272]	; (80006c8 <main+0x1c8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d077      	beq.n	80006ac <main+0x1ac>
		  //do nothing
		  //Error_Handler();
	  } else if (currentObstacle == NORTH) {
 80005bc:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <main+0x1c8>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d116      	bne.n	80005f2 <main+0xf2>
		  vehicleReverse();
 80005c4:	f000 fc03 	bl	8000dce <vehicleReverse>
		  HAL_Delay(SHORT_REVERSE);
 80005c8:	2096      	movs	r0, #150	; 0x96
 80005ca:	f001 fc37 	bl	8001e3c <HAL_Delay>
		  vehicleStop();
 80005ce:	f000 fbe2 	bl	8000d96 <vehicleStop>
		  if (HAL_GetTick() % 2 == 0) {
 80005d2:	f001 fc27 	bl	8001e24 <HAL_GetTick>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <main+0xe6>
			  vehicleLeft();
 80005e0:	f000 fc01 	bl	8000de6 <vehicleLeft>
 80005e4:	e001      	b.n	80005ea <main+0xea>
		  } else {
			  vehicleRight();
 80005e6:	f000 fc1d 	bl	8000e24 <vehicleRight>
		  }
		  HAL_Delay(QUARTER_TURN);
 80005ea:	20c8      	movs	r0, #200	; 0xc8
 80005ec:	f001 fc26 	bl	8001e3c <HAL_Delay>
 80005f0:	e05c      	b.n	80006ac <main+0x1ac>
	  } else if (currentObstacle == NORTHWEST) {
 80005f2:	4b35      	ldr	r3, [pc, #212]	; (80006c8 <main+0x1c8>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d102      	bne.n	8000600 <main+0x100>
		  vehicleRightUntilClear();
 80005fa:	f000 fc1f 	bl	8000e3c <vehicleRightUntilClear>
 80005fe:	e055      	b.n	80006ac <main+0x1ac>
	  } else if (currentObstacle == NORTHEAST) {
 8000600:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <main+0x1c8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d102      	bne.n	800060e <main+0x10e>
		  vehicleLeftUntilClear();
 8000608:	f000 fbf9 	bl	8000dfe <vehicleLeftUntilClear>
 800060c:	e04e      	b.n	80006ac <main+0x1ac>
	  } else if (currentObstacle == WEST) {
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <main+0x1c8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b05      	cmp	r3, #5
 8000614:	d10c      	bne.n	8000630 <main+0x130>
		  vehicleReverse();
 8000616:	f000 fbda 	bl	8000dce <vehicleReverse>
		  HAL_Delay(SHORT_REVERSE);
 800061a:	2096      	movs	r0, #150	; 0x96
 800061c:	f001 fc0e 	bl	8001e3c <HAL_Delay>
		  vehicleStop();
 8000620:	f000 fbb9 	bl	8000d96 <vehicleStop>

		  vehicleRight();
 8000624:	f000 fbfe 	bl	8000e24 <vehicleRight>
		  HAL_Delay(QUARTER_TURN);
 8000628:	20c8      	movs	r0, #200	; 0xc8
 800062a:	f001 fc07 	bl	8001e3c <HAL_Delay>
 800062e:	e03d      	b.n	80006ac <main+0x1ac>
	  } else if (currentObstacle == EAST) {
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <main+0x1c8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b04      	cmp	r3, #4
 8000636:	d10c      	bne.n	8000652 <main+0x152>
		  vehicleReverse();
 8000638:	f000 fbc9 	bl	8000dce <vehicleReverse>
		  HAL_Delay(SHORT_REVERSE);
 800063c:	2096      	movs	r0, #150	; 0x96
 800063e:	f001 fbfd 	bl	8001e3c <HAL_Delay>
		  vehicleStop();
 8000642:	f000 fba8 	bl	8000d96 <vehicleStop>

		  vehicleLeft();
 8000646:	f000 fbce 	bl	8000de6 <vehicleLeft>
		  HAL_Delay(QUARTER_TURN);
 800064a:	20c8      	movs	r0, #200	; 0xc8
 800064c:	f001 fbf6 	bl	8001e3c <HAL_Delay>
 8000650:	e02c      	b.n	80006ac <main+0x1ac>
	  } else if (currentObstacle == SURROUNDLEFT) {
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <main+0x1c8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b06      	cmp	r3, #6
 8000658:	d107      	bne.n	800066a <main+0x16a>
		  vehicleReverseUntilClear();
 800065a:	f000 fc02 	bl	8000e62 <vehicleReverseUntilClear>


		  vehicleRight();
 800065e:	f000 fbe1 	bl	8000e24 <vehicleRight>
		  HAL_Delay(QUARTER_TURN);
 8000662:	20c8      	movs	r0, #200	; 0xc8
 8000664:	f001 fbea 	bl	8001e3c <HAL_Delay>
 8000668:	e020      	b.n	80006ac <main+0x1ac>
	  } else if (currentObstacle == SURROUNDRIGHT) {
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <main+0x1c8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b07      	cmp	r3, #7
 8000670:	d107      	bne.n	8000682 <main+0x182>
		  vehicleReverseUntilClear();
 8000672:	f000 fbf6 	bl	8000e62 <vehicleReverseUntilClear>

		  vehicleLeft();
 8000676:	f000 fbb6 	bl	8000de6 <vehicleLeft>
		  HAL_Delay(QUARTER_TURN);
 800067a:	20c8      	movs	r0, #200	; 0xc8
 800067c:	f001 fbde 	bl	8001e3c <HAL_Delay>
 8000680:	e014      	b.n	80006ac <main+0x1ac>
	  } else if (currentObstacle == SURROUND) {
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <main+0x1c8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b08      	cmp	r3, #8
 8000688:	d110      	bne.n	80006ac <main+0x1ac>
		  vehicleReverseUntilClear();
 800068a:	f000 fbea 	bl	8000e62 <vehicleReverseUntilClear>

		  if (HAL_GetTick() % 2 == 0) {
 800068e:	f001 fbc9 	bl	8001e24 <HAL_GetTick>
 8000692:	4603      	mov	r3, r0
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <main+0x1a2>
			  vehicleLeft();
 800069c:	f000 fba3 	bl	8000de6 <vehicleLeft>
 80006a0:	e001      	b.n	80006a6 <main+0x1a6>
		  } else {
			  vehicleRight();
 80006a2:	f000 fbbf 	bl	8000e24 <vehicleRight>
		  }
		  HAL_Delay(QUARTER_TURN);
 80006a6:	20c8      	movs	r0, #200	; 0xc8
 80006a8:	f001 fbc8 	bl	8001e3c <HAL_Delay>

	  }

	  //Small delay before continuing
	  vehicleStop();
 80006ac:	f000 fb73 	bl	8000d96 <vehicleStop>
	  HAL_Delay(500);
 80006b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b4:	f001 fbc2 	bl	8001e3c <HAL_Delay>
	  vehicleForwardUntilUnClear();
 80006b8:	e74c      	b.n	8000554 <main+0x54>
 80006ba:	bf00      	nop
 80006bc:	2000012c 	.word	0x2000012c
 80006c0:	40020800 	.word	0x40020800
 80006c4:	20000778 	.word	0x20000778
 80006c8:	20000775 	.word	0x20000775
 80006cc:	20000776 	.word	0x20000776
 80006d0:	2000077c 	.word	0x2000077c

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2234      	movs	r2, #52	; 0x34
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 f83e 	bl	8007764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <SystemClock_Config+0xd0>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <SystemClock_Config+0xd0>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemClock_Config+0xd4>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <SystemClock_Config+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000734:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000748:	23a8      	movs	r3, #168	; 0xa8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f004 fc99 	bl	8005094 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000768:	f000 fe44 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2105      	movs	r1, #5
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fe0e 	bl	80043ac <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000796:	f000 fe2d 	bl	80013f4 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_DCMI_Init+0x60>)
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_DCMI_Init+0x64>)
 80007b4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_DCMI_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_DCMI_Init+0x60>)
 80007be:	2220      	movs	r2, #32
 80007c0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_DCMI_Init+0x60>)
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_DCMI_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_DCMI_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_DCMI_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_DCMI_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_DCMI_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_DCMI_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_DCMI_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_DCMI_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_DCMI_Init+0x60>)
 80007fa:	f001 fd6f 	bl	80022dc <HAL_DCMI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 fdf6 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000028 	.word	0x20000028
 8000810:	50050000 	.word	0x50050000

08000814 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C2_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_I2C2_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C2_Init+0x50>)
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_I2C2_Init+0x58>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C2_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2C2_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_I2C2_Init+0x50>)
 8000832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000836:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_I2C2_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_I2C2_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_I2C2_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2C2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_I2C2_Init+0x50>)
 8000852:	f002 fb3d 	bl	8002ed0 <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 fdca 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000d8 	.word	0x200000d8
 8000868:	40005800 	.word	0x40005800
 800086c:	000186a0 	.word	0x000186a0

08000870 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b092      	sub	sp, #72	; 0x48
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
 8000892:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2220      	movs	r2, #32
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 ff62 	bl	8007764 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a0:	4b32      	ldr	r3, [pc, #200]	; (800096c <MX_TIM1_Init+0xfc>)
 80008a2:	4a33      	ldr	r2, [pc, #204]	; (8000970 <MX_TIM1_Init+0x100>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_TIM1_Init+0xfc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <MX_TIM1_Init+0xfc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <MX_TIM1_Init+0xfc>)
 80008b4:	2214      	movs	r2, #20
 80008b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_TIM1_Init+0xfc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <MX_TIM1_Init+0xfc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_TIM1_Init+0xfc>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <MX_TIM1_Init+0xfc>)
 80008cc:	f004 fecf 	bl	800566e <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 fd8d 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e6:	4619      	mov	r1, r3
 80008e8:	4820      	ldr	r0, [pc, #128]	; (800096c <MX_TIM1_Init+0xfc>)
 80008ea:	f005 fc49 	bl	8006180 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80008f4:	f000 fd7e 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	; 0x60
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 80008fc:	230a      	movs	r3, #10
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_TIM1_Init+0xfc>)
 800091e:	f005 f8c5 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000928:	f000 fd64 	bl	80013f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <MX_TIM1_Init+0xfc>)
 8000950:	f005 fc92 	bl	8006278 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800095a:	f000 fd4b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <MX_TIM1_Init+0xfc>)
 8000960:	f001 f808 	bl	8001974 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3748      	adds	r7, #72	; 0x48
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000012c 	.word	0x2000012c
 8000970:	40010000 	.word	0x40010000

08000974 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000984:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_TIM6_Init+0x68>)
 8000986:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_TIM6_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_TIM6_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009a4:	f004 fe14 	bl	80055d0 <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009ae:	f000 fd21 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009c0:	f005 fbde 	bl	8006180 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009ca:	f000 fd13 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000174 	.word	0x20000174
 80009dc:	40001000 	.word	0x40001000

080009e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART3_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a18:	f005 fc94 	bl	8006344 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 fce7 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001bc 	.word	0x200001bc
 8000a30:	40004800 	.word	0x40004800

08000a34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2206      	movs	r2, #6
 8000a44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	f003 fb4f 	bl	800411a <HAL_PCD_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 fcb7 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000260 	.word	0x20000260

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_DMA_Init+0x68>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <MX_DMA_Init+0x68>)
 8000aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_DMA_Init+0x68>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_DMA_Init+0x68>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <MX_DMA_Init+0x68>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_DMA_Init+0x68>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200e      	movs	r0, #14
 8000ad4:	f001 fab1 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ad8:	200e      	movs	r0, #14
 8000ada:	f001 faca 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2039      	movs	r0, #57	; 0x39
 8000ae4:	f001 faa9 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ae8:	2039      	movs	r0, #57	; 0x39
 8000aea:	f001 fac2 	bl	8002072 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	4b89      	ldr	r3, [pc, #548]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a88      	ldr	r2, [pc, #544]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b86      	ldr	r3, [pc, #536]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	4b82      	ldr	r3, [pc, #520]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a81      	ldr	r2, [pc, #516]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b7f      	ldr	r3, [pc, #508]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	4b7b      	ldr	r3, [pc, #492]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a7a      	ldr	r2, [pc, #488]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b78      	ldr	r3, [pc, #480]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b74      	ldr	r3, [pc, #464]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a73      	ldr	r2, [pc, #460]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b71      	ldr	r3, [pc, #452]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b6d      	ldr	r3, [pc, #436]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a6c      	ldr	r2, [pc, #432]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a65      	ldr	r2, [pc, #404]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b63      	ldr	r3, [pc, #396]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b5c      	ldr	r3, [pc, #368]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <MX_GPIO_Init+0x240>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_1_OUT_1_Pin|MOTOR_1_OUT_2_Pin|MOTOR_2_OUT_1_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2138      	movs	r1, #56	; 0x38
 8000bf6:	4852      	ldr	r0, [pc, #328]	; (8000d40 <MX_GPIO_Init+0x244>)
 8000bf8:	f002 f912 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c02:	4850      	ldr	r0, [pc, #320]	; (8000d44 <MX_GPIO_Init+0x248>)
 8000c04:	f002 f90c 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_2_OUT_2_GPIO_Port, MOTOR_2_OUT_2_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	484e      	ldr	r0, [pc, #312]	; (8000d48 <MX_GPIO_Init+0x24c>)
 8000c0e:	f002 f907 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_3_OUT_1_Pin|MOTOR_3_OUT_2_Pin|MOTOR_4_OUT_1_Pin|MOTOR_4_OUT_2_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000c18:	484c      	ldr	r0, [pc, #304]	; (8000d4c <MX_GPIO_Init+0x250>)
 8000c1a:	f002 f901 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	4849      	ldr	r0, [pc, #292]	; (8000d48 <MX_GPIO_Init+0x24c>)
 8000c24:	f002 f8fc 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4844      	ldr	r0, [pc, #272]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000c40:	f001 ff42 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_1_OUT_1_Pin MOTOR_2_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_OUT_1_Pin|MOTOR_2_OUT_1_Pin;
 8000c44:	2328      	movs	r3, #40	; 0x28
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4839      	ldr	r0, [pc, #228]	; (8000d40 <MX_GPIO_Init+0x244>)
 8000c5c:	f001 ff34 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_1_OUT_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_OUT_2_Pin;
 8000c60:	2310      	movs	r3, #16
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_1_OUT_2_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4832      	ldr	r0, [pc, #200]	; (8000d40 <MX_GPIO_Init+0x244>)
 8000c78:	f001 ff26 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c7c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	482b      	ldr	r0, [pc, #172]	; (8000d44 <MX_GPIO_Init+0x248>)
 8000c96:	f001 ff17 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_2_OUT_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_2_OUT_2_Pin;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_2_OUT_2_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4825      	ldr	r0, [pc, #148]	; (8000d48 <MX_GPIO_Init+0x24c>)
 8000cb2:	f001 ff09 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_SENSOR_IN_SIDE_RIGHT_Pin IR_SENSOR_IN_LEFT_Pin IR_SENSOR_IN_RIGHT_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_IN_SIDE_RIGHT_Pin|IR_SENSOR_IN_LEFT_Pin|IR_SENSOR_IN_RIGHT_Pin|USB_OverCurrent_Pin;
 8000cb6:	238e      	movs	r3, #142	; 0x8e
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481f      	ldr	r0, [pc, #124]	; (8000d48 <MX_GPIO_Init+0x24c>)
 8000cca:	f001 fefd 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_3_OUT_1_Pin MOTOR_3_OUT_2_Pin MOTOR_4_OUT_1_Pin MOTOR_4_OUT_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_OUT_1_Pin|MOTOR_3_OUT_2_Pin|MOTOR_4_OUT_1_Pin|MOTOR_4_OUT_2_Pin;
 8000cce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4819      	ldr	r0, [pc, #100]	; (8000d4c <MX_GPIO_Init+0x250>)
 8000ce8:	f001 feee 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_SENSOR_IN_FRONT_Pin IR_SENSOR_IN_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_IN_FRONT_Pin|IR_SENSOR_IN_SIDE_LEFT_Pin;
 8000cec:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4812      	ldr	r0, [pc, #72]	; (8000d4c <MX_GPIO_Init+0x250>)
 8000d02:	f001 fee1 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <MX_GPIO_Init+0x24c>)
 8000d1e:	f001 fed3 	bl	8002ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2028      	movs	r0, #40	; 0x28
 8000d28:	f001 f987 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d2c:	2028      	movs	r0, #40	; 0x28
 8000d2e:	f001 f9a0 	bl	8002072 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	; 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40021400 	.word	0x40021400
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40021800 	.word	0x40021800
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40020800 	.word	0x40020800

08000d54 <vehicleForward>:

/* USER CODE BEGIN 4 */
//VEHICLE HELPER
void vehicleForward() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	motor1CCW();
 8000d58:	f000 f8aa 	bl	8000eb0 <motor1CCW>
	motor3CCW();
 8000d5c:	f000 f8d0 	bl	8000f00 <motor3CCW>
	motor2CW();
 8000d60:	f000 f8b0 	bl	8000ec4 <motor2CW>
	motor4CW();
 8000d64:	f000 f8d6 	bl	8000f14 <motor4CW>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <vehicleForwardUntilUnClear>:
void vehicleForwardUntilUnClear() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	refreshSensorStatus();
 8000d70:	f000 f974 	bl	800105c <refreshSensorStatus>
	while(canContinueForward()) {
 8000d74:	e006      	b.n	8000d84 <vehicleForwardUntilUnClear+0x18>
		vehicleForward();
 8000d76:	f7ff ffed 	bl	8000d54 <vehicleForward>
		HAL_Delay(10);
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f001 f85e 	bl	8001e3c <HAL_Delay>
		refreshSensorStatus();
 8000d80:	f000 f96c 	bl	800105c <refreshSensorStatus>
	while(canContinueForward()) {
 8000d84:	f000 f9f2 	bl	800116c <canContinueForward>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f3      	bne.n	8000d76 <vehicleForwardUntilUnClear+0xa>
	}
	vehicleStop();
 8000d8e:	f000 f802 	bl	8000d96 <vehicleStop>

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <vehicleStop>:
void vehicleStop() {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
	writeMotor1Pin1(OFF);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f8ce 	bl	8000f3c <writeMotor1Pin1>
	writeMotor1Pin2(OFF);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 f8dd 	bl	8000f60 <writeMotor1Pin2>
	writeMotor2Pin1(OFF);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f8ec 	bl	8000f84 <writeMotor2Pin1>
	writeMotor2Pin2(OFF);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f000 f8fb 	bl	8000fa8 <writeMotor2Pin2>
	writeMotor3Pin1(OFF);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f90a 	bl	8000fcc <writeMotor3Pin1>
	writeMotor3Pin2(OFF);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 f919 	bl	8000ff0 <writeMotor3Pin2>
	writeMotor4Pin1(OFF);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f928 	bl	8001014 <writeMotor4Pin1>
	writeMotor4Pin2(OFF);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 f937 	bl	8001038 <writeMotor4Pin2>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <vehicleReverse>:
void vehicleReverse() {
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
	motor1CW();
 8000dd2:	f000 f863 	bl	8000e9c <motor1CW>
	motor3CW();
 8000dd6:	f000 f889 	bl	8000eec <motor3CW>
	motor2CCW();
 8000dda:	f000 f87d 	bl	8000ed8 <motor2CCW>
	motor4CCW();
 8000dde:	f000 f8a3 	bl	8000f28 <motor4CCW>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <vehicleLeft>:
void vehicleLeft() {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
	motor1CW();
 8000dea:	f000 f857 	bl	8000e9c <motor1CW>
	motor3CW();
 8000dee:	f000 f87d 	bl	8000eec <motor3CW>
	motor2CW();
 8000df2:	f000 f867 	bl	8000ec4 <motor2CW>
	motor4CW();
 8000df6:	f000 f88d 	bl	8000f14 <motor4CW>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <vehicleLeftUntilClear>:
void vehicleLeftUntilClear() {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
	while(isRightBlocked()) {
 8000e02:	e006      	b.n	8000e12 <vehicleLeftUntilClear+0x14>
		vehicleLeft();
 8000e04:	f7ff ffef 	bl	8000de6 <vehicleLeft>
		HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f001 f817 	bl	8001e3c <HAL_Delay>
		refreshSensorStatus();
 8000e0e:	f000 f925 	bl	800105c <refreshSensorStatus>
	while(isRightBlocked()) {
 8000e12:	f000 f97b 	bl	800110c <isRightBlocked>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f3      	bne.n	8000e04 <vehicleLeftUntilClear+0x6>
	}
	vehicleStop();
 8000e1c:	f7ff ffbb 	bl	8000d96 <vehicleStop>

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <vehicleRight>:
void vehicleRight() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	motor2CCW();
 8000e28:	f000 f856 	bl	8000ed8 <motor2CCW>
	motor4CCW();
 8000e2c:	f000 f87c 	bl	8000f28 <motor4CCW>
	motor1CCW();
 8000e30:	f000 f83e 	bl	8000eb0 <motor1CCW>
	motor3CCW();
 8000e34:	f000 f864 	bl	8000f00 <motor3CCW>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <vehicleRightUntilClear>:
void vehicleRightUntilClear() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	while(isLeftBlocked()) {
 8000e40:	e006      	b.n	8000e50 <vehicleRightUntilClear+0x14>
		vehicleRight();
 8000e42:	f7ff ffef 	bl	8000e24 <vehicleRight>
		HAL_Delay(10);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f000 fff8 	bl	8001e3c <HAL_Delay>
		refreshSensorStatus();
 8000e4c:	f000 f906 	bl	800105c <refreshSensorStatus>
	while(isLeftBlocked()) {
 8000e50:	f000 f950 	bl	80010f4 <isLeftBlocked>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f3      	bne.n	8000e42 <vehicleRightUntilClear+0x6>
	}
	vehicleStop();
 8000e5a:	f7ff ff9c 	bl	8000d96 <vehicleStop>

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <vehicleReverseUntilClear>:
void vehicleReverseUntilClear() {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
	while(!canContinueForward() && isSideRightBlocked() && isSideLeftBlocked()) {
 8000e66:	e006      	b.n	8000e76 <vehicleReverseUntilClear+0x14>
		vehicleReverse();
 8000e68:	f7ff ffb1 	bl	8000dce <vehicleReverse>
		HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f000 ffe5 	bl	8001e3c <HAL_Delay>
		refreshSensorStatus();
 8000e72:	f000 f8f3 	bl	800105c <refreshSensorStatus>
	while(!canContinueForward() && isSideRightBlocked() && isSideLeftBlocked()) {
 8000e76:	f000 f979 	bl	800116c <canContinueForward>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <vehicleReverseUntilClear+0x32>
 8000e80:	f000 f968 	bl	8001154 <isSideRightBlocked>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <vehicleReverseUntilClear+0x32>
 8000e8a:	f000 f957 	bl	800113c <isSideLeftBlocked>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1e9      	bne.n	8000e68 <vehicleReverseUntilClear+0x6>
	}
	vehicleStop();
 8000e94:	f7ff ff7f 	bl	8000d96 <vehicleStop>

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <motor1CW>:
//MOTOR HELPER
void motor1CW() {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	writeMotor1Pin1(ON);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f000 f84b 	bl	8000f3c <writeMotor1Pin1>
	writeMotor1Pin2(OFF);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f85a 	bl	8000f60 <writeMotor1Pin2>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <motor1CCW>:
void motor1CCW() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	writeMotor1Pin1(OFF);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f841 	bl	8000f3c <writeMotor1Pin1>
	writeMotor1Pin2(ON);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 f850 	bl	8000f60 <writeMotor1Pin2>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <motor2CW>:
void motor2CW() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	writeMotor2Pin1(ON);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 f85b 	bl	8000f84 <writeMotor2Pin1>
	writeMotor2Pin2(OFF);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f86a 	bl	8000fa8 <writeMotor2Pin2>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <motor2CCW>:
void motor2CCW() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	writeMotor2Pin1(OFF);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f851 	bl	8000f84 <writeMotor2Pin1>
	writeMotor2Pin2(ON);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 f860 	bl	8000fa8 <writeMotor2Pin2>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <motor3CW>:
void motor3CW() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	writeMotor3Pin1(ON);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 f86b 	bl	8000fcc <writeMotor3Pin1>
	writeMotor3Pin2(OFF);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f87a 	bl	8000ff0 <writeMotor3Pin2>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <motor3CCW>:
void motor3CCW() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	writeMotor3Pin1(OFF);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f861 	bl	8000fcc <writeMotor3Pin1>
	writeMotor3Pin2(ON);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f000 f870 	bl	8000ff0 <writeMotor3Pin2>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <motor4CW>:
void motor4CW() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	writeMotor4Pin1(ON);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 f87b 	bl	8001014 <writeMotor4Pin1>
	writeMotor4Pin2(OFF);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f88a 	bl	8001038 <writeMotor4Pin2>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <motor4CCW>:
void motor4CCW() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	writeMotor4Pin1(OFF);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f871 	bl	8001014 <writeMotor4Pin1>
	writeMotor4Pin2(ON);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 f880 	bl	8001038 <writeMotor4Pin2>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <writeMotor1Pin1>:
//Motor Pin Output
void writeMotor1Pin1(PIN_VALUE state) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, MOTOR_1_OUT_1_Pin, state);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2108      	movs	r1, #8
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <writeMotor1Pin1+0x20>)
 8000f4e:	f001 ff67 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021400 	.word	0x40021400

08000f60 <writeMotor1Pin2>:
void writeMotor1Pin2(PIN_VALUE state) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, MOTOR_1_OUT_2_Pin, state);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <writeMotor1Pin2+0x20>)
 8000f72:	f001 ff55 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021400 	.word	0x40021400

08000f84 <writeMotor2Pin1>:
void writeMotor2Pin1(PIN_VALUE state) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, MOTOR_2_OUT_1_Pin, state);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	461a      	mov	r2, r3
 8000f92:	2120      	movs	r1, #32
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <writeMotor2Pin1+0x20>)
 8000f96:	f001 ff43 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021400 	.word	0x40021400

08000fa8 <writeMotor2Pin2>:
void writeMotor2Pin2(PIN_VALUE state) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MOTOR_2_OUT_2_GPIO_Port, MOTOR_2_OUT_2_Pin, state);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <writeMotor2Pin2+0x20>)
 8000fba:	f001 ff31 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021800 	.word	0x40021800

08000fcc <writeMotor3Pin1>:
void writeMotor3Pin1(PIN_VALUE state) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, MOTOR_3_OUT_1_Pin, state);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <writeMotor3Pin1+0x20>)
 8000fe0:	f001 ff1e 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000

08000ff0 <writeMotor3Pin2>:
void writeMotor3Pin2(PIN_VALUE state) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOE, MOTOR_3_OUT_2_Pin, state);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <writeMotor3Pin2+0x20>)
 8001004:	f001 ff0c 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000

08001014 <writeMotor4Pin1>:
void writeMotor4Pin1(PIN_VALUE state) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, MOTOR_4_OUT_1_Pin, state);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	461a      	mov	r2, r3
 8001022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <writeMotor4Pin1+0x20>)
 8001028:	f001 fefa 	bl	8002e20 <HAL_GPIO_WritePin>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000

08001038 <writeMotor4Pin2>:
void writeMotor4Pin2(PIN_VALUE state) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, MOTOR_4_OUT_2_Pin, state);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	461a      	mov	r2, r3
 8001046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <writeMotor4Pin2+0x20>)
 800104c:	f001 fee8 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000

0800105c <refreshSensorStatus>:
//Sensor Helper
void refreshSensorStatus() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	sensorStatus.IR_Left = !HAL_GPIO_ReadPin(IR_SENSOR_IN_LEFT_GPIO_Port, IR_SENSOR_IN_LEFT_Pin);
 8001060:	2104      	movs	r1, #4
 8001062:	4821      	ldr	r0, [pc, #132]	; (80010e8 <refreshSensorStatus+0x8c>)
 8001064:	f001 fec4 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <refreshSensorStatus+0x90>)
 8001078:	705a      	strb	r2, [r3, #1]
	sensorStatus.IR_Right = !HAL_GPIO_ReadPin(IR_SENSOR_IN_RIGHT_GPIO_Port, IR_SENSOR_IN_RIGHT_Pin);
 800107a:	2108      	movs	r1, #8
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <refreshSensorStatus+0x8c>)
 800107e:	f001 feb7 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf0c      	ite	eq
 8001088:	2301      	moveq	r3, #1
 800108a:	2300      	movne	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <refreshSensorStatus+0x90>)
 8001092:	709a      	strb	r2, [r3, #2]
	sensorStatus.IR_Front = !HAL_GPIO_ReadPin(IR_SENSOR_IN_FRONT_GPIO_Port, IR_SENSOR_IN_FRONT_Pin);
 8001094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001098:	4815      	ldr	r0, [pc, #84]	; (80010f0 <refreshSensorStatus+0x94>)
 800109a:	f001 fea9 	bl	8002df0 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <refreshSensorStatus+0x90>)
 80010ae:	701a      	strb	r2, [r3, #0]
	sensorStatus.IR_Side_Left = !HAL_GPIO_ReadPin(IR_SENSOR_IN_SIDE_LEFT_GPIO_Port, IR_SENSOR_IN_SIDE_LEFT_Pin);
 80010b0:	2101      	movs	r1, #1
 80010b2:	480f      	ldr	r0, [pc, #60]	; (80010f0 <refreshSensorStatus+0x94>)
 80010b4:	f001 fe9c 	bl	8002df0 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <refreshSensorStatus+0x90>)
 80010c8:	70da      	strb	r2, [r3, #3]
	sensorStatus.IR_Side_Right = !HAL_GPIO_ReadPin(IR_SENSOR_IN_SIDE_RIGHT_GPIO_Port, IR_SENSOR_IN_SIDE_RIGHT_Pin);
 80010ca:	2102      	movs	r1, #2
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <refreshSensorStatus+0x8c>)
 80010ce:	f001 fe8f 	bl	8002df0 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <refreshSensorStatus+0x90>)
 80010e2:	711a      	strb	r2, [r3, #4]
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021800 	.word	0x40021800
 80010ec:	20000770 	.word	0x20000770
 80010f0:	40021000 	.word	0x40021000

080010f4 <isLeftBlocked>:
int isLeftBlocked() {
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Left;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <isLeftBlocked+0x14>)
 80010fa:	785b      	ldrb	r3, [r3, #1]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000770 	.word	0x20000770

0800110c <isRightBlocked>:
int isRightBlocked() {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Right;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <isRightBlocked+0x14>)
 8001112:	789b      	ldrb	r3, [r3, #2]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000770 	.word	0x20000770

08001124 <isFrontBlocked>:
int isFrontBlocked() {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Front;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <isFrontBlocked+0x14>)
 800112a:	781b      	ldrb	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000770 	.word	0x20000770

0800113c <isSideLeftBlocked>:
int isSideLeftBlocked() {
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Side_Left;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <isSideLeftBlocked+0x14>)
 8001142:	78db      	ldrb	r3, [r3, #3]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000770 	.word	0x20000770

08001154 <isSideRightBlocked>:
int isSideRightBlocked() {
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Side_Right;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <isSideRightBlocked+0x14>)
 800115a:	791b      	ldrb	r3, [r3, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000770 	.word	0x20000770

0800116c <canContinueForward>:
int canContinueForward() {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	return !(isRightBlocked() || isLeftBlocked() || isFrontBlocked());
 8001170:	f7ff ffcc 	bl	800110c <isRightBlocked>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10b      	bne.n	8001192 <canContinueForward+0x26>
 800117a:	f7ff ffbb 	bl	80010f4 <isLeftBlocked>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d106      	bne.n	8001192 <canContinueForward+0x26>
 8001184:	f7ff ffce 	bl	8001124 <isFrontBlocked>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <canContinueForward+0x26>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <canContinueForward+0x28>
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}

08001198 <findObstacle>:
//OBSTACLE HELPER
void findObstacle() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	refreshSensorStatus();
 800119c:	f7ff ff5e 	bl	800105c <refreshSensorStatus>

	//Check Front (north)
	if ((isFrontBlocked() && !isRightBlocked() && !isLeftBlocked()) || (isFrontBlocked() && isRightBlocked() && isLeftBlocked()) || (!isFrontBlocked() && isRightBlocked() && isLeftBlocked())) {
 80011a0:	f7ff ffc0 	bl	8001124 <isFrontBlocked>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <findObstacle+0x26>
 80011aa:	f7ff ffaf 	bl	800110c <isRightBlocked>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d104      	bne.n	80011be <findObstacle+0x26>
 80011b4:	f7ff ff9e 	bl	80010f4 <isLeftBlocked>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d01d      	beq.n	80011fa <findObstacle+0x62>
 80011be:	f7ff ffb1 	bl	8001124 <isFrontBlocked>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <findObstacle+0x44>
 80011c8:	f7ff ffa0 	bl	800110c <isRightBlocked>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <findObstacle+0x44>
 80011d2:	f7ff ff8f 	bl	80010f4 <isLeftBlocked>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10e      	bne.n	80011fa <findObstacle+0x62>
 80011dc:	f7ff ffa2 	bl	8001124 <isFrontBlocked>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d151      	bne.n	800128a <findObstacle+0xf2>
 80011e6:	f7ff ff91 	bl	800110c <isRightBlocked>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d04c      	beq.n	800128a <findObstacle+0xf2>
 80011f0:	f7ff ff80 	bl	80010f4 <isLeftBlocked>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d047      	beq.n	800128a <findObstacle+0xf2>
		//Check sides
		if (!isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle is directly in front
 80011fa:	f7ff ffab 	bl	8001154 <isSideRightBlocked>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d108      	bne.n	8001216 <findObstacle+0x7e>
 8001204:	f7ff ff9a 	bl	800113c <isSideLeftBlocked>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <findObstacle+0x7e>
			currentObstacle = NORTH;
 800120e:	4b77      	ldr	r3, [pc, #476]	; (80013ec <findObstacle+0x254>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
			return;
 8001214:	e0e8      	b.n	80013e8 <findObstacle+0x250>
		}
		if (isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle completely surrounded
 8001216:	f7ff ff9d 	bl	8001154 <isSideRightBlocked>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <findObstacle+0x9a>
 8001220:	f7ff ff8c 	bl	800113c <isSideLeftBlocked>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <findObstacle+0x9a>
			currentObstacle = SURROUND;
 800122a:	4b70      	ldr	r3, [pc, #448]	; (80013ec <findObstacle+0x254>)
 800122c:	2208      	movs	r2, #8
 800122e:	701a      	strb	r2, [r3, #0]
			return;
 8001230:	e0da      	b.n	80013e8 <findObstacle+0x250>
		}
		if (!isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle in front and left
 8001232:	f7ff ff8f 	bl	8001154 <isSideRightBlocked>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d110      	bne.n	800125e <findObstacle+0xc6>
 800123c:	f7ff ff7e 	bl	800113c <isSideLeftBlocked>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <findObstacle+0xc6>
			if (previousObstacle == SURROUNDRIGHT) {
 8001246:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <findObstacle+0x258>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b07      	cmp	r3, #7
 800124c:	d103      	bne.n	8001256 <findObstacle+0xbe>
				currentObstacle = SURROUND;
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <findObstacle+0x254>)
 8001250:	2208      	movs	r2, #8
 8001252:	701a      	strb	r2, [r3, #0]
			} else {
				currentObstacle = SURROUNDLEFT;
			}
			return;
 8001254:	e0c8      	b.n	80013e8 <findObstacle+0x250>
				currentObstacle = SURROUNDLEFT;
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <findObstacle+0x254>)
 8001258:	2206      	movs	r2, #6
 800125a:	701a      	strb	r2, [r3, #0]
			return;
 800125c:	e0c4      	b.n	80013e8 <findObstacle+0x250>
		}
		if (isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle in front and right
 800125e:	f7ff ff79 	bl	8001154 <isSideRightBlocked>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d010      	beq.n	800128a <findObstacle+0xf2>
 8001268:	f7ff ff68 	bl	800113c <isSideLeftBlocked>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10b      	bne.n	800128a <findObstacle+0xf2>
			if (previousObstacle == SURROUNDLEFT) {
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <findObstacle+0x258>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b06      	cmp	r3, #6
 8001278:	d103      	bne.n	8001282 <findObstacle+0xea>
				currentObstacle = SURROUND;
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <findObstacle+0x254>)
 800127c:	2208      	movs	r2, #8
 800127e:	701a      	strb	r2, [r3, #0]
			} else {
				currentObstacle = SURROUNDRIGHT;
			}
			return;
 8001280:	e0b2      	b.n	80013e8 <findObstacle+0x250>
				currentObstacle = SURROUNDRIGHT;
 8001282:	4b5a      	ldr	r3, [pc, #360]	; (80013ec <findObstacle+0x254>)
 8001284:	2207      	movs	r2, #7
 8001286:	701a      	strb	r2, [r3, #0]
			return;
 8001288:	e0ae      	b.n	80013e8 <findObstacle+0x250>
		}
	}
	//Check right (east)
	if ((isFrontBlocked() && isRightBlocked() && !isLeftBlocked()) || (!isFrontBlocked() && isRightBlocked() && !isLeftBlocked())) {
 800128a:	f7ff ff4b 	bl	8001124 <isFrontBlocked>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d009      	beq.n	80012a8 <findObstacle+0x110>
 8001294:	f7ff ff3a 	bl	800110c <isRightBlocked>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <findObstacle+0x110>
 800129e:	f7ff ff29 	bl	80010f4 <isLeftBlocked>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00e      	beq.n	80012c6 <findObstacle+0x12e>
 80012a8:	f7ff ff3c 	bl	8001124 <isFrontBlocked>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d141      	bne.n	8001336 <findObstacle+0x19e>
 80012b2:	f7ff ff2b 	bl	800110c <isRightBlocked>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d03c      	beq.n	8001336 <findObstacle+0x19e>
 80012bc:	f7ff ff1a 	bl	80010f4 <isLeftBlocked>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d137      	bne.n	8001336 <findObstacle+0x19e>
		//Check sides
		if (!isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle right in front slightly to the right
 80012c6:	f7ff ff45 	bl	8001154 <isSideRightBlocked>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d108      	bne.n	80012e2 <findObstacle+0x14a>
 80012d0:	f7ff ff34 	bl	800113c <isSideLeftBlocked>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <findObstacle+0x14a>
			currentObstacle = NORTHEAST;
 80012da:	4b44      	ldr	r3, [pc, #272]	; (80013ec <findObstacle+0x254>)
 80012dc:	2203      	movs	r2, #3
 80012de:	701a      	strb	r2, [r3, #0]
			return;
 80012e0:	e082      	b.n	80013e8 <findObstacle+0x250>
		}
		if (isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle completely surrounds
 80012e2:	f7ff ff37 	bl	8001154 <isSideRightBlocked>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <findObstacle+0x166>
 80012ec:	f7ff ff26 	bl	800113c <isSideLeftBlocked>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <findObstacle+0x166>
			currentObstacle = SURROUND;
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <findObstacle+0x254>)
 80012f8:	2208      	movs	r2, #8
 80012fa:	701a      	strb	r2, [r3, #0]
			return;
 80012fc:	e074      	b.n	80013e8 <findObstacle+0x250>
		}
		if (!isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle weirdly surrounds
 80012fe:	f7ff ff29 	bl	8001154 <isSideRightBlocked>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d108      	bne.n	800131a <findObstacle+0x182>
 8001308:	f7ff ff18 	bl	800113c <isSideLeftBlocked>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <findObstacle+0x182>
			currentObstacle = SURROUND;
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <findObstacle+0x254>)
 8001314:	2208      	movs	r2, #8
 8001316:	701a      	strb	r2, [r3, #0]
			return;
 8001318:	e066      	b.n	80013e8 <findObstacle+0x250>
		}
		if (isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle in front and right
 800131a:	f7ff ff1b 	bl	8001154 <isSideRightBlocked>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <findObstacle+0x19e>
 8001324:	f7ff ff0a 	bl	800113c <isSideLeftBlocked>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <findObstacle+0x19e>
			currentObstacle = EAST;
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <findObstacle+0x254>)
 8001330:	2204      	movs	r2, #4
 8001332:	701a      	strb	r2, [r3, #0]
			return;
 8001334:	e058      	b.n	80013e8 <findObstacle+0x250>
		}
	}
	//Check left (west)
	if ((isFrontBlocked() && !isRightBlocked() && isLeftBlocked()) || (!isFrontBlocked() && !isRightBlocked() && isLeftBlocked())) {
 8001336:	f7ff fef5 	bl	8001124 <isFrontBlocked>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <findObstacle+0x1bc>
 8001340:	f7ff fee4 	bl	800110c <isRightBlocked>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d104      	bne.n	8001354 <findObstacle+0x1bc>
 800134a:	f7ff fed3 	bl	80010f4 <isLeftBlocked>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10e      	bne.n	8001372 <findObstacle+0x1da>
 8001354:	f7ff fee6 	bl	8001124 <isFrontBlocked>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d141      	bne.n	80013e2 <findObstacle+0x24a>
 800135e:	f7ff fed5 	bl	800110c <isRightBlocked>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d13c      	bne.n	80013e2 <findObstacle+0x24a>
 8001368:	f7ff fec4 	bl	80010f4 <isLeftBlocked>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d037      	beq.n	80013e2 <findObstacle+0x24a>
		//Check sides
		if (!isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle right in front and slightly to the left
 8001372:	f7ff feef 	bl	8001154 <isSideRightBlocked>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d108      	bne.n	800138e <findObstacle+0x1f6>
 800137c:	f7ff fede 	bl	800113c <isSideLeftBlocked>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d103      	bne.n	800138e <findObstacle+0x1f6>
			currentObstacle = NORTHWEST;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <findObstacle+0x254>)
 8001388:	2202      	movs	r2, #2
 800138a:	701a      	strb	r2, [r3, #0]
			return;
 800138c:	e02c      	b.n	80013e8 <findObstacle+0x250>
		}
		if (isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle completely surrounds
 800138e:	f7ff fee1 	bl	8001154 <isSideRightBlocked>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <findObstacle+0x212>
 8001398:	f7ff fed0 	bl	800113c <isSideLeftBlocked>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <findObstacle+0x212>
			currentObstacle = SURROUND;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <findObstacle+0x254>)
 80013a4:	2208      	movs	r2, #8
 80013a6:	701a      	strb	r2, [r3, #0]
			return;
 80013a8:	e01e      	b.n	80013e8 <findObstacle+0x250>
		}
		if (!isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle in front and left
 80013aa:	f7ff fed3 	bl	8001154 <isSideRightBlocked>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d108      	bne.n	80013c6 <findObstacle+0x22e>
 80013b4:	f7ff fec2 	bl	800113c <isSideLeftBlocked>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <findObstacle+0x22e>
			currentObstacle = WEST;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <findObstacle+0x254>)
 80013c0:	2205      	movs	r2, #5
 80013c2:	701a      	strb	r2, [r3, #0]
			return;
 80013c4:	e010      	b.n	80013e8 <findObstacle+0x250>
		}
		if (isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle weirdly surrounds
 80013c6:	f7ff fec5 	bl	8001154 <isSideRightBlocked>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <findObstacle+0x24a>
 80013d0:	f7ff feb4 	bl	800113c <isSideLeftBlocked>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <findObstacle+0x24a>
			currentObstacle = SURROUND;
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <findObstacle+0x254>)
 80013dc:	2208      	movs	r2, #8
 80013de:	701a      	strb	r2, [r3, #0]
			return;
 80013e0:	e002      	b.n	80013e8 <findObstacle+0x250>
		}
	}
	currentObstacle = NONE;
 80013e2:	4b02      	ldr	r3, [pc, #8]	; (80013ec <findObstacle+0x254>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
}
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000775 	.word	0x20000775
 80013f0:	20000776 	.word	0x20000776

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <Error_Handler+0x14>)
 8001400:	f001 fd27 	bl	8002e52 <HAL_GPIO_TogglePin>
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x10>
 8001406:	bf00      	nop
 8001408:	40020400 	.word	0x40020400

0800140c <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
  uint8_t val;

  HAL_Delay(10);
 8001412:	200a      	movs	r0, #10
 8001414:	f000 fd12 	bl	8001e3c <HAL_Delay>
  val = ov7670_read(0x0A);
 8001418:	200a      	movs	r0, #10
 800141a:	f000 f85d 	bl	80014d8 <ov7670_read>
 800141e:	4603      	mov	r3, r0
 8001420:	70fb      	strb	r3, [r7, #3]

  if (val != 0x76) {
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	2b76      	cmp	r3, #118	; 0x76
 8001426:	d004      	beq.n	8001432 <ov7670_init+0x26>
    HAL_Delay(10);
 8001428:	200a      	movs	r0, #10
 800142a:	f000 fd07 	bl	8001e3c <HAL_Delay>
    return 1;
 800142e:	2301      	movs	r3, #1
 8001430:	e04a      	b.n	80014c8 <ov7670_init+0xbc>
  } else {

	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001432:	2101      	movs	r1, #1
 8001434:	4826      	ldr	r0, [pc, #152]	; (80014d0 <ov7670_init+0xc4>)
 8001436:	f001 fd0c 	bl	8002e52 <HAL_GPIO_TogglePin>
  }


  HAL_Delay(10);
 800143a:	200a      	movs	r0, #10
 800143c:	f000 fcfe 	bl	8001e3c <HAL_Delay>

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e012      	b.n	800146c <ov7670_init+0x60>
	  ov7670_write(OV7670_reg[index][0], OV7670_reg[index][1]);
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <ov7670_init+0xc8>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800144e:	4921      	ldr	r1, [pc, #132]	; (80014d4 <ov7670_init+0xc8>)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	440b      	add	r3, r1
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f000 f88a 	bl	8001574 <ov7670_write>
	  HAL_Delay(11);
 8001460:	200b      	movs	r0, #11
 8001462:	f000 fceb 	bl	8001e3c <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b79      	cmp	r3, #121	; 0x79
 8001470:	dde9      	ble.n	8001446 <ov7670_init+0x3a>
  }


  HAL_Delay(10);
 8001472:	200a      	movs	r0, #10
 8001474:	f000 fce2 	bl	8001e3c <HAL_Delay>

  uint8_t isDataCorrect = 1;
 8001478:	2301      	movs	r3, #1
 800147a:	72fb      	strb	r3, [r7, #11]

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	e018      	b.n	80014b4 <ov7670_init+0xa8>
	  uint8_t dataRead = ov7670_read(OV7670_reg[index][0]);
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <ov7670_init+0xc8>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f824 	bl	80014d8 <ov7670_read>
 8001490:	4603      	mov	r3, r0
 8001492:	70bb      	strb	r3, [r7, #2]
	  if (dataRead != OV7670_reg[index][1]) {
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <ov7670_init+0xc8>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	78ba      	ldrb	r2, [r7, #2]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d004      	beq.n	80014ae <ov7670_init+0xa2>
		  isDataCorrect = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	72fb      	strb	r3, [r7, #11]
		  //sprintf(msg, "Register 0x%x contains incorrect data 0x%x (should be 0x%x)\r\n", OV7670_reg[index][0], dataRead, OV7670_reg[index][1]);
		  //print_msg(msg);
		  HAL_Delay(10);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f000 fcc7 	bl	8001e3c <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3301      	adds	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b79      	cmp	r3, #121	; 0x79
 80014b8:	dde3      	ble.n	8001482 <ov7670_init+0x76>
	  }
  }

  if (isDataCorrect) {
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <ov7670_init+0xba>
	  //print_msg("All data OK\r\n");
	  HAL_Delay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f000 fcbb 	bl	8001e3c <HAL_Delay>
  }
  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020400 	.word	0x40020400
 80014d4:	080077d4 	.word	0x080077d4

080014d8 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
	uint8_t attempts = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_BUSY;
 80014ea:	2302      	movs	r3, #2
 80014ec:	75bb      	strb	r3, [r7, #22]

	uint8_t *regAddress = &reg;
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	613b      	str	r3, [r7, #16]

	while (status != HAL_OK && attempts < 5) {
 80014f2:	e012      	b.n	800151a <ov7670_read+0x42>
		status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670_READ, regAddress, 1, 100);
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	2143      	movs	r1, #67	; 0x43
 80014fe:	481c      	ldr	r0, [pc, #112]	; (8001570 <ov7670_read+0x98>)
 8001500:	f001 fe2a 	bl	8003158 <HAL_I2C_Master_Transmit>
 8001504:	4603      	mov	r3, r0
 8001506:	75bb      	strb	r3, [r7, #22]
		attempts += 1;
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	3301      	adds	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
		if (status != HAL_OK) {
 800150e:	7dbb      	ldrb	r3, [r7, #22]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <ov7670_read+0x42>
			//sprintf(msg, "Transmit Status: %d on attempt %d with register 0x%x\r\n", status, attempts, *regAddress);
			//print_msg(msg);
			HAL_Delay(10);
 8001514:	200a      	movs	r0, #10
 8001516:	f000 fc91 	bl	8001e3c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 800151a:	7dbb      	ldrb	r3, [r7, #22]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <ov7670_read+0x4e>
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	2b04      	cmp	r3, #4
 8001524:	d9e6      	bls.n	80014f4 <ov7670_read+0x1c>
		}
	}

	status = HAL_BUSY;
 8001526:	2302      	movs	r3, #2
 8001528:	75bb      	strb	r3, [r7, #22]
	attempts = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]

	while (status != HAL_OK && attempts < 5) {
 800152e:	e013      	b.n	8001558 <ov7670_read+0x80>
		status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670_READ, &data, 1, 100);
 8001530:	f107 020f 	add.w	r2, r7, #15
 8001534:	2364      	movs	r3, #100	; 0x64
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	2143      	movs	r1, #67	; 0x43
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <ov7670_read+0x98>)
 800153e:	f001 ff09 	bl	8003354 <HAL_I2C_Master_Receive>
 8001542:	4603      	mov	r3, r0
 8001544:	75bb      	strb	r3, [r7, #22]
		attempts += 1;
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	3301      	adds	r3, #1
 800154a:	75fb      	strb	r3, [r7, #23]
		if (status != HAL_OK) {
 800154c:	7dbb      	ldrb	r3, [r7, #22]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <ov7670_read+0x80>
			//sprintf(msg, "Receive Status: %d on attempt %d with current data: 0x%x\r\n", status, attempts, data);
			//print_msg(msg);
			HAL_Delay(10);
 8001552:	200a      	movs	r0, #10
 8001554:	f000 fc72 	bl	8001e3c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001558:	7dbb      	ldrb	r3, [r7, #22]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <ov7670_read+0x8c>
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d9e5      	bls.n	8001530 <ov7670_read+0x58>
		}
	}


	return data;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000d8 	.word	0x200000d8

08001574 <ov7670_write>:

HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af04      	add	r7, sp, #16
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
	uint8_t attempts = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_BUSY;
 8001588:	2302      	movs	r3, #2
 800158a:	73bb      	strb	r3, [r7, #14]

	//uint8_t *regAddress = &reg;
	uint8_t *data = &val;
 800158c:	1dbb      	adds	r3, r7, #6
 800158e:	60bb      	str	r3, [r7, #8]

	while (status != HAL_OK && attempts < 5) {
 8001590:	e017      	b.n	80015c2 <ov7670_write+0x4e>
		status = HAL_I2C_Mem_Write(&hi2c2,ADDR_OV7670_WRITE,reg,I2C_MEMADD_SIZE_8BIT,data,1,100);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	b29a      	uxth	r2, r3
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	2301      	movs	r3, #1
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	2142      	movs	r1, #66	; 0x42
 80015a6:	480c      	ldr	r0, [pc, #48]	; (80015d8 <ov7670_write+0x64>)
 80015a8:	f002 f8fa 	bl	80037a0 <HAL_I2C_Mem_Write>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73bb      	strb	r3, [r7, #14]
		attempts += 1;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) {
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <ov7670_write+0x4e>
			//sprintf(msg, "Memory Write Status: %d on attempt %d with register 0x%x\r\n", status, attempts, reg);
			//print_msg(msg);
			HAL_Delay(10);
 80015bc:	200a      	movs	r0, #10
 80015be:	f000 fc3d 	bl	8001e3c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <ov7670_write+0x5a>
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d9e1      	bls.n	8001592 <ov7670_write+0x1e>
			HAL_Delay(10);
		}
	}
	*/

	return status;
 80015ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200000d8 	.word	0x200000d8

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a78      	ldr	r2, [pc, #480]	; (800182c <HAL_DCMI_MspInit+0x200>)
 800164a:	4293      	cmp	r3, r2
 800164c:	f040 80e9 	bne.w	8001822 <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	4a75      	ldr	r2, [pc, #468]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6353      	str	r3, [r2, #52]	; 0x34
 8001660:	4b73      	ldr	r3, [pc, #460]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 8001662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	4a6e      	ldr	r2, [pc, #440]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6313      	str	r3, [r2, #48]	; 0x30
 800167c:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a67      	ldr	r2, [pc, #412]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6313      	str	r3, [r2, #48]	; 0x30
 8001698:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	4b61      	ldr	r3, [pc, #388]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a60      	ldr	r2, [pc, #384]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a59      	ldr	r2, [pc, #356]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_DCMI_MspInit+0x204>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016f8:	2370      	movs	r3, #112	; 0x70
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001708:	230d      	movs	r3, #13
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4848      	ldr	r0, [pc, #288]	; (8001834 <HAL_DCMI_MspInit+0x208>)
 8001714:	f001 f9d8 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001718:	2350      	movs	r3, #80	; 0x50
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001728:	230d      	movs	r3, #13
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	4841      	ldr	r0, [pc, #260]	; (8001838 <HAL_DCMI_MspInit+0x20c>)
 8001734:	f001 f9c8 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001738:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800174a:	230d      	movs	r3, #13
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4839      	ldr	r0, [pc, #228]	; (800183c <HAL_DCMI_MspInit+0x210>)
 8001756:	f001 f9b7 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800175a:	2308      	movs	r3, #8
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800176a:	230d      	movs	r3, #13
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	4832      	ldr	r0, [pc, #200]	; (8001840 <HAL_DCMI_MspInit+0x214>)
 8001776:	f001 f9a7 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800177a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800178c:	230d      	movs	r3, #13
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	482b      	ldr	r0, [pc, #172]	; (8001844 <HAL_DCMI_MspInit+0x218>)
 8001798:	f001 f996 	bl	8002ac8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 800179e:	4a2b      	ldr	r2, [pc, #172]	; (800184c <HAL_DCMI_MspInit+0x220>)
 80017a0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017bc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017dc:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017e0:	2204      	movs	r2, #4
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017e6:	2203      	movs	r2, #3
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80017f6:	4814      	ldr	r0, [pc, #80]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017f8:	f000 fdea 	bl	80023d0 <HAL_DMA_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8001802:	f7ff fdf7 	bl	80013f4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 800180a:	649a      	str	r2, [r3, #72]	; 0x48
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_DCMI_MspInit+0x21c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	204e      	movs	r0, #78	; 0x4e
 8001818:	f000 fc0f 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800181c:	204e      	movs	r0, #78	; 0x4e
 800181e:	f000 fc28 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3738      	adds	r7, #56	; 0x38
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	50050000 	.word	0x50050000
 8001830:	40023800 	.word	0x40023800
 8001834:	40021000 	.word	0x40021000
 8001838:	40020000 	.word	0x40020000
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021800 	.word	0x40021800
 8001848:	20000078 	.word	0x20000078
 800184c:	40026428 	.word	0x40026428

08001850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_I2C_MspInit+0x84>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12b      	bne.n	80018ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_I2C_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_I2C_MspInit+0x88>)
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_I2C_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800188e:	2303      	movs	r3, #3
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001892:	2312      	movs	r3, #18
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800189e:	2304      	movs	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <HAL_I2C_MspInit+0x8c>)
 80018aa:	f001 f90d 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_I2C_MspInit+0x88>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_I2C_MspInit+0x88>)
 80018b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_I2C_MspInit+0x88>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40005800 	.word	0x40005800
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40021400 	.word	0x40021400

080018e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_TIM_PWM_MspInit+0x3c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10d      	bne.n	800190e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_TIM_PWM_MspInit+0x40>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_TIM_PWM_MspInit+0x40>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_TIM_PWM_MspInit+0x40>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40010000 	.word	0x40010000
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_TIM_Base_MspInit+0x48>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d115      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_TIM_Base_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_TIM_Base_MspInit+0x4c>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_TIM_Base_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2036      	movs	r0, #54	; 0x36
 8001958:	f000 fb6f 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800195c:	2036      	movs	r0, #54	; 0x36
 800195e:	f000 fb88 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40001000 	.word	0x40001000
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_TIM_MspPostInit+0x68>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d11e      	bne.n	80019d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_TIM_MspPostInit+0x6c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <HAL_TIM_MspPostInit+0x6c>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_TIM_MspPostInit+0x6c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4619      	mov	r1, r3
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_TIM_MspPostInit+0x70>)
 80019d0:	f001 f87a 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010000 	.word	0x40010000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a39      	ldr	r2, [pc, #228]	; (8001aec <HAL_UART_MspInit+0x104>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d16b      	bne.n	8001ae2 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_UART_MspInit+0x108>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <HAL_UART_MspInit+0x108>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_UART_MspInit+0x108>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_UART_MspInit+0x108>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a30      	ldr	r2, [pc, #192]	; (8001af0 <HAL_UART_MspInit+0x108>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_UART_MspInit+0x108>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a54:	2307      	movs	r3, #7
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4825      	ldr	r0, [pc, #148]	; (8001af4 <HAL_UART_MspInit+0x10c>)
 8001a60:	f001 f832 	bl	8002ac8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_UART_MspInit+0x114>)
 8001a68:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a70:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a84:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ab6:	4810      	ldr	r0, [pc, #64]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001ab8:	f000 fc8a 	bl	80023d0 <HAL_DMA_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001ac2:	f7ff fc97 	bl	80013f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_UART_MspInit+0x110>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2027      	movs	r0, #39	; 0x27
 8001ad8:	f000 faaf 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001adc:	2027      	movs	r0, #39	; 0x27
 8001ade:	f000 fac8 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40004800 	.word	0x40004800
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020c00 	.word	0x40020c00
 8001af8:	20000200 	.word	0x20000200
 8001afc:	40026058 	.word	0x40026058

08001b00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0a0      	sub	sp, #128	; 0x80
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	225c      	movs	r2, #92	; 0x5c
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f005 fe1f 	bl	8007764 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2e:	d14e      	bne.n	8001bce <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001b36:	2300      	movs	r3, #0
 8001b38:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fd4e 	bl	80045e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001b4a:	f7ff fc53 	bl	80013f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4815      	ldr	r0, [pc, #84]	; (8001bdc <HAL_PCD_MspInit+0xdc>)
 8001b88:	f000 ff9e 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b90:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480e      	ldr	r0, [pc, #56]	; (8001bdc <HAL_PCD_MspInit+0xdc>)
 8001ba2:	f000 ff91 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	6353      	str	r3, [r2, #52]	; 0x34
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_PCD_MspInit+0xd8>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3780      	adds	r7, #128	; 0x80
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2c:	f000 f8e6 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <DMA1_Stream3_IRQHandler+0x10>)
 8001c3a:	f000 fd09 	bl	8002650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000200 	.word	0x20000200

08001c48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <USART3_IRQHandler+0x10>)
 8001c4e:	f004 fbc7 	bl	80063e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200001bc 	.word	0x200001bc

08001c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c66:	4809      	ldr	r0, [pc, #36]	; (8001c8c <EXTI15_10_IRQHandler+0x30>)
 8001c68:	f001 f8da 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4806      	ldr	r0, [pc, #24]	; (8001c8c <EXTI15_10_IRQHandler+0x30>)
 8001c72:	f001 f8d5 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	4804      	ldr	r0, [pc, #16]	; (8001c8c <EXTI15_10_IRQHandler+0x30>)
 8001c7c:	f001 f8d0 	bl	8002e20 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c84:	f001 f900 	bl	8002e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020400 	.word	0x40020400

08001c90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM6_DAC_IRQHandler+0x10>)
 8001c96:	f003 fe01 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000174 	.word	0x20000174

08001ca4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	HAL_DCMI_Stop(&hdcmi);
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <DMA2_Stream1_IRQHandler+0x1c>)
 8001caa:	f000 f9fd 	bl	80020a8 <HAL_DCMI_Stop>
	dma_flag = 1;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <DMA2_Stream1_IRQHandler+0x20>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <DMA2_Stream1_IRQHandler+0x24>)
 8001cb6:	f000 fccb 	bl	8002650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000028 	.word	0x20000028
 8001cc4:	2000076c 	.word	0x2000076c
 8001cc8:	20000078 	.word	0x20000078

08001ccc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DCMI_IRQHandler+0x10>)
 8001cd2:	f000 fa45 	bl	8002160 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000028 	.word	0x20000028

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d0a:	490e      	ldr	r1, [pc, #56]	; (8001d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d20:	4c0b      	ldr	r4, [pc, #44]	; (8001d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d2e:	f7ff ffd7 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f005 fd1f 	bl	8007774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7fe fbe3 	bl	8000500 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d48:	080078f8 	.word	0x080078f8
  ldr r2, =_sbss
 8001d4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d50:	20000784 	.word	0x20000784

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f94f 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f000 f808 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fc26 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x54>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_InitTick+0x58>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f967 	bl	800208e <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d80a      	bhi.n	8001de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd8:	f000 f92f 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <HAL_InitTick+0x5c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20000780 	.word	0x20000780

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000780 	.word	0x20000780

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff29 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff3e 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff31 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa2 	bl	8001fe0 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_DCMI_Stop+0xb0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	085b      	lsrs	r3, r3, #1
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <HAL_DCMI_Stop+0xb4>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_DCMI_Stop+0x2a>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e03e      	b.n	8002150 <HAL_DCMI_Stop+0xa8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	73fb      	strb	r3, [r7, #15]
      break;
 800210c:	e006      	b.n	800211c <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ea      	bne.n	80020f2 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800212a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f9fb 	bl	800252c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000000 	.word	0x20000000
 800215c:	92492493 	.word	0x92492493

08002160 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2204      	movs	r2, #4
 8002180:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2204      	movs	r2, #4
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219a:	4a2f      	ldr	r2, [pc, #188]	; (8002258 <HAL_DCMI_IRQHandler+0xf8>)
 800219c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fa32 	bl	800260c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2202      	movs	r2, #2
 80021b8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2204      	movs	r2, #4
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_DCMI_IRQHandler+0xf8>)
 80021d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fa16 	bl	800260c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2210      	movs	r2, #16
 80021f0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f83c 	bl	8002270 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2208      	movs	r2, #8
 8002208:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f83a 	bl	8002284 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d019      	beq.n	800224e <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b02      	cmp	r3, #2
 8002226:	d107      	bne.n	8002238 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 021e 	bic.w	r2, r2, #30
 8002236:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f825 	bl	8002298 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	080022ad 	.word	0x080022ad

0800225c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d003      	beq.n	80022cc <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f7ff ffc5 	bl	800225c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e069      	b.n	80023c2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff f992 	bl	800162c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff f98f 	bl	800162c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_DCMI_Init+0xf0>)
 8002322:	400b      	ands	r3, r1
 8002324:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800233a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002346:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002352:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 800235e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800236a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b10      	cmp	r3, #16
 800237a:	d112      	bne.n	80023a2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7f1b      	ldrb	r3, [r3, #28]
 8002380:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7f5b      	ldrb	r3, [r3, #29]
 8002386:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002388:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7f9b      	ldrb	r3, [r3, #30]
 800238e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002390:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7fdb      	ldrb	r3, [r3, #31]
 8002398:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800239e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023a0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 021e 	orr.w	r2, r2, #30
 80023b0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	ffe0f007 	.word	0xffe0f007

080023d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff fd22 	bl	8001e24 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e099      	b.n	8002520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240c:	e00f      	b.n	800242e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800240e:	f7ff fd09 	bl	8001e24 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b05      	cmp	r3, #5
 800241a:	d908      	bls.n	800242e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e078      	b.n	8002520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e8      	bne.n	800240e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_DMA_Init+0x158>)
 8002448:	4013      	ands	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b04      	cmp	r3, #4
 8002486:	d107      	bne.n	8002498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4313      	orrs	r3, r2
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0307 	bic.w	r3, r3, #7
 80024ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d117      	bne.n	80024f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00e      	beq.n	80024f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa7b 	bl	80029d0 <DMA_CheckFifoParam>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ee:	2301      	movs	r3, #1
 80024f0:	e016      	b.n	8002520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa32 	bl	8002964 <DMA_CalcBaseAndBitshift>
 8002500:	4603      	mov	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	223f      	movs	r2, #63	; 0x3f
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	f010803f 	.word	0xf010803f

0800252c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800253a:	f7ff fc73 	bl	8001e24 <HAL_GetTick>
 800253e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d008      	beq.n	800255e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e052      	b.n	8002604 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0216 	bic.w	r2, r2, #22
 800256c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_DMA_Abort+0x62>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ae:	e013      	b.n	80025d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b0:	f7ff fc38 	bl	8001e24 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d90c      	bls.n	80025d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e015      	b.n	8002604 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e4      	bne.n	80025b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	223f      	movs	r2, #63	; 0x3f
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d004      	beq.n	800262a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e00c      	b.n	8002644 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2205      	movs	r2, #5
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800265c:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <HAL_DMA_IRQHandler+0x248>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a8e      	ldr	r2, [pc, #568]	; (800289c <HAL_DMA_IRQHandler+0x24c>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0a9b      	lsrs	r3, r3, #10
 8002668:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2208      	movs	r2, #8
 800267c:	409a      	lsls	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01a      	beq.n	80026bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0204 	bic.w	r2, r2, #4
 80026a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	2208      	movs	r2, #8
 80026aa:	409a      	lsls	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2201      	movs	r2, #1
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d012      	beq.n	80026f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2201      	movs	r2, #1
 80026e0:	409a      	lsls	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f043 0202 	orr.w	r2, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2204      	movs	r2, #4
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	2204      	movs	r2, #4
 8002716:	409a      	lsls	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f043 0204 	orr.w	r2, r3, #4
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2210      	movs	r2, #16
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d043      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d03c      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2210      	movs	r2, #16
 800274c:	409a      	lsls	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d018      	beq.n	8002792 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d108      	bne.n	8002780 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d024      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
 800277e:	e01f      	b.n	80027c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01b      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
 8002790:	e016      	b.n	80027c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0208 	bic.w	r2, r2, #8
 80027ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	2220      	movs	r2, #32
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 808f 	beq.w	80028f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8087 	beq.w	80028f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	2220      	movs	r2, #32
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d136      	bne.n	8002868 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0216 	bic.w	r2, r2, #22
 8002808:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002818:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <HAL_DMA_IRQHandler+0x1da>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0208 	bic.w	r2, r2, #8
 8002838:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	223f      	movs	r2, #63	; 0x3f
 8002840:	409a      	lsls	r2, r3
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	d07e      	beq.n	800295c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
        }
        return;
 8002866:	e079      	b.n	800295c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01d      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10d      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	2b00      	cmp	r3, #0
 800288a:	d031      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
 8002894:	e02c      	b.n	80028f0 <HAL_DMA_IRQHandler+0x2a0>
 8002896:	bf00      	nop
 8002898:	20000000 	.word	0x20000000
 800289c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d023      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
 80028b0:	e01e      	b.n	80028f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10f      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0210 	bic.w	r2, r2, #16
 80028ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d032      	beq.n	800295e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d022      	beq.n	800294a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2205      	movs	r2, #5
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	3301      	adds	r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d307      	bcc.n	8002938 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f2      	bne.n	800291c <HAL_DMA_IRQHandler+0x2cc>
 8002936:	e000      	b.n	800293a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002938:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
 800295a:	e000      	b.n	800295e <HAL_DMA_IRQHandler+0x30e>
        return;
 800295c:	bf00      	nop
    }
  }
}
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3b10      	subs	r3, #16
 8002974:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800297e:	4a13      	ldr	r2, [pc, #76]	; (80029cc <DMA_CalcBaseAndBitshift+0x68>)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d909      	bls.n	80029a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	1d1a      	adds	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	659a      	str	r2, [r3, #88]	; 0x58
 80029a4:	e007      	b.n	80029b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	aaaaaaab 	.word	0xaaaaaaab
 80029cc:	080078e0 	.word	0x080078e0

080029d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11f      	bne.n	8002a2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d856      	bhi.n	8002a9e <DMA_CheckFifoParam+0xce>
 80029f0:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <DMA_CheckFifoParam+0x28>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a09 	.word	0x08002a09
 80029fc:	08002a1b 	.word	0x08002a1b
 8002a00:	08002a09 	.word	0x08002a09
 8002a04:	08002a9f 	.word	0x08002a9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d046      	beq.n	8002aa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a18:	e043      	b.n	8002aa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a22:	d140      	bne.n	8002aa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a28:	e03d      	b.n	8002aa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a32:	d121      	bne.n	8002a78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d837      	bhi.n	8002aaa <DMA_CheckFifoParam+0xda>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <DMA_CheckFifoParam+0x70>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a57 	.word	0x08002a57
 8002a48:	08002a51 	.word	0x08002a51
 8002a4c:	08002a69 	.word	0x08002a69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      break;
 8002a54:	e030      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d025      	beq.n	8002aae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a66:	e022      	b.n	8002aae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a70:	d11f      	bne.n	8002ab2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a76:	e01c      	b.n	8002ab2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d903      	bls.n	8002a86 <DMA_CheckFifoParam+0xb6>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d003      	beq.n	8002a8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a84:	e018      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8a:	e015      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9c:	e00b      	b.n	8002ab6 <DMA_CheckFifoParam+0xe6>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e00a      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e008      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e006      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e004      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e002      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e165      	b.n	8002db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f040 8154 	bne.w	8002daa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d005      	beq.n	8002b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d130      	bne.n	8002b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 0201 	and.w	r2, r3, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d017      	beq.n	8002bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d123      	bne.n	8002c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	08da      	lsrs	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3208      	adds	r2, #8
 8002c06:	69b9      	ldr	r1, [r7, #24]
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0203 	and.w	r2, r3, #3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80ae 	beq.w	8002daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6a:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <HAL_GPIO_Init+0x308>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d025      	beq.n	8002ce2 <HAL_GPIO_Init+0x21a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_GPIO_Init+0x30c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01f      	beq.n	8002cde <HAL_GPIO_Init+0x216>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_GPIO_Init+0x310>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x212>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_GPIO_Init+0x314>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x20e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <HAL_GPIO_Init+0x318>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x20a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_GPIO_Init+0x31c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x206>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x202>
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	e00c      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00a      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cce:	2305      	movs	r3, #5
 8002cd0:	e008      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e004      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	f002 0203 	and.w	r2, r2, #3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4093      	lsls	r3, r2
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf4:	4935      	ldr	r1, [pc, #212]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d26:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	f67f ae96 	bls.w	8002ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	e001      	b.n	8002e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e30:	787b      	ldrb	r3, [r7, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e3c:	e003      	b.n	8002e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	041a      	lsls	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	619a      	str	r2, [r3, #24]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e64:	887a      	ldrh	r2, [r7, #2]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	041a      	lsls	r2, r3, #16
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	43d9      	mvns	r1, r3
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	400b      	ands	r3, r1
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f806 	bl	8002eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e12b      	b.n	800313a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fcaa 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	; 0x24
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f34:	f001 fb2c 	bl	8004590 <HAL_RCC_GetPCLK1Freq>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a81      	ldr	r2, [pc, #516]	; (8003144 <HAL_I2C_Init+0x274>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d807      	bhi.n	8002f54 <HAL_I2C_Init+0x84>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a80      	ldr	r2, [pc, #512]	; (8003148 <HAL_I2C_Init+0x278>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf94      	ite	ls
 8002f4c:	2301      	movls	r3, #1
 8002f4e:	2300      	movhi	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e006      	b.n	8002f62 <HAL_I2C_Init+0x92>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a7d      	ldr	r2, [pc, #500]	; (800314c <HAL_I2C_Init+0x27c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0e7      	b.n	800313a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a78      	ldr	r2, [pc, #480]	; (8003150 <HAL_I2C_Init+0x280>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0c9b      	lsrs	r3, r3, #18
 8002f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <HAL_I2C_Init+0x274>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d802      	bhi.n	8002fa4 <HAL_I2C_Init+0xd4>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	e009      	b.n	8002fb8 <HAL_I2C_Init+0xe8>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a69      	ldr	r2, [pc, #420]	; (8003154 <HAL_I2C_Init+0x284>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	495c      	ldr	r1, [pc, #368]	; (8003144 <HAL_I2C_Init+0x274>)
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	d819      	bhi.n	800300c <HAL_I2C_Init+0x13c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e59      	subs	r1, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fec:	400b      	ands	r3, r1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_I2C_Init+0x138>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e59      	subs	r1, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003006:	e051      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003008:	2304      	movs	r3, #4
 800300a:	e04f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <HAL_I2C_Init+0x168>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e012      	b.n	800305e <HAL_I2C_Init+0x18e>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x196>
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <HAL_I2C_Init+0x1bc>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e58      	subs	r0, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	440b      	add	r3, r1
 800307c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	0099      	lsls	r1, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6911      	ldr	r1, [r2, #16]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	000186a0 	.word	0x000186a0
 8003148:	001e847f 	.word	0x001e847f
 800314c:	003d08ff 	.word	0x003d08ff
 8003150:	431bde83 	.word	0x431bde83
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	460b      	mov	r3, r1
 8003166:	817b      	strh	r3, [r7, #10]
 8003168:	4613      	mov	r3, r2
 800316a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7fe fe5a 	bl	8001e24 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	f040 80e0 	bne.w	8003340 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2319      	movs	r3, #25
 8003186:	2201      	movs	r2, #1
 8003188:	4970      	ldr	r1, [pc, #448]	; (800334c <HAL_I2C_Master_Transmit+0x1f4>)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fde8 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
 8003198:	e0d3      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_I2C_Master_Transmit+0x50>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0cc      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d007      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2221      	movs	r2, #33	; 0x21
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2210      	movs	r2, #16
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	893a      	ldrh	r2, [r7, #8]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a50      	ldr	r2, [pc, #320]	; (8003350 <HAL_I2C_Master_Transmit+0x1f8>)
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003210:	8979      	ldrh	r1, [r7, #10]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fbbc 	bl	8003994 <I2C_MasterRequestWrite>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e08d      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800323c:	e066      	b.n	800330c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	6a39      	ldr	r1, [r7, #32]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fe62 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b04      	cmp	r3, #4
 8003254:	d107      	bne.n	8003266 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06b      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d11b      	bne.n	80032e0 <HAL_I2C_Master_Transmit+0x188>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	6a39      	ldr	r1, [r7, #32]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fe52 	bl	8003f8e <I2C_WaitOnBTFFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e01a      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d194      	bne.n	800323e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	00100002 	.word	0x00100002
 8003350:	ffff0000 	.word	0xffff0000

08003354 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	460b      	mov	r3, r1
 8003362:	817b      	strh	r3, [r7, #10]
 8003364:	4613      	mov	r3, r2
 8003366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7fe fd5c 	bl	8001e24 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	f040 820b 	bne.w	8003792 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	497c      	ldr	r1, [pc, #496]	; (8003578 <HAL_I2C_Master_Receive+0x224>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fcea 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	e1fe      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_I2C_Master_Receive+0x50>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e1f7      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d007      	beq.n	80033ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2222      	movs	r2, #34	; 0x22
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2210      	movs	r2, #16
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a5c      	ldr	r2, [pc, #368]	; (800357c <HAL_I2C_Master_Receive+0x228>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800340c:	8979      	ldrh	r1, [r7, #10]
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fb40 	bl	8003a98 <I2C_MasterRequestRead>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1b8      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	623b      	str	r3, [r7, #32]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e18c      	b.n	800376c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11b      	bne.n	8003492 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003468:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e16c      	b.n	800376c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	2b02      	cmp	r3, #2
 8003498:	d11b      	bne.n	80034d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	e14c      	b.n	800376c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034f8:	e138      	b.n	800376c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	2b03      	cmp	r3, #3
 8003500:	f200 80f1 	bhi.w	80036e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	2b01      	cmp	r3, #1
 800350a:	d123      	bne.n	8003554 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fd7d 	bl	8004010 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e139      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003552:	e10b      	b.n	800376c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b02      	cmp	r3, #2
 800355a:	d14e      	bne.n	80035fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	2200      	movs	r2, #0
 8003564:	4906      	ldr	r1, [pc, #24]	; (8003580 <HAL_I2C_Master_Receive+0x22c>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fbfa 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e10e      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
 8003576:	bf00      	nop
 8003578:	00100002 	.word	0x00100002
 800357c:	ffff0000 	.word	0xffff0000
 8003580:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f8:	e0b8      	b.n	800376c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2200      	movs	r2, #0
 8003602:	4966      	ldr	r1, [pc, #408]	; (800379c <HAL_I2C_Master_Receive+0x448>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fbab 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0bf      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	2200      	movs	r2, #0
 800365e:	494f      	ldr	r1, [pc, #316]	; (800379c <HAL_I2C_Master_Receive+0x448>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fb7d 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e091      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e4:	e042      	b.n	800376c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fc90 	bl	8004010 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e04c      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d118      	bne.n	800376c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	f47f aec2 	bne.w	80034fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	00010004 	.word	0x00010004

080037a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ba:	f7fe fb33 	bl	8001e24 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 80d9 	bne.w	8003980 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2319      	movs	r3, #25
 80037d4:	2201      	movs	r2, #1
 80037d6:	496d      	ldr	r1, [pc, #436]	; (800398c <HAL_I2C_Mem_Write+0x1ec>)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fac1 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	e0cc      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Mem_Write+0x56>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0c5      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d007      	beq.n	800381c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_I2C_Mem_Write+0x1f0>)
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800385e:	88f8      	ldrh	r0, [r7, #6]
 8003860:	893a      	ldrh	r2, [r7, #8]
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f9e0 	bl	8003c34 <I2C_RequestMemoryWrite>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d052      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e081      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fb42 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b04      	cmp	r3, #4
 8003894:	d107      	bne.n	80038a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d11b      	bne.n	8003920 <HAL_I2C_Mem_Write+0x180>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1aa      	bne.n	800387e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fb2e 	bl	8003f8e <I2C_WaitOnBTFFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b04      	cmp	r3, #4
 800393e:	d107      	bne.n	8003950 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e016      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	00100002 	.word	0x00100002
 8003990:	ffff0000 	.word	0xffff0000

08003994 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	460b      	mov	r3, r1
 80039a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d006      	beq.n	80039be <I2C_MasterRequestWrite+0x2a>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d003      	beq.n	80039be <I2C_MasterRequestWrite+0x2a>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039bc:	d108      	bne.n	80039d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e00b      	b.n	80039e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	2b12      	cmp	r3, #18
 80039d6:	d107      	bne.n	80039e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f9b3 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0e:	d103      	bne.n	8003a18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e035      	b.n	8003a88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d108      	bne.n	8003a38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	e01b      	b.n	8003a70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	11db      	asrs	r3, r3, #7
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0306 	and.w	r3, r3, #6
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f063 030f 	orn	r3, r3, #15
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <I2C_MasterRequestWrite+0xfc>)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f9d9 	bl	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e010      	b.n	8003a88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4907      	ldr	r1, [pc, #28]	; (8003a94 <I2C_MasterRequestWrite+0x100>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f9c9 	bl	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	00010008 	.word	0x00010008
 8003a94:	00010002 	.word	0x00010002

08003a98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d006      	beq.n	8003ad2 <I2C_MasterRequestRead+0x3a>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d003      	beq.n	8003ad2 <I2C_MasterRequestRead+0x3a>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad0:	d108      	bne.n	8003ae4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e00b      	b.n	8003afc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b11      	cmp	r3, #17
 8003aea:	d107      	bne.n	8003afc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f929 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b22:	d103      	bne.n	8003b2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e079      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b38:	d108      	bne.n	8003b4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	611a      	str	r2, [r3, #16]
 8003b4a:	e05f      	b.n	8003c0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b4c:	897b      	ldrh	r3, [r7, #10]
 8003b4e:	11db      	asrs	r3, r3, #7
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f063 030f 	orn	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4930      	ldr	r1, [pc, #192]	; (8003c2c <I2C_MasterRequestRead+0x194>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f94f 	bl	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e054      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4929      	ldr	r1, [pc, #164]	; (8003c30 <I2C_MasterRequestRead+0x198>)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f93f 	bl	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e044      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f8c7 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be6:	d103      	bne.n	8003bf0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e017      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bf4:	897b      	ldrh	r3, [r7, #10]
 8003bf6:	11db      	asrs	r3, r3, #7
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f063 030e 	orn	r3, r3, #14
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	4907      	ldr	r1, [pc, #28]	; (8003c30 <I2C_MasterRequestRead+0x198>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8fb 	bl	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	00010008 	.word	0x00010008
 8003c30:	00010002 	.word	0x00010002

08003c34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	460b      	mov	r3, r1
 8003c48:	813b      	strh	r3, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f878 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c84:	d103      	bne.n	8003c8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e05f      	b.n	8003d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c92:	897b      	ldrh	r3, [r7, #10]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	492d      	ldr	r1, [pc, #180]	; (8003d5c <I2C_RequestMemoryWrite+0x128>)
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f8b0 	bl	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e04c      	b.n	8003d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f91a 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d107      	bne.n	8003cf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02b      	b.n	8003d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d105      	bne.n	8003d0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d00:	893b      	ldrh	r3, [r7, #8]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	611a      	str	r2, [r3, #16]
 8003d0a:	e021      	b.n	8003d50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d0c:	893b      	ldrh	r3, [r7, #8]
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f8f4 	bl	8003f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d107      	bne.n	8003d42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e005      	b.n	8003d52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	00010002 	.word	0x00010002

08003d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d70:	e025      	b.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d78:	d021      	beq.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe f853 	bl	8001e24 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d116      	bne.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0220 	orr.w	r2, r3, #32
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e023      	b.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d10d      	bne.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	e00c      	b.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d0b6      	beq.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e1c:	e051      	b.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d123      	bne.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e046      	b.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7c:	d021      	beq.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fd ffd1 	bl	8001e24 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e020      	b.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d10c      	bne.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bf14      	ite	ne
 8003ede:	2301      	movne	r3, #1
 8003ee0:	2300      	moveq	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	e00b      	b.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	43da      	mvns	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d18d      	bne.n	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f18:	e02d      	b.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f8ce 	bl	80040bc <I2C_IsAcknowledgeFailed>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e02d      	b.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f30:	d021      	beq.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fd ff77 	bl	8001e24 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d116      	bne.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e007      	b.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b80      	cmp	r3, #128	; 0x80
 8003f82:	d1ca      	bne.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f9a:	e02d      	b.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f88d 	bl	80040bc <I2C_IsAcknowledgeFailed>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e02d      	b.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb2:	d021      	beq.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7fd ff36 	bl	8001e24 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d116      	bne.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e007      	b.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b04      	cmp	r3, #4
 8004004:	d1ca      	bne.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800401c:	e042      	b.n	80040a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b10      	cmp	r3, #16
 800402a:	d119      	bne.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0210 	mvn.w	r2, #16
 8004034:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e029      	b.n	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004060:	f7fd fee0 	bl	8001e24 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d116      	bne.n	80040a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e007      	b.n	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d1b5      	bne.n	800401e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d11b      	bne.n	800410c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0204 	orr.w	r2, r3, #4
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800411a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411c:	b08f      	sub	sp, #60	; 0x3c
 800411e:	af0a      	add	r7, sp, #40	; 0x28
 8004120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e116      	b.n	800435a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fcda 	bl	8001b00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f003 f85f 	bl	800722e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	687e      	ldr	r6, [r7, #4]
 8004178:	466d      	mov	r5, sp
 800417a:	f106 0410 	add.w	r4, r6, #16
 800417e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800418a:	e885 0003 	stmia.w	r5, {r0, r1}
 800418e:	1d33      	adds	r3, r6, #4
 8004190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004192:	6838      	ldr	r0, [r7, #0]
 8004194:	f002 ffea 	bl	800716c <USB_CoreInit>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e0d7      	b.n	800435a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f003 f84d 	bl	8007250 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e04a      	b.n	8004252 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	333d      	adds	r3, #61	; 0x3d
 80041cc:	2201      	movs	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	333c      	adds	r3, #60	; 0x3c
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	b298      	uxth	r0, r3
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	3344      	adds	r3, #68	; 0x44
 80041f8:	4602      	mov	r2, r0
 80041fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3340      	adds	r3, #64	; 0x40
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3348      	adds	r3, #72	; 0x48
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	334c      	adds	r3, #76	; 0x4c
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3354      	adds	r3, #84	; 0x54
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d3af      	bcc.n	80041bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e044      	b.n	80042ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	3301      	adds	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d3b5      	bcc.n	8004262 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	687e      	ldr	r6, [r7, #4]
 80042fe:	466d      	mov	r5, sp
 8004300:	f106 0410 	add.w	r4, r6, #16
 8004304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800430a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800430c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004310:	e885 0003 	stmia.w	r5, {r0, r1}
 8004314:	1d33      	adds	r3, r6, #4
 8004316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004318:	6838      	ldr	r0, [r7, #0]
 800431a:	f002 ffe5 	bl	80072e8 <USB_DevInit>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e014      	b.n	800435a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f80a 	bl	8004362 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f003 f9a3 	bl	800769e <USB_DevDisconnect>

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004362 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	f043 0303 	orr.w	r3, r3, #3
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0cc      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d90c      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b65      	ldr	r3, [pc, #404]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0b8      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004400:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800440a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a52      	ldr	r2, [pc, #328]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	494d      	ldr	r1, [pc, #308]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d044      	beq.n	80044cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d119      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d003      	beq.n	800446a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004466:	2b03      	cmp	r3, #3
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e06f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e067      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4934      	ldr	r1, [pc, #208]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800449c:	f7fd fcc2 	bl	8001e24 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a4:	f7fd fcbe 	bl	8001e24 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e04f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 020c 	and.w	r2, r3, #12
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d1eb      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d20c      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004532:	f000 fb7f 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004536:	4602      	mov	r2, r0
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	490a      	ldr	r1, [pc, #40]	; (800456c <HAL_RCC_ClockConfig+0x1c0>)
 8004544:	5ccb      	ldrb	r3, [r1, r3]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fc22 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023c00 	.word	0x40023c00
 8004568:	40023800 	.word	0x40023800
 800456c:	080078c8 	.word	0x080078c8
 8004570:	20000000 	.word	0x20000000
 8004574:	20000004 	.word	0x20000004

08004578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <HAL_RCC_GetHCLKFreq+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000000 	.word	0x20000000

08004590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004594:	f7ff fff0 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	0a9b      	lsrs	r3, r3, #10
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	4903      	ldr	r1, [pc, #12]	; (80045b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40023800 	.word	0x40023800
 80045b4:	080078d8 	.word	0x080078d8

080045b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045bc:	f7ff ffdc 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 80045c0:	4602      	mov	r2, r0
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	0b5b      	lsrs	r3, r3, #13
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	4903      	ldr	r1, [pc, #12]	; (80045dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ce:	5ccb      	ldrb	r3, [r1, r3]
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40023800 	.word	0x40023800
 80045dc:	080078d8 	.word	0x080078d8

080045e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	; 0x30
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004618:	4b6f      	ldr	r3, [pc, #444]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800461a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	496c      	ldr	r1, [pc, #432]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004636:	2301      	movs	r3, #1
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004646:	4b64      	ldr	r3, [pc, #400]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	4960      	ldr	r1, [pc, #384]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004664:	2301      	movs	r3, #1
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004674:	4b58      	ldr	r3, [pc, #352]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	4955      	ldr	r1, [pc, #340]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004692:	d101      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004694:	2301      	movs	r3, #1
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80046a0:	2301      	movs	r3, #1
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d017      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b0:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	4946      	ldr	r1, [pc, #280]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ce:	d101      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80046dc:	2301      	movs	r3, #1
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 808a 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	4a38      	ldr	r2, [pc, #224]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fc:	6413      	str	r3, [r2, #64]	; 0x40
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800470a:	4b34      	ldr	r3, [pc, #208]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a33      	ldr	r2, [pc, #204]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004716:	f7fd fb85 	bl	8001e24 <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800471e:	f7fd fb81 	bl	8001e24 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e278      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004730:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800473c:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02f      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004754:	6a3a      	ldr	r2, [r7, #32]
 8004756:	429a      	cmp	r2, r3
 8004758:	d028      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d114      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004782:	f7fd fb4f 	bl	8001e24 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fd fb4b 	bl	8001e24 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e240      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ee      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b8:	d114      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	4902      	ldr	r1, [pc, #8]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]
 80047d4:	e00c      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42470e40 	.word	0x42470e40
 80047e4:	4b4a      	ldr	r3, [pc, #296]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a49      	ldr	r2, [pc, #292]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ee:	6093      	str	r3, [r2, #8]
 80047f0:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	4944      	ldr	r1, [pc, #272]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004814:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004816:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004824:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004832:	4937      	ldr	r1, [pc, #220]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004846:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	492e      	ldr	r1, [pc, #184]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d011      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004868:	4b29      	ldr	r3, [pc, #164]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800486a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800486e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	4926      	ldr	r1, [pc, #152]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004886:	d101      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	491a      	ldr	r1, [pc, #104]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d011      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	4911      	ldr	r1, [pc, #68]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80048da:	2301      	movs	r3, #1
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d005      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ec:	f040 80ff 	bne.w	8004aee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048f6:	f7fd fa95 	bl	8001e24 <HAL_GetTick>
 80048fa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048fc:	e00e      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048fe:	f7fd fa91 	bl	8001e24 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d907      	bls.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e188      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004910:	40023800 	.word	0x40023800
 8004914:	424711e0 	.word	0x424711e0
 8004918:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800491c:	4b7e      	ldr	r3, [pc, #504]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ea      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004944:	2b00      	cmp	r3, #0
 8004946:	d028      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d124      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004950:	4b71      	ldr	r3, [pc, #452]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	3301      	adds	r3, #1
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	431a      	orrs	r2, r3
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	3b01      	subs	r3, #1
 8004982:	041b      	lsls	r3, r3, #16
 8004984:	431a      	orrs	r2, r3
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	4961      	ldr	r1, [pc, #388]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d004      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d035      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c4:	d130      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80049c6:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049d8:	4b4f      	ldr	r3, [pc, #316]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049de:	0f1b      	lsrs	r3, r3, #28
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	019b      	lsls	r3, r3, #6
 80049f0:	431a      	orrs	r2, r3
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	431a      	orrs	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	071b      	lsls	r3, r3, #28
 8004a08:	4943      	ldr	r1, [pc, #268]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a10:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a16:	f023 021f 	bic.w	r2, r3, #31
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	493d      	ldr	r1, [pc, #244]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d029      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d124      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	0f1b      	lsrs	r3, r3, #28
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	019b      	lsls	r3, r3, #6
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	3b01      	subs	r3, #1
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	431a      	orrs	r2, r3
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	071b      	lsls	r3, r3, #28
 8004a80:	4925      	ldr	r1, [pc, #148]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d016      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	019b      	lsls	r3, r3, #6
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	071b      	lsls	r3, r3, #28
 8004aba:	4917      	ldr	r1, [pc, #92]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac8:	f7fd f9ac 	bl	8001e24 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ad0:	f7fd f9a8 	bl	8001e24 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e09f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 8095 	bne.w	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004afc:	f7fd f992 	bl	8001e24 <HAL_GetTick>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b02:	e00f      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b04:	f7fd f98e 	bl	8001e24 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d908      	bls.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e085      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004b16:	bf00      	nop
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	42470068 	.word	0x42470068
 8004b20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b24:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b30:	d0e8      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02b      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d127      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004b5a:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	431a      	orrs	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	4928      	ldr	r1, [pc, #160]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	4922      	ldr	r1, [pc, #136]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01d      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bbe:	d118      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bc0:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	0e1b      	lsrs	r3, r3, #24
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	019b      	lsls	r3, r3, #6
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	3b01      	subs	r3, #1
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	4910      	ldr	r1, [pc, #64]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bf2:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf8:	f7fd f914 	bl	8001e24 <HAL_GetTick>
 8004bfc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c00:	f7fd f910 	bl	8001e24 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e007      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1e:	d1ef      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	42470070 	.word	0x42470070

08004c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b0ae      	sub	sp, #184	; 0xb8
 8004c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c5a:	4bcb      	ldr	r3, [pc, #812]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	f200 8206 	bhi.w	8005074 <HAL_RCC_GetSysClockFreq+0x440>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004ca5 	.word	0x08004ca5
 8004c74:	08005075 	.word	0x08005075
 8004c78:	08005075 	.word	0x08005075
 8004c7c:	08005075 	.word	0x08005075
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08005075 	.word	0x08005075
 8004c88:	08005075 	.word	0x08005075
 8004c8c:	08005075 	.word	0x08005075
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08005075 	.word	0x08005075
 8004c98:	08005075 	.word	0x08005075
 8004c9c:	08005075 	.word	0x08005075
 8004ca0:	08004ea5 	.word	0x08004ea5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca4:	4bb9      	ldr	r3, [pc, #740]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004caa:	e1e7      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cac:	4bb8      	ldr	r3, [pc, #736]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004cb2:	e1e3      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb4:	4bb4      	ldr	r3, [pc, #720]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cc0:	4bb1      	ldr	r3, [pc, #708]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d071      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ccc:	4bae      	ldr	r3, [pc, #696]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	f04f 0000 	mov.w	r0, #0
 8004cfa:	f04f 0100 	mov.w	r1, #0
 8004cfe:	0159      	lsls	r1, r3, #5
 8004d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d04:	0150      	lsls	r0, r2, #5
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	1a51      	subs	r1, r2, r1
 8004d0e:	6439      	str	r1, [r7, #64]	; 0x40
 8004d10:	4629      	mov	r1, r5
 8004d12:	eb63 0301 	sbc.w	r3, r3, r1
 8004d16:	647b      	str	r3, [r7, #68]	; 0x44
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004d24:	4649      	mov	r1, r9
 8004d26:	018b      	lsls	r3, r1, #6
 8004d28:	4641      	mov	r1, r8
 8004d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d2e:	4641      	mov	r1, r8
 8004d30:	018a      	lsls	r2, r1, #6
 8004d32:	4641      	mov	r1, r8
 8004d34:	1a51      	subs	r1, r2, r1
 8004d36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d38:	4649      	mov	r1, r9
 8004d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	00cb      	lsls	r3, r1, #3
 8004d50:	4641      	mov	r1, r8
 8004d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d56:	4641      	mov	r1, r8
 8004d58:	00ca      	lsls	r2, r1, #3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4622      	mov	r2, r4
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
 8004d66:	462b      	mov	r3, r5
 8004d68:	460a      	mov	r2, r1
 8004d6a:	eb42 0303 	adc.w	r3, r2, r3
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	024b      	lsls	r3, r1, #9
 8004d80:	4621      	mov	r1, r4
 8004d82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d86:	4621      	mov	r1, r4
 8004d88:	024a      	lsls	r2, r1, #9
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004da0:	f7fb fa30 	bl	8000204 <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4613      	mov	r3, r2
 8004daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dae:	e067      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db0:	4b75      	ldr	r3, [pc, #468]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	099b      	lsrs	r3, r3, #6
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dca:	2300      	movs	r3, #0
 8004dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	f04f 0000 	mov.w	r0, #0
 8004dda:	f04f 0100 	mov.w	r1, #0
 8004dde:	0159      	lsls	r1, r3, #5
 8004de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de4:	0150      	lsls	r0, r2, #5
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4621      	mov	r1, r4
 8004dec:	1a51      	subs	r1, r2, r1
 8004dee:	62b9      	str	r1, [r7, #40]	; 0x28
 8004df0:	4629      	mov	r1, r5
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004e04:	4649      	mov	r1, r9
 8004e06:	018b      	lsls	r3, r1, #6
 8004e08:	4641      	mov	r1, r8
 8004e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0e:	4641      	mov	r1, r8
 8004e10:	018a      	lsls	r2, r1, #6
 8004e12:	4641      	mov	r1, r8
 8004e14:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e18:	4649      	mov	r1, r9
 8004e1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e32:	4692      	mov	sl, r2
 8004e34:	469b      	mov	fp, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	eb1a 0303 	adds.w	r3, sl, r3
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	462b      	mov	r3, r5
 8004e40:	eb4b 0303 	adc.w	r3, fp, r3
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004e52:	4629      	mov	r1, r5
 8004e54:	028b      	lsls	r3, r1, #10
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	028a      	lsls	r2, r1, #10
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e68:	2200      	movs	r2, #0
 8004e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004e6c:	677a      	str	r2, [r7, #116]	; 0x74
 8004e6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004e72:	f7fb f9c7 	bl	8000204 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e80:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ea2:	e0eb      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea4:	4b38      	ldr	r3, [pc, #224]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eb0:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d06b      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebc:	4b32      	ldr	r3, [pc, #200]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ec6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004ed8:	4622      	mov	r2, r4
 8004eda:	462b      	mov	r3, r5
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	0159      	lsls	r1, r3, #5
 8004ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eea:	0150      	lsls	r0, r2, #5
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	1a51      	subs	r1, r2, r1
 8004ef4:	61b9      	str	r1, [r7, #24]
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	eb63 0301 	sbc.w	r3, r3, r1
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	018b      	lsls	r3, r1, #6
 8004f0e:	4651      	mov	r1, sl
 8004f10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f14:	4651      	mov	r1, sl
 8004f16:	018a      	lsls	r2, r1, #6
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ebb2 0801 	subs.w	r8, r2, r1
 8004f1e:	4659      	mov	r1, fp
 8004f20:	eb63 0901 	sbc.w	r9, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f38:	4690      	mov	r8, r2
 8004f3a:	4699      	mov	r9, r3
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	eb18 0303 	adds.w	r3, r8, r3
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	462b      	mov	r3, r5
 8004f46:	eb49 0303 	adc.w	r3, r9, r3
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004f58:	4629      	mov	r1, r5
 8004f5a:	024b      	lsls	r3, r1, #9
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f62:	4621      	mov	r1, r4
 8004f64:	024a      	lsls	r2, r1, #9
 8004f66:	4610      	mov	r0, r2
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f6e:	2200      	movs	r2, #0
 8004f70:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f78:	f7fb f944 	bl	8000204 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4613      	mov	r3, r2
 8004f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f86:	e065      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x420>
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f94:	4b3d      	ldr	r3, [pc, #244]	; (800508c <HAL_RCC_GetSysClockFreq+0x458>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8004faa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004fae:	4642      	mov	r2, r8
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	0159      	lsls	r1, r3, #5
 8004fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc0:	0150      	lsls	r0, r2, #5
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	1a51      	subs	r1, r2, r1
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4649      	mov	r1, r9
 8004fce:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004fe0:	4659      	mov	r1, fp
 8004fe2:	018b      	lsls	r3, r1, #6
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fea:	4651      	mov	r1, sl
 8004fec:	018a      	lsls	r2, r1, #6
 8004fee:	4651      	mov	r1, sl
 8004ff0:	1a54      	subs	r4, r2, r1
 8004ff2:	4659      	mov	r1, fp
 8004ff4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	00eb      	lsls	r3, r5, #3
 8005002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005006:	00e2      	lsls	r2, r4, #3
 8005008:	4614      	mov	r4, r2
 800500a:	461d      	mov	r5, r3
 800500c:	4643      	mov	r3, r8
 800500e:	18e3      	adds	r3, r4, r3
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	464b      	mov	r3, r9
 8005014:	eb45 0303 	adc.w	r3, r5, r3
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005026:	4629      	mov	r1, r5
 8005028:	028b      	lsls	r3, r1, #10
 800502a:	4621      	mov	r1, r4
 800502c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005030:	4621      	mov	r1, r4
 8005032:	028a      	lsls	r2, r1, #10
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800503c:	2200      	movs	r2, #0
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005040:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005042:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005046:	f7fb f8dd 	bl	8000204 <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4613      	mov	r3, r2
 8005050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <HAL_RCC_GetSysClockFreq+0x458>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	0f1b      	lsrs	r3, r3, #28
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800506a:	fbb2 f3f3 	udiv	r3, r2, r3
 800506e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005072:	e003      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800507a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800507c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005080:	4618      	mov	r0, r3
 8005082:	37b8      	adds	r7, #184	; 0xb8
 8005084:	46bd      	mov	sp, r7
 8005086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	00f42400 	.word	0x00f42400

08005094 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e28d      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 8083 	beq.w	80051ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050b4:	4b94      	ldr	r3, [pc, #592]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d019      	beq.n	80050f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050c0:	4b91      	ldr	r3, [pc, #580]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050cc:	4b8e      	ldr	r3, [pc, #568]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d8:	d00c      	beq.n	80050f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050da:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	d112      	bne.n	800510c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e6:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f2:	d10b      	bne.n	800510c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	4b84      	ldr	r3, [pc, #528]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05b      	beq.n	80051b8 <HAL_RCC_OscConfig+0x124>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d157      	bne.n	80051b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e25a      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d106      	bne.n	8005124 <HAL_RCC_OscConfig+0x90>
 8005116:	4b7c      	ldr	r3, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a7b      	ldr	r2, [pc, #492]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xcc>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0xb4>
 800512e:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a75      	ldr	r2, [pc, #468]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b73      	ldr	r3, [pc, #460]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a72      	ldr	r2, [pc, #456]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xcc>
 8005148:	4b6f      	ldr	r3, [pc, #444]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a6e      	ldr	r2, [pc, #440]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6b      	ldr	r2, [pc, #428]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fc fe5c 	bl	8001e24 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005170:	f7fc fe58 	bl	8001e24 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e21f      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b61      	ldr	r3, [pc, #388]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xdc>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fc fe48 	bl	8001e24 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005198:	f7fc fe44 	bl	8001e24 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e20b      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x104>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d06f      	beq.n	80052a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051c6:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d017      	beq.n	8005202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051d2:	4b4d      	ldr	r3, [pc, #308]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d105      	bne.n	80051ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051de:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d11c      	bne.n	8005230 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f6:	4b44      	ldr	r3, [pc, #272]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d116      	bne.n	8005230 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	4b41      	ldr	r3, [pc, #260]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_RCC_OscConfig+0x186>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e1d3      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4937      	ldr	r1, [pc, #220]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	e03a      	b.n	80052a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_RCC_OscConfig+0x278>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fc fdf1 	bl	8001e24 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005246:	f7fc fded 	bl	8001e24 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1b4      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005264:	4b28      	ldr	r3, [pc, #160]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4925      	ldr	r1, [pc, #148]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]
 8005278:	e015      	b.n	80052a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527a:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x278>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc fdd0 	bl	8001e24 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005288:	f7fc fdcc 	bl	8001e24 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e193      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d036      	beq.n	8005320 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <HAL_RCC_OscConfig+0x27c>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc fdb0 	bl	8001e24 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c8:	f7fc fdac 	bl	8001e24 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e173      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x234>
 80052e6:	e01b      	b.n	8005320 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_RCC_OscConfig+0x27c>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ee:	f7fc fd99 	bl	8001e24 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	e00e      	b.n	8005314 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f6:	f7fc fd95 	bl	8001e24 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d907      	bls.n	8005314 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e15c      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
 8005308:	40023800 	.word	0x40023800
 800530c:	42470000 	.word	0x42470000
 8005310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005314:	4b8a      	ldr	r3, [pc, #552]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ea      	bne.n	80052f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8097 	beq.w	800545c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005332:	4b83      	ldr	r3, [pc, #524]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	4b7f      	ldr	r3, [pc, #508]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	4a7e      	ldr	r2, [pc, #504]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	; 0x40
 800534e:	4b7c      	ldr	r3, [pc, #496]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535e:	4b79      	ldr	r3, [pc, #484]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800536a:	4b76      	ldr	r3, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a75      	ldr	r2, [pc, #468]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005376:	f7fc fd55 	bl	8001e24 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fc fd51 	bl	8001e24 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e118      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	4b6c      	ldr	r3, [pc, #432]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x31e>
 80053a4:	4b66      	ldr	r3, [pc, #408]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a8:	4a65      	ldr	r2, [pc, #404]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6713      	str	r3, [r2, #112]	; 0x70
 80053b0:	e01c      	b.n	80053ec <HAL_RCC_OscConfig+0x358>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x340>
 80053ba:	4b61      	ldr	r3, [pc, #388]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	4a60      	ldr	r2, [pc, #384]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053c0:	f043 0304 	orr.w	r3, r3, #4
 80053c4:	6713      	str	r3, [r2, #112]	; 0x70
 80053c6:	4b5e      	ldr	r3, [pc, #376]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	4a5d      	ldr	r2, [pc, #372]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	6713      	str	r3, [r2, #112]	; 0x70
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_OscConfig+0x358>
 80053d4:	4b5a      	ldr	r3, [pc, #360]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4a59      	ldr	r2, [pc, #356]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6713      	str	r3, [r2, #112]	; 0x70
 80053e0:	4b57      	ldr	r3, [pc, #348]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	4a56      	ldr	r2, [pc, #344]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053e6:	f023 0304 	bic.w	r3, r3, #4
 80053ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d015      	beq.n	8005420 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fc fd16 	bl	8001e24 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fc:	f7fc fd12 	bl	8001e24 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0d7      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	4b4b      	ldr	r3, [pc, #300]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ee      	beq.n	80053fc <HAL_RCC_OscConfig+0x368>
 800541e:	e014      	b.n	800544a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fc fd00 	bl	8001e24 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fc fcfc 	bl	8001e24 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0c1      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	4b40      	ldr	r3, [pc, #256]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ee      	bne.n	8005428 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80ad 	beq.w	80055c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005466:	4b36      	ldr	r3, [pc, #216]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b08      	cmp	r3, #8
 8005470:	d060      	beq.n	8005534 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d145      	bne.n	8005506 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	4b33      	ldr	r3, [pc, #204]	; (8005548 <HAL_RCC_OscConfig+0x4b4>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fc fcd0 	bl	8001e24 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005488:	f7fc fccc 	bl	8001e24 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e093      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	071b      	lsls	r3, r3, #28
 80054d2:	491b      	ldr	r1, [pc, #108]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_RCC_OscConfig+0x4b4>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fc fca1 	bl	8001e24 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fc fc9d 	bl	8001e24 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e064      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x452>
 8005504:	e05c      	b.n	80055c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <HAL_RCC_OscConfig+0x4b4>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fc fc8a 	bl	8001e24 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005514:	f7fc fc86 	bl	8001e24 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e04d      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x480>
 8005532:	e045      	b.n	80055c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e040      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
 8005540:	40023800 	.word	0x40023800
 8005544:	40007000 	.word	0x40007000
 8005548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800554c:	4b1f      	ldr	r3, [pc, #124]	; (80055cc <HAL_RCC_OscConfig+0x538>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d030      	beq.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d129      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d122      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005584:	4293      	cmp	r3, r2
 8005586:	d119      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	3b01      	subs	r3, #1
 8005596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d10f      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800

080055d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e041      	b.n	8005666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fc f994 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fb40 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e041      	b.n	8005704 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fc f923 	bl	80018e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f000 faf1 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <HAL_TIM_PWM_Start+0x24>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e022      	b.n	8005776 <HAL_TIM_PWM_Start+0x6a>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b04      	cmp	r3, #4
 8005734:	d109      	bne.n	800574a <HAL_TIM_PWM_Start+0x3e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e015      	b.n	8005776 <HAL_TIM_PWM_Start+0x6a>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d109      	bne.n	8005764 <HAL_TIM_PWM_Start+0x58>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e008      	b.n	8005776 <HAL_TIM_PWM_Start+0x6a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e07c      	b.n	8005878 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <HAL_TIM_PWM_Start+0x82>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800578c:	e013      	b.n	80057b6 <HAL_TIM_PWM_Start+0xaa>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b04      	cmp	r3, #4
 8005792:	d104      	bne.n	800579e <HAL_TIM_PWM_Start+0x92>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579c:	e00b      	b.n	80057b6 <HAL_TIM_PWM_Start+0xaa>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_PWM_Start+0xa2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	e003      	b.n	80057b6 <HAL_TIM_PWM_Start+0xaa>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2201      	movs	r2, #1
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fcb8 	bl	8006134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <HAL_TIM_PWM_Start+0x174>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_PWM_Start+0xcc>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <HAL_TIM_PWM_Start+0x178>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_PWM_Start+0xd0>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_TIM_PWM_Start+0xd2>
 80057dc:	2300      	movs	r3, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a22      	ldr	r2, [pc, #136]	; (8005880 <HAL_TIM_PWM_Start+0x174>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d022      	beq.n	8005842 <HAL_TIM_PWM_Start+0x136>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005804:	d01d      	beq.n	8005842 <HAL_TIM_PWM_Start+0x136>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <HAL_TIM_PWM_Start+0x17c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d018      	beq.n	8005842 <HAL_TIM_PWM_Start+0x136>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1d      	ldr	r2, [pc, #116]	; (800588c <HAL_TIM_PWM_Start+0x180>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_TIM_PWM_Start+0x136>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1c      	ldr	r2, [pc, #112]	; (8005890 <HAL_TIM_PWM_Start+0x184>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_TIM_PWM_Start+0x136>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_TIM_PWM_Start+0x178>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_TIM_PWM_Start+0x136>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_TIM_PWM_Start+0x188>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_TIM_PWM_Start+0x136>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a16      	ldr	r2, [pc, #88]	; (8005898 <HAL_TIM_PWM_Start+0x18c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d111      	bne.n	8005866 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b06      	cmp	r3, #6
 8005852:	d010      	beq.n	8005876 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005864:	e007      	b.n	8005876 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40010000 	.word	0x40010000
 8005884:	40010400 	.word	0x40010400
 8005888:	40000400 	.word	0x40000400
 800588c:	40000800 	.word	0x40000800
 8005890:	40000c00 	.word	0x40000c00
 8005894:	40014000 	.word	0x40014000
 8005898:	40001800 	.word	0x40001800

0800589c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0202 	mvn.w	r2, #2
 80058c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9ba 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9ac 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f9bd 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b04      	cmp	r3, #4
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b04      	cmp	r3, #4
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0204 	mvn.w	r2, #4
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f990 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f982 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f993 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b08      	cmp	r3, #8
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b08      	cmp	r3, #8
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0208 	mvn.w	r2, #8
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f966 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f958 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f969 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0210 	mvn.w	r2, #16
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2208      	movs	r2, #8
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f93c 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f92e 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f93f 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d107      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0201 	mvn.w	r2, #1
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f908 	bl	8005c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b80      	cmp	r3, #128	; 0x80
 8005a2c:	d10e      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d107      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fc72 	bl	8006330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b40      	cmp	r3, #64	; 0x40
 8005a58:	d10e      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d107      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f904 	bl	8005c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d10e      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d107      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0220 	mvn.w	r2, #32
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fc3c 	bl	800631c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0ae      	b.n	8005c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	f200 809f 	bhi.w	8005c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005c19 	.word	0x08005c19
 8005ae8:	08005c19 	.word	0x08005c19
 8005aec:	08005c19 	.word	0x08005c19
 8005af0:	08005b55 	.word	0x08005b55
 8005af4:	08005c19 	.word	0x08005c19
 8005af8:	08005c19 	.word	0x08005c19
 8005afc:	08005c19 	.word	0x08005c19
 8005b00:	08005b97 	.word	0x08005b97
 8005b04:	08005c19 	.word	0x08005c19
 8005b08:	08005c19 	.word	0x08005c19
 8005b0c:	08005c19 	.word	0x08005c19
 8005b10:	08005bd7 	.word	0x08005bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f95a 	bl	8005dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0204 	bic.w	r2, r2, #4
 8005b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6999      	ldr	r1, [r3, #24]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	619a      	str	r2, [r3, #24]
      break;
 8005b52:	e064      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f9aa 	bl	8005eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6999      	ldr	r1, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	021a      	lsls	r2, r3, #8
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	619a      	str	r2, [r3, #24]
      break;
 8005b94:	e043      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f9ff 	bl	8005fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0208 	orr.w	r2, r2, #8
 8005bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0204 	bic.w	r2, r2, #4
 8005bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69d9      	ldr	r1, [r3, #28]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]
      break;
 8005bd4:	e023      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fa53 	bl	8006088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69d9      	ldr	r1, [r3, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	021a      	lsls	r2, r3, #8
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	61da      	str	r2, [r3, #28]
      break;
 8005c16:	e002      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a40      	ldr	r2, [pc, #256]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3d      	ldr	r2, [pc, #244]	; (8005dac <TIM_Base_SetConfig+0x118>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3c      	ldr	r2, [pc, #240]	; (8005db0 <TIM_Base_SetConfig+0x11c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3b      	ldr	r2, [pc, #236]	; (8005db4 <TIM_Base_SetConfig+0x120>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3a      	ldr	r2, [pc, #232]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d108      	bne.n	8005ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2f      	ldr	r2, [pc, #188]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d02b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d027      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <TIM_Base_SetConfig+0x118>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d023      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2b      	ldr	r2, [pc, #172]	; (8005db0 <TIM_Base_SetConfig+0x11c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01f      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a2a      	ldr	r2, [pc, #168]	; (8005db4 <TIM_Base_SetConfig+0x120>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d017      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <TIM_Base_SetConfig+0x128>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a27      	ldr	r2, [pc, #156]	; (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00f      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <TIM_Base_SetConfig+0x130>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <TIM_Base_SetConfig+0x134>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <TIM_Base_SetConfig+0x138>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d108      	bne.n	8005d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00
 8005db8:	40010400 	.word	0x40010400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800
 8005dc8:	40001800 	.word	0x40001800
 8005dcc:	40001c00 	.word	0x40001c00
 8005dd0:	40002000 	.word	0x40002000

08005dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 0302 	bic.w	r3, r3, #2
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a20      	ldr	r2, [pc, #128]	; (8005eac <TIM_OC1_SetConfig+0xd8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC1_SetConfig+0x64>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <TIM_OC1_SetConfig+0xdc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10c      	bne.n	8005e52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0308 	bic.w	r3, r3, #8
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <TIM_OC1_SetConfig+0xd8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC1_SetConfig+0x8e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <TIM_OC1_SetConfig+0xdc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d111      	bne.n	8005e86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40010400 	.word	0x40010400

08005eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f023 0210 	bic.w	r2, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0320 	bic.w	r3, r3, #32
 8005efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <TIM_OC2_SetConfig+0xe4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_OC2_SetConfig+0x68>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <TIM_OC2_SetConfig+0xe8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10d      	bne.n	8005f38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <TIM_OC2_SetConfig+0xe4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <TIM_OC2_SetConfig+0x94>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC2_SetConfig+0xe8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d113      	bne.n	8005f70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40010400 	.word	0x40010400

08005fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0303 	bic.w	r3, r3, #3
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <TIM_OC3_SetConfig+0xe0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_OC3_SetConfig+0x66>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a20      	ldr	r2, [pc, #128]	; (8006084 <TIM_OC3_SetConfig+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d10d      	bne.n	8006022 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800600c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a16      	ldr	r2, [pc, #88]	; (8006080 <TIM_OC3_SetConfig+0xe0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_OC3_SetConfig+0x92>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a15      	ldr	r2, [pc, #84]	; (8006084 <TIM_OC3_SetConfig+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d113      	bne.n	800605a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	621a      	str	r2, [r3, #32]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400

08006088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a12      	ldr	r2, [pc, #72]	; (800612c <TIM_OC4_SetConfig+0xa4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_OC4_SetConfig+0x68>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a11      	ldr	r2, [pc, #68]	; (8006130 <TIM_OC4_SetConfig+0xa8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d109      	bne.n	8006104 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	019b      	lsls	r3, r3, #6
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40010000 	.word	0x40010000
 8006130:	40010400 	.word	0x40010400

08006134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2201      	movs	r2, #1
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	43db      	mvns	r3, r3
 8006156:	401a      	ands	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	fa01 f303 	lsl.w	r3, r1, r3
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006194:	2302      	movs	r3, #2
 8006196:	e05a      	b.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a21      	ldr	r2, [pc, #132]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e4:	d01d      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1b      	ldr	r2, [pc, #108]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1a      	ldr	r2, [pc, #104]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a18      	ldr	r2, [pc, #96]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a17      	ldr	r2, [pc, #92]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a15      	ldr	r2, [pc, #84]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d10c      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4313      	orrs	r3, r2
 8006232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40010400 	.word	0x40010400
 8006270:	40014000 	.word	0x40014000
 8006274:	40001800 	.word	0x40001800

08006278 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006290:	2302      	movs	r3, #2
 8006292:	e03d      	b.n	8006310 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e03f      	b.n	80063d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fb fb3c 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2224      	movs	r2, #36	; 0x24
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fc7b 	bl	8006c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800639c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b0ba      	sub	sp, #232	; 0xe8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006406:	2300      	movs	r3, #0
 8006408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800641e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10f      	bne.n	8006446 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_UART_IRQHandler+0x66>
 8006432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fb65 	bl	8006b0e <UART_Receive_IT>
      return;
 8006444:	e256      	b.n	80068f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80de 	beq.w	800660c <HAL_UART_IRQHandler+0x22c>
 8006450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006460:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80d1 	beq.w	800660c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <HAL_UART_IRQHandler+0xae>
 8006476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f043 0201 	orr.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <HAL_UART_IRQHandler+0xd2>
 800649a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f043 0202 	orr.w	r2, r3, #2
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_UART_IRQHandler+0xf6>
 80064be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f043 0204 	orr.w	r2, r3, #4
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d011      	beq.n	8006506 <HAL_UART_IRQHandler+0x126>
 80064e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	f043 0208 	orr.w	r2, r3, #8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 81ed 	beq.w	80068ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <HAL_UART_IRQHandler+0x14e>
 800651c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 faf0 	bl	8006b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <HAL_UART_IRQHandler+0x17a>
 8006552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d04f      	beq.n	80065fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f9f8 	bl	8006950 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d141      	bne.n	80065f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800659a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800659e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1d9      	bne.n	800656e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	4a7d      	ldr	r2, [pc, #500]	; (80067bc <HAL_UART_IRQHandler+0x3dc>)
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fc f81c 	bl	800260c <HAL_DMA_Abort_IT>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	e00e      	b.n	8006608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f99a 	bl	8006924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	e00a      	b.n	8006608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f996 	bl	8006924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	e006      	b.n	8006608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f992 	bl	8006924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006606:	e170      	b.n	80068ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	bf00      	nop
    return;
 800660a:	e16e      	b.n	80068ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	2b01      	cmp	r3, #1
 8006612:	f040 814a 	bne.w	80068aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8143 	beq.w	80068aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 813c 	beq.w	80068aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	f040 80b4 	bne.w	80067c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8140 	beq.w	80068ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006676:	429a      	cmp	r2, r3
 8006678:	f080 8139 	bcs.w	80068ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006682:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	f000 8088 	beq.w	80067a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1d9      	bne.n	8006692 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3314      	adds	r3, #20
 80066e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006702:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006706:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800670a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e1      	bne.n	80066de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3314      	adds	r3, #20
 8006720:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800672a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800672c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3314      	adds	r3, #20
 800673a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800673e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006740:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006744:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800674c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e3      	bne.n	800671a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006772:	f023 0310 	bic.w	r3, r3, #16
 8006776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006784:	65ba      	str	r2, [r7, #88]	; 0x58
 8006786:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800678a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e3      	bne.n	8006760 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	4618      	mov	r0, r3
 800679e:	f7fb fec5 	bl	800252c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f8c0 	bl	8006938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067b8:	e099      	b.n	80068ee <HAL_UART_IRQHandler+0x50e>
 80067ba:	bf00      	nop
 80067bc:	08006a17 	.word	0x08006a17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 808b 	beq.w	80068f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80067dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8086 	beq.w	80068f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	330c      	adds	r3, #12
 8006806:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800680a:	647a      	str	r2, [r7, #68]	; 0x44
 800680c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e3      	bne.n	80067e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3314      	adds	r3, #20
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	623b      	str	r3, [r7, #32]
   return(result);
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3314      	adds	r3, #20
 800683e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006842:	633a      	str	r2, [r7, #48]	; 0x30
 8006844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e3      	bne.n	800681e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	60fb      	str	r3, [r7, #12]
   return(result);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0310 	bic.w	r3, r3, #16
 800687a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	330c      	adds	r3, #12
 8006884:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006888:	61fa      	str	r2, [r7, #28]
 800688a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	69b9      	ldr	r1, [r7, #24]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	617b      	str	r3, [r7, #20]
   return(result);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e3      	bne.n	8006864 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800689c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f848 	bl	8006938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068a8:	e023      	b.n	80068f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <HAL_UART_IRQHandler+0x4ea>
 80068b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f8bb 	bl	8006a3e <UART_Transmit_IT>
    return;
 80068c8:	e014      	b.n	80068f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00e      	beq.n	80068f4 <HAL_UART_IRQHandler+0x514>
 80068d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d008      	beq.n	80068f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f8fb 	bl	8006ade <UART_EndTransmit_IT>
    return;
 80068e8:	e004      	b.n	80068f4 <HAL_UART_IRQHandler+0x514>
    return;
 80068ea:	bf00      	nop
 80068ec:	e002      	b.n	80068f4 <HAL_UART_IRQHandler+0x514>
      return;
 80068ee:	bf00      	nop
 80068f0:	e000      	b.n	80068f4 <HAL_UART_IRQHandler+0x514>
      return;
 80068f2:	bf00      	nop
  }
}
 80068f4:	37e8      	adds	r7, #232	; 0xe8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop

080068fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006950:	b480      	push	{r7}
 8006952:	b095      	sub	sp, #84	; 0x54
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	330c      	adds	r3, #12
 8006976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006978:	643a      	str	r2, [r7, #64]	; 0x40
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800697e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e5      	bne.n	8006958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3314      	adds	r3, #20
 8006992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	61fb      	str	r3, [r7, #28]
   return(result);
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f023 0301 	bic.w	r3, r3, #1
 80069a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e5      	bne.n	800698c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d119      	bne.n	80069fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	647b      	str	r3, [r7, #68]	; 0x44
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	330c      	adds	r3, #12
 80069e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069e8:	61ba      	str	r2, [r7, #24]
 80069ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6979      	ldr	r1, [r7, #20]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	613b      	str	r3, [r7, #16]
   return(result);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a0a:	bf00      	nop
 8006a0c:	3754      	adds	r7, #84	; 0x54
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ff77 	bl	8006924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b21      	cmp	r3, #33	; 0x21
 8006a50:	d13e      	bne.n	8006ad0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5a:	d114      	bne.n	8006a86 <UART_Transmit_IT+0x48>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d110      	bne.n	8006a86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	621a      	str	r2, [r3, #32]
 8006a84:	e008      	b.n	8006a98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	1c59      	adds	r1, r3, #1
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6211      	str	r1, [r2, #32]
 8006a90:	781a      	ldrb	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10f      	bne.n	8006acc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fefc 	bl	80068fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b08c      	sub	sp, #48	; 0x30
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b22      	cmp	r3, #34	; 0x22
 8006b20:	f040 80ab 	bne.w	8006c7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d117      	bne.n	8006b5e <UART_Receive_IT+0x50>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d113      	bne.n	8006b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	1c9a      	adds	r2, r3, #2
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b5c:	e026      	b.n	8006bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b70:	d007      	beq.n	8006b82 <UART_Receive_IT+0x74>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <UART_Receive_IT+0x82>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e008      	b.n	8006ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d15a      	bne.n	8006c76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0220 	bic.w	r2, r2, #32
 8006bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d135      	bne.n	8006c6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	613b      	str	r3, [r7, #16]
   return(result);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f023 0310 	bic.w	r3, r3, #16
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	623a      	str	r2, [r7, #32]
 8006c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	69f9      	ldr	r1, [r7, #28]
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e5      	bne.n	8006c06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d10a      	bne.n	8006c5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff fe67 	bl	8006938 <HAL_UARTEx_RxEventCallback>
 8006c6a:	e002      	b.n	8006c72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fe4f 	bl	8006910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e002      	b.n	8006c7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c7a:	2302      	movs	r3, #2
  }
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3730      	adds	r7, #48	; 0x30
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c88:	b0c0      	sub	sp, #256	; 0x100
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	68d9      	ldr	r1, [r3, #12]
 8006ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	ea40 0301 	orr.w	r3, r0, r1
 8006cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cdc:	f021 010c 	bic.w	r1, r1, #12
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cea:	430b      	orrs	r3, r1
 8006cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfe:	6999      	ldr	r1, [r3, #24]
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	ea40 0301 	orr.w	r3, r0, r1
 8006d0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b8f      	ldr	r3, [pc, #572]	; (8006f50 <UART_SetConfig+0x2cc>)
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d005      	beq.n	8006d24 <UART_SetConfig+0xa0>
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b8d      	ldr	r3, [pc, #564]	; (8006f54 <UART_SetConfig+0x2d0>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d104      	bne.n	8006d2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d24:	f7fd fc48 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 8006d28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d2c:	e003      	b.n	8006d36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d2e:	f7fd fc2f 	bl	8004590 <HAL_RCC_GetPCLK1Freq>
 8006d32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d40:	f040 810c 	bne.w	8006f5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d56:	4622      	mov	r2, r4
 8006d58:	462b      	mov	r3, r5
 8006d5a:	1891      	adds	r1, r2, r2
 8006d5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d5e:	415b      	adcs	r3, r3
 8006d60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d66:	4621      	mov	r1, r4
 8006d68:	eb12 0801 	adds.w	r8, r2, r1
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	eb43 0901 	adc.w	r9, r3, r1
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d86:	4690      	mov	r8, r2
 8006d88:	4699      	mov	r9, r3
 8006d8a:	4623      	mov	r3, r4
 8006d8c:	eb18 0303 	adds.w	r3, r8, r3
 8006d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d94:	462b      	mov	r3, r5
 8006d96:	eb49 0303 	adc.w	r3, r9, r3
 8006d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006daa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006db2:	460b      	mov	r3, r1
 8006db4:	18db      	adds	r3, r3, r3
 8006db6:	653b      	str	r3, [r7, #80]	; 0x50
 8006db8:	4613      	mov	r3, r2
 8006dba:	eb42 0303 	adc.w	r3, r2, r3
 8006dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006dc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006dc8:	f7f9 fa1c 	bl	8000204 <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4b61      	ldr	r3, [pc, #388]	; (8006f58 <UART_SetConfig+0x2d4>)
 8006dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	011c      	lsls	r4, r3, #4
 8006dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006de4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006de8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	1891      	adds	r1, r2, r2
 8006df2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006df4:	415b      	adcs	r3, r3
 8006df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	eb12 0a01 	adds.w	sl, r2, r1
 8006e02:	4649      	mov	r1, r9
 8006e04:	eb43 0b01 	adc.w	fp, r3, r1
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e1c:	4692      	mov	sl, r2
 8006e1e:	469b      	mov	fp, r3
 8006e20:	4643      	mov	r3, r8
 8006e22:	eb1a 0303 	adds.w	r3, sl, r3
 8006e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e2a:	464b      	mov	r3, r9
 8006e2c:	eb4b 0303 	adc.w	r3, fp, r3
 8006e30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	18db      	adds	r3, r3, r3
 8006e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e4e:	4613      	mov	r3, r2
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	647b      	str	r3, [r7, #68]	; 0x44
 8006e56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e5e:	f7f9 f9d1 	bl	8000204 <__aeabi_uldivmod>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4611      	mov	r1, r2
 8006e68:	4b3b      	ldr	r3, [pc, #236]	; (8006f58 <UART_SetConfig+0x2d4>)
 8006e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	2264      	movs	r2, #100	; 0x64
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	1acb      	subs	r3, r1, r3
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <UART_SetConfig+0x2d4>)
 8006e80:	fba3 2302 	umull	r2, r3, r3, r2
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e8c:	441c      	add	r4, r3
 8006e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	1891      	adds	r1, r2, r2
 8006ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ea8:	415b      	adcs	r3, r3
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	1851      	adds	r1, r2, r1
 8006eb4:	6339      	str	r1, [r7, #48]	; 0x30
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	414b      	adcs	r3, r1
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ec8:	4659      	mov	r1, fp
 8006eca:	00cb      	lsls	r3, r1, #3
 8006ecc:	4651      	mov	r1, sl
 8006ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	00ca      	lsls	r2, r1, #3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	4642      	mov	r2, r8
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	460a      	mov	r2, r1
 8006ee8:	eb42 0303 	adc.w	r3, r2, r3
 8006eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006efc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f04:	460b      	mov	r3, r1
 8006f06:	18db      	adds	r3, r3, r3
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	eb42 0303 	adc.w	r3, r2, r3
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f1a:	f7f9 f973 	bl	8000204 <__aeabi_uldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <UART_SetConfig+0x2d4>)
 8006f24:	fba3 1302 	umull	r1, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	2164      	movs	r1, #100	; 0x64
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3332      	adds	r3, #50	; 0x32
 8006f36:	4a08      	ldr	r2, [pc, #32]	; (8006f58 <UART_SetConfig+0x2d4>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	f003 0207 	and.w	r2, r3, #7
 8006f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4422      	add	r2, r4
 8006f4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f4c:	e106      	b.n	800715c <UART_SetConfig+0x4d8>
 8006f4e:	bf00      	nop
 8006f50:	40011000 	.word	0x40011000
 8006f54:	40011400 	.word	0x40011400
 8006f58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f6e:	4642      	mov	r2, r8
 8006f70:	464b      	mov	r3, r9
 8006f72:	1891      	adds	r1, r2, r2
 8006f74:	6239      	str	r1, [r7, #32]
 8006f76:	415b      	adcs	r3, r3
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f7e:	4641      	mov	r1, r8
 8006f80:	1854      	adds	r4, r2, r1
 8006f82:	4649      	mov	r1, r9
 8006f84:	eb43 0501 	adc.w	r5, r3, r1
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	00eb      	lsls	r3, r5, #3
 8006f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f96:	00e2      	lsls	r2, r4, #3
 8006f98:	4614      	mov	r4, r2
 8006f9a:	461d      	mov	r5, r3
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	18e3      	adds	r3, r4, r3
 8006fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	eb45 0303 	adc.w	r3, r5, r3
 8006faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fca:	4629      	mov	r1, r5
 8006fcc:	008b      	lsls	r3, r1, #2
 8006fce:	4621      	mov	r1, r4
 8006fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	008a      	lsls	r2, r1, #2
 8006fd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fdc:	f7f9 f912 	bl	8000204 <__aeabi_uldivmod>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4b60      	ldr	r3, [pc, #384]	; (8007168 <UART_SetConfig+0x4e4>)
 8006fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	011c      	lsls	r4, r3, #4
 8006fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ff8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007000:	4642      	mov	r2, r8
 8007002:	464b      	mov	r3, r9
 8007004:	1891      	adds	r1, r2, r2
 8007006:	61b9      	str	r1, [r7, #24]
 8007008:	415b      	adcs	r3, r3
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007010:	4641      	mov	r1, r8
 8007012:	1851      	adds	r1, r2, r1
 8007014:	6139      	str	r1, [r7, #16]
 8007016:	4649      	mov	r1, r9
 8007018:	414b      	adcs	r3, r1
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007028:	4659      	mov	r1, fp
 800702a:	00cb      	lsls	r3, r1, #3
 800702c:	4651      	mov	r1, sl
 800702e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007032:	4651      	mov	r1, sl
 8007034:	00ca      	lsls	r2, r1, #3
 8007036:	4610      	mov	r0, r2
 8007038:	4619      	mov	r1, r3
 800703a:	4603      	mov	r3, r0
 800703c:	4642      	mov	r2, r8
 800703e:	189b      	adds	r3, r3, r2
 8007040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007044:	464b      	mov	r3, r9
 8007046:	460a      	mov	r2, r1
 8007048:	eb42 0303 	adc.w	r3, r2, r3
 800704c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	67bb      	str	r3, [r7, #120]	; 0x78
 800705a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007068:	4649      	mov	r1, r9
 800706a:	008b      	lsls	r3, r1, #2
 800706c:	4641      	mov	r1, r8
 800706e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007072:	4641      	mov	r1, r8
 8007074:	008a      	lsls	r2, r1, #2
 8007076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800707a:	f7f9 f8c3 	bl	8000204 <__aeabi_uldivmod>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4611      	mov	r1, r2
 8007084:	4b38      	ldr	r3, [pc, #224]	; (8007168 <UART_SetConfig+0x4e4>)
 8007086:	fba3 2301 	umull	r2, r3, r3, r1
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	2264      	movs	r2, #100	; 0x64
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	1acb      	subs	r3, r1, r3
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	3332      	adds	r3, #50	; 0x32
 8007098:	4a33      	ldr	r2, [pc, #204]	; (8007168 <UART_SetConfig+0x4e4>)
 800709a:	fba2 2303 	umull	r2, r3, r2, r3
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070a4:	441c      	add	r4, r3
 80070a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070aa:	2200      	movs	r2, #0
 80070ac:	673b      	str	r3, [r7, #112]	; 0x70
 80070ae:	677a      	str	r2, [r7, #116]	; 0x74
 80070b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	1891      	adds	r1, r2, r2
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	415b      	adcs	r3, r3
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070c4:	4641      	mov	r1, r8
 80070c6:	1851      	adds	r1, r2, r1
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	4649      	mov	r1, r9
 80070cc:	414b      	adcs	r3, r1
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070dc:	4659      	mov	r1, fp
 80070de:	00cb      	lsls	r3, r1, #3
 80070e0:	4651      	mov	r1, sl
 80070e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070e6:	4651      	mov	r1, sl
 80070e8:	00ca      	lsls	r2, r1, #3
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	4603      	mov	r3, r0
 80070f0:	4642      	mov	r2, r8
 80070f2:	189b      	adds	r3, r3, r2
 80070f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80070f6:	464b      	mov	r3, r9
 80070f8:	460a      	mov	r2, r1
 80070fa:	eb42 0303 	adc.w	r3, r2, r3
 80070fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	663b      	str	r3, [r7, #96]	; 0x60
 800710a:	667a      	str	r2, [r7, #100]	; 0x64
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007118:	4649      	mov	r1, r9
 800711a:	008b      	lsls	r3, r1, #2
 800711c:	4641      	mov	r1, r8
 800711e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007122:	4641      	mov	r1, r8
 8007124:	008a      	lsls	r2, r1, #2
 8007126:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800712a:	f7f9 f86b 	bl	8000204 <__aeabi_uldivmod>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <UART_SetConfig+0x4e4>)
 8007134:	fba3 1302 	umull	r1, r3, r3, r2
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	2164      	movs	r1, #100	; 0x64
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	3332      	adds	r3, #50	; 0x32
 8007146:	4a08      	ldr	r2, [pc, #32]	; (8007168 <UART_SetConfig+0x4e4>)
 8007148:	fba2 2303 	umull	r2, r3, r2, r3
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f003 020f 	and.w	r2, r3, #15
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4422      	add	r2, r4
 800715a:	609a      	str	r2, [r3, #8]
}
 800715c:	bf00      	nop
 800715e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007162:	46bd      	mov	sp, r7
 8007164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007168:	51eb851f 	.word	0x51eb851f

0800716c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800716c:	b084      	sub	sp, #16
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	f107 001c 	add.w	r0, r7, #28
 800717a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	2b01      	cmp	r3, #1
 8007182:	d122      	bne.n	80071ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d105      	bne.n	80071be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa9c 	bl	80076fc <USB_CoreReset>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e01a      	b.n	8007200 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa90 	bl	80076fc <USB_CoreReset>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	639a      	str	r2, [r3, #56]	; 0x38
 80071f2:	e005      	b.n	8007200 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	2b01      	cmp	r3, #1
 8007204:	d10b      	bne.n	800721e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f043 0206 	orr.w	r2, r3, #6
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800722a:	b004      	add	sp, #16
 800722c:	4770      	bx	lr

0800722e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f023 0201 	bic.w	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d115      	bne.n	800729e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800727e:	2001      	movs	r0, #1
 8007280:	f7fa fddc 	bl	8001e3c <HAL_Delay>
      ms++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa28 	bl	80076e0 <USB_GetMode>
 8007290:	4603      	mov	r3, r0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d01e      	beq.n	80072d4 <USB_SetCurrentMode+0x84>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b31      	cmp	r3, #49	; 0x31
 800729a:	d9f0      	bls.n	800727e <USB_SetCurrentMode+0x2e>
 800729c:	e01a      	b.n	80072d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d115      	bne.n	80072d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072b0:	2001      	movs	r0, #1
 80072b2:	f7fa fdc3 	bl	8001e3c <HAL_Delay>
      ms++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fa0f 	bl	80076e0 <USB_GetMode>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <USB_SetCurrentMode+0x84>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b31      	cmp	r3, #49	; 0x31
 80072cc:	d9f0      	bls.n	80072b0 <USB_SetCurrentMode+0x60>
 80072ce:	e001      	b.n	80072d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e005      	b.n	80072e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b32      	cmp	r3, #50	; 0x32
 80072d8:	d101      	bne.n	80072de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e8:	b084      	sub	sp, #16
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	e009      	b.n	800731c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3340      	adds	r3, #64	; 0x40
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	2200      	movs	r2, #0
 8007314:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3301      	adds	r3, #1
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b0e      	cmp	r3, #14
 8007320:	d9f2      	bls.n	8007308 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d11c      	bne.n	8007362 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007336:	f043 0302 	orr.w	r3, r3, #2
 800733a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e005      	b.n	800736e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007374:	461a      	mov	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	4619      	mov	r1, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	461a      	mov	r2, r3
 800738a:	680b      	ldr	r3, [r1, #0]
 800738c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	2b01      	cmp	r3, #1
 8007392:	d10c      	bne.n	80073ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800739a:	2100      	movs	r1, #0
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f965 	bl	800766c <USB_SetDevSpeed>
 80073a2:	e008      	b.n	80073b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073a4:	2101      	movs	r1, #1
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f960 	bl	800766c <USB_SetDevSpeed>
 80073ac:	e003      	b.n	80073b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073ae:	2103      	movs	r1, #3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f95b 	bl	800766c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073b6:	2110      	movs	r1, #16
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8f3 	bl	80075a4 <USB_FlushTxFifo>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f91f 	bl	800760c <USB_FlushRxFifo>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	461a      	mov	r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	461a      	mov	r2, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f6:	461a      	mov	r2, r3
 80073f8:	2300      	movs	r3, #0
 80073fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	e043      	b.n	800748a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007418:	d118      	bne.n	800744c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	461a      	mov	r2, r3
 800742e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	e013      	b.n	800745e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	461a      	mov	r2, r3
 8007444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e008      	b.n	800745e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	461a      	mov	r2, r3
 800745a:	2300      	movs	r3, #0
 800745c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	461a      	mov	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	461a      	mov	r2, r3
 800747e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007482:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	3301      	adds	r3, #1
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	d3b7      	bcc.n	8007402 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	e043      	b.n	8007520 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ae:	d118      	bne.n	80074e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	461a      	mov	r2, r3
 80074c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e013      	b.n	80074f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	461a      	mov	r2, r3
 80074da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	e008      	b.n	80074f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	461a      	mov	r2, r3
 80074f0:	2300      	movs	r3, #0
 80074f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	461a      	mov	r2, r3
 8007502:	2300      	movs	r3, #0
 8007504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	461a      	mov	r2, r3
 8007514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007518:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	429a      	cmp	r2, r3
 8007526:	d3b7      	bcc.n	8007498 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800753a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007548:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f043 0210 	orr.w	r2, r3, #16
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <USB_DevInit+0x2b8>)
 8007562:	4313      	orrs	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007588:	f043 0304 	orr.w	r3, r3, #4
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800759c:	b004      	add	sp, #16
 800759e:	4770      	bx	lr
 80075a0:	803c3800 	.word	0x803c3800

080075a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d901      	bls.n	80075c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e01b      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	daf2      	bge.n	80075b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	019b      	lsls	r3, r3, #6
 80075d4:	f043 0220 	orr.w	r2, r3, #32
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d901      	bls.n	80075ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e006      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d0f0      	beq.n	80075dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	00030d40 	.word	0x00030d40

0800760c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e018      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	daf2      	bge.n	8007618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2210      	movs	r2, #16
 800763a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e006      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b10      	cmp	r3, #16
 8007658:	d0f0      	beq.n	800763c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	00030d40 	.word	0x00030d40

0800766c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800768c:	4313      	orrs	r3, r2
 800768e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f003 0301 	and.w	r3, r3, #1
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3301      	adds	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a13      	ldr	r2, [pc, #76]	; (8007760 <USB_CoreReset+0x64>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e01b      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	daf2      	bge.n	8007708 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f043 0201 	orr.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <USB_CoreReset+0x64>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e006      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d0f0      	beq.n	8007732 <USB_CoreReset+0x36>

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	00030d40 	.word	0x00030d40

08007764 <memset>:
 8007764:	4402      	add	r2, r0
 8007766:	4603      	mov	r3, r0
 8007768:	4293      	cmp	r3, r2
 800776a:	d100      	bne.n	800776e <memset+0xa>
 800776c:	4770      	bx	lr
 800776e:	f803 1b01 	strb.w	r1, [r3], #1
 8007772:	e7f9      	b.n	8007768 <memset+0x4>

08007774 <__libc_init_array>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4d0d      	ldr	r5, [pc, #52]	; (80077ac <__libc_init_array+0x38>)
 8007778:	4c0d      	ldr	r4, [pc, #52]	; (80077b0 <__libc_init_array+0x3c>)
 800777a:	1b64      	subs	r4, r4, r5
 800777c:	10a4      	asrs	r4, r4, #2
 800777e:	2600      	movs	r6, #0
 8007780:	42a6      	cmp	r6, r4
 8007782:	d109      	bne.n	8007798 <__libc_init_array+0x24>
 8007784:	4d0b      	ldr	r5, [pc, #44]	; (80077b4 <__libc_init_array+0x40>)
 8007786:	4c0c      	ldr	r4, [pc, #48]	; (80077b8 <__libc_init_array+0x44>)
 8007788:	f000 f818 	bl	80077bc <_init>
 800778c:	1b64      	subs	r4, r4, r5
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	2600      	movs	r6, #0
 8007792:	42a6      	cmp	r6, r4
 8007794:	d105      	bne.n	80077a2 <__libc_init_array+0x2e>
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	f855 3b04 	ldr.w	r3, [r5], #4
 800779c:	4798      	blx	r3
 800779e:	3601      	adds	r6, #1
 80077a0:	e7ee      	b.n	8007780 <__libc_init_array+0xc>
 80077a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a6:	4798      	blx	r3
 80077a8:	3601      	adds	r6, #1
 80077aa:	e7f2      	b.n	8007792 <__libc_init_array+0x1e>
 80077ac:	080078f0 	.word	0x080078f0
 80077b0:	080078f0 	.word	0x080078f0
 80077b4:	080078f0 	.word	0x080078f0
 80077b8:	080078f4 	.word	0x080078f4

080077bc <_init>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	bf00      	nop
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr

080077c8 <_fini>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr
