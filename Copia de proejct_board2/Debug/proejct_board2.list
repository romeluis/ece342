
proejct_board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c40  08009c40  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009c40  08009c40  00019c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c48  08009c48  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000190f0  20000060  08009cb0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019150  08009cb0  00029150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bf1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003238  00000000  00000000  00037cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101c  00000000  00000000  0003c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024161  00000000  00000000  0003d39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa24  00000000  00000000  000614fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d73ad  00000000  00000000  0007bf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d10  00000000  00000000  001532d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00158fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800994c 	.word	0x0800994c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800994c 	.word	0x0800994c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 fa7c 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f81e 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fa62 	bl	8000a90 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 fa22 	bl	8000a14 <MX_DMA_Init>
  MX_DCMI_Init();
 80005d0:	f000 f884 	bl	80006dc <MX_DCMI_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f9c6 	bl	8000964 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d8:	f000 f9ee 	bl	80009b8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80005dc:	f000 f8b2 	bl	8000744 <MX_I2C2_Init>
  MX_TIM1_Init();
 80005e0:	f000 f8de 	bl	80007a0 <MX_TIM1_Init>
  MX_TIM6_Init();
 80005e4:	f000 f95e 	bl	80008a4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f992 	bl	8000910 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x44>)
 80005f0:	f006 fa68 	bl	8006ac4 <HAL_TIM_PWM_Start>
  ov7670_init();
 80005f4:	f000 fc52 	bl	8000e9c <ov7670_init>

  extraTruncatedVideoMode();
 80005f8:	f000 fb1c 	bl	8000c34 <extraTruncatedVideoMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x40>
 80005fe:	bf00      	nop
 8000600:	20000180 	.word	0x20000180

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f008 fd16 	bl	8009044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <SystemClock_Config+0xd0>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <SystemClock_Config+0xd4>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000678:	23a8      	movs	r3, #168	; 0xa8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000680:	2307      	movs	r3, #7
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fedd 	bl	800644c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000698:	f000 fbe4 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 f852 	bl	8005764 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c6:	f000 fbcd 	bl	8000e64 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_DCMI_Init+0x60>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_DCMI_Init+0x64>)
 80006e4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_DCMI_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_DCMI_Init+0x60>)
 80006ee:	2220      	movs	r2, #32
 80006f0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_DCMI_Init+0x60>)
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_DCMI_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_DCMI_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_DCMI_Init+0x60>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_DCMI_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_DCMI_Init+0x60>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_DCMI_Init+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_DCMI_Init+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_DCMI_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_DCMI_Init+0x60>)
 800072a:	f001 fdbd 	bl	80022a8 <HAL_DCMI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000734:	f000 fb96 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000007c 	.word	0x2000007c
 8000740:	50050000 	.word	0x50050000

08000744 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C2_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2C2_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C2_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_I2C2_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C2_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2C2_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2C2_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2C2_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2C2_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2C2_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2C2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2C2_Init+0x50>)
 8000782:	f003 fd81 	bl	8004288 <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 fb6a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000012c 	.word	0x2000012c
 8000798:	40005800 	.word	0x40005800
 800079c:	000186a0 	.word	0x000186a0

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b092      	sub	sp, #72	; 0x48
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2220      	movs	r2, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 fc3a 	bl	8009044 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_TIM1_Init+0xfc>)
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <MX_TIM1_Init+0x100>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_TIM1_Init+0xfc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_TIM1_Init+0xfc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <MX_TIM1_Init+0xfc>)
 80007e4:	2214      	movs	r2, #20
 80007e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_TIM1_Init+0xfc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_TIM1_Init+0xfc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_TIM1_Init+0xfc>)
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fa:	4828      	ldr	r0, [pc, #160]	; (800089c <MX_TIM1_Init+0xfc>)
 80007fc:	f006 f913 	bl	8006a26 <HAL_TIM_PWM_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 fb2d 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000816:	4619      	mov	r1, r3
 8000818:	4820      	ldr	r0, [pc, #128]	; (800089c <MX_TIM1_Init+0xfc>)
 800081a:	f006 fe8d 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000824:	f000 fb1e 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000828:	2360      	movs	r3, #96	; 0x60
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 800082c:	230a      	movs	r3, #10
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	2200      	movs	r2, #0
 800084a:	4619      	mov	r1, r3
 800084c:	4813      	ldr	r0, [pc, #76]	; (800089c <MX_TIM1_Init+0xfc>)
 800084e:	f006 fb09 	bl	8006e64 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000858:	f000 fb04 	bl	8000e64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4807      	ldr	r0, [pc, #28]	; (800089c <MX_TIM1_Init+0xfc>)
 8000880:	f006 fed6 	bl	8007630 <HAL_TIMEx_ConfigBreakDeadTime>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800088a:	f000 faeb 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <MX_TIM1_Init+0xfc>)
 8000890:	f000 fe66 	bl	8001560 <HAL_TIM_MspPostInit>

}
 8000894:	bf00      	nop
 8000896:	3748      	adds	r7, #72	; 0x48
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000180 	.word	0x20000180
 80008a0:	40010000 	.word	0x40010000

080008a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM6_Init+0x64>)
 80008b4:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_TIM6_Init+0x68>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_TIM6_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_TIM6_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_TIM6_Init+0x64>)
 80008c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_TIM6_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_TIM6_Init+0x64>)
 80008d4:	f006 f858 	bl	8006988 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008de:	f000 fac1 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_TIM6_Init+0x64>)
 80008f0:	f006 fe22 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008fa:	f000 fab3 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001c8 	.word	0x200001c8
 800090c:	40001000 	.word	0x40001000

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_USART2_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000948:	f006 fed8 	bl	80076fc <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 fa87 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000210 	.word	0x20000210
 8000960:	40004400 	.word	0x40004400

08000964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART3_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800099c:	f006 feae 	bl	80076fc <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 fa5d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000254 	.word	0x20000254
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2202      	movs	r2, #2
 80009da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	f004 fd69 	bl	80054d2 <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 fa2d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000358 	.word	0x20000358

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_DMA_Init+0x78>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <MX_DMA_Init+0x78>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_DMA_Init+0x78>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_DMA_Init+0x78>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <MX_DMA_Init+0x78>)
 8000a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_DMA_Init+0x78>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	200e      	movs	r0, #14
 8000a58:	f001 f9a1 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a5c:	200e      	movs	r0, #14
 8000a5e:	f001 f9ba 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2011      	movs	r0, #17
 8000a68:	f001 f999 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a6c:	2011      	movs	r0, #17
 8000a6e:	f001 f9b2 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2039      	movs	r0, #57	; 0x39
 8000a78:	f001 f991 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a7c:	2039      	movs	r0, #57	; 0x39
 8000a7e:	f001 f9aa 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
 8000aaa:	4b5e      	ldr	r3, [pc, #376]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a5d      	ldr	r2, [pc, #372]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	4b57      	ldr	r3, [pc, #348]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a56      	ldr	r2, [pc, #344]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a4f      	ldr	r2, [pc, #316]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000ae8:	f043 0320 	orr.w	r3, r3, #32
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b46      	ldr	r3, [pc, #280]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b42      	ldr	r3, [pc, #264]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a41      	ldr	r2, [pc, #260]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b3b      	ldr	r3, [pc, #236]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a3a      	ldr	r2, [pc, #232]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_GPIO_Init+0x194>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b8c:	4826      	ldr	r0, [pc, #152]	; (8000c28 <MX_GPIO_Init+0x198>)
 8000b8e:	f003 fb23 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MX_GPIO_Init+0x19c>)
 8000b98:	f003 fb1e 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481f      	ldr	r0, [pc, #124]	; (8000c30 <MX_GPIO_Init+0x1a0>)
 8000bb4:	f003 f97c 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bb8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <MX_GPIO_Init+0x198>)
 8000bd2:	f003 f96d 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bd6:	2340      	movs	r3, #64	; 0x40
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <MX_GPIO_Init+0x19c>)
 8000bee:	f003 f95f 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <MX_GPIO_Init+0x19c>)
 8000c06:	f003 f953 	bl	8003eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2028      	movs	r0, #40	; 0x28
 8000c10:	f001 f8c5 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c14:	2028      	movs	r0, #40	; 0x28
 8000c16:	f001 f8de 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	; 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40020800 	.word	0x40020800

08000c34 <extraTruncatedVideoMode>:

/* USER CODE BEGIN 4 */
void extraTruncatedVideoMode() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
	int bufferIndex= 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	e00b      	b.n	8000c5c <extraTruncatedVideoMode+0x28>
		video_buff[bufferIndex++] = PREAMBLE[index];
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60fa      	str	r2, [r7, #12]
 8000c4a:	4923      	ldr	r1, [pc, #140]	; (8000cd8 <extraTruncatedVideoMode+0xa4>)
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	440a      	add	r2, r1
 8000c50:	7811      	ldrb	r1, [r2, #0]
 8000c52:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <extraTruncatedVideoMode+0xa8>)
 8000c54:	54d1      	strb	r1, [r2, r3]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2b0b      	cmp	r3, #11
 8000c60:	d9f0      	bls.n	8000c44 <extraTruncatedVideoMode+0x10>
	}

	//Loop forever
	while(1) {
		//Reset
		dma_flag = 0;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <extraTruncatedVideoMode+0xac>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
		transfer_complete_flag = 0;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <extraTruncatedVideoMode+0xb0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]

		ov7670_capture(raw_buff);
 8000c6e:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <extraTruncatedVideoMode+0xb4>)
 8000c70:	f000 fa98 	bl	80011a4 <ov7670_capture>

		//Wait for capture to finish
		while (!dma_flag) {
 8000c74:	e002      	b.n	8000c7c <extraTruncatedVideoMode+0x48>
			HAL_Delay(0);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 ff92 	bl	8001ba0 <HAL_Delay>
		while (!dma_flag) {
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <extraTruncatedVideoMode+0xac>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f8      	beq.n	8000c76 <extraTruncatedVideoMode+0x42>
		}

		//Extract grey scale
		transferRawBufferToIntermediate();
 8000c84:	f000 f870 	bl	8000d68 <transferRawBufferToIntermediate>

		//RLE and place between pre-amble and suffix
		bufferIndex = rle(sizeof(PREAMBLE));
 8000c88:	200c      	movs	r0, #12
 8000c8a:	f000 f8a9 	bl	8000de0 <rle>
 8000c8e:	60f8      	str	r0, [r7, #12]

		//Append suffix
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	e00e      	b.n	8000cb4 <extraTruncatedVideoMode+0x80>
			video_buff[bufferIndex] = SUFFIX[index];
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <extraTruncatedVideoMode+0xb8>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	7819      	ldrb	r1, [r3, #0]
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <extraTruncatedVideoMode+0xa8>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	701a      	strb	r2, [r3, #0]
			bufferIndex++;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3301      	adds	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	d9ed      	bls.n	8000c96 <extraTruncatedVideoMode+0x62>
		}

		//Export Data
		if (HAL_UART_GetState(&huart2) == HAL_UART_STATE_READY) {
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <extraTruncatedVideoMode+0xbc>)
 8000cbc:	f007 f93e 	bl	8007f3c <HAL_UART_GetState>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b20      	cmp	r3, #32
 8000cc4:	d1cd      	bne.n	8000c62 <extraTruncatedVideoMode+0x2e>
			if (HAL_UART_Transmit(&huart2, (uint8_t *)video_buff, bufferIndex,100) != HAL_OK) {
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	4903      	ldr	r1, [pc, #12]	; (8000cdc <extraTruncatedVideoMode+0xa8>)
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <extraTruncatedVideoMode+0xbc>)
 8000cd0:	f006 fd61 	bl	8007796 <HAL_UART_Transmit>
		dma_flag = 0;
 8000cd4:	e7c5      	b.n	8000c62 <extraTruncatedVideoMode+0x2e>
 8000cd6:	bf00      	nop
 8000cd8:	08009964 	.word	0x08009964
 8000cdc:	20012e04 	.word	0x20012e04
 8000ce0:	20018ff8 	.word	0x20018ff8
 8000ce4:	20018ffa 	.word	0x20018ffa
 8000ce8:	20000864 	.word	0x20000864
 8000cec:	08009970 	.word	0x08009970
 8000cf0:	20000210 	.word	0x20000210

08000cf4 <findNumberOfRepeatedPixels>:
	}

}

//Returns the number of pixels that are consecutive, beginning search at [startRow, startCol]
uint8_t findNumberOfRepeatedPixels(uint8_t startRow, uint8_t startCol) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
	uint8_t count = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	75fb      	strb	r3, [r7, #23]
	uint8_t prevColour = intermediate_buff[startRow][startCol];
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	4915      	ldr	r1, [pc, #84]	; (8000d64 <findNumberOfRepeatedPixels+0x70>)
 8000d0e:	20ae      	movs	r0, #174	; 0xae
 8000d10:	fb00 f202 	mul.w	r2, r0, r2
 8000d14:	440a      	add	r2, r1
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	73fb      	strb	r3, [r7, #15]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	e011      	b.n	8000d46 <findNumberOfRepeatedPixels+0x52>
		if (intermediate_buff[startRow][columnIndex] == prevColour) {
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <findNumberOfRepeatedPixels+0x70>)
 8000d26:	21ae      	movs	r1, #174	; 0xae
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	441a      	add	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d10c      	bne.n	8000d54 <findNumberOfRepeatedPixels+0x60>
			count++;
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	75fb      	strb	r3, [r7, #23]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3301      	adds	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	2bad      	cmp	r3, #173	; 0xad
 8000d4a:	dc04      	bgt.n	8000d56 <findNumberOfRepeatedPixels+0x62>
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d9e7      	bls.n	8000d22 <findNumberOfRepeatedPixels+0x2e>
 8000d52:	e000      	b.n	8000d56 <findNumberOfRepeatedPixels+0x62>
		} else {
			break;
 8000d54:	bf00      	nop
		}
	}
	return count;
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	2000cc24 	.word	0x2000cc24

08000d68 <transferRawBufferToIntermediate>:

//Extracts grey-scale data from the raw buffer to the intermediate buffer and formats it in a 2D array
void transferRawBufferToIntermediate() {
 8000d68:	b490      	push	{r4, r7}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
	int rowIndex = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
	int colIndex = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8000d76:	2301      	movs	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e022      	b.n	8000dc2 <transferRawBufferToIntermediate+0x5a>
		if (rawIndex % 2 != 0) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d01a      	beq.n	8000dbc <transferRawBufferToIntermediate+0x54>
			intermediate_buff[rowIndex][colIndex++] = raw_buff[rawIndex] & 0xF0;
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <transferRawBufferToIntermediate+0x70>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1c59      	adds	r1, r3, #1
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	f022 020f 	bic.w	r2, r2, #15
 8000d98:	b2d4      	uxtb	r4, r2
 8000d9a:	4910      	ldr	r1, [pc, #64]	; (8000ddc <transferRawBufferToIntermediate+0x74>)
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	20ae      	movs	r0, #174	; 0xae
 8000da0:	fb00 f202 	mul.w	r2, r0, r2
 8000da4:	440a      	add	r2, r1
 8000da6:	4413      	add	r3, r2
 8000da8:	4622      	mov	r2, r4
 8000daa:	701a      	strb	r2, [r3, #0]
			if (colIndex == IMG_COLS) {
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2bae      	cmp	r3, #174	; 0xae
 8000db0:	d104      	bne.n	8000dbc <transferRawBufferToIntermediate+0x54>
				rowIndex++;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3301      	adds	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
				colIndex = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f24c 32bf 	movw	r2, #50111	; 0xc3bf
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	ddd7      	ble.n	8000d7c <transferRawBufferToIntermediate+0x14>
			}
		}
	}
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc90      	pop	{r4, r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000864 	.word	0x20000864
 8000ddc:	2000cc24 	.word	0x2000cc24

08000de0 <rle>:

//Compresses contents of intermediate buff using RLE and places data in the output buffer beginning at bufferIndex
int rle(int bufferIndex) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e02d      	b.n	8000e4a <rle+0x6a>
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	e024      	b.n	8000e3e <rle+0x5e>
			uint8_t repetitions = findNumberOfRepeatedPixels(rowIndex, colIndex);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff78 	bl	8000cf4 <findNumberOfRepeatedPixels>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]

			video_buff[bufferIndex++] = intermediate_buff[rowIndex][colIndex] | (repetitions & 0xF);
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <rle+0x7c>)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	21ae      	movs	r1, #174	; 0xae
 8000e0e:	fb01 f303 	mul.w	r3, r1, r3
 8000e12:	441a      	add	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b25a      	sxtb	r2, r3
 8000e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b259      	sxtb	r1, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	b2c9      	uxtb	r1, r1
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <rle+0x80>)
 8000e34:	54d1      	strb	r1, [r2, r3]

			colIndex += repetitions;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2bad      	cmp	r3, #173	; 0xad
 8000e42:	ddd7      	ble.n	8000df4 <rle+0x14>
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b8f      	cmp	r3, #143	; 0x8f
 8000e4e:	ddce      	ble.n	8000dee <rle+0xe>
		}
	}
	return bufferIndex;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000cc24 	.word	0x2000cc24
 8000e60:	20012e04 	.word	0x20012e04

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <print_msg>:
  { 0x4b, 0x01 },
};

HAL_StatusTypeDef print_msg(char * msg);

HAL_StatusTypeDef print_msg(char * msg) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  // Your code here
  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff f9c9 	bl	8000210 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <print_msg+0x28>)
 8000e88:	f006 fd18 	bl	80078bc <HAL_UART_Transmit_DMA>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000254 	.word	0x20000254

08000e9c <ov7670_init>:

uint8_t ov7670_init(void){
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b0a1      	sub	sp, #132	; 0x84
 8000ea0:	af02      	add	r7, sp, #8
  uint8_t val;
  char msg[100];

  print_msg("Beginning reading check\r\n");
 8000ea2:	484d      	ldr	r0, [pc, #308]	; (8000fd8 <ov7670_init+0x13c>)
 8000ea4:	f7ff ffe4 	bl	8000e70 <print_msg>
  HAL_Delay(10);
 8000ea8:	200a      	movs	r0, #10
 8000eaa:	f000 fe79 	bl	8001ba0 <HAL_Delay>
  val = ov7670_read(0x0A);
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f000 f8a4 	bl	8000ffc <ov7670_read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  if (val != 0x76) {
 8000eba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000ebe:	2b76      	cmp	r3, #118	; 0x76
 8000ec0:	d00f      	beq.n	8000ee2 <ov7670_init+0x46>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8000ec2:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4944      	ldr	r1, [pc, #272]	; (8000fdc <ov7670_init+0x140>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f008 f89a 	bl	8009004 <siprintf>
    print_msg(msg);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ffcc 	bl	8000e70 <print_msg>
    HAL_Delay(10);
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f000 fe61 	bl	8001ba0 <HAL_Delay>
    return 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e076      	b.n	8000fd0 <ov7670_init+0x134>
  } else {
	  print_msg("Value correct\r\n");
 8000ee2:	483f      	ldr	r0, [pc, #252]	; (8000fe0 <ov7670_init+0x144>)
 8000ee4:	f7ff ffc4 	bl	8000e70 <print_msg>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	483e      	ldr	r0, [pc, #248]	; (8000fe4 <ov7670_init+0x148>)
 8000eec:	f003 f98d 	bl	800420a <HAL_GPIO_TogglePin>
  }

  print_msg("Writing to registers...\r\n");
 8000ef0:	483d      	ldr	r0, [pc, #244]	; (8000fe8 <ov7670_init+0x14c>)
 8000ef2:	f7ff ffbd 	bl	8000e70 <print_msg>
  HAL_Delay(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f000 fe52 	bl	8001ba0 <HAL_Delay>

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	677b      	str	r3, [r7, #116]	; 0x74
 8000f00:	e012      	b.n	8000f28 <ov7670_init+0x8c>
	  ov7670_write(OV7670_reg[index][0], OV7670_reg[index][1]);
 8000f02:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <ov7670_init+0x150>)
 8000f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f06:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000f0a:	4938      	ldr	r1, [pc, #224]	; (8000fec <ov7670_init+0x150>)
 8000f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	440b      	add	r3, r1
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f000 f8f4 	bl	8001104 <ov7670_write>
	  HAL_Delay(11);
 8000f1c:	200b      	movs	r0, #11
 8000f1e:	f000 fe3f 	bl	8001ba0 <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f24:	3301      	adds	r3, #1
 8000f26:	677b      	str	r3, [r7, #116]	; 0x74
 8000f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f2a:	2b79      	cmp	r3, #121	; 0x79
 8000f2c:	dde9      	ble.n	8000f02 <ov7670_init+0x66>
  }

  print_msg("Beginning sanity check\r\n");
 8000f2e:	4830      	ldr	r0, [pc, #192]	; (8000ff0 <ov7670_init+0x154>)
 8000f30:	f7ff ff9e 	bl	8000e70 <print_msg>
  HAL_Delay(10);
 8000f34:	200a      	movs	r0, #10
 8000f36:	f000 fe33 	bl	8001ba0 <HAL_Delay>

  uint8_t isDataCorrect = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f44:	e032      	b.n	8000fac <ov7670_init+0x110>
	  uint8_t dataRead = ov7670_read(OV7670_reg[index][0]);
 8000f46:	4a29      	ldr	r2, [pc, #164]	; (8000fec <ov7670_init+0x150>)
 8000f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f854 	bl	8000ffc <ov7670_read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	  if (dataRead != OV7670_reg[index][1]) {
 8000f5a:	4a24      	ldr	r2, [pc, #144]	; (8000fec <ov7670_init+0x150>)
 8000f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d01c      	beq.n	8000fa6 <ov7670_init+0x10a>
		  isDataCorrect = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  sprintf(msg, "Register 0x%x contains incorrect data 0x%x (should be 0x%x)\r\n", OV7670_reg[index][0], dataRead, OV7670_reg[index][1]);
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <ov7670_init+0x150>)
 8000f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f76:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f7a:	461c      	mov	r4, r3
 8000f7c:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8000f80:	491a      	ldr	r1, [pc, #104]	; (8000fec <ov7670_init+0x150>)
 8000f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	440b      	add	r3, r1
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	1d38      	adds	r0, r7, #4
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	4622      	mov	r2, r4
 8000f92:	4918      	ldr	r1, [pc, #96]	; (8000ff4 <ov7670_init+0x158>)
 8000f94:	f008 f836 	bl	8009004 <siprintf>
		  print_msg(msg);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff68 	bl	8000e70 <print_msg>
		  HAL_Delay(10);
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f000 fdfd 	bl	8001ba0 <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fa8:	3301      	adds	r3, #1
 8000faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fae:	2b79      	cmp	r3, #121	; 0x79
 8000fb0:	ddc9      	ble.n	8000f46 <ov7670_init+0xaa>
	  }
  }

  if (isDataCorrect) {
 8000fb2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <ov7670_init+0x12a>
	  print_msg("All data OK\r\n");
 8000fba:	480f      	ldr	r0, [pc, #60]	; (8000ff8 <ov7670_init+0x15c>)
 8000fbc:	f7ff ff58 	bl	8000e70 <print_msg>
	  HAL_Delay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f000 fded 	bl	8001ba0 <HAL_Delay>
  }
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <ov7670_init+0x148>)
 8000fca:	f003 f91e 	bl	800420a <HAL_GPIO_TogglePin>
  return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	377c      	adds	r7, #124	; 0x7c
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	08009978 	.word	0x08009978
 8000fdc:	08009994 	.word	0x08009994
 8000fe0:	080099b0 	.word	0x080099b0
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	080099c0 	.word	0x080099c0
 8000fec:	08009af8 	.word	0x08009af8
 8000ff0:	080099dc 	.word	0x080099dc
 8000ff4:	080099f8 	.word	0x080099f8
 8000ff8:	08009a38 	.word	0x08009a38

08000ffc <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0a0      	sub	sp, #128	; 0x80
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	char msg[100];
	uint8_t data = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	72fb      	strb	r3, [r7, #11]
	uint8_t attempts = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 8001010:	2302      	movs	r3, #2
 8001012:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	uint8_t *regAddress = &reg;
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 800101a:	e028      	b.n	800106e <ov7670_read+0x72>
		status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670_READ, regAddress, 1, 100);
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001024:	2143      	movs	r1, #67	; 0x43
 8001026:	4834      	ldr	r0, [pc, #208]	; (80010f8 <ov7670_read+0xfc>)
 8001028:	f003 fa72 	bl	8004510 <HAL_I2C_Master_Transmit>
 800102c:	4603      	mov	r3, r0
 800102e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 8001032:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001036:	3301      	adds	r3, #1
 8001038:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 800103c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <ov7670_read+0x72>
			sprintf(msg, "Transmit Status: %d on attempt %d with register 0x%x\r\n", status, attempts, *regAddress);
 8001044:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001048:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 800104c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f107 000c 	add.w	r0, r7, #12
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	460b      	mov	r3, r1
 8001058:	4928      	ldr	r1, [pc, #160]	; (80010fc <ov7670_read+0x100>)
 800105a:	f007 ffd3 	bl	8009004 <siprintf>
			print_msg(msg);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff04 	bl	8000e70 <print_msg>
			HAL_Delay(10);
 8001068:	200a      	movs	r0, #10
 800106a:	f000 fd99 	bl	8001ba0 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 800106e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <ov7670_read+0x82>
 8001076:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800107a:	2b04      	cmp	r3, #4
 800107c:	d9ce      	bls.n	800101c <ov7670_read+0x20>
		}
	}

	status = HAL_BUSY;
 800107e:	2302      	movs	r3, #2
 8001080:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	attempts = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	while (status != HAL_OK && attempts < 5) {
 800108a:	e027      	b.n	80010dc <ov7670_read+0xe0>
		status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670_READ, &data, 1, 100);
 800108c:	f107 020b 	add.w	r2, r7, #11
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	2143      	movs	r1, #67	; 0x43
 8001098:	4817      	ldr	r0, [pc, #92]	; (80010f8 <ov7670_read+0xfc>)
 800109a:	f003 fb37 	bl	800470c <HAL_I2C_Master_Receive>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 80010a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010a8:	3301      	adds	r3, #1
 80010aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 80010ae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d012      	beq.n	80010dc <ov7670_read+0xe0>
			sprintf(msg, "Receive Status: %d on attempt %d with current data: 0x%x\r\n", status, attempts, data);
 80010b6:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80010ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010be:	7af9      	ldrb	r1, [r7, #11]
 80010c0:	f107 000c 	add.w	r0, r7, #12
 80010c4:	9100      	str	r1, [sp, #0]
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <ov7670_read+0x104>)
 80010c8:	f007 ff9c 	bl	8009004 <siprintf>
			print_msg(msg);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fecd 	bl	8000e70 <print_msg>
			HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 fd62 	bl	8001ba0 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 80010dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <ov7670_read+0xf0>
 80010e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d9cf      	bls.n	800108c <ov7670_read+0x90>
		}
	}


	return data;
 80010ec:	7afb      	ldrb	r3, [r7, #11]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3778      	adds	r7, #120	; 0x78
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000012c 	.word	0x2000012c
 80010fc:	08009a48 	.word	0x08009a48
 8001100:	08009a80 	.word	0x08009a80

08001104 <ov7670_write>:

HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
 8001104:	b580      	push	{r7, lr}
 8001106:	b0a2      	sub	sp, #136	; 0x88
 8001108:	af04      	add	r7, sp, #16
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	char msg[100];
	uint8_t attempts = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 800111a:	2302      	movs	r3, #2
 800111c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	//uint8_t *regAddress = &reg;
	uint8_t *data = &val;
 8001120:	1dbb      	adds	r3, r7, #6
 8001122:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 8001124:	e02c      	b.n	8001180 <ov7670_write+0x7c>
		status = HAL_I2C_Mem_Write(&hi2c2,ADDR_OV7670_WRITE,reg,I2C_MEMADD_SIZE_8BIT,data,1,100);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	b29a      	uxth	r2, r3
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	2142      	movs	r1, #66	; 0x42
 800113a:	4818      	ldr	r0, [pc, #96]	; (800119c <ov7670_write+0x98>)
 800113c:	f003 fd0c 	bl	8004b58 <HAL_I2C_Mem_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 8001146:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800114a:	3301      	adds	r3, #1
 800114c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 8001150:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <ov7670_write+0x7c>
			sprintf(msg, "Memory Write Status: %d on attempt %d with register 0x%x\r\n", status, attempts, reg);
 8001158:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800115c:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f107 000c 	add.w	r0, r7, #12
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	460b      	mov	r3, r1
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <ov7670_write+0x9c>)
 800116c:	f007 ff4a 	bl	8009004 <siprintf>
			print_msg(msg);
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe7b 	bl	8000e70 <print_msg>
			HAL_Delay(10);
 800117a:	200a      	movs	r0, #10
 800117c:	f000 fd10 	bl	8001ba0 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001180:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <ov7670_write+0x8c>
 8001188:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800118c:	2b04      	cmp	r3, #4
 800118e:	d9ca      	bls.n	8001126 <ov7670_write+0x22>
			HAL_Delay(10);
		}
	}
	*/

	return status;
 8001190:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
}
 8001194:	4618      	mov	r0, r3
 8001196:	3778      	adds	r7, #120	; 0x78
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000012c 	.word	0x2000012c
 80011a0:	08009abc 	.word	0x08009abc

080011a4 <ov7670_capture>:

void ov7670_snapshot(uint8_t *buff){
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
}

void ov7670_capture(uint8_t *buff){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	f243 03f0 	movw	r3, #12528	; 0x30f0
 80011b2:	2100      	movs	r1, #0
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <ov7670_capture+0x20>)
 80011b6:	f000 fe29 	bl	8001e0c <HAL_DCMI_Start_DMA>

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000007c 	.word	0x2000007c

080011c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_MspInit+0x4c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x4c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a78      	ldr	r2, [pc, #480]	; (8001418 <HAL_DCMI_MspInit+0x200>)
 8001236:	4293      	cmp	r3, r2
 8001238:	f040 80e9 	bne.w	800140e <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_DCMI_MspInit+0x204>)
 8001242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001244:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_DCMI_MspInit+0x204>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6353      	str	r3, [r2, #52]	; 0x34
 800124c:	4b73      	ldr	r3, [pc, #460]	; (800141c <HAL_DCMI_MspInit+0x204>)
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	623b      	str	r3, [r7, #32]
 8001256:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	4b6f      	ldr	r3, [pc, #444]	; (800141c <HAL_DCMI_MspInit+0x204>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4a6e      	ldr	r2, [pc, #440]	; (800141c <HAL_DCMI_MspInit+0x204>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b6c      	ldr	r3, [pc, #432]	; (800141c <HAL_DCMI_MspInit+0x204>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	4b68      	ldr	r3, [pc, #416]	; (800141c <HAL_DCMI_MspInit+0x204>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a67      	ldr	r2, [pc, #412]	; (800141c <HAL_DCMI_MspInit+0x204>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b65      	ldr	r3, [pc, #404]	; (800141c <HAL_DCMI_MspInit+0x204>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	4b61      	ldr	r3, [pc, #388]	; (800141c <HAL_DCMI_MspInit+0x204>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a60      	ldr	r2, [pc, #384]	; (800141c <HAL_DCMI_MspInit+0x204>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b5e      	ldr	r3, [pc, #376]	; (800141c <HAL_DCMI_MspInit+0x204>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <HAL_DCMI_MspInit+0x204>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a59      	ldr	r2, [pc, #356]	; (800141c <HAL_DCMI_MspInit+0x204>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b57      	ldr	r3, [pc, #348]	; (800141c <HAL_DCMI_MspInit+0x204>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_DCMI_MspInit+0x204>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a52      	ldr	r2, [pc, #328]	; (800141c <HAL_DCMI_MspInit+0x204>)
 80012d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_DCMI_MspInit+0x204>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012e4:	2370      	movs	r3, #112	; 0x70
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012f4:	230d      	movs	r3, #13
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	4848      	ldr	r0, [pc, #288]	; (8001420 <HAL_DCMI_MspInit+0x208>)
 8001300:	f002 fdd6 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001304:	2350      	movs	r3, #80	; 0x50
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001314:	230d      	movs	r3, #13
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	4841      	ldr	r0, [pc, #260]	; (8001424 <HAL_DCMI_MspInit+0x20c>)
 8001320:	f002 fdc6 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001324:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001336:	230d      	movs	r3, #13
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4839      	ldr	r0, [pc, #228]	; (8001428 <HAL_DCMI_MspInit+0x210>)
 8001342:	f002 fdb5 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001346:	2308      	movs	r3, #8
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001356:	230d      	movs	r3, #13
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4832      	ldr	r0, [pc, #200]	; (800142c <HAL_DCMI_MspInit+0x214>)
 8001362:	f002 fda5 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001378:	230d      	movs	r3, #13
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	482b      	ldr	r0, [pc, #172]	; (8001430 <HAL_DCMI_MspInit+0x218>)
 8001384:	f002 fd94 	bl	8003eb0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 800138a:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <HAL_DCMI_MspInit+0x220>)
 800138c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800138e:	4b29      	ldr	r3, [pc, #164]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 8001390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001394:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013b0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013c8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013e4:	f000 ffda 	bl	800239c <HAL_DMA_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 80013ee:	f7ff fd39 	bl	8000e64 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013f6:	649a      	str	r2, [r3, #72]	; 0x48
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_DCMI_MspInit+0x21c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	204e      	movs	r0, #78	; 0x4e
 8001404:	f000 fccb 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001408:	204e      	movs	r0, #78	; 0x4e
 800140a:	f000 fce4 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3738      	adds	r7, #56	; 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	50050000 	.word	0x50050000
 800141c:	40023800 	.word	0x40023800
 8001420:	40021000 	.word	0x40021000
 8001424:	40020000 	.word	0x40020000
 8001428:	40020800 	.word	0x40020800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40021800 	.word	0x40021800
 8001434:	200000cc 	.word	0x200000cc
 8001438:	40026428 	.word	0x40026428

0800143c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_I2C_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12b      	bne.n	80014b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_I2C_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_I2C_MspInit+0x88>)
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_I2C_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800147a:	2303      	movs	r3, #3
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800148a:	2304      	movs	r3, #4
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <HAL_I2C_MspInit+0x8c>)
 8001496:	f002 fd0b 	bl	8003eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_I2C_MspInit+0x88>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_I2C_MspInit+0x88>)
 80014a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_I2C_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40005800 	.word	0x40005800
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40021400 	.word	0x40021400

080014cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_TIM_PWM_MspInit+0x3c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10d      	bne.n	80014fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_TIM_PWM_MspInit+0x40>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <HAL_TIM_PWM_MspInit+0x40>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_TIM_PWM_MspInit+0x40>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40010000 	.word	0x40010000
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_TIM_Base_MspInit+0x48>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d115      	bne.n	800154e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0c      	ldr	r2, [pc, #48]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2036      	movs	r0, #54	; 0x36
 8001544:	f000 fc2b 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001548:	2036      	movs	r0, #54	; 0x36
 800154a:	f000 fc44 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40001000 	.word	0x40001000
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_TIM_MspPostInit+0x68>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d11e      	bne.n	80015c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_TIM_MspPostInit+0x6c>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_TIM_MspPostInit+0x70>)
 80015bc:	f002 fc78 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	; 0x30
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_UART_MspInit+0x1c8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d15b      	bne.n	80016ae <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a68      	ldr	r2, [pc, #416]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a61      	ldr	r2, [pc, #388]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800162e:	2360      	movs	r3, #96	; 0x60
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163e:	2307      	movs	r3, #7
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4856      	ldr	r0, [pc, #344]	; (80017a4 <HAL_UART_MspInit+0x1d0>)
 800164a:	f002 fc31 	bl	8003eb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800164e:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 8001650:	4a56      	ldr	r2, [pc, #344]	; (80017ac <HAL_UART_MspInit+0x1d8>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001654:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 8001656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800165c:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b51      	ldr	r3, [pc, #324]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 800166a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800166e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001670:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001676:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800167c:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001682:	4b49      	ldr	r3, [pc, #292]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 8001684:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001688:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001690:	4845      	ldr	r0, [pc, #276]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 8001692:	f000 fe83 	bl	800239c <HAL_DMA_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800169c:	f7ff fbe2 	bl	8000e64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a41      	ldr	r2, [pc, #260]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	4a40      	ldr	r2, [pc, #256]	; (80017a8 <HAL_UART_MspInit+0x1d4>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ac:	e071      	b.n	8001792 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a3f      	ldr	r2, [pc, #252]	; (80017b0 <HAL_UART_MspInit+0x1dc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d16c      	bne.n	8001792 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 80016c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6313      	str	r3, [r2, #48]	; 0x30
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_UART_MspInit+0x1cc>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001702:	2307      	movs	r3, #7
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4825      	ldr	r0, [pc, #148]	; (80017a4 <HAL_UART_MspInit+0x1d0>)
 800170e:	f002 fbcf 	bl	8003eb0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001714:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <HAL_UART_MspInit+0x1e4>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 800171a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800171e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 800172e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001732:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800174c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001750:	2204      	movs	r2, #4
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001756:	2203      	movs	r2, #3
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 800175c:	2200      	movs	r2, #0
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001762:	2200      	movs	r2, #0
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 8001768:	f000 fe18 	bl	800239c <HAL_DMA_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8001772:	f7ff fb77 	bl	8000e64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <HAL_UART_MspInit+0x1e0>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2027      	movs	r0, #39	; 0x27
 8001788:	f000 fb09 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800178c:	2027      	movs	r0, #39	; 0x27
 800178e:	f000 fb22 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40004400 	.word	0x40004400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	20000298 	.word	0x20000298
 80017ac:	400260a0 	.word	0x400260a0
 80017b0:	40004800 	.word	0x40004800
 80017b4:	200002f8 	.word	0x200002f8
 80017b8:	40026058 	.word	0x40026058

080017bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0a0      	sub	sp, #128	; 0x80
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	225c      	movs	r2, #92	; 0x5c
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f007 fc31 	bl	8009044 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ea:	d14e      	bne.n	800188a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80017f2:	2300      	movs	r3, #0
 80017f4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 f8cc 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001806:	f7ff fb2d 	bl	8000e64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a20      	ldr	r2, [pc, #128]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001826:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800182a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001838:	230a      	movs	r3, #10
 800183a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001840:	4619      	mov	r1, r3
 8001842:	4815      	ldr	r0, [pc, #84]	; (8001898 <HAL_PCD_MspInit+0xdc>)
 8001844:	f002 fb34 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800185a:	4619      	mov	r1, r3
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <HAL_PCD_MspInit+0xdc>)
 800185e:	f002 fb27 	bl	8003eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6353      	str	r3, [r2, #52]	; 0x34
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3780      	adds	r7, #128	; 0x80
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>
	...

080018a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80018a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ac:	4801      	ldr	r0, [pc, #4]	; (80018b4 <HardFault_Handler+0x10>)
 80018ae:	f002 fcac 	bl	800420a <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0xe>
 80018b4:	40020400 	.word	0x40020400

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f8:	f000 f932 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <DMA1_Stream3_IRQHandler+0x10>)
 8001906:	f000 fee1 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200002f8 	.word	0x200002f8

08001914 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <DMA1_Stream6_IRQHandler+0x10>)
 800191a:	f000 fed7 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000298 	.word	0x20000298

08001928 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <USART3_IRQHandler+0x10>)
 800192e:	f006 f843 	bl	80079b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000254 	.word	0x20000254

0800193c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint32_t thisTime = HAL_GetTick();
 8001942:	f000 f921 	bl	8001b88 <HAL_GetTick>
 8001946:	6078      	str	r0, [r7, #4]
		if (thisTime-lastTime >= interval) {
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <EXTI15_10_IRQHandler+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	1ad2      	subs	r2, r2, r3
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <EXTI15_10_IRQHandler+0x44>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d302      	bcc.n	800195e <EXTI15_10_IRQHandler+0x22>
			button_flag = 1;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <EXTI15_10_IRQHandler+0x48>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800195e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001962:	f002 fc6d 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
		lastTime = thisTime;
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <EXTI15_10_IRQHandler+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800196c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001970:	f002 fc66 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20018ffc 	.word	0x20018ffc
 8001980:	20000000 	.word	0x20000000
 8001984:	20018ff9 	.word	0x20018ff9

08001988 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <TIM6_DAC_IRQHandler+0x10>)
 800198e:	f005 f961 	bl	8006c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001c8 	.word	0x200001c8

0800199c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	//TRIGGERED AFTER CAPTURE COMPLETES
	HAL_DCMI_Stop(&hdcmi);
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <DMA2_Stream1_IRQHandler+0x1c>)
 80019a2:	f000 fad3 	bl	8001f4c <HAL_DCMI_Stop>
	dma_flag = 1;
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <DMA2_Stream1_IRQHandler+0x20>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <DMA2_Stream1_IRQHandler+0x24>)
 80019ae:	f000 fe8d 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000007c 	.word	0x2000007c
 80019bc:	20018ff8 	.word	0x20018ff8
 80019c0:	200000cc 	.word	0x200000cc

080019c4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
	//TRIGGERS VERY OFTEN
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <DCMI_IRQHandler+0x10>)
 80019ca:	f000 fb1b 	bl	8002004 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000007c 	.word	0x2000007c

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f007 fb24 	bl	8009054 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	20019000 	.word	0x20019000
 8001a40:	20019150 	.word	0x20019150

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f007 fae3 	bl	8009060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7fe fd8f 	bl	80005bc <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001aac:	08009c50 	.word	0x08009c50
  ldr r2, =_sbss
 8001ab0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ab4:	20019150 	.word	0x20019150

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f94f 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fb6a 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f967 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b3c:	f000 f92f 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000004 	.word	0x20000004
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20019004 	.word	0x20019004

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20019004 	.word	0x20019004

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000000c 	.word	0x2000000c

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_DCMI_Start_DMA+0x20>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e086      	b.n	8001f3a <HAL_DCMI_Start_DMA+0x12e>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0202 	bic.w	r2, r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <HAL_DCMI_Start_DMA+0x138>)
 8001e72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e78:	4a33      	ldr	r2, [pc, #204]	; (8001f48 <HAL_DCMI_Start_DMA+0x13c>)
 8001e7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e80:	2200      	movs	r2, #0
 8001e82:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

  if(Length <= 0xFFFFU)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d20a      	bcs.n	8001eae <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3328      	adds	r3, #40	; 0x28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	f000 fb26 	bl	80024f8 <HAL_DMA_Start_IT>
 8001eac:	e038      	b.n	8001f20 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb2:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_DCMI_Start_DMA+0x138>)
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001ec8:	e009      	b.n	8001ede <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	085a      	lsrs	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	005a      	lsls	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d2f0      	bcs.n	8001eca <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	1e9a      	subs	r2, r3, #2
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3328      	adds	r3, #40	; 0x28
 8001f10:	4619      	mov	r1, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	f000 fe40 	bl	8002ba0 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	08002151 	.word	0x08002151
 8001f48:	0800227b 	.word	0x0800227b

08001f4c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_DCMI_Stop+0xb0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	4a29      	ldr	r2, [pc, #164]	; (8002000 <HAL_DCMI_Stop+0xb4>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_DCMI_Stop+0x2a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e03e      	b.n	8001ff4 <HAL_DCMI_Stop+0xa8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d108      	bne.n	8001fb2 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb0:	e006      	b.n	8001fc0 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ea      	bne.n	8001f96 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fce:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fae7 	bl	80025a8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000004 	.word	0x20000004
 8002000:	92492493 	.word	0x92492493

08002004 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2204      	movs	r2, #4
 8002024:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2204      	movs	r2, #4
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <HAL_DCMI_IRQHandler+0xf8>)
 8002040:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fb1e 	bl	8002688 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2202      	movs	r2, #2
 800205c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2204      	movs	r2, #4
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_DCMI_IRQHandler+0xf8>)
 8002078:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fb02 	bl	8002688 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2210      	movs	r2, #16
 8002094:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f83c 	bl	8002114 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f83a 	bl	8002128 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d019      	beq.n	80020f2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d107      	bne.n	80020dc <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 021e 	bic.w	r2, r2, #30
 80020da:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f825 	bl	800213c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800227b 	.word	0x0800227b

08002100 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	2b00      	cmp	r3, #0
 8002168:	d043      	beq.n	80021f2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002176:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d118      	bne.n	80021b6 <DCMI_DMAXferCplt+0x66>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	00da      	lsls	r2, r3, #3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	2200      	movs	r2, #0
 80021a4:	4619      	mov	r1, r3
 80021a6:	f001 fe43 	bl	8003e30 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
 80021b4:	e044      	b.n	8002240 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d13c      	bne.n	8002240 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	00da      	lsls	r2, r3, #3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	2201      	movs	r2, #1
 80021e0:	4619      	mov	r1, r3
 80021e2:	f001 fe25 	bl	8003e30 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	1e5a      	subs	r2, r3, #1
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38
 80021f0:	e026      	b.n	8002240 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	e017      	b.n	8002240 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	0099      	lsls	r1, r3, #2
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	440a      	add	r2, r1
 8002236:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	429a      	cmp	r2, r3
 800224a:	d112      	bne.n	8002272 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b02      	cmp	r3, #2
 8002268:	d103      	bne.n	8002272 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	2b02      	cmp	r3, #2
 8002290:	d003      	beq.n	800229a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff ff30 	bl	8002100 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e069      	b.n	800238e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe ffa2 	bl	8001218 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe ff9f 	bl	8001218 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_DCMI_Init+0xf0>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002306:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002312:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800231e:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 800232a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002336:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b10      	cmp	r3, #16
 8002346:	d112      	bne.n	800236e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f1b      	ldrb	r3, [r3, #28]
 800234c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7f5b      	ldrb	r3, [r3, #29]
 8002352:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002354:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7f9b      	ldrb	r3, [r3, #30]
 800235a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800235c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7fdb      	ldrb	r3, [r3, #31]
 8002364:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800236a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800236c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 021e 	orr.w	r2, r2, #30
 800237c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	ffe0f007 	.word	0xffe0f007

0800239c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fbee 	bl	8001b88 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e099      	b.n	80024ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d8:	e00f      	b.n	80023fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023da:	f7ff fbd5 	bl	8001b88 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d908      	bls.n	80023fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e078      	b.n	80024ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e8      	bne.n	80023da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_DMA_Init+0x158>)
 8002414:	4013      	ands	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002426:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2b04      	cmp	r3, #4
 8002452:	d107      	bne.n	8002464 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4313      	orrs	r3, r2
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0307 	bic.w	r3, r3, #7
 800247a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2b04      	cmp	r3, #4
 800248c:	d117      	bne.n	80024be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fb01 	bl	8002aa8 <DMA_CheckFifoParam>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2240      	movs	r2, #64	; 0x40
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ba:	2301      	movs	r3, #1
 80024bc:	e016      	b.n	80024ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fab8 	bl	8002a3c <DMA_CalcBaseAndBitshift>
 80024cc:	4603      	mov	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	223f      	movs	r2, #63	; 0x3f
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	f010803f 	.word	0xf010803f

080024f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_DMA_Start_IT+0x26>
 800251a:	2302      	movs	r3, #2
 800251c:	e040      	b.n	80025a0 <HAL_DMA_Start_IT+0xa8>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d12f      	bne.n	8002592 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa4a 	bl	80029e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	223f      	movs	r2, #63	; 0x3f
 8002552:	409a      	lsls	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0216 	orr.w	r2, r2, #22
 8002566:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0208 	orr.w	r2, r2, #8
 800257e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e005      	b.n	800259e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800259e:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025b6:	f7ff fae7 	bl	8001b88 <HAL_GetTick>
 80025ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d008      	beq.n	80025da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e052      	b.n	8002680 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0216 	bic.w	r2, r2, #22
 80025e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_DMA_Abort+0x62>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0208 	bic.w	r2, r2, #8
 8002618:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	e013      	b.n	8002654 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800262c:	f7ff faac 	bl	8001b88 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b05      	cmp	r3, #5
 8002638:	d90c      	bls.n	8002654 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2203      	movs	r2, #3
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e015      	b.n	8002680 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1e4      	bne.n	800262c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	409a      	lsls	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d004      	beq.n	80026a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00c      	b.n	80026c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2205      	movs	r2, #5
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026d8:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_DMA_IRQHandler+0x248>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a8e      	ldr	r2, [pc, #568]	; (8002918 <HAL_DMA_IRQHandler+0x24c>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2208      	movs	r2, #8
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	2208      	movs	r2, #8
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	2201      	movs	r2, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0202 	orr.w	r2, r3, #2
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2204      	movs	r2, #4
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2204      	movs	r2, #4
 8002792:	409a      	lsls	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f043 0204 	orr.w	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	2210      	movs	r2, #16
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d043      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d03c      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	2210      	movs	r2, #16
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d018      	beq.n	800280e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d024      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
 80027fa:	e01f      	b.n	800283c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
 800280c:	e016      	b.n	800283c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0208 	bic.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2220      	movs	r2, #32
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 808f 	beq.w	800296c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8087 	beq.w	800296c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	2220      	movs	r2, #32
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b05      	cmp	r3, #5
 8002874:	d136      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0216 	bic.w	r2, r2, #22
 8002884:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002894:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x1da>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	223f      	movs	r2, #63	; 0x3f
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d07e      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
        }
        return;
 80028e2:	e079      	b.n	80029d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	2b00      	cmp	r3, #0
 8002906:	d031      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	e02c      	b.n	800296c <HAL_DMA_IRQHandler+0x2a0>
 8002912:	bf00      	nop
 8002914:	20000004 	.word	0x20000004
 8002918:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d023      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e01e      	b.n	800296c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0210 	bic.w	r2, r2, #16
 800294a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d032      	beq.n	80029da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2205      	movs	r2, #5
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3301      	adds	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d307      	bcc.n	80029b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f2      	bne.n	8002998 <HAL_DMA_IRQHandler+0x2cc>
 80029b2:	e000      	b.n	80029b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e000      	b.n	80029da <HAL_DMA_IRQHandler+0x30e>
        return;
 80029d8:	bf00      	nop
    }
  }
}
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d108      	bne.n	8002a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a1e:	e007      	b.n	8002a30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3b10      	subs	r3, #16
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d909      	bls.n	8002a7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a7c:	e007      	b.n	8002a8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	aaaaaaab 	.word	0xaaaaaaab
 8002aa4:	08009c04 	.word	0x08009c04

08002aa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d856      	bhi.n	8002b76 <DMA_CheckFifoParam+0xce>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <DMA_CheckFifoParam+0x28>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002af3 	.word	0x08002af3
 8002ad8:	08002ae1 	.word	0x08002ae1
 8002adc:	08002b77 	.word	0x08002b77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d046      	beq.n	8002b7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e043      	b.n	8002b7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002afa:	d140      	bne.n	8002b7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e03d      	b.n	8002b7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0a:	d121      	bne.n	8002b50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d837      	bhi.n	8002b82 <DMA_CheckFifoParam+0xda>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <DMA_CheckFifoParam+0x70>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b2f 	.word	0x08002b2f
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002b41 	.word	0x08002b41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e030      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d025      	beq.n	8002b86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3e:	e022      	b.n	8002b86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b48:	d11f      	bne.n	8002b8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b4e:	e01c      	b.n	8002b8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d903      	bls.n	8002b5e <DMA_CheckFifoParam+0xb6>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d003      	beq.n	8002b64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b5c:	e018      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      break;
 8002b62:	e015      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e00b      	b.n	8002b8e <DMA_CheckFifoParam+0xe6>
      break;
 8002b76:	bf00      	nop
 8002b78:	e00a      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e008      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e006      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e004      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e002      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b8a:	bf00      	nop
 8002b8c:	e000      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b80      	cmp	r3, #128	; 0x80
 8002bb8:	d106      	bne.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f001 b911 	b.w	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f001 b8ff 	b.w	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f001 b8f7 	b.w	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f041 80e5 	bne.w	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c2e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f001 f910 	bl	8003e64 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b8d      	ldr	r3, [pc, #564]	; (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d960      	bls.n	8002d12 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a8b      	ldr	r2, [pc, #556]	; (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d057      	beq.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a8a      	ldr	r2, [pc, #552]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d050      	beq.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a88      	ldr	r2, [pc, #544]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d049      	beq.n	8002d02 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a87      	ldr	r2, [pc, #540]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d042      	beq.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a85      	ldr	r2, [pc, #532]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d03a      	beq.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a84      	ldr	r2, [pc, #528]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d032      	beq.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a82      	ldr	r2, [pc, #520]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02a      	beq.n	8002cec <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a81      	ldr	r2, [pc, #516]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7f      	ldr	r2, [pc, #508]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01a      	beq.n	8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7e      	ldr	r2, [pc, #504]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d012      	beq.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7c      	ldr	r2, [pc, #496]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7b      	ldr	r2, [pc, #492]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ccc:	e01e      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cd2:	e01b      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd8:	e018      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cde:	e015      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ce0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ce4:	e012      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cea:	e00f      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cf0:	e00c      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cf6:	e009      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cfc:	e006      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e004      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d02:	2320      	movs	r3, #32
 8002d04:	e002      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d06:	2320      	movs	r3, #32
 8002d08:	e000      	b.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002d0e:	60d3      	str	r3, [r2, #12]
 8002d10:	e14f      	b.n	8002fb2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d960      	bls.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d057      	beq.n	8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a56      	ldr	r2, [pc, #344]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d050      	beq.n	8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d049      	beq.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a53      	ldr	r2, [pc, #332]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d042      	beq.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d03a      	beq.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d032      	beq.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02a      	beq.n	8002dba <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a4d      	ldr	r2, [pc, #308]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d022      	beq.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d01a      	beq.n	8002dae <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d012      	beq.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a49      	ldr	r2, [pc, #292]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00a      	beq.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a47      	ldr	r2, [pc, #284]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d102      	bne.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002d96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d9a:	e01e      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002da0:	e01b      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002da2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002da6:	e018      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002da8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dac:	e015      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002db2:	e012      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002db8:	e00f      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dbe:	e00c      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dc4:	e009      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dca:	e006      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dcc:	2320      	movs	r3, #32
 8002dce:	e004      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e002      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e000      	b.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dd8:	2320      	movs	r3, #32
 8002dda:	4a36      	ldr	r2, [pc, #216]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002ddc:	6093      	str	r3, [r2, #8]
 8002dde:	e0e8      	b.n	8002fb2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f240 8082 	bls.w	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d078      	beq.n	8002eea <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d071      	beq.n	8002ee6 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d06a      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d063      	beq.n	8002ede <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d05b      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d053      	beq.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04b      	beq.n	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d043      	beq.n	8002ec6 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d03b      	beq.n	8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d012      	beq.n	8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00a      	beq.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d102      	bne.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002e66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e6a:	e03f      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e70:	e03c      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e76:	e039      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e7c:	e036      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e7e:	bf00      	nop
 8002e80:	40026458 	.word	0x40026458
 8002e84:	40026010 	.word	0x40026010
 8002e88:	40026410 	.word	0x40026410
 8002e8c:	40026070 	.word	0x40026070
 8002e90:	40026470 	.word	0x40026470
 8002e94:	40026028 	.word	0x40026028
 8002e98:	40026428 	.word	0x40026428
 8002e9c:	40026088 	.word	0x40026088
 8002ea0:	40026488 	.word	0x40026488
 8002ea4:	40026040 	.word	0x40026040
 8002ea8:	40026440 	.word	0x40026440
 8002eac:	400260a0 	.word	0x400260a0
 8002eb0:	400264a0 	.word	0x400264a0
 8002eb4:	40026400 	.word	0x40026400
 8002eb8:	400260b8 	.word	0x400260b8
 8002ebc:	40026058 	.word	0x40026058
 8002ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ec4:	e012      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eca:	e00f      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ed0:	e00c      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ed6:	e009      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002edc:	e006      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ede:	2320      	movs	r3, #32
 8002ee0:	e004      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	e002      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e000      	b.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002eea:	2320      	movs	r3, #32
 8002eec:	4a8c      	ldr	r2, [pc, #560]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002eee:	60d3      	str	r3, [r2, #12]
 8002ef0:	e05f      	b.n	8002fb2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a8b      	ldr	r2, [pc, #556]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d057      	beq.n	8002fac <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a89      	ldr	r2, [pc, #548]	; (8003128 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d050      	beq.n	8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a88      	ldr	r2, [pc, #544]	; (800312c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d049      	beq.n	8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a86      	ldr	r2, [pc, #536]	; (8003130 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d042      	beq.n	8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a85      	ldr	r2, [pc, #532]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d03a      	beq.n	8002f9a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a83      	ldr	r2, [pc, #524]	; (8003138 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d032      	beq.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a82      	ldr	r2, [pc, #520]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d02a      	beq.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a80      	ldr	r2, [pc, #512]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d022      	beq.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7f      	ldr	r2, [pc, #508]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d01a      	beq.n	8002f82 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a7d      	ldr	r2, [pc, #500]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d012      	beq.n	8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7c      	ldr	r2, [pc, #496]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00a      	beq.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a7a      	ldr	r2, [pc, #488]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d102      	bne.n	8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002f6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f6e:	e01e      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f74:	e01b      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f7a:	e018      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f80:	e015      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f86:	e012      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f8c:	e00f      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f92:	e00c      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f98:	e009      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f9e:	e006      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	e004      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e002      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e000      	b.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fac:	2320      	movs	r3, #32
 8002fae:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002fb0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d960      	bls.n	8003080 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d057      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a56      	ldr	r2, [pc, #344]	; (8003128 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d050      	beq.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a55      	ldr	r2, [pc, #340]	; (800312c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d049      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a53      	ldr	r2, [pc, #332]	; (8003130 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d042      	beq.n	800306c <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d03a      	beq.n	8003066 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a50      	ldr	r2, [pc, #320]	; (8003138 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d032      	beq.n	8003060 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a4f      	ldr	r2, [pc, #316]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d02a      	beq.n	800305a <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a4d      	ldr	r2, [pc, #308]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4c      	ldr	r2, [pc, #304]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01a      	beq.n	800304e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d012      	beq.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00a      	beq.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a47      	ldr	r2, [pc, #284]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d102      	bne.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8003036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800303a:	e01e      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800303c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003040:	e01b      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003042:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003046:	e018      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003048:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800304c:	e015      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800304e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003052:	e012      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003058:	e00f      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800305a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800305e:	e00c      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003064:	e009      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	e006      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800306c:	2310      	movs	r3, #16
 800306e:	e004      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003070:	2310      	movs	r3, #16
 8003072:	e002      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003074:	2310      	movs	r3, #16
 8003076:	e000      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003078:	2310      	movs	r3, #16
 800307a:	4a37      	ldr	r2, [pc, #220]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800307c:	60d3      	str	r3, [r2, #12]
 800307e:	e14f      	b.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	4b35      	ldr	r3, [pc, #212]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003088:	429a      	cmp	r2, r3
 800308a:	f240 8082 	bls.w	8003192 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d078      	beq.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d071      	beq.n	8003186 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d06a      	beq.n	8003182 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d063      	beq.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d05b      	beq.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d053      	beq.n	8003172 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d04b      	beq.n	800316c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d043      	beq.n	8003166 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d03b      	beq.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d012      	beq.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00a      	beq.n	8003112 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d102      	bne.n	800310c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8003106:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800310a:	e03f      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800310c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003110:	e03c      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003112:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003116:	e039      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003118:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800311c:	e036      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800311e:	bf00      	nop
 8003120:	40026000 	.word	0x40026000
 8003124:	40026010 	.word	0x40026010
 8003128:	40026410 	.word	0x40026410
 800312c:	40026070 	.word	0x40026070
 8003130:	40026470 	.word	0x40026470
 8003134:	40026028 	.word	0x40026028
 8003138:	40026428 	.word	0x40026428
 800313c:	40026088 	.word	0x40026088
 8003140:	40026488 	.word	0x40026488
 8003144:	40026040 	.word	0x40026040
 8003148:	40026440 	.word	0x40026440
 800314c:	400260a0 	.word	0x400260a0
 8003150:	400264a0 	.word	0x400264a0
 8003154:	40026458 	.word	0x40026458
 8003158:	40026400 	.word	0x40026400
 800315c:	400260b8 	.word	0x400260b8
 8003160:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003164:	e012      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316a:	e00f      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800316c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003170:	e00c      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003176:	e009      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317c:	e006      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800317e:	2310      	movs	r3, #16
 8003180:	e004      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003182:	2310      	movs	r3, #16
 8003184:	e002      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003186:	2310      	movs	r3, #16
 8003188:	e000      	b.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800318a:	2310      	movs	r3, #16
 800318c:	4a8c      	ldr	r2, [pc, #560]	; (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800318e:	6093      	str	r3, [r2, #8]
 8003190:	e0c6      	b.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4b8a      	ldr	r3, [pc, #552]	; (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800319a:	429a      	cmp	r2, r3
 800319c:	d960      	bls.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a89      	ldr	r2, [pc, #548]	; (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d057      	beq.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a87      	ldr	r2, [pc, #540]	; (80033cc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d050      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a86      	ldr	r2, [pc, #536]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d049      	beq.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a84      	ldr	r2, [pc, #528]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d042      	beq.n	800324c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a83      	ldr	r2, [pc, #524]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03a      	beq.n	8003246 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a81      	ldr	r2, [pc, #516]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d032      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a80      	ldr	r2, [pc, #512]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02a      	beq.n	800323a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7e      	ldr	r2, [pc, #504]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7d      	ldr	r2, [pc, #500]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d01a      	beq.n	800322e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7b      	ldr	r2, [pc, #492]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d012      	beq.n	8003228 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7a      	ldr	r2, [pc, #488]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00a      	beq.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a78      	ldr	r2, [pc, #480]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d102      	bne.n	800321c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8003216:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800321a:	e01e      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800321c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003220:	e01b      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003222:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003226:	e018      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003228:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800322c:	e015      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800322e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003232:	e012      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003238:	e00f      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800323a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323e:	e00c      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	e009      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800324a:	e006      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800324c:	2310      	movs	r3, #16
 800324e:	e004      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003250:	2310      	movs	r3, #16
 8003252:	e002      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003254:	2310      	movs	r3, #16
 8003256:	e000      	b.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003258:	2310      	movs	r3, #16
 800325a:	4a67      	ldr	r2, [pc, #412]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800325c:	60d3      	str	r3, [r2, #12]
 800325e:	e05f      	b.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d057      	beq.n	800331a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a57      	ldr	r2, [pc, #348]	; (80033cc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d050      	beq.n	8003316 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a55      	ldr	r2, [pc, #340]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d049      	beq.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a54      	ldr	r2, [pc, #336]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d042      	beq.n	800330e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d03a      	beq.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a51      	ldr	r2, [pc, #324]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d032      	beq.n	8003302 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a4f      	ldr	r2, [pc, #316]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02a      	beq.n	80032fc <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a4e      	ldr	r2, [pc, #312]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a4c      	ldr	r2, [pc, #304]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01a      	beq.n	80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4b      	ldr	r2, [pc, #300]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d012      	beq.n	80032ea <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a49      	ldr	r2, [pc, #292]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00a      	beq.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a48      	ldr	r2, [pc, #288]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d102      	bne.n	80032de <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80032d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032dc:	e01e      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032e2:	e01b      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032e8:	e018      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ee:	e015      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032f4:	e012      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fa:	e00f      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003300:	e00c      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003306:	e009      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330c:	e006      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800330e:	2310      	movs	r3, #16
 8003310:	e004      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003312:	2310      	movs	r3, #16
 8003314:	e002      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003316:	2310      	movs	r3, #16
 8003318:	e000      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800331a:	2310      	movs	r3, #16
 800331c:	4a36      	ldr	r2, [pc, #216]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800331e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003328:	429a      	cmp	r2, r3
 800332a:	f240 8082 	bls.w	8003432 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d078      	beq.n	800342a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d071      	beq.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d06a      	beq.n	8003422 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d063      	beq.n	800341e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d05b      	beq.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d053      	beq.n	8003412 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04b      	beq.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d043      	beq.n	8003406 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d03b      	beq.n	8003400 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d012      	beq.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00a      	beq.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d102      	bne.n	80033ac <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 80033a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033aa:	e03f      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b0:	e03c      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033b6:	e039      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033bc:	e036      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033be:	bf00      	nop
 80033c0:	40026400 	.word	0x40026400
 80033c4:	40026058 	.word	0x40026058
 80033c8:	40026010 	.word	0x40026010
 80033cc:	40026410 	.word	0x40026410
 80033d0:	40026070 	.word	0x40026070
 80033d4:	40026470 	.word	0x40026470
 80033d8:	40026028 	.word	0x40026028
 80033dc:	40026428 	.word	0x40026428
 80033e0:	40026088 	.word	0x40026088
 80033e4:	40026488 	.word	0x40026488
 80033e8:	40026040 	.word	0x40026040
 80033ec:	40026440 	.word	0x40026440
 80033f0:	400260a0 	.word	0x400260a0
 80033f4:	400264a0 	.word	0x400264a0
 80033f8:	40026000 	.word	0x40026000
 80033fc:	40026458 	.word	0x40026458
 8003400:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003404:	e012      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800340a:	e00f      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800340c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003410:	e00c      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003416:	e009      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341c:	e006      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800341e:	2308      	movs	r3, #8
 8003420:	e004      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003422:	2308      	movs	r3, #8
 8003424:	e002      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003426:	2308      	movs	r3, #8
 8003428:	e000      	b.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800342a:	2308      	movs	r3, #8
 800342c:	4a8c      	ldr	r2, [pc, #560]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800342e:	60d3      	str	r3, [r2, #12]
 8003430:	e14e      	b.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	4b8a      	ldr	r3, [pc, #552]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800343a:	429a      	cmp	r2, r3
 800343c:	d960      	bls.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a89      	ldr	r2, [pc, #548]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d057      	beq.n	80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a87      	ldr	r2, [pc, #540]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d050      	beq.n	80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a86      	ldr	r2, [pc, #536]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d049      	beq.n	80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a84      	ldr	r2, [pc, #528]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d042      	beq.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a83      	ldr	r2, [pc, #524]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d03a      	beq.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a81      	ldr	r2, [pc, #516]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d032      	beq.n	80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a80      	ldr	r2, [pc, #512]	; (8003680 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02a      	beq.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a7e      	ldr	r2, [pc, #504]	; (8003684 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7d      	ldr	r2, [pc, #500]	; (8003688 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01a      	beq.n	80034ce <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a7b      	ldr	r2, [pc, #492]	; (800368c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d012      	beq.n	80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7a      	ldr	r2, [pc, #488]	; (8003690 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00a      	beq.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a78      	ldr	r2, [pc, #480]	; (8003694 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d102      	bne.n	80034bc <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 80034b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034ba:	e01e      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c0:	e01b      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034c6:	e018      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034cc:	e015      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034d2:	e012      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d8:	e00f      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034de:	e00c      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e4:	e009      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ea:	e006      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034ec:	2308      	movs	r3, #8
 80034ee:	e004      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034f0:	2308      	movs	r3, #8
 80034f2:	e002      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034f4:	2308      	movs	r3, #8
 80034f6:	e000      	b.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034f8:	2308      	movs	r3, #8
 80034fa:	4a59      	ldr	r2, [pc, #356]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80034fc:	6093      	str	r3, [r2, #8]
 80034fe:	e0e7      	b.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b64      	ldr	r3, [pc, #400]	; (8003698 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003508:	429a      	cmp	r2, r3
 800350a:	d960      	bls.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a55      	ldr	r2, [pc, #340]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d057      	beq.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d050      	beq.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a52      	ldr	r2, [pc, #328]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d049      	beq.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a51      	ldr	r2, [pc, #324]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d042      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4f      	ldr	r2, [pc, #316]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d03a      	beq.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4e      	ldr	r2, [pc, #312]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d032      	beq.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02a      	beq.n	80035a8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4b      	ldr	r2, [pc, #300]	; (8003684 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a49      	ldr	r2, [pc, #292]	; (8003688 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01a      	beq.n	800359c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a48      	ldr	r2, [pc, #288]	; (800368c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d012      	beq.n	8003596 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a46      	ldr	r2, [pc, #280]	; (8003690 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00a      	beq.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a45      	ldr	r2, [pc, #276]	; (8003694 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003584:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003588:	e01e      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	e01b      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003590:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003594:	e018      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003596:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800359a:	e015      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800359c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035a0:	e012      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a6:	e00f      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ac:	e00c      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b2:	e009      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b8:	e006      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e004      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035be:	2308      	movs	r3, #8
 80035c0:	e002      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035c2:	2308      	movs	r3, #8
 80035c4:	e000      	b.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035c6:	2308      	movs	r3, #8
 80035c8:	4a34      	ldr	r2, [pc, #208]	; (800369c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e080      	b.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d078      	beq.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d071      	beq.n	80036c6 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d06a      	beq.n	80036c2 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a20      	ldr	r2, [pc, #128]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d063      	beq.n	80036be <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d05b      	beq.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d053      	beq.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04b      	beq.n	80036ac <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d043      	beq.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d03b      	beq.n	80036a0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d012      	beq.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00a      	beq.n	8003652 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d102      	bne.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003646:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800364a:	e03f      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800364c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003650:	e03c      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003652:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003656:	e039      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003658:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800365c:	e036      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800365e:	bf00      	nop
 8003660:	40026400 	.word	0x40026400
 8003664:	400260b8 	.word	0x400260b8
 8003668:	40026010 	.word	0x40026010
 800366c:	40026410 	.word	0x40026410
 8003670:	40026070 	.word	0x40026070
 8003674:	40026470 	.word	0x40026470
 8003678:	40026028 	.word	0x40026028
 800367c:	40026428 	.word	0x40026428
 8003680:	40026088 	.word	0x40026088
 8003684:	40026488 	.word	0x40026488
 8003688:	40026040 	.word	0x40026040
 800368c:	40026440 	.word	0x40026440
 8003690:	400260a0 	.word	0x400260a0
 8003694:	400264a0 	.word	0x400264a0
 8003698:	40026058 	.word	0x40026058
 800369c:	40026000 	.word	0x40026000
 80036a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036a4:	e012      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036aa:	e00f      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036b0:	e00c      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036b6:	e009      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036bc:	e006      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036be:	2308      	movs	r3, #8
 80036c0:	e004      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036c2:	2308      	movs	r3, #8
 80036c4:	e002      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036c6:	2308      	movs	r3, #8
 80036c8:	e000      	b.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036ca:	2308      	movs	r3, #8
 80036cc:	4a8a      	ldr	r2, [pc, #552]	; (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80036ce:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b89      	ldr	r3, [pc, #548]	; (80038fc <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d960      	bls.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a87      	ldr	r2, [pc, #540]	; (8003900 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d057      	beq.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a86      	ldr	r2, [pc, #536]	; (8003904 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d050      	beq.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a84      	ldr	r2, [pc, #528]	; (8003908 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d049      	beq.n	800378e <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a83      	ldr	r2, [pc, #524]	; (800390c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d042      	beq.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a81      	ldr	r2, [pc, #516]	; (8003910 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d03a      	beq.n	8003784 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a80      	ldr	r2, [pc, #512]	; (8003914 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d032      	beq.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a7e      	ldr	r2, [pc, #504]	; (8003918 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d02a      	beq.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7d      	ldr	r2, [pc, #500]	; (800391c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7b      	ldr	r2, [pc, #492]	; (8003920 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01a      	beq.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7a      	ldr	r2, [pc, #488]	; (8003924 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d012      	beq.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a78      	ldr	r2, [pc, #480]	; (8003928 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00a      	beq.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a77      	ldr	r2, [pc, #476]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d102      	bne.n	800375a <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003758:	e01e      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800375a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375e:	e01b      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003760:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003764:	e018      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003766:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800376a:	e015      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800376c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003770:	e012      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003776:	e00f      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377c:	e00c      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800377e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003782:	e009      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003788:	e006      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800378a:	2304      	movs	r3, #4
 800378c:	e004      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800378e:	2304      	movs	r3, #4
 8003790:	e002      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003792:	2304      	movs	r3, #4
 8003794:	e000      	b.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003796:	2304      	movs	r3, #4
 8003798:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800379a:	60d3      	str	r3, [r2, #12]
 800379c:	e150      	b.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d960      	bls.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a54      	ldr	r2, [pc, #336]	; (8003900 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d057      	beq.n	8003864 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d050      	beq.n	8003860 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a51      	ldr	r2, [pc, #324]	; (8003908 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d049      	beq.n	800385c <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a4f      	ldr	r2, [pc, #316]	; (800390c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d042      	beq.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d03a      	beq.n	8003852 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d032      	beq.n	800384c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4b      	ldr	r2, [pc, #300]	; (8003918 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d02a      	beq.n	8003846 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a49      	ldr	r2, [pc, #292]	; (800391c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a48      	ldr	r2, [pc, #288]	; (8003920 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01a      	beq.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a46      	ldr	r2, [pc, #280]	; (8003924 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d012      	beq.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a45      	ldr	r2, [pc, #276]	; (8003928 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00a      	beq.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a43      	ldr	r2, [pc, #268]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d102      	bne.n	8003828 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003822:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003826:	e01e      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800382c:	e01b      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800382e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003832:	e018      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003838:	e015      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800383a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800383e:	e012      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003844:	e00f      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800384a:	e00c      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800384c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003850:	e009      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003856:	e006      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003858:	2304      	movs	r3, #4
 800385a:	e004      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800385c:	2304      	movs	r3, #4
 800385e:	e002      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003860:	2304      	movs	r3, #4
 8003862:	e000      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003864:	2304      	movs	r3, #4
 8003866:	4a32      	ldr	r2, [pc, #200]	; (8003930 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003868:	6093      	str	r3, [r2, #8]
 800386a:	e0e9      	b.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003874:	429a      	cmp	r2, r3
 8003876:	f240 8083 	bls.w	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a20      	ldr	r2, [pc, #128]	; (8003900 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d079      	beq.n	8003978 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d072      	beq.n	8003974 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d06b      	beq.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d064      	beq.n	800396c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d05c      	beq.n	8003966 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d054      	beq.n	8003960 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d04c      	beq.n	800395a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d044      	beq.n	8003954 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a14      	ldr	r2, [pc, #80]	; (8003920 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d03c      	beq.n	800394e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d034      	beq.n	8003948 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d124      	bne.n	800393c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80038f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038f6:	e040      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80038f8:	40026000 	.word	0x40026000
 80038fc:	40026458 	.word	0x40026458
 8003900:	40026010 	.word	0x40026010
 8003904:	40026410 	.word	0x40026410
 8003908:	40026070 	.word	0x40026070
 800390c:	40026470 	.word	0x40026470
 8003910:	40026028 	.word	0x40026028
 8003914:	40026428 	.word	0x40026428
 8003918:	40026088 	.word	0x40026088
 800391c:	40026488 	.word	0x40026488
 8003920:	40026040 	.word	0x40026040
 8003924:	40026440 	.word	0x40026440
 8003928:	400260a0 	.word	0x400260a0
 800392c:	400264a0 	.word	0x400264a0
 8003930:	40026400 	.word	0x40026400
 8003934:	400260b8 	.word	0x400260b8
 8003938:	40026058 	.word	0x40026058
 800393c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003940:	e01b      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003942:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003946:	e018      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003948:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800394c:	e015      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800394e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003952:	e012      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003958:	e00f      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800395a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800395e:	e00c      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003964:	e009      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800396a:	e006      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800396c:	2304      	movs	r3, #4
 800396e:	e004      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003970:	2304      	movs	r3, #4
 8003972:	e002      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003974:	2304      	movs	r3, #4
 8003976:	e000      	b.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003978:	2304      	movs	r3, #4
 800397a:	4a8b      	ldr	r2, [pc, #556]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800397c:	60d3      	str	r3, [r2, #12]
 800397e:	e05f      	b.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a89      	ldr	r2, [pc, #548]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d057      	beq.n	8003a3a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a88      	ldr	r2, [pc, #544]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d050      	beq.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a86      	ldr	r2, [pc, #536]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d049      	beq.n	8003a32 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a85      	ldr	r2, [pc, #532]	; (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d042      	beq.n	8003a2e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a83      	ldr	r2, [pc, #524]	; (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03a      	beq.n	8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a82      	ldr	r2, [pc, #520]	; (8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d032      	beq.n	8003a22 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02a      	beq.n	8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a7f      	ldr	r2, [pc, #508]	; (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d022      	beq.n	8003a16 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a7d      	ldr	r2, [pc, #500]	; (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01a      	beq.n	8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7c      	ldr	r2, [pc, #496]	; (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d012      	beq.n	8003a0a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7a      	ldr	r2, [pc, #488]	; (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00a      	beq.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a79      	ldr	r2, [pc, #484]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d102      	bne.n	80039fe <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80039f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039fc:	e01e      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a02:	e01b      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a08:	e018      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a0e:	e015      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a14:	e012      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1a:	e00f      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a20:	e00c      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a26:	e009      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a2c:	e006      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e004      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a32:	2304      	movs	r3, #4
 8003a34:	e002      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a36:	2304      	movs	r3, #4
 8003a38:	e000      	b.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	4a5a      	ldr	r2, [pc, #360]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003a3e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d95c      	bls.n	8003b06 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a56      	ldr	r2, [pc, #344]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d053      	beq.n	8003afe <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a55      	ldr	r2, [pc, #340]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04c      	beq.n	8003afa <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a53      	ldr	r2, [pc, #332]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d045      	beq.n	8003af6 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d03e      	beq.n	8003af2 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a50      	ldr	r2, [pc, #320]	; (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d037      	beq.n	8003aee <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4f      	ldr	r2, [pc, #316]	; (8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d030      	beq.n	8003aea <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a4d      	ldr	r2, [pc, #308]	; (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d029      	beq.n	8003ae6 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4c      	ldr	r2, [pc, #304]	; (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a4a      	ldr	r2, [pc, #296]	; (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01a      	beq.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d012      	beq.n	8003ad6 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a47      	ldr	r2, [pc, #284]	; (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a46      	ldr	r2, [pc, #280]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d102      	bne.n	8003aca <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac8:	e01a      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ace:	e017      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ad4:	e014      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ada:	e011      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae0:	e00e      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	e00c      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	e00a      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	e008      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aee:	2340      	movs	r3, #64	; 0x40
 8003af0:	e006      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e004      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e002      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003afe:	2301      	movs	r3, #1
 8003b00:	4a37      	ldr	r2, [pc, #220]	; (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003b02:	60d3      	str	r3, [r2, #12]
 8003b04:	e141      	b.n	8003d8a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d97c      	bls.n	8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a25      	ldr	r2, [pc, #148]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d073      	beq.n	8003c04 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d06c      	beq.n	8003c00 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d065      	beq.n	8003bfc <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a20      	ldr	r2, [pc, #128]	; (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d05e      	beq.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d057      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d050      	beq.n	8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d049      	beq.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d042      	beq.n	8003be8 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01a      	beq.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d012      	beq.n	8003b9c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00a      	beq.n	8003b96 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d102      	bne.n	8003b90 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8e:	e03a      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b94:	e037      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9a:	e034      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba0:	e031      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba6:	e02e      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ba8:	40026000 	.word	0x40026000
 8003bac:	40026010 	.word	0x40026010
 8003bb0:	40026410 	.word	0x40026410
 8003bb4:	40026070 	.word	0x40026070
 8003bb8:	40026470 	.word	0x40026470
 8003bbc:	40026028 	.word	0x40026028
 8003bc0:	40026428 	.word	0x40026428
 8003bc4:	40026088 	.word	0x40026088
 8003bc8:	40026488 	.word	0x40026488
 8003bcc:	40026040 	.word	0x40026040
 8003bd0:	40026440 	.word	0x40026440
 8003bd4:	400260a0 	.word	0x400260a0
 8003bd8:	400264a0 	.word	0x400264a0
 8003bdc:	40026458 	.word	0x40026458
 8003be0:	40026400 	.word	0x40026400
 8003be4:	400260b8 	.word	0x400260b8
 8003be8:	2340      	movs	r3, #64	; 0x40
 8003bea:	e00c      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bec:	2340      	movs	r3, #64	; 0x40
 8003bee:	e00a      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bf0:	2340      	movs	r3, #64	; 0x40
 8003bf2:	e008      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bf4:	2340      	movs	r3, #64	; 0x40
 8003bf6:	e006      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e004      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e002      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4a7b      	ldr	r2, [pc, #492]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003c08:	6093      	str	r3, [r2, #8]
 8003c0a:	e0be      	b.n	8003d8a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b79      	ldr	r3, [pc, #484]	; (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d95c      	bls.n	8003cd2 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a77      	ldr	r2, [pc, #476]	; (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d053      	beq.n	8003cca <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a76      	ldr	r2, [pc, #472]	; (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04c      	beq.n	8003cc6 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a74      	ldr	r2, [pc, #464]	; (8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d045      	beq.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a73      	ldr	r2, [pc, #460]	; (8003e08 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d03e      	beq.n	8003cbe <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a71      	ldr	r2, [pc, #452]	; (8003e0c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d037      	beq.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a70      	ldr	r2, [pc, #448]	; (8003e10 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d030      	beq.n	8003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6e      	ldr	r2, [pc, #440]	; (8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d029      	beq.n	8003cb2 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6d      	ldr	r2, [pc, #436]	; (8003e18 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a6b      	ldr	r2, [pc, #428]	; (8003e1c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01a      	beq.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6a      	ldr	r2, [pc, #424]	; (8003e20 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d012      	beq.n	8003ca2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a68      	ldr	r2, [pc, #416]	; (8003e24 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00a      	beq.n	8003c9c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a67      	ldr	r2, [pc, #412]	; (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d102      	bne.n	8003c96 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c94:	e01a      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c9a:	e017      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca0:	e014      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca6:	e011      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cac:	e00e      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	e00c      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	e00a      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cb6:	2340      	movs	r3, #64	; 0x40
 8003cb8:	e008      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	e006      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e004      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e002      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e05b      	b.n	8003d8a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a49      	ldr	r2, [pc, #292]	; (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d053      	beq.n	8003d84 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a47      	ldr	r2, [pc, #284]	; (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04c      	beq.n	8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a46      	ldr	r2, [pc, #280]	; (8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d045      	beq.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a44      	ldr	r2, [pc, #272]	; (8003e08 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03e      	beq.n	8003d78 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a43      	ldr	r2, [pc, #268]	; (8003e0c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d037      	beq.n	8003d74 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a41      	ldr	r2, [pc, #260]	; (8003e10 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d030      	beq.n	8003d70 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a40      	ldr	r2, [pc, #256]	; (8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d029      	beq.n	8003d6c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3e      	ldr	r2, [pc, #248]	; (8003e18 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d022      	beq.n	8003d68 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3d      	ldr	r2, [pc, #244]	; (8003e1c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01a      	beq.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3b      	ldr	r2, [pc, #236]	; (8003e20 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d012      	beq.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3a      	ldr	r2, [pc, #232]	; (8003e24 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00a      	beq.n	8003d56 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d102      	bne.n	8003d50 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d4e:	e01a      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d54:	e017      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d5a:	e014      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d60:	e011      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d66:	e00e      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d68:	2340      	movs	r3, #64	; 0x40
 8003d6a:	e00c      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d6c:	2340      	movs	r3, #64	; 0x40
 8003d6e:	e00a      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d70:	2340      	movs	r3, #64	; 0x40
 8003d72:	e008      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d74:	2340      	movs	r3, #64	; 0x40
 8003d76:	e006      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e004      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e002      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d84:	2301      	movs	r3, #1
 8003d86:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003d88:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0216 	orr.w	r2, r2, #22
 8003d98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e005      	b.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
 8003de6:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40026400 	.word	0x40026400
 8003df8:	40026058 	.word	0x40026058
 8003dfc:	40026010 	.word	0x40026010
 8003e00:	40026410 	.word	0x40026410
 8003e04:	40026070 	.word	0x40026070
 8003e08:	40026470 	.word	0x40026470
 8003e0c:	40026028 	.word	0x40026028
 8003e10:	40026428 	.word	0x40026428
 8003e14:	40026088 	.word	0x40026088
 8003e18:	40026488 	.word	0x40026488
 8003e1c:	40026040 	.word	0x40026040
 8003e20:	40026440 	.word	0x40026440
 8003e24:	400260a0 	.word	0x400260a0
 8003e28:	400264a0 	.word	0x400264a0
 8003e2c:	40026000 	.word	0x40026000

08003e30 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	e003      	b.n	8003e56 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d108      	bne.n	8003e94 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e92:	e007      	b.n	8003ea4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	; 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	e165      	b.n	8004198 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ecc:	2201      	movs	r2, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	f040 8154 	bne.w	8004192 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d005      	beq.n	8003f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d130      	bne.n	8003f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 0201 	and.w	r2, r3, #1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d017      	beq.n	8003fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d123      	bne.n	8003ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	08da      	lsrs	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3208      	adds	r2, #8
 8003fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	08da      	lsrs	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3208      	adds	r2, #8
 8003fee:	69b9      	ldr	r1, [r7, #24]
 8003ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0203 	and.w	r2, r3, #3
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80ae 	beq.w	8004192 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	4b5d      	ldr	r3, [pc, #372]	; (80041b0 <HAL_GPIO_Init+0x300>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	4a5c      	ldr	r2, [pc, #368]	; (80041b0 <HAL_GPIO_Init+0x300>)
 8004040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004044:	6453      	str	r3, [r2, #68]	; 0x44
 8004046:	4b5a      	ldr	r3, [pc, #360]	; (80041b0 <HAL_GPIO_Init+0x300>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004052:	4a58      	ldr	r2, [pc, #352]	; (80041b4 <HAL_GPIO_Init+0x304>)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	3302      	adds	r3, #2
 800405a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4f      	ldr	r2, [pc, #316]	; (80041b8 <HAL_GPIO_Init+0x308>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d025      	beq.n	80040ca <HAL_GPIO_Init+0x21a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4e      	ldr	r2, [pc, #312]	; (80041bc <HAL_GPIO_Init+0x30c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01f      	beq.n	80040c6 <HAL_GPIO_Init+0x216>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4d      	ldr	r2, [pc, #308]	; (80041c0 <HAL_GPIO_Init+0x310>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d019      	beq.n	80040c2 <HAL_GPIO_Init+0x212>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_GPIO_Init+0x314>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_GPIO_Init+0x20e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4b      	ldr	r2, [pc, #300]	; (80041c8 <HAL_GPIO_Init+0x318>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00d      	beq.n	80040ba <HAL_GPIO_Init+0x20a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4a      	ldr	r2, [pc, #296]	; (80041cc <HAL_GPIO_Init+0x31c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <HAL_GPIO_Init+0x206>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a49      	ldr	r2, [pc, #292]	; (80041d0 <HAL_GPIO_Init+0x320>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_GPIO_Init+0x202>
 80040ae:	2306      	movs	r3, #6
 80040b0:	e00c      	b.n	80040cc <HAL_GPIO_Init+0x21c>
 80040b2:	2307      	movs	r3, #7
 80040b4:	e00a      	b.n	80040cc <HAL_GPIO_Init+0x21c>
 80040b6:	2305      	movs	r3, #5
 80040b8:	e008      	b.n	80040cc <HAL_GPIO_Init+0x21c>
 80040ba:	2304      	movs	r3, #4
 80040bc:	e006      	b.n	80040cc <HAL_GPIO_Init+0x21c>
 80040be:	2303      	movs	r3, #3
 80040c0:	e004      	b.n	80040cc <HAL_GPIO_Init+0x21c>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_Init+0x21c>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_GPIO_Init+0x21c>
 80040ca:	2300      	movs	r3, #0
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	f002 0203 	and.w	r2, r2, #3
 80040d2:	0092      	lsls	r2, r2, #2
 80040d4:	4093      	lsls	r3, r2
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040dc:	4935      	ldr	r1, [pc, #212]	; (80041b4 <HAL_GPIO_Init+0x304>)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ea:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_GPIO_Init+0x324>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800410e:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <HAL_GPIO_Init+0x324>)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004114:	4b2f      	ldr	r3, [pc, #188]	; (80041d4 <HAL_GPIO_Init+0x324>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004138:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <HAL_GPIO_Init+0x324>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_GPIO_Init+0x324>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004162:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_GPIO_Init+0x324>)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_GPIO_Init+0x324>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800418c:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <HAL_GPIO_Init+0x324>)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3301      	adds	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b0f      	cmp	r3, #15
 800419c:	f67f ae96 	bls.w	8003ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40013800 	.word	0x40013800
 80041b8:	40020000 	.word	0x40020000
 80041bc:	40020400 	.word	0x40020400
 80041c0:	40020800 	.word	0x40020800
 80041c4:	40020c00 	.word	0x40020c00
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40021400 	.word	0x40021400
 80041d0:	40021800 	.word	0x40021800
 80041d4:	40013c00 	.word	0x40013c00

080041d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
 80041e4:	4613      	mov	r3, r2
 80041e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e8:	787b      	ldrb	r3, [r7, #1]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f4:	e003      	b.n	80041fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800421c:	887a      	ldrh	r2, [r7, #2]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4013      	ands	r3, r2
 8004222:	041a      	lsls	r2, r3, #16
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43d9      	mvns	r1, r3
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	400b      	ands	r3, r1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	619a      	str	r2, [r3, #24]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f806 	bl	8004270 <HAL_GPIO_EXTI_Callback>
  }
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40013c00 	.word	0x40013c00

08004270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e12b      	b.n	80044f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd f8c4 	bl	800143c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042ec:	f001 fb2c 	bl	8005948 <HAL_RCC_GetPCLK1Freq>
 80042f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4a81      	ldr	r2, [pc, #516]	; (80044fc <HAL_I2C_Init+0x274>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d807      	bhi.n	800430c <HAL_I2C_Init+0x84>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a80      	ldr	r2, [pc, #512]	; (8004500 <HAL_I2C_Init+0x278>)
 8004300:	4293      	cmp	r3, r2
 8004302:	bf94      	ite	ls
 8004304:	2301      	movls	r3, #1
 8004306:	2300      	movhi	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e006      	b.n	800431a <HAL_I2C_Init+0x92>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a7d      	ldr	r2, [pc, #500]	; (8004504 <HAL_I2C_Init+0x27c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	bf94      	ite	ls
 8004314:	2301      	movls	r3, #1
 8004316:	2300      	movhi	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0e7      	b.n	80044f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a78      	ldr	r2, [pc, #480]	; (8004508 <HAL_I2C_Init+0x280>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	0c9b      	lsrs	r3, r3, #18
 800432c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4a6a      	ldr	r2, [pc, #424]	; (80044fc <HAL_I2C_Init+0x274>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d802      	bhi.n	800435c <HAL_I2C_Init+0xd4>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3301      	adds	r3, #1
 800435a:	e009      	b.n	8004370 <HAL_I2C_Init+0xe8>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	4a69      	ldr	r2, [pc, #420]	; (800450c <HAL_I2C_Init+0x284>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	3301      	adds	r3, #1
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	430b      	orrs	r3, r1
 8004376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	495c      	ldr	r1, [pc, #368]	; (80044fc <HAL_I2C_Init+0x274>)
 800438c:	428b      	cmp	r3, r1
 800438e:	d819      	bhi.n	80043c4 <HAL_I2C_Init+0x13c>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1e59      	subs	r1, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	fbb1 f3f3 	udiv	r3, r1, r3
 800439e:	1c59      	adds	r1, r3, #1
 80043a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043a4:	400b      	ands	r3, r1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_I2C_Init+0x138>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1e59      	subs	r1, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b8:	3301      	adds	r3, #1
 80043ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043be:	e051      	b.n	8004464 <HAL_I2C_Init+0x1dc>
 80043c0:	2304      	movs	r3, #4
 80043c2:	e04f      	b.n	8004464 <HAL_I2C_Init+0x1dc>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d111      	bne.n	80043f0 <HAL_I2C_Init+0x168>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1e58      	subs	r0, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e012      	b.n	8004416 <HAL_I2C_Init+0x18e>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1e58      	subs	r0, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	0099      	lsls	r1, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	fbb0 f3f3 	udiv	r3, r0, r3
 8004406:	3301      	adds	r3, #1
 8004408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Init+0x196>
 800441a:	2301      	movs	r3, #1
 800441c:	e022      	b.n	8004464 <HAL_I2C_Init+0x1dc>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10e      	bne.n	8004444 <HAL_I2C_Init+0x1bc>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1e58      	subs	r0, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	440b      	add	r3, r1
 8004434:	fbb0 f3f3 	udiv	r3, r0, r3
 8004438:	3301      	adds	r3, #1
 800443a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	e00f      	b.n	8004464 <HAL_I2C_Init+0x1dc>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	1e58      	subs	r0, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6859      	ldr	r1, [r3, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	0099      	lsls	r1, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	fbb0 f3f3 	udiv	r3, r0, r3
 800445a:	3301      	adds	r3, #1
 800445c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	6809      	ldr	r1, [r1, #0]
 8004468:	4313      	orrs	r3, r2
 800446a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6911      	ldr	r1, [r2, #16]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	000186a0 	.word	0x000186a0
 8004500:	001e847f 	.word	0x001e847f
 8004504:	003d08ff 	.word	0x003d08ff
 8004508:	431bde83 	.word	0x431bde83
 800450c:	10624dd3 	.word	0x10624dd3

08004510 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	817b      	strh	r3, [r7, #10]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004524:	f7fd fb30 	bl	8001b88 <HAL_GetTick>
 8004528:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b20      	cmp	r3, #32
 8004534:	f040 80e0 	bne.w	80046f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2319      	movs	r3, #25
 800453e:	2201      	movs	r2, #1
 8004540:	4970      	ldr	r1, [pc, #448]	; (8004704 <HAL_I2C_Master_Transmit+0x1f4>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fde8 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
 8004550:	e0d3      	b.n	80046fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_I2C_Master_Transmit+0x50>
 800455c:	2302      	movs	r3, #2
 800455e:	e0cc      	b.n	80046fa <HAL_I2C_Master_Transmit+0x1ea>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b01      	cmp	r3, #1
 8004574:	d007      	beq.n	8004586 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2221      	movs	r2, #33	; 0x21
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2210      	movs	r2, #16
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	893a      	ldrh	r2, [r7, #8]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a50      	ldr	r2, [pc, #320]	; (8004708 <HAL_I2C_Master_Transmit+0x1f8>)
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045c8:	8979      	ldrh	r1, [r7, #10]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fbbc 	bl	8004d4c <I2C_MasterRequestWrite>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e08d      	b.n	80046fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045f4:	e066      	b.n	80046c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	6a39      	ldr	r1, [r7, #32]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fe62 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2b04      	cmp	r3, #4
 800460c:	d107      	bne.n	800461e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e06b      	b.n	80046fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b04      	cmp	r3, #4
 800465e:	d11b      	bne.n	8004698 <HAL_I2C_Master_Transmit+0x188>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	2b00      	cmp	r3, #0
 8004666:	d017      	beq.n	8004698 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	6a39      	ldr	r1, [r7, #32]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fe52 	bl	8005346 <I2C_WaitOnBTFFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00d      	beq.n	80046c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d107      	bne.n	80046c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e01a      	b.n	80046fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d194      	bne.n	80045f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	00100002 	.word	0x00100002
 8004708:	ffff0000 	.word	0xffff0000

0800470c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	461a      	mov	r2, r3
 8004718:	460b      	mov	r3, r1
 800471a:	817b      	strh	r3, [r7, #10]
 800471c:	4613      	mov	r3, r2
 800471e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7fd fa32 	bl	8001b88 <HAL_GetTick>
 8004724:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b20      	cmp	r3, #32
 8004730:	f040 820b 	bne.w	8004b4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2319      	movs	r3, #25
 800473a:	2201      	movs	r2, #1
 800473c:	497c      	ldr	r1, [pc, #496]	; (8004930 <HAL_I2C_Master_Receive+0x224>)
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fcea 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
 800474c:	e1fe      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_I2C_Master_Receive+0x50>
 8004758:	2302      	movs	r3, #2
 800475a:	e1f7      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d007      	beq.n	8004782 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004790:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2222      	movs	r2, #34	; 0x22
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2210      	movs	r2, #16
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	893a      	ldrh	r2, [r7, #8]
 80047b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a5c      	ldr	r2, [pc, #368]	; (8004934 <HAL_I2C_Master_Receive+0x228>)
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047c4:	8979      	ldrh	r1, [r7, #10]
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fb40 	bl	8004e50 <I2C_MasterRequestRead>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e1b8      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d113      	bne.n	800480a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	623b      	str	r3, [r7, #32]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e18c      	b.n	8004b24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	2b01      	cmp	r3, #1
 8004810:	d11b      	bne.n	800484a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e16c      	b.n	8004b24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	2b02      	cmp	r3, #2
 8004850:	d11b      	bne.n	800488a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004860:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	e14c      	b.n	8004b24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048b0:	e138      	b.n	8004b24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	f200 80f1 	bhi.w	8004a9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d123      	bne.n	800490c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fd7d 	bl	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e139      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800490a:	e10b      	b.n	8004b24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	2b02      	cmp	r3, #2
 8004912:	d14e      	bne.n	80049b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	2200      	movs	r2, #0
 800491c:	4906      	ldr	r1, [pc, #24]	; (8004938 <HAL_I2C_Master_Receive+0x22c>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fbfa 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e10e      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
 800492e:	bf00      	nop
 8004930:	00100002 	.word	0x00100002
 8004934:	ffff0000 	.word	0xffff0000
 8004938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b0:	e0b8      	b.n	8004b24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	2200      	movs	r2, #0
 80049ba:	4966      	ldr	r1, [pc, #408]	; (8004b54 <HAL_I2C_Master_Receive+0x448>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fbab 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0bf      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	2200      	movs	r2, #0
 8004a16:	494f      	ldr	r1, [pc, #316]	; (8004b54 <HAL_I2C_Master_Receive+0x448>)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fb7d 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e091      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a9c:	e042      	b.n	8004b24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fc90 	bl	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e04c      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d118      	bne.n	8004b24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f aec2 	bne.w	80048b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	00010004 	.word	0x00010004

08004b58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	817b      	strh	r3, [r7, #10]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	813b      	strh	r3, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b72:	f7fd f809 	bl	8001b88 <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	f040 80d9 	bne.w	8004d38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2319      	movs	r3, #25
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	496d      	ldr	r1, [pc, #436]	; (8004d44 <HAL_I2C_Mem_Write+0x1ec>)
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fac1 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e0cc      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_I2C_Mem_Write+0x56>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e0c5      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d007      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2221      	movs	r2, #33	; 0x21
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2240      	movs	r2, #64	; 0x40
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a3a      	ldr	r2, [r7, #32]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a4d      	ldr	r2, [pc, #308]	; (8004d48 <HAL_I2C_Mem_Write+0x1f0>)
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c16:	88f8      	ldrh	r0, [r7, #6]
 8004c18:	893a      	ldrh	r2, [r7, #8]
 8004c1a:	8979      	ldrh	r1, [r7, #10]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4603      	mov	r3, r0
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f9e0 	bl	8004fec <I2C_RequestMemoryWrite>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d052      	beq.n	8004cd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e081      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fb42 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06b      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_I2C_Mem_Write+0x180>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1aa      	bne.n	8004c36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fb2e 	bl	8005346 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d107      	bne.n	8004d08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e016      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	00100002 	.word	0x00100002
 8004d48:	ffff0000 	.word	0xffff0000

08004d4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d006      	beq.n	8004d76 <I2C_MasterRequestWrite+0x2a>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d003      	beq.n	8004d76 <I2C_MasterRequestWrite+0x2a>
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d74:	d108      	bne.n	8004d88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e00b      	b.n	8004da0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	2b12      	cmp	r3, #18
 8004d8e:	d107      	bne.n	8004da0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f9b3 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00d      	beq.n	8004dd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc6:	d103      	bne.n	8004dd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e035      	b.n	8004e40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ddc:	d108      	bne.n	8004df0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dde:	897b      	ldrh	r3, [r7, #10]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dec:	611a      	str	r2, [r3, #16]
 8004dee:	e01b      	b.n	8004e28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004df0:	897b      	ldrh	r3, [r7, #10]
 8004df2:	11db      	asrs	r3, r3, #7
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0306 	and.w	r3, r3, #6
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f063 030f 	orn	r3, r3, #15
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	490e      	ldr	r1, [pc, #56]	; (8004e48 <I2C_MasterRequestWrite+0xfc>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f9d9 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e010      	b.n	8004e40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e1e:	897b      	ldrh	r3, [r7, #10]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4907      	ldr	r1, [pc, #28]	; (8004e4c <I2C_MasterRequestWrite+0x100>)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f9c9 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	00010008 	.word	0x00010008
 8004e4c:	00010002 	.word	0x00010002

08004e50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d006      	beq.n	8004e8a <I2C_MasterRequestRead+0x3a>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d003      	beq.n	8004e8a <I2C_MasterRequestRead+0x3a>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e88:	d108      	bne.n	8004e9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e00b      	b.n	8004eb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	2b11      	cmp	r3, #17
 8004ea2:	d107      	bne.n	8004eb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f929 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	d103      	bne.n	8004ee4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e079      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef0:	d108      	bne.n	8004f04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ef2:	897b      	ldrh	r3, [r7, #10]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	e05f      	b.n	8004fc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f04:	897b      	ldrh	r3, [r7, #10]
 8004f06:	11db      	asrs	r3, r3, #7
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 0306 	and.w	r3, r3, #6
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f063 030f 	orn	r3, r3, #15
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4930      	ldr	r1, [pc, #192]	; (8004fe4 <I2C_MasterRequestRead+0x194>)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f94f 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e054      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4929      	ldr	r1, [pc, #164]	; (8004fe8 <I2C_MasterRequestRead+0x198>)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f93f 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e044      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f8c7 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9e:	d103      	bne.n	8004fa8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e017      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004fac:	897b      	ldrh	r3, [r7, #10]
 8004fae:	11db      	asrs	r3, r3, #7
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 0306 	and.w	r3, r3, #6
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f063 030e 	orn	r3, r3, #14
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4907      	ldr	r1, [pc, #28]	; (8004fe8 <I2C_MasterRequestRead+0x198>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f8fb 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	00010008 	.word	0x00010008
 8004fe8:	00010002 	.word	0x00010002

08004fec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	460b      	mov	r3, r1
 8005000:	813b      	strh	r3, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	2200      	movs	r2, #0
 800501e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f878 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503c:	d103      	bne.n	8005046 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e05f      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800504a:	897b      	ldrh	r3, [r7, #10]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005058:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	492d      	ldr	r1, [pc, #180]	; (8005114 <I2C_RequestMemoryWrite+0x128>)
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f8b0 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e04c      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	6a39      	ldr	r1, [r7, #32]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f91a 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b04      	cmp	r3, #4
 800509c:	d107      	bne.n	80050ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e02b      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d105      	bne.n	80050c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050b8:	893b      	ldrh	r3, [r7, #8]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	611a      	str	r2, [r3, #16]
 80050c2:	e021      	b.n	8005108 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c4:	893b      	ldrh	r3, [r7, #8]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d4:	6a39      	ldr	r1, [r7, #32]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f8f4 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d107      	bne.n	80050fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e005      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050fe:	893b      	ldrh	r3, [r7, #8]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	00010002 	.word	0x00010002

08005118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005128:	e025      	b.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005130:	d021      	beq.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fc fd29 	bl	8001b88 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d116      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e023      	b.n	80051be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d10d      	bne.n	800519c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	43da      	mvns	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	e00c      	b.n	80051b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d0b6      	beq.n	800512a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051d4:	e051      	b.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e4:	d123      	bne.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e046      	b.n	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005234:	d021      	beq.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fc fca7 	bl	8001b88 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e020      	b.n	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d10c      	bne.n	800529e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	43da      	mvns	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf14      	ite	ne
 8005296:	2301      	movne	r3, #1
 8005298:	2300      	moveq	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e00b      	b.n	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	43da      	mvns	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d18d      	bne.n	80051d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d0:	e02d      	b.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8ce 	bl	8005474 <I2C_IsAcknowledgeFailed>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e02d      	b.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e8:	d021      	beq.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7fc fc4d 	bl	8001b88 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0220 	orr.w	r2, r3, #32
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e007      	b.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	2b80      	cmp	r3, #128	; 0x80
 800533a:	d1ca      	bne.n	80052d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005352:	e02d      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f88d 	bl	8005474 <I2C_IsAcknowledgeFailed>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e02d      	b.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800536a:	d021      	beq.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536c:	f7fc fc0c 	bl	8001b88 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d116      	bne.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e007      	b.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d1ca      	bne.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d4:	e042      	b.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d119      	bne.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e029      	b.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7fc fbb6 	bl	8001b88 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d116      	bne.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d1b5      	bne.n	80053d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d11b      	bne.n	80054c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d4:	b08f      	sub	sp, #60	; 0x3c
 80054d6:	af0a      	add	r7, sp, #40	; 0x28
 80054d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e116      	b.n	8005712 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc f95c 	bl	80017bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2203      	movs	r2, #3
 8005508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f003 fad3 	bl	8008ace <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	687e      	ldr	r6, [r7, #4]
 8005530:	466d      	mov	r5, sp
 8005532:	f106 0410 	add.w	r4, r6, #16
 8005536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800553c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005542:	e885 0003 	stmia.w	r5, {r0, r1}
 8005546:	1d33      	adds	r3, r6, #4
 8005548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800554a:	6838      	ldr	r0, [r7, #0]
 800554c:	f003 fa5e 	bl	8008a0c <USB_CoreInit>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0d7      	b.n	8005712 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f003 fac1 	bl	8008af0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	e04a      	b.n	800560a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	333d      	adds	r3, #61	; 0x3d
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	333c      	adds	r3, #60	; 0x3c
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	b298      	uxth	r0, r3
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3344      	adds	r3, #68	; 0x44
 80055b0:	4602      	mov	r2, r0
 80055b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055b4:	7bfa      	ldrb	r2, [r7, #15]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3340      	adds	r3, #64	; 0x40
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	3348      	adds	r3, #72	; 0x48
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	334c      	adds	r3, #76	; 0x4c
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	3354      	adds	r3, #84	; 0x54
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	3301      	adds	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d3af      	bcc.n	8005574 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e044      	b.n	80056a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	3301      	adds	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3b5      	bcc.n	800561a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	687e      	ldr	r6, [r7, #4]
 80056b6:	466d      	mov	r5, sp
 80056b8:	f106 0410 	add.w	r4, r6, #16
 80056bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80056cc:	1d33      	adds	r3, r6, #4
 80056ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056d0:	6838      	ldr	r0, [r7, #0]
 80056d2:	f003 fa59 	bl	8008b88 <USB_DevInit>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e014      	b.n	8005712 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d102      	bne.n	8005706 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f80a 	bl	800571a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f003 fc17 	bl	8008f3e <USB_DevDisconnect>

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800571a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	f043 0303 	orr.w	r3, r3, #3
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0cc      	b.n	8005912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005778:	4b68      	ldr	r3, [pc, #416]	; (800591c <HAL_RCC_ClockConfig+0x1b8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d90c      	bls.n	80057a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005786:	4b65      	ldr	r3, [pc, #404]	; (800591c <HAL_RCC_ClockConfig+0x1b8>)
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b63      	ldr	r3, [pc, #396]	; (800591c <HAL_RCC_ClockConfig+0x1b8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0b8      	b.n	8005912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d020      	beq.n	80057ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b8:	4b59      	ldr	r3, [pc, #356]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a58      	ldr	r2, [pc, #352]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057d0:	4b53      	ldr	r3, [pc, #332]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	4a52      	ldr	r2, [pc, #328]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057dc:	4b50      	ldr	r3, [pc, #320]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	494d      	ldr	r1, [pc, #308]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d044      	beq.n	8005884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d107      	bne.n	8005812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005802:	4b47      	ldr	r3, [pc, #284]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d119      	bne.n	8005842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e07f      	b.n	8005912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d003      	beq.n	8005822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581e:	2b03      	cmp	r3, #3
 8005820:	d107      	bne.n	8005832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005822:	4b3f      	ldr	r3, [pc, #252]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e06f      	b.n	8005912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005832:	4b3b      	ldr	r3, [pc, #236]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e067      	b.n	8005912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005842:	4b37      	ldr	r3, [pc, #220]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f023 0203 	bic.w	r2, r3, #3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4934      	ldr	r1, [pc, #208]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	4313      	orrs	r3, r2
 8005852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005854:	f7fc f998 	bl	8001b88 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	e00a      	b.n	8005872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800585c:	f7fc f994 	bl	8001b88 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	f241 3288 	movw	r2, #5000	; 0x1388
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e04f      	b.n	8005912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 020c 	and.w	r2, r3, #12
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	429a      	cmp	r2, r3
 8005882:	d1eb      	bne.n	800585c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005884:	4b25      	ldr	r3, [pc, #148]	; (800591c <HAL_RCC_ClockConfig+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d20c      	bcs.n	80058ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b22      	ldr	r3, [pc, #136]	; (800591c <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b20      	ldr	r3, [pc, #128]	; (800591c <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e032      	b.n	8005912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b8:	4b19      	ldr	r3, [pc, #100]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4916      	ldr	r1, [pc, #88]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	490e      	ldr	r1, [pc, #56]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ea:	f000 fb7f 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 80058ee:	4602      	mov	r2, r0
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	091b      	lsrs	r3, r3, #4
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	490a      	ldr	r1, [pc, #40]	; (8005924 <HAL_RCC_ClockConfig+0x1c0>)
 80058fc:	5ccb      	ldrb	r3, [r1, r3]
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 8005904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fc f8f8 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40023c00 	.word	0x40023c00
 8005920:	40023800 	.word	0x40023800
 8005924:	08009bec 	.word	0x08009bec
 8005928:	20000004 	.word	0x20000004
 800592c:	20000008 	.word	0x20000008

08005930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCC_GetHCLKFreq+0x14>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000004 	.word	0x20000004

08005948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800594c:	f7ff fff0 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	0a9b      	lsrs	r3, r3, #10
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4903      	ldr	r1, [pc, #12]	; (800596c <HAL_RCC_GetPCLK1Freq+0x24>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40023800 	.word	0x40023800
 800596c:	08009bfc 	.word	0x08009bfc

08005970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005974:	f7ff ffdc 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 8005978:	4602      	mov	r2, r0
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	0b5b      	lsrs	r3, r3, #13
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	4903      	ldr	r1, [pc, #12]	; (8005994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005986:	5ccb      	ldrb	r3, [r1, r3]
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40023800 	.word	0x40023800
 8005994:	08009bfc 	.word	0x08009bfc

08005998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08c      	sub	sp, #48	; 0x30
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80059d0:	4b6f      	ldr	r3, [pc, #444]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	496c      	ldr	r1, [pc, #432]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80059ee:	2301      	movs	r3, #1
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80059fe:	4b64      	ldr	r3, [pc, #400]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a04:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	4960      	ldr	r1, [pc, #384]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d017      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a2c:	4b58      	ldr	r3, [pc, #352]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	4955      	ldr	r1, [pc, #340]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d101      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d017      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a68:	4b49      	ldr	r3, [pc, #292]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	4946      	ldr	r1, [pc, #280]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a86:	d101      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005a94:	2301      	movs	r3, #1
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 808a 	beq.w	8005bba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	4a38      	ldr	r2, [pc, #224]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab6:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ac2:	4b34      	ldr	r3, [pc, #208]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a33      	ldr	r2, [pc, #204]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005acc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ace:	f7fc f85b 	bl	8001b88 <HAL_GetTick>
 8005ad2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ad6:	f7fc f857 	bl	8001b88 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e278      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005af4:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02f      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0c:	6a3a      	ldr	r2, [r7, #32]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d028      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b12:	4b1f      	ldr	r3, [pc, #124]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b1c:	4b1e      	ldr	r3, [pc, #120]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b22:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b28:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b2e:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d114      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b3a:	f7fc f825 	bl	8001b88 <HAL_GetTick>
 8005b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fc f821 	bl	8001b88 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e240      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b58:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0ee      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b70:	d114      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	4902      	ldr	r1, [pc, #8]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	608b      	str	r3, [r1, #8]
 8005b8c:	e00c      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005b8e:	bf00      	nop
 8005b90:	40023800 	.word	0x40023800
 8005b94:	40007000 	.word	0x40007000
 8005b98:	42470e40 	.word	0x42470e40
 8005b9c:	4b4a      	ldr	r3, [pc, #296]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a49      	ldr	r2, [pc, #292]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ba2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ba6:	6093      	str	r3, [r2, #8]
 8005ba8:	4b47      	ldr	r3, [pc, #284]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb4:	4944      	ldr	r1, [pc, #272]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005bcc:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005bce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005bdc:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	4937      	ldr	r1, [pc, #220]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bfe:	4b32      	ldr	r3, [pc, #200]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c04:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0c:	492e      	ldr	r1, [pc, #184]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d011      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c20:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c26:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	4926      	ldr	r1, [pc, #152]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005c40:	2301      	movs	r3, #1
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005c50:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5e:	491a      	ldr	r1, [pc, #104]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d011      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	4911      	ldr	r1, [pc, #68]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c90:	d101      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005c92:	2301      	movs	r3, #1
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	f040 80ff 	bne.w	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cae:	f7fb ff6b 	bl	8001b88 <HAL_GetTick>
 8005cb2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cb4:	e00e      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cb6:	f7fb ff67 	bl	8001b88 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d907      	bls.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e188      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	424711e0 	.word	0x424711e0
 8005cd0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd4:	4b7e      	ldr	r3, [pc, #504]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1ea      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d028      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d124      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005d08:	4b71      	ldr	r3, [pc, #452]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0e:	0c1b      	lsrs	r3, r3, #16
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	3301      	adds	r3, #1
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	431a      	orrs	r2, r3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	061b      	lsls	r3, r3, #24
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	071b      	lsls	r3, r3, #28
 8005d4a:	4961      	ldr	r1, [pc, #388]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d66:	d00a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d035      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d7c:	d130      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005d7e:	4b54      	ldr	r3, [pc, #336]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d90:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d96:	0f1b      	lsrs	r3, r3, #28
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	019b      	lsls	r3, r3, #6
 8005da8:	431a      	orrs	r2, r3
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	3b01      	subs	r3, #1
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	061b      	lsls	r3, r3, #24
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	071b      	lsls	r3, r3, #28
 8005dc0:	4943      	ldr	r1, [pc, #268]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005dc8:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dce:	f023 021f 	bic.w	r2, r3, #31
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	493d      	ldr	r1, [pc, #244]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d029      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df4:	d124      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005df6:	4b36      	ldr	r3, [pc, #216]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	3301      	adds	r3, #1
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e08:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0e:	0f1b      	lsrs	r3, r3, #28
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	019b      	lsls	r3, r3, #6
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	061b      	lsls	r3, r3, #24
 8005e32:	431a      	orrs	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	071b      	lsls	r3, r3, #28
 8005e38:	4925      	ldr	r1, [pc, #148]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d016      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	061b      	lsls	r3, r3, #24
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	071b      	lsls	r3, r3, #28
 8005e72:	4917      	ldr	r1, [pc, #92]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e7a:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e80:	f7fb fe82 	bl	8001b88 <HAL_GetTick>
 8005e84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e88:	f7fb fe7e 	bl	8001b88 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e09f      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	f040 8095 	bne.w	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb4:	f7fb fe68 	bl	8001b88 <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eba:	e00f      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ebc:	f7fb fe64 	bl	8001b88 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d908      	bls.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e085      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	42470068 	.word	0x42470068
 8005ed8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005edc:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee8:	d0e8      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d02b      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d127      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	3301      	adds	r3, #1
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	3b01      	subs	r3, #1
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	4928      	ldr	r1, [pc, #160]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	3b01      	subs	r3, #1
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	4922      	ldr	r1, [pc, #136]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01d      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f76:	d118      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	0e1b      	lsrs	r3, r3, #24
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	019b      	lsls	r3, r3, #6
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	4910      	ldr	r1, [pc, #64]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005faa:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb0:	f7fb fdea 	bl	8001b88 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fb8:	f7fb fde6 	bl	8001b88 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e007      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd6:	d1ef      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3730      	adds	r7, #48	; 0x30
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	42470070 	.word	0x42470070

08005fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b0ae      	sub	sp, #184	; 0xb8
 8005ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006012:	4bcb      	ldr	r3, [pc, #812]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b0c      	cmp	r3, #12
 800601c:	f200 8206 	bhi.w	800642c <HAL_RCC_GetSysClockFreq+0x440>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	0800605d 	.word	0x0800605d
 800602c:	0800642d 	.word	0x0800642d
 8006030:	0800642d 	.word	0x0800642d
 8006034:	0800642d 	.word	0x0800642d
 8006038:	08006065 	.word	0x08006065
 800603c:	0800642d 	.word	0x0800642d
 8006040:	0800642d 	.word	0x0800642d
 8006044:	0800642d 	.word	0x0800642d
 8006048:	0800606d 	.word	0x0800606d
 800604c:	0800642d 	.word	0x0800642d
 8006050:	0800642d 	.word	0x0800642d
 8006054:	0800642d 	.word	0x0800642d
 8006058:	0800625d 	.word	0x0800625d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800605c:	4bb9      	ldr	r3, [pc, #740]	; (8006344 <HAL_RCC_GetSysClockFreq+0x358>)
 800605e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006062:	e1e7      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006064:	4bb8      	ldr	r3, [pc, #736]	; (8006348 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800606a:	e1e3      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800606c:	4bb4      	ldr	r3, [pc, #720]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006078:	4bb1      	ldr	r3, [pc, #708]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d071      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006084:	4bae      	ldr	r3, [pc, #696]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	099b      	lsrs	r3, r3, #6
 800608a:	2200      	movs	r2, #0
 800608c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006090:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060a0:	2300      	movs	r3, #0
 80060a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	f04f 0000 	mov.w	r0, #0
 80060b2:	f04f 0100 	mov.w	r1, #0
 80060b6:	0159      	lsls	r1, r3, #5
 80060b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060bc:	0150      	lsls	r0, r2, #5
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4621      	mov	r1, r4
 80060c4:	1a51      	subs	r1, r2, r1
 80060c6:	6439      	str	r1, [r7, #64]	; 0x40
 80060c8:	4629      	mov	r1, r5
 80060ca:	eb63 0301 	sbc.w	r3, r3, r1
 80060ce:	647b      	str	r3, [r7, #68]	; 0x44
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80060dc:	4649      	mov	r1, r9
 80060de:	018b      	lsls	r3, r1, #6
 80060e0:	4641      	mov	r1, r8
 80060e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060e6:	4641      	mov	r1, r8
 80060e8:	018a      	lsls	r2, r1, #6
 80060ea:	4641      	mov	r1, r8
 80060ec:	1a51      	subs	r1, r2, r1
 80060ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80060f0:	4649      	mov	r1, r9
 80060f2:	eb63 0301 	sbc.w	r3, r3, r1
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006104:	4649      	mov	r1, r9
 8006106:	00cb      	lsls	r3, r1, #3
 8006108:	4641      	mov	r1, r8
 800610a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800610e:	4641      	mov	r1, r8
 8006110:	00ca      	lsls	r2, r1, #3
 8006112:	4610      	mov	r0, r2
 8006114:	4619      	mov	r1, r3
 8006116:	4603      	mov	r3, r0
 8006118:	4622      	mov	r2, r4
 800611a:	189b      	adds	r3, r3, r2
 800611c:	633b      	str	r3, [r7, #48]	; 0x30
 800611e:	462b      	mov	r3, r5
 8006120:	460a      	mov	r2, r1
 8006122:	eb42 0303 	adc.w	r3, r2, r3
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006134:	4629      	mov	r1, r5
 8006136:	024b      	lsls	r3, r1, #9
 8006138:	4621      	mov	r1, r4
 800613a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800613e:	4621      	mov	r1, r4
 8006140:	024a      	lsls	r2, r1, #9
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800614a:	2200      	movs	r2, #0
 800614c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006150:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006154:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006158:	f7fa f8b2 	bl	80002c0 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4613      	mov	r3, r2
 8006162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006166:	e067      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006168:	4b75      	ldr	r3, [pc, #468]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	099b      	lsrs	r3, r3, #6
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006174:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800617c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006180:	67bb      	str	r3, [r7, #120]	; 0x78
 8006182:	2300      	movs	r3, #0
 8006184:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006186:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800618a:	4622      	mov	r2, r4
 800618c:	462b      	mov	r3, r5
 800618e:	f04f 0000 	mov.w	r0, #0
 8006192:	f04f 0100 	mov.w	r1, #0
 8006196:	0159      	lsls	r1, r3, #5
 8006198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800619c:	0150      	lsls	r0, r2, #5
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4621      	mov	r1, r4
 80061a4:	1a51      	subs	r1, r2, r1
 80061a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80061a8:	4629      	mov	r1, r5
 80061aa:	eb63 0301 	sbc.w	r3, r3, r1
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80061bc:	4649      	mov	r1, r9
 80061be:	018b      	lsls	r3, r1, #6
 80061c0:	4641      	mov	r1, r8
 80061c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061c6:	4641      	mov	r1, r8
 80061c8:	018a      	lsls	r2, r1, #6
 80061ca:	4641      	mov	r1, r8
 80061cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80061d0:	4649      	mov	r1, r9
 80061d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ea:	4692      	mov	sl, r2
 80061ec:	469b      	mov	fp, r3
 80061ee:	4623      	mov	r3, r4
 80061f0:	eb1a 0303 	adds.w	r3, sl, r3
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	462b      	mov	r3, r5
 80061f8:	eb4b 0303 	adc.w	r3, fp, r3
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800620a:	4629      	mov	r1, r5
 800620c:	028b      	lsls	r3, r1, #10
 800620e:	4621      	mov	r1, r4
 8006210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006214:	4621      	mov	r1, r4
 8006216:	028a      	lsls	r2, r1, #10
 8006218:	4610      	mov	r0, r2
 800621a:	4619      	mov	r1, r3
 800621c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006220:	2200      	movs	r2, #0
 8006222:	673b      	str	r3, [r7, #112]	; 0x70
 8006224:	677a      	str	r2, [r7, #116]	; 0x74
 8006226:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800622a:	f7fa f849 	bl	80002c0 <__aeabi_uldivmod>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4613      	mov	r3, r2
 8006234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006238:	4b41      	ldr	r3, [pc, #260]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	3301      	adds	r3, #1
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800624a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800624e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800625a:	e0eb      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800625c:	4b38      	ldr	r3, [pc, #224]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006268:	4b35      	ldr	r3, [pc, #212]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d06b      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006274:	4b32      	ldr	r3, [pc, #200]	; (8006340 <HAL_RCC_GetSysClockFreq+0x354>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	099b      	lsrs	r3, r3, #6
 800627a:	2200      	movs	r2, #0
 800627c:	66bb      	str	r3, [r7, #104]	; 0x68
 800627e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	663b      	str	r3, [r7, #96]	; 0x60
 8006288:	2300      	movs	r3, #0
 800628a:	667b      	str	r3, [r7, #100]	; 0x64
 800628c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006290:	4622      	mov	r2, r4
 8006292:	462b      	mov	r3, r5
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	f04f 0100 	mov.w	r1, #0
 800629c:	0159      	lsls	r1, r3, #5
 800629e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062a2:	0150      	lsls	r0, r2, #5
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4621      	mov	r1, r4
 80062aa:	1a51      	subs	r1, r2, r1
 80062ac:	61b9      	str	r1, [r7, #24]
 80062ae:	4629      	mov	r1, r5
 80062b0:	eb63 0301 	sbc.w	r3, r3, r1
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80062c2:	4659      	mov	r1, fp
 80062c4:	018b      	lsls	r3, r1, #6
 80062c6:	4651      	mov	r1, sl
 80062c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062cc:	4651      	mov	r1, sl
 80062ce:	018a      	lsls	r2, r1, #6
 80062d0:	4651      	mov	r1, sl
 80062d2:	ebb2 0801 	subs.w	r8, r2, r1
 80062d6:	4659      	mov	r1, fp
 80062d8:	eb63 0901 	sbc.w	r9, r3, r1
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062f0:	4690      	mov	r8, r2
 80062f2:	4699      	mov	r9, r3
 80062f4:	4623      	mov	r3, r4
 80062f6:	eb18 0303 	adds.w	r3, r8, r3
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	462b      	mov	r3, r5
 80062fe:	eb49 0303 	adc.w	r3, r9, r3
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006310:	4629      	mov	r1, r5
 8006312:	024b      	lsls	r3, r1, #9
 8006314:	4621      	mov	r1, r4
 8006316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800631a:	4621      	mov	r1, r4
 800631c:	024a      	lsls	r2, r1, #9
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006326:	2200      	movs	r2, #0
 8006328:	65bb      	str	r3, [r7, #88]	; 0x58
 800632a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800632c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006330:	f7f9 ffc6 	bl	80002c0 <__aeabi_uldivmod>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4613      	mov	r3, r2
 800633a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800633e:	e065      	b.n	800640c <HAL_RCC_GetSysClockFreq+0x420>
 8006340:	40023800 	.word	0x40023800
 8006344:	00f42400 	.word	0x00f42400
 8006348:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634c:	4b3d      	ldr	r3, [pc, #244]	; (8006444 <HAL_RCC_GetSysClockFreq+0x458>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	099b      	lsrs	r3, r3, #6
 8006352:	2200      	movs	r2, #0
 8006354:	4618      	mov	r0, r3
 8006356:	4611      	mov	r1, r2
 8006358:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800635c:	653b      	str	r3, [r7, #80]	; 0x50
 800635e:	2300      	movs	r3, #0
 8006360:	657b      	str	r3, [r7, #84]	; 0x54
 8006362:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006366:	4642      	mov	r2, r8
 8006368:	464b      	mov	r3, r9
 800636a:	f04f 0000 	mov.w	r0, #0
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	0159      	lsls	r1, r3, #5
 8006374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006378:	0150      	lsls	r0, r2, #5
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4641      	mov	r1, r8
 8006380:	1a51      	subs	r1, r2, r1
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	4649      	mov	r1, r9
 8006386:	eb63 0301 	sbc.w	r3, r3, r1
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006398:	4659      	mov	r1, fp
 800639a:	018b      	lsls	r3, r1, #6
 800639c:	4651      	mov	r1, sl
 800639e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063a2:	4651      	mov	r1, sl
 80063a4:	018a      	lsls	r2, r1, #6
 80063a6:	4651      	mov	r1, sl
 80063a8:	1a54      	subs	r4, r2, r1
 80063aa:	4659      	mov	r1, fp
 80063ac:	eb63 0501 	sbc.w	r5, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	00eb      	lsls	r3, r5, #3
 80063ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063be:	00e2      	lsls	r2, r4, #3
 80063c0:	4614      	mov	r4, r2
 80063c2:	461d      	mov	r5, r3
 80063c4:	4643      	mov	r3, r8
 80063c6:	18e3      	adds	r3, r4, r3
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	464b      	mov	r3, r9
 80063cc:	eb45 0303 	adc.w	r3, r5, r3
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063de:	4629      	mov	r1, r5
 80063e0:	028b      	lsls	r3, r1, #10
 80063e2:	4621      	mov	r1, r4
 80063e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063e8:	4621      	mov	r1, r4
 80063ea:	028a      	lsls	r2, r1, #10
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063f4:	2200      	movs	r2, #0
 80063f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80063fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063fe:	f7f9 ff5f 	bl	80002c0 <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4613      	mov	r3, r2
 8006408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <HAL_RCC_GetSysClockFreq+0x458>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	0f1b      	lsrs	r3, r3, #28
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800641a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800641e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800642a:	e003      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <HAL_RCC_GetSysClockFreq+0x45c>)
 800642e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006438:	4618      	mov	r0, r3
 800643a:	37b8      	adds	r7, #184	; 0xb8
 800643c:	46bd      	mov	sp, r7
 800643e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	00f42400 	.word	0x00f42400

0800644c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e28d      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8083 	beq.w	8006572 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800646c:	4b94      	ldr	r3, [pc, #592]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 030c 	and.w	r3, r3, #12
 8006474:	2b04      	cmp	r3, #4
 8006476:	d019      	beq.n	80064ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006478:	4b91      	ldr	r3, [pc, #580]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006480:	2b08      	cmp	r3, #8
 8006482:	d106      	bne.n	8006492 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006484:	4b8e      	ldr	r3, [pc, #568]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006490:	d00c      	beq.n	80064ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006492:	4b8b      	ldr	r3, [pc, #556]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800649a:	2b0c      	cmp	r3, #12
 800649c:	d112      	bne.n	80064c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800649e:	4b88      	ldr	r3, [pc, #544]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	4b84      	ldr	r3, [pc, #528]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05b      	beq.n	8006570 <HAL_RCC_OscConfig+0x124>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d157      	bne.n	8006570 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e25a      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064cc:	d106      	bne.n	80064dc <HAL_RCC_OscConfig+0x90>
 80064ce:	4b7c      	ldr	r3, [pc, #496]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a7b      	ldr	r2, [pc, #492]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e01d      	b.n	8006518 <HAL_RCC_OscConfig+0xcc>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0xb4>
 80064e6:	4b76      	ldr	r3, [pc, #472]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a75      	ldr	r2, [pc, #468]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b73      	ldr	r3, [pc, #460]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a72      	ldr	r2, [pc, #456]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e00b      	b.n	8006518 <HAL_RCC_OscConfig+0xcc>
 8006500:	4b6f      	ldr	r3, [pc, #444]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a6e      	ldr	r2, [pc, #440]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b6c      	ldr	r3, [pc, #432]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a6b      	ldr	r2, [pc, #428]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d013      	beq.n	8006548 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fb fb32 	bl	8001b88 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006528:	f7fb fb2e 	bl	8001b88 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e21f      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653a:	4b61      	ldr	r3, [pc, #388]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f0      	beq.n	8006528 <HAL_RCC_OscConfig+0xdc>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fb fb1e 	bl	8001b88 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006550:	f7fb fb1a 	bl	8001b88 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b64      	cmp	r3, #100	; 0x64
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e20b      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006562:	4b57      	ldr	r3, [pc, #348]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x104>
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d06f      	beq.n	800665e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800657e:	4b50      	ldr	r3, [pc, #320]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	2b00      	cmp	r3, #0
 8006588:	d017      	beq.n	80065ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800658a:	4b4d      	ldr	r3, [pc, #308]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006592:	2b08      	cmp	r3, #8
 8006594:	d105      	bne.n	80065a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006596:	4b4a      	ldr	r3, [pc, #296]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065a2:	4b47      	ldr	r3, [pc, #284]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80065aa:	2b0c      	cmp	r3, #12
 80065ac:	d11c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ae:	4b44      	ldr	r3, [pc, #272]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d116      	bne.n	80065e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ba:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_RCC_OscConfig+0x186>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d001      	beq.n	80065d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e1d3      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d2:	4b3b      	ldr	r3, [pc, #236]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4937      	ldr	r1, [pc, #220]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065e6:	e03a      	b.n	800665e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d020      	beq.n	8006632 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065f0:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <HAL_RCC_OscConfig+0x278>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f6:	f7fb fac7 	bl	8001b88 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065fe:	f7fb fac3 	bl	8001b88 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e1b4      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0f0      	beq.n	80065fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661c:	4b28      	ldr	r3, [pc, #160]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4925      	ldr	r1, [pc, #148]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 800662c:	4313      	orrs	r3, r2
 800662e:	600b      	str	r3, [r1, #0]
 8006630:	e015      	b.n	800665e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006632:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <HAL_RCC_OscConfig+0x278>)
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fb faa6 	bl	8001b88 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006640:	f7fb faa2 	bl	8001b88 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e193      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006652:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d036      	beq.n	80066d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <HAL_RCC_OscConfig+0x27c>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006678:	f7fb fa86 	bl	8001b88 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006680:	f7fb fa82 	bl	8001b88 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e173      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x234>
 800669e:	e01b      	b.n	80066d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066a0:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <HAL_RCC_OscConfig+0x27c>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a6:	f7fb fa6f 	bl	8001b88 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066ac:	e00e      	b.n	80066cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ae:	f7fb fa6b 	bl	8001b88 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d907      	bls.n	80066cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e15c      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
 80066c0:	40023800 	.word	0x40023800
 80066c4:	42470000 	.word	0x42470000
 80066c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066cc:	4b8a      	ldr	r3, [pc, #552]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 80066ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1ea      	bne.n	80066ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8097 	beq.w	8006814 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ea:	4b83      	ldr	r3, [pc, #524]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10f      	bne.n	8006716 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	4b7f      	ldr	r3, [pc, #508]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	4a7e      	ldr	r2, [pc, #504]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006704:	6413      	str	r3, [r2, #64]	; 0x40
 8006706:	4b7c      	ldr	r3, [pc, #496]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006712:	2301      	movs	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006716:	4b79      	ldr	r3, [pc, #484]	; (80068fc <HAL_RCC_OscConfig+0x4b0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d118      	bne.n	8006754 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006722:	4b76      	ldr	r3, [pc, #472]	; (80068fc <HAL_RCC_OscConfig+0x4b0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a75      	ldr	r2, [pc, #468]	; (80068fc <HAL_RCC_OscConfig+0x4b0>)
 8006728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800672e:	f7fb fa2b 	bl	8001b88 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006736:	f7fb fa27 	bl	8001b88 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e118      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006748:	4b6c      	ldr	r3, [pc, #432]	; (80068fc <HAL_RCC_OscConfig+0x4b0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f0      	beq.n	8006736 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d106      	bne.n	800676a <HAL_RCC_OscConfig+0x31e>
 800675c:	4b66      	ldr	r3, [pc, #408]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	4a65      	ldr	r2, [pc, #404]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	6713      	str	r3, [r2, #112]	; 0x70
 8006768:	e01c      	b.n	80067a4 <HAL_RCC_OscConfig+0x358>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b05      	cmp	r3, #5
 8006770:	d10c      	bne.n	800678c <HAL_RCC_OscConfig+0x340>
 8006772:	4b61      	ldr	r3, [pc, #388]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	4a60      	ldr	r2, [pc, #384]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006778:	f043 0304 	orr.w	r3, r3, #4
 800677c:	6713      	str	r3, [r2, #112]	; 0x70
 800677e:	4b5e      	ldr	r3, [pc, #376]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	4a5d      	ldr	r2, [pc, #372]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006784:	f043 0301 	orr.w	r3, r3, #1
 8006788:	6713      	str	r3, [r2, #112]	; 0x70
 800678a:	e00b      	b.n	80067a4 <HAL_RCC_OscConfig+0x358>
 800678c:	4b5a      	ldr	r3, [pc, #360]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	4a59      	ldr	r2, [pc, #356]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	6713      	str	r3, [r2, #112]	; 0x70
 8006798:	4b57      	ldr	r3, [pc, #348]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4a56      	ldr	r2, [pc, #344]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 800679e:	f023 0304 	bic.w	r3, r3, #4
 80067a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d015      	beq.n	80067d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fb f9ec 	bl	8001b88 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b4:	f7fb f9e8 	bl	8001b88 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e0d7      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ca:	4b4b      	ldr	r3, [pc, #300]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0ee      	beq.n	80067b4 <HAL_RCC_OscConfig+0x368>
 80067d6:	e014      	b.n	8006802 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d8:	f7fb f9d6 	bl	8001b88 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067e0:	f7fb f9d2 	bl	8001b88 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e0c1      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f6:	4b40      	ldr	r3, [pc, #256]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ee      	bne.n	80067e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d105      	bne.n	8006814 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006808:	4b3b      	ldr	r3, [pc, #236]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	4a3a      	ldr	r2, [pc, #232]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 800680e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 80ad 	beq.w	8006978 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800681e:	4b36      	ldr	r3, [pc, #216]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	2b08      	cmp	r3, #8
 8006828:	d060      	beq.n	80068ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d145      	bne.n	80068be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006832:	4b33      	ldr	r3, [pc, #204]	; (8006900 <HAL_RCC_OscConfig+0x4b4>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fb f9a6 	bl	8001b88 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006840:	f7fb f9a2 	bl	8001b88 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e093      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006852:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69da      	ldr	r2, [r3, #28]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	019b      	lsls	r3, r3, #6
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	3b01      	subs	r3, #1
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	431a      	orrs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	061b      	lsls	r3, r3, #24
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	071b      	lsls	r3, r3, #28
 800688a:	491b      	ldr	r1, [pc, #108]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 800688c:	4313      	orrs	r3, r2
 800688e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006890:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <HAL_RCC_OscConfig+0x4b4>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006896:	f7fb f977 	bl	8001b88 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800689e:	f7fb f973 	bl	8001b88 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e064      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b0:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x452>
 80068bc:	e05c      	b.n	8006978 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068be:	4b10      	ldr	r3, [pc, #64]	; (8006900 <HAL_RCC_OscConfig+0x4b4>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fb f960 	bl	8001b88 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068cc:	f7fb f95c 	bl	8001b88 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e04d      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <HAL_RCC_OscConfig+0x4ac>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x480>
 80068ea:	e045      	b.n	8006978 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d107      	bne.n	8006904 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e040      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
 80068f8:	40023800 	.word	0x40023800
 80068fc:	40007000 	.word	0x40007000
 8006900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006904:	4b1f      	ldr	r3, [pc, #124]	; (8006984 <HAL_RCC_OscConfig+0x538>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d030      	beq.n	8006974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d129      	bne.n	8006974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d122      	bne.n	8006974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006934:	4013      	ands	r3, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800693a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800693c:	4293      	cmp	r3, r2
 800693e:	d119      	bne.n	8006974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	3b01      	subs	r3, #1
 800694e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d10f      	bne.n	8006974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d107      	bne.n	8006974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d001      	beq.n	8006978 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40023800 	.word	0x40023800

08006988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e041      	b.n	8006a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fa fdae 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f000 fb40 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e041      	b.n	8006abc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fa fd3d 	bl	80014cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f000 faf1 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d109      	bne.n	8006ae8 <HAL_TIM_PWM_Start+0x24>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	bf14      	ite	ne
 8006ae0:	2301      	movne	r3, #1
 8006ae2:	2300      	moveq	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	e022      	b.n	8006b2e <HAL_TIM_PWM_Start+0x6a>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d109      	bne.n	8006b02 <HAL_TIM_PWM_Start+0x3e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	e015      	b.n	8006b2e <HAL_TIM_PWM_Start+0x6a>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d109      	bne.n	8006b1c <HAL_TIM_PWM_Start+0x58>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	e008      	b.n	8006b2e <HAL_TIM_PWM_Start+0x6a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	bf14      	ite	ne
 8006b28:	2301      	movne	r3, #1
 8006b2a:	2300      	moveq	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e07c      	b.n	8006c30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <HAL_TIM_PWM_Start+0x82>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b44:	e013      	b.n	8006b6e <HAL_TIM_PWM_Start+0xaa>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_PWM_Start+0x92>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b54:	e00b      	b.n	8006b6e <HAL_TIM_PWM_Start+0xaa>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d104      	bne.n	8006b66 <HAL_TIM_PWM_Start+0xa2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b64:	e003      	b.n	8006b6e <HAL_TIM_PWM_Start+0xaa>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2201      	movs	r2, #1
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fcb8 	bl	80074ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2d      	ldr	r2, [pc, #180]	; (8006c38 <HAL_TIM_PWM_Start+0x174>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIM_PWM_Start+0xcc>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2c      	ldr	r2, [pc, #176]	; (8006c3c <HAL_TIM_PWM_Start+0x178>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIM_PWM_Start+0xd0>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <HAL_TIM_PWM_Start+0xd2>
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a22      	ldr	r2, [pc, #136]	; (8006c38 <HAL_TIM_PWM_Start+0x174>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d022      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x136>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d01d      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x136>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <HAL_TIM_PWM_Start+0x17c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d018      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x136>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <HAL_TIM_PWM_Start+0x180>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d013      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x136>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <HAL_TIM_PWM_Start+0x184>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00e      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x136>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <HAL_TIM_PWM_Start+0x178>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d009      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x136>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a18      	ldr	r2, [pc, #96]	; (8006c4c <HAL_TIM_PWM_Start+0x188>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x136>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <HAL_TIM_PWM_Start+0x18c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d111      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b06      	cmp	r3, #6
 8006c0a:	d010      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1c:	e007      	b.n	8006c2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0201 	orr.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40001800 	.word	0x40001800

08006c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d122      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d11b      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0202 	mvn.w	r2, #2
 8006c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9ba 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f9ac 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f9bd 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d122      	bne.n	8006d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d11b      	bne.n	8006d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0204 	mvn.w	r2, #4
 8006cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f990 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
 8006cf0:	e005      	b.n	8006cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f982 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f993 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d122      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d11b      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0208 	mvn.w	r2, #8
 8006d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f966 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
 8006d44:	e005      	b.n	8006d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f958 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f969 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0310 	and.w	r3, r3, #16
 8006d62:	2b10      	cmp	r3, #16
 8006d64:	d122      	bne.n	8006dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b10      	cmp	r3, #16
 8006d72:	d11b      	bne.n	8006dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0210 	mvn.w	r2, #16
 8006d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2208      	movs	r2, #8
 8006d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f93c 	bl	8007010 <HAL_TIM_IC_CaptureCallback>
 8006d98:	e005      	b.n	8006da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f92e 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f93f 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d10e      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d107      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0201 	mvn.w	r2, #1
 8006dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f908 	bl	8006fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de2:	2b80      	cmp	r3, #128	; 0x80
 8006de4:	d10e      	bne.n	8006e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df0:	2b80      	cmp	r3, #128	; 0x80
 8006df2:	d107      	bne.n	8006e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fc72 	bl	80076e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d10e      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d107      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f904 	bl	8007038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	d10e      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d107      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0220 	mvn.w	r2, #32
 8006e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fc3c 	bl	80076d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e0ae      	b.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b0c      	cmp	r3, #12
 8006e8e:	f200 809f 	bhi.w	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e92:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e98:	08006ecd 	.word	0x08006ecd
 8006e9c:	08006fd1 	.word	0x08006fd1
 8006ea0:	08006fd1 	.word	0x08006fd1
 8006ea4:	08006fd1 	.word	0x08006fd1
 8006ea8:	08006f0d 	.word	0x08006f0d
 8006eac:	08006fd1 	.word	0x08006fd1
 8006eb0:	08006fd1 	.word	0x08006fd1
 8006eb4:	08006fd1 	.word	0x08006fd1
 8006eb8:	08006f4f 	.word	0x08006f4f
 8006ebc:	08006fd1 	.word	0x08006fd1
 8006ec0:	08006fd1 	.word	0x08006fd1
 8006ec4:	08006fd1 	.word	0x08006fd1
 8006ec8:	08006f8f 	.word	0x08006f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f95a 	bl	800718c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0208 	orr.w	r2, r2, #8
 8006ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0204 	bic.w	r2, r2, #4
 8006ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6999      	ldr	r1, [r3, #24]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	619a      	str	r2, [r3, #24]
      break;
 8006f0a:	e064      	b.n	8006fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f9aa 	bl	800726c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699a      	ldr	r2, [r3, #24]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6999      	ldr	r1, [r3, #24]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	619a      	str	r2, [r3, #24]
      break;
 8006f4c:	e043      	b.n	8006fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f9ff 	bl	8007358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0208 	orr.w	r2, r2, #8
 8006f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0204 	bic.w	r2, r2, #4
 8006f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69d9      	ldr	r1, [r3, #28]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	61da      	str	r2, [r3, #28]
      break;
 8006f8c:	e023      	b.n	8006fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fa53 	bl	8007440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69da      	ldr	r2, [r3, #28]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69d9      	ldr	r1, [r3, #28]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	021a      	lsls	r2, r3, #8
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	61da      	str	r2, [r3, #28]
      break;
 8006fce:	e002      	b.n	8006fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a40      	ldr	r2, [pc, #256]	; (8007160 <TIM_Base_SetConfig+0x114>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706a:	d00f      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a3d      	ldr	r2, [pc, #244]	; (8007164 <TIM_Base_SetConfig+0x118>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a3c      	ldr	r2, [pc, #240]	; (8007168 <TIM_Base_SetConfig+0x11c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a3b      	ldr	r2, [pc, #236]	; (800716c <TIM_Base_SetConfig+0x120>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a3a      	ldr	r2, [pc, #232]	; (8007170 <TIM_Base_SetConfig+0x124>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d108      	bne.n	800709e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a2f      	ldr	r2, [pc, #188]	; (8007160 <TIM_Base_SetConfig+0x114>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d02b      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ac:	d027      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a2c      	ldr	r2, [pc, #176]	; (8007164 <TIM_Base_SetConfig+0x118>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d023      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a2b      	ldr	r2, [pc, #172]	; (8007168 <TIM_Base_SetConfig+0x11c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d01f      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2a      	ldr	r2, [pc, #168]	; (800716c <TIM_Base_SetConfig+0x120>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01b      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a29      	ldr	r2, [pc, #164]	; (8007170 <TIM_Base_SetConfig+0x124>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d017      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a28      	ldr	r2, [pc, #160]	; (8007174 <TIM_Base_SetConfig+0x128>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a27      	ldr	r2, [pc, #156]	; (8007178 <TIM_Base_SetConfig+0x12c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00f      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a26      	ldr	r2, [pc, #152]	; (800717c <TIM_Base_SetConfig+0x130>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00b      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a25      	ldr	r2, [pc, #148]	; (8007180 <TIM_Base_SetConfig+0x134>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d007      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a24      	ldr	r2, [pc, #144]	; (8007184 <TIM_Base_SetConfig+0x138>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a23      	ldr	r2, [pc, #140]	; (8007188 <TIM_Base_SetConfig+0x13c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d108      	bne.n	8007110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <TIM_Base_SetConfig+0x114>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_Base_SetConfig+0xf8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a0c      	ldr	r2, [pc, #48]	; (8007170 <TIM_Base_SetConfig+0x124>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d103      	bne.n	800714c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	615a      	str	r2, [r3, #20]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40010000 	.word	0x40010000
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800
 800716c:	40000c00 	.word	0x40000c00
 8007170:	40010400 	.word	0x40010400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800
 8007180:	40001800 	.word	0x40001800
 8007184:	40001c00 	.word	0x40001c00
 8007188:	40002000 	.word	0x40002000

0800718c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0201 	bic.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 0302 	bic.w	r3, r3, #2
 80071d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a20      	ldr	r2, [pc, #128]	; (8007264 <TIM_OC1_SetConfig+0xd8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_OC1_SetConfig+0x64>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a1f      	ldr	r2, [pc, #124]	; (8007268 <TIM_OC1_SetConfig+0xdc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d10c      	bne.n	800720a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0308 	bic.w	r3, r3, #8
 80071f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f023 0304 	bic.w	r3, r3, #4
 8007208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a15      	ldr	r2, [pc, #84]	; (8007264 <TIM_OC1_SetConfig+0xd8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d003      	beq.n	800721a <TIM_OC1_SetConfig+0x8e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a14      	ldr	r2, [pc, #80]	; (8007268 <TIM_OC1_SetConfig+0xdc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d111      	bne.n	800723e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	621a      	str	r2, [r3, #32]
}
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40010000 	.word	0x40010000
 8007268:	40010400 	.word	0x40010400

0800726c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0210 	bic.w	r2, r3, #16
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0320 	bic.w	r3, r3, #32
 80072b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a22      	ldr	r2, [pc, #136]	; (8007350 <TIM_OC2_SetConfig+0xe4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_OC2_SetConfig+0x68>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a21      	ldr	r2, [pc, #132]	; (8007354 <TIM_OC2_SetConfig+0xe8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d10d      	bne.n	80072f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a17      	ldr	r2, [pc, #92]	; (8007350 <TIM_OC2_SetConfig+0xe4>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d003      	beq.n	8007300 <TIM_OC2_SetConfig+0x94>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a16      	ldr	r2, [pc, #88]	; (8007354 <TIM_OC2_SetConfig+0xe8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d113      	bne.n	8007328 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800730e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40010000 	.word	0x40010000
 8007354:	40010400 	.word	0x40010400

08007358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	021b      	lsls	r3, r3, #8
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a21      	ldr	r2, [pc, #132]	; (8007438 <TIM_OC3_SetConfig+0xe0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_OC3_SetConfig+0x66>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a20      	ldr	r2, [pc, #128]	; (800743c <TIM_OC3_SetConfig+0xe4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d10d      	bne.n	80073da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a16      	ldr	r2, [pc, #88]	; (8007438 <TIM_OC3_SetConfig+0xe0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d003      	beq.n	80073ea <TIM_OC3_SetConfig+0x92>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a15      	ldr	r2, [pc, #84]	; (800743c <TIM_OC3_SetConfig+0xe4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d113      	bne.n	8007412 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	621a      	str	r2, [r3, #32]
}
 800742c:	bf00      	nop
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	40010000 	.word	0x40010000
 800743c:	40010400 	.word	0x40010400

08007440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800748a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	031b      	lsls	r3, r3, #12
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a12      	ldr	r2, [pc, #72]	; (80074e4 <TIM_OC4_SetConfig+0xa4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d003      	beq.n	80074a8 <TIM_OC4_SetConfig+0x68>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <TIM_OC4_SetConfig+0xa8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d109      	bne.n	80074bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	019b      	lsls	r3, r3, #6
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40010400 	.word	0x40010400

080074ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 031f 	and.w	r3, r3, #31
 80074fe:	2201      	movs	r2, #1
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	43db      	mvns	r3, r3
 800750e:	401a      	ands	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a1a      	ldr	r2, [r3, #32]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f003 031f 	and.w	r3, r3, #31
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	fa01 f303 	lsl.w	r3, r1, r3
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800754c:	2302      	movs	r3, #2
 800754e:	e05a      	b.n	8007606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a21      	ldr	r2, [pc, #132]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759c:	d01d      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1d      	ldr	r2, [pc, #116]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1b      	ldr	r2, [pc, #108]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1a      	ldr	r2, [pc, #104]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a18      	ldr	r2, [pc, #96]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a15      	ldr	r2, [pc, #84]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d10c      	bne.n	80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40010000 	.word	0x40010000
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800
 8007620:	40000c00 	.word	0x40000c00
 8007624:	40010400 	.word	0x40010400
 8007628:	40014000 	.word	0x40014000
 800762c:	40001800 	.word	0x40001800

08007630 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007648:	2302      	movs	r3, #2
 800764a:	e03d      	b.n	80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e03f      	b.n	800778e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7f9 ff56 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2224      	movs	r2, #36	; 0x24
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800773e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 feef 	bl	8008524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b08a      	sub	sp, #40	; 0x28
 800779a:	af02      	add	r7, sp, #8
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d17c      	bne.n	80078b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_UART_Transmit+0x2c>
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e075      	b.n	80078b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_UART_Transmit+0x3e>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e06e      	b.n	80078b2 <HAL_UART_Transmit+0x11c>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2221      	movs	r2, #33	; 0x21
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ea:	f7fa f9cd 	bl	8001b88 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007804:	d108      	bne.n	8007818 <HAL_UART_Transmit+0x82>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	e003      	b.n	8007820 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007828:	e02a      	b.n	8007880 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	2180      	movs	r1, #128	; 0x80
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fc44 	bl	80080c2 <UART_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e036      	b.n	80078b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10b      	bne.n	8007862 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	3302      	adds	r3, #2
 800785e:	61bb      	str	r3, [r7, #24]
 8007860:	e007      	b.n	8007872 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	3301      	adds	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1cf      	bne.n	800782a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	2140      	movs	r1, #64	; 0x40
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fc14 	bl	80080c2 <UART_WaitOnFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e006      	b.n	80078b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e000      	b.n	80078b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d165      	bne.n	80079a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_UART_Transmit_DMA+0x26>
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e05e      	b.n	80079a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_UART_Transmit_DMA+0x38>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e057      	b.n	80079a4 <HAL_UART_Transmit_DMA+0xe8>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	88fa      	ldrh	r2, [r7, #6]
 8007906:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	88fa      	ldrh	r2, [r7, #6]
 800790c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2221      	movs	r2, #33	; 0x21
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007920:	4a22      	ldr	r2, [pc, #136]	; (80079ac <HAL_UART_Transmit_DMA+0xf0>)
 8007922:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007928:	4a21      	ldr	r2, [pc, #132]	; (80079b0 <HAL_UART_Transmit_DMA+0xf4>)
 800792a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <HAL_UART_Transmit_DMA+0xf8>)
 8007932:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007938:	2200      	movs	r2, #0
 800793a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800793c:	f107 0308 	add.w	r3, r7, #8
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	6819      	ldr	r1, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3304      	adds	r3, #4
 8007950:	461a      	mov	r2, r3
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	f7fa fdd0 	bl	80024f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007960:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3314      	adds	r3, #20
 8007970:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	617b      	str	r3, [r7, #20]
   return(result);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007980:	62bb      	str	r3, [r7, #40]	; 0x28
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3314      	adds	r3, #20
 8007988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800798a:	627a      	str	r2, [r7, #36]	; 0x24
 800798c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6a39      	ldr	r1, [r7, #32]
 8007990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	61fb      	str	r3, [r7, #28]
   return(result);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	e000      	b.n	80079a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80079a2:	2302      	movs	r3, #2
  }
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3730      	adds	r7, #48	; 0x30
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	08007f79 	.word	0x08007f79
 80079b0:	08008013 	.word	0x08008013
 80079b4:	0800802f 	.word	0x0800802f

080079b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b0ba      	sub	sp, #232	; 0xe8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079de:	2300      	movs	r3, #0
 80079e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10f      	bne.n	8007a1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <HAL_UART_IRQHandler+0x66>
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fcc8 	bl	80083ac <UART_Receive_IT>
      return;
 8007a1c:	e256      	b.n	8007ecc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 80de 	beq.w	8007be4 <HAL_UART_IRQHandler+0x22c>
 8007a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 80d1 	beq.w	8007be4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <HAL_UART_IRQHandler+0xae>
 8007a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f043 0201 	orr.w	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <HAL_UART_IRQHandler+0xd2>
 8007a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f043 0202 	orr.w	r2, r3, #2
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_UART_IRQHandler+0xf6>
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f043 0204 	orr.w	r2, r3, #4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d011      	beq.n	8007ade <HAL_UART_IRQHandler+0x126>
 8007aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d105      	bne.n	8007ad2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	f043 0208 	orr.w	r2, r3, #8
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 81ed 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_UART_IRQHandler+0x14e>
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fc53 	bl	80083ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b10:	2b40      	cmp	r3, #64	; 0x40
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <HAL_UART_IRQHandler+0x17a>
 8007b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d04f      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fb5b 	bl	80081ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d141      	bne.n	8007bca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1d9      	bne.n	8007b46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d013      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	4a7d      	ldr	r2, [pc, #500]	; (8007d94 <HAL_UART_IRQHandler+0x3dc>)
 8007ba0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fa fd6e 	bl	8002688 <HAL_DMA_Abort_IT>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d016      	beq.n	8007be0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc0:	e00e      	b.n	8007be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f9a4 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc8:	e00a      	b.n	8007be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9a0 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	e006      	b.n	8007be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f99c 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bde:	e170      	b.n	8007ec2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	bf00      	nop
    return;
 8007be2:	e16e      	b.n	8007ec2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f040 814a 	bne.w	8007e82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8143 	beq.w	8007e82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 813c 	beq.w	8007e82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60bb      	str	r3, [r7, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60bb      	str	r3, [r7, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	60bb      	str	r3, [r7, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	f040 80b4 	bne.w	8007d98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8140 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	f080 8139 	bcs.w	8007ec6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c66:	f000 8088 	beq.w	8007d7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	330c      	adds	r3, #12
 8007c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ca2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1d9      	bne.n	8007c6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3314      	adds	r3, #20
 8007cbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cc8:	f023 0301 	bic.w	r3, r3, #1
 8007ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3314      	adds	r3, #20
 8007cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ce2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e1      	bne.n	8007cb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3314      	adds	r3, #20
 8007cf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3314      	adds	r3, #20
 8007d12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e3      	bne.n	8007cf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	330c      	adds	r3, #12
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4a:	f023 0310 	bic.w	r3, r3, #16
 8007d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e3      	bne.n	8007d38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fa fc17 	bl	80025a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f8ca 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d90:	e099      	b.n	8007ec6 <HAL_UART_IRQHandler+0x50e>
 8007d92:	bf00      	nop
 8007d94:	080082b5 	.word	0x080082b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 808b 	beq.w	8007eca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8086 	beq.w	8007eca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007de2:	647a      	str	r2, [r7, #68]	; 0x44
 8007de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e3      	bne.n	8007dbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3314      	adds	r3, #20
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	623b      	str	r3, [r7, #32]
   return(result);
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e1a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e3      	bne.n	8007df6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	330c      	adds	r3, #12
 8007e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0310 	bic.w	r3, r3, #16
 8007e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e60:	61fa      	str	r2, [r7, #28]
 8007e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	69b9      	ldr	r1, [r7, #24]
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e3      	bne.n	8007e3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f852 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e80:	e023      	b.n	8007eca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d009      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x4ea>
 8007e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa1e 	bl	80082dc <UART_Transmit_IT>
    return;
 8007ea0:	e014      	b.n	8007ecc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00e      	beq.n	8007ecc <HAL_UART_IRQHandler+0x514>
 8007eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d008      	beq.n	8007ecc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa5e 	bl	800837c <UART_EndTransmit_IT>
    return;
 8007ec0:	e004      	b.n	8007ecc <HAL_UART_IRQHandler+0x514>
    return;
 8007ec2:	bf00      	nop
 8007ec4:	e002      	b.n	8007ecc <HAL_UART_IRQHandler+0x514>
      return;
 8007ec6:	bf00      	nop
 8007ec8:	e000      	b.n	8007ecc <HAL_UART_IRQHandler+0x514>
      return;
 8007eca:	bf00      	nop
  }
}
 8007ecc:	37e8      	adds	r7, #232	; 0xe8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop

08007ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b090      	sub	sp, #64	; 0x40
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d137      	bne.n	8008004 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	2200      	movs	r2, #0
 8007f98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3314      	adds	r3, #20
 8007fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fba:	633a      	str	r2, [r7, #48]	; 0x30
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e5      	bne.n	8007f9a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	330c      	adds	r3, #12
 8007fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	330c      	adds	r3, #12
 8007fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fee:	61fa      	str	r2, [r7, #28]
 8007ff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	69b9      	ldr	r1, [r7, #24]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e5      	bne.n	8007fce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008002:	e002      	b.n	800800a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008006:	f7ff ff65 	bl	8007ed4 <HAL_UART_TxCpltCallback>
}
 800800a:	bf00      	nop
 800800c:	3740      	adds	r7, #64	; 0x40
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff ff61 	bl	8007ee8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804a:	2b80      	cmp	r3, #128	; 0x80
 800804c:	bf0c      	ite	eq
 800804e:	2301      	moveq	r3, #1
 8008050:	2300      	movne	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b21      	cmp	r3, #33	; 0x21
 8008060:	d108      	bne.n	8008074 <UART_DMAError+0x46>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800806e:	68b8      	ldr	r0, [r7, #8]
 8008070:	f000 f895 	bl	800819e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b22      	cmp	r3, #34	; 0x22
 8008094:	d108      	bne.n	80080a8 <UART_DMAError+0x7a>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2200      	movs	r2, #0
 80080a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80080a2:	68b8      	ldr	r0, [r7, #8]
 80080a4:	f000 f8a3 	bl	80081ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	f043 0210 	orr.w	r2, r3, #16
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080b4:	68b8      	ldr	r0, [r7, #8]
 80080b6:	f7ff ff2b 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b090      	sub	sp, #64	; 0x40
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	603b      	str	r3, [r7, #0]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d2:	e050      	b.n	8008176 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080da:	d04c      	beq.n	8008176 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d007      	beq.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80080e2:	f7f9 fd51 	bl	8001b88 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d241      	bcs.n	8008176 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	330c      	adds	r3, #12
 80080f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008112:	637a      	str	r2, [r7, #52]	; 0x34
 8008114:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e5      	bne.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	613b      	str	r3, [r7, #16]
   return(result);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	63bb      	str	r3, [r7, #56]	; 0x38
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3314      	adds	r3, #20
 8008144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008146:	623a      	str	r2, [r7, #32]
 8008148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	69f9      	ldr	r1, [r7, #28]
 800814c:	6a3a      	ldr	r2, [r7, #32]
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	61bb      	str	r3, [r7, #24]
   return(result);
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e5      	bne.n	8008126 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2220      	movs	r2, #32
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2220      	movs	r2, #32
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e00f      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4013      	ands	r3, r2
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	429a      	cmp	r2, r3
 8008184:	bf0c      	ite	eq
 8008186:	2301      	moveq	r3, #1
 8008188:	2300      	movne	r3, #0
 800818a:	b2db      	uxtb	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	429a      	cmp	r2, r3
 8008192:	d09f      	beq.n	80080d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3740      	adds	r7, #64	; 0x40
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800819e:	b480      	push	{r7}
 80081a0:	b089      	sub	sp, #36	; 0x24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	330c      	adds	r3, #12
 80081ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	61ba      	str	r2, [r7, #24]
 80081c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6979      	ldr	r1, [r7, #20]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	613b      	str	r3, [r7, #16]
   return(result);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80081e2:	bf00      	nop
 80081e4:	3724      	adds	r7, #36	; 0x24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b095      	sub	sp, #84	; 0x54
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800820c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	330c      	adds	r3, #12
 8008214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008216:	643a      	str	r2, [r7, #64]	; 0x40
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800821c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e5      	bne.n	80081f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3314      	adds	r3, #20
 8008230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	61fb      	str	r3, [r7, #28]
   return(result);
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	64bb      	str	r3, [r7, #72]	; 0x48
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800824c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e5      	bne.n	800822a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	2b01      	cmp	r3, #1
 8008264:	d119      	bne.n	800829a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	60bb      	str	r3, [r7, #8]
   return(result);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f023 0310 	bic.w	r3, r3, #16
 800827c:	647b      	str	r3, [r7, #68]	; 0x44
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	330c      	adds	r3, #12
 8008284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008286:	61ba      	str	r2, [r7, #24]
 8008288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6979      	ldr	r1, [r7, #20]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e5      	bne.n	8008266 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082a8:	bf00      	nop
 80082aa:	3754      	adds	r7, #84	; 0x54
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7ff fe1e 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b21      	cmp	r3, #33	; 0x21
 80082ee:	d13e      	bne.n	800836e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d114      	bne.n	8008324 <UART_Transmit_IT+0x48>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d110      	bne.n	8008324 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008316:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	1c9a      	adds	r2, r3, #2
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	621a      	str	r2, [r3, #32]
 8008322:	e008      	b.n	8008336 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	1c59      	adds	r1, r3, #1
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6211      	str	r1, [r2, #32]
 800832e:	781a      	ldrb	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29b      	uxth	r3, r3
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4619      	mov	r1, r3
 8008344:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10f      	bne.n	800836a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008358:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008368:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e000      	b.n	8008370 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800836e:	2302      	movs	r3, #2
  }
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008392:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fd99 	bl	8007ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	; 0x30
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b22      	cmp	r3, #34	; 0x22
 80083be:	f040 80ab 	bne.w	8008518 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ca:	d117      	bne.n	80083fc <UART_Receive_IT+0x50>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d113      	bne.n	80083fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083d4:	2300      	movs	r3, #0
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	1c9a      	adds	r2, r3, #2
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28
 80083fa:	e026      	b.n	800844a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d007      	beq.n	8008420 <UART_Receive_IT+0x74>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <UART_Receive_IT+0x82>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	b2da      	uxtb	r2, r3
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e008      	b.n	8008440 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800843a:	b2da      	uxtb	r2, r3
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	4619      	mov	r1, r3
 8008458:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800845a:	2b00      	cmp	r3, #0
 800845c:	d15a      	bne.n	8008514 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0220 	bic.w	r2, r2, #32
 800846c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800847c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	695a      	ldr	r2, [r3, #20]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0201 	bic.w	r2, r2, #1
 800848c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849a:	2b01      	cmp	r3, #1
 800849c:	d135      	bne.n	800850a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	330c      	adds	r3, #12
 80084aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	613b      	str	r3, [r7, #16]
   return(result);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f023 0310 	bic.w	r3, r3, #16
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	330c      	adds	r3, #12
 80084c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c4:	623a      	str	r2, [r7, #32]
 80084c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	69f9      	ldr	r1, [r7, #28]
 80084ca:	6a3a      	ldr	r2, [r7, #32]
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e5      	bne.n	80084a4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0310 	and.w	r3, r3, #16
 80084e2:	2b10      	cmp	r3, #16
 80084e4:	d10a      	bne.n	80084fc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff fd0e 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
 8008508:	e002      	b.n	8008510 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff fcf6 	bl	8007efc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e002      	b.n	800851a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008518:	2302      	movs	r3, #2
  }
}
 800851a:	4618      	mov	r0, r3
 800851c:	3730      	adds	r7, #48	; 0x30
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008528:	b0c0      	sub	sp, #256	; 0x100
 800852a:	af00      	add	r7, sp, #0
 800852c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	68d9      	ldr	r1, [r3, #12]
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	ea40 0301 	orr.w	r3, r0, r1
 800854c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	431a      	orrs	r2, r3
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800857c:	f021 010c 	bic.w	r1, r1, #12
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800858a:	430b      	orrs	r3, r1
 800858c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800858e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800859a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859e:	6999      	ldr	r1, [r3, #24]
 80085a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	ea40 0301 	orr.w	r3, r0, r1
 80085aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b8f      	ldr	r3, [pc, #572]	; (80087f0 <UART_SetConfig+0x2cc>)
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d005      	beq.n	80085c4 <UART_SetConfig+0xa0>
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b8d      	ldr	r3, [pc, #564]	; (80087f4 <UART_SetConfig+0x2d0>)
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d104      	bne.n	80085ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085c4:	f7fd f9d4 	bl	8005970 <HAL_RCC_GetPCLK2Freq>
 80085c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085cc:	e003      	b.n	80085d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ce:	f7fd f9bb 	bl	8005948 <HAL_RCC_GetPCLK1Freq>
 80085d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e0:	f040 810c 	bne.w	80087fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085f6:	4622      	mov	r2, r4
 80085f8:	462b      	mov	r3, r5
 80085fa:	1891      	adds	r1, r2, r2
 80085fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80085fe:	415b      	adcs	r3, r3
 8008600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008606:	4621      	mov	r1, r4
 8008608:	eb12 0801 	adds.w	r8, r2, r1
 800860c:	4629      	mov	r1, r5
 800860e:	eb43 0901 	adc.w	r9, r3, r1
 8008612:	f04f 0200 	mov.w	r2, #0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800861e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008626:	4690      	mov	r8, r2
 8008628:	4699      	mov	r9, r3
 800862a:	4623      	mov	r3, r4
 800862c:	eb18 0303 	adds.w	r3, r8, r3
 8008630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008634:	462b      	mov	r3, r5
 8008636:	eb49 0303 	adc.w	r3, r9, r3
 800863a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800864a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800864e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008652:	460b      	mov	r3, r1
 8008654:	18db      	adds	r3, r3, r3
 8008656:	653b      	str	r3, [r7, #80]	; 0x50
 8008658:	4613      	mov	r3, r2
 800865a:	eb42 0303 	adc.w	r3, r2, r3
 800865e:	657b      	str	r3, [r7, #84]	; 0x54
 8008660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008664:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008668:	f7f7 fe2a 	bl	80002c0 <__aeabi_uldivmod>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4b61      	ldr	r3, [pc, #388]	; (80087f8 <UART_SetConfig+0x2d4>)
 8008672:	fba3 2302 	umull	r2, r3, r3, r2
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	011c      	lsls	r4, r3, #4
 800867a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800867e:	2200      	movs	r2, #0
 8008680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008684:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008688:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	1891      	adds	r1, r2, r2
 8008692:	64b9      	str	r1, [r7, #72]	; 0x48
 8008694:	415b      	adcs	r3, r3
 8008696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800869c:	4641      	mov	r1, r8
 800869e:	eb12 0a01 	adds.w	sl, r2, r1
 80086a2:	4649      	mov	r1, r9
 80086a4:	eb43 0b01 	adc.w	fp, r3, r1
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086bc:	4692      	mov	sl, r2
 80086be:	469b      	mov	fp, r3
 80086c0:	4643      	mov	r3, r8
 80086c2:	eb1a 0303 	adds.w	r3, sl, r3
 80086c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ca:	464b      	mov	r3, r9
 80086cc:	eb4b 0303 	adc.w	r3, fp, r3
 80086d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086e8:	460b      	mov	r3, r1
 80086ea:	18db      	adds	r3, r3, r3
 80086ec:	643b      	str	r3, [r7, #64]	; 0x40
 80086ee:	4613      	mov	r3, r2
 80086f0:	eb42 0303 	adc.w	r3, r2, r3
 80086f4:	647b      	str	r3, [r7, #68]	; 0x44
 80086f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086fe:	f7f7 fddf 	bl	80002c0 <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4611      	mov	r1, r2
 8008708:	4b3b      	ldr	r3, [pc, #236]	; (80087f8 <UART_SetConfig+0x2d4>)
 800870a:	fba3 2301 	umull	r2, r3, r3, r1
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	2264      	movs	r2, #100	; 0x64
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	1acb      	subs	r3, r1, r3
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800871e:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <UART_SetConfig+0x2d4>)
 8008720:	fba3 2302 	umull	r2, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800872c:	441c      	add	r4, r3
 800872e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008732:	2200      	movs	r2, #0
 8008734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008738:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800873c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008740:	4642      	mov	r2, r8
 8008742:	464b      	mov	r3, r9
 8008744:	1891      	adds	r1, r2, r2
 8008746:	63b9      	str	r1, [r7, #56]	; 0x38
 8008748:	415b      	adcs	r3, r3
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008750:	4641      	mov	r1, r8
 8008752:	1851      	adds	r1, r2, r1
 8008754:	6339      	str	r1, [r7, #48]	; 0x30
 8008756:	4649      	mov	r1, r9
 8008758:	414b      	adcs	r3, r1
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008768:	4659      	mov	r1, fp
 800876a:	00cb      	lsls	r3, r1, #3
 800876c:	4651      	mov	r1, sl
 800876e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008772:	4651      	mov	r1, sl
 8008774:	00ca      	lsls	r2, r1, #3
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	4603      	mov	r3, r0
 800877c:	4642      	mov	r2, r8
 800877e:	189b      	adds	r3, r3, r2
 8008780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008784:	464b      	mov	r3, r9
 8008786:	460a      	mov	r2, r1
 8008788:	eb42 0303 	adc.w	r3, r2, r3
 800878c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800879c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087a4:	460b      	mov	r3, r1
 80087a6:	18db      	adds	r3, r3, r3
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087aa:	4613      	mov	r3, r2
 80087ac:	eb42 0303 	adc.w	r3, r2, r3
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087ba:	f7f7 fd81 	bl	80002c0 <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <UART_SetConfig+0x2d4>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	2164      	movs	r1, #100	; 0x64
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	3332      	adds	r3, #50	; 0x32
 80087d6:	4a08      	ldr	r2, [pc, #32]	; (80087f8 <UART_SetConfig+0x2d4>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f003 0207 	and.w	r2, r3, #7
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4422      	add	r2, r4
 80087ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087ec:	e106      	b.n	80089fc <UART_SetConfig+0x4d8>
 80087ee:	bf00      	nop
 80087f0:	40011000 	.word	0x40011000
 80087f4:	40011400 	.word	0x40011400
 80087f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008800:	2200      	movs	r2, #0
 8008802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008806:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800880a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	1891      	adds	r1, r2, r2
 8008814:	6239      	str	r1, [r7, #32]
 8008816:	415b      	adcs	r3, r3
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
 800881a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800881e:	4641      	mov	r1, r8
 8008820:	1854      	adds	r4, r2, r1
 8008822:	4649      	mov	r1, r9
 8008824:	eb43 0501 	adc.w	r5, r3, r1
 8008828:	f04f 0200 	mov.w	r2, #0
 800882c:	f04f 0300 	mov.w	r3, #0
 8008830:	00eb      	lsls	r3, r5, #3
 8008832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008836:	00e2      	lsls	r2, r4, #3
 8008838:	4614      	mov	r4, r2
 800883a:	461d      	mov	r5, r3
 800883c:	4643      	mov	r3, r8
 800883e:	18e3      	adds	r3, r4, r3
 8008840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008844:	464b      	mov	r3, r9
 8008846:	eb45 0303 	adc.w	r3, r5, r3
 800884a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800884e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800885a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800886a:	4629      	mov	r1, r5
 800886c:	008b      	lsls	r3, r1, #2
 800886e:	4621      	mov	r1, r4
 8008870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008874:	4621      	mov	r1, r4
 8008876:	008a      	lsls	r2, r1, #2
 8008878:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800887c:	f7f7 fd20 	bl	80002c0 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4b60      	ldr	r3, [pc, #384]	; (8008a08 <UART_SetConfig+0x4e4>)
 8008886:	fba3 2302 	umull	r2, r3, r3, r2
 800888a:	095b      	lsrs	r3, r3, #5
 800888c:	011c      	lsls	r4, r3, #4
 800888e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008892:	2200      	movs	r2, #0
 8008894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008898:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800889c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088a0:	4642      	mov	r2, r8
 80088a2:	464b      	mov	r3, r9
 80088a4:	1891      	adds	r1, r2, r2
 80088a6:	61b9      	str	r1, [r7, #24]
 80088a8:	415b      	adcs	r3, r3
 80088aa:	61fb      	str	r3, [r7, #28]
 80088ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b0:	4641      	mov	r1, r8
 80088b2:	1851      	adds	r1, r2, r1
 80088b4:	6139      	str	r1, [r7, #16]
 80088b6:	4649      	mov	r1, r9
 80088b8:	414b      	adcs	r3, r1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088c8:	4659      	mov	r1, fp
 80088ca:	00cb      	lsls	r3, r1, #3
 80088cc:	4651      	mov	r1, sl
 80088ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088d2:	4651      	mov	r1, sl
 80088d4:	00ca      	lsls	r2, r1, #3
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	4603      	mov	r3, r0
 80088dc:	4642      	mov	r2, r8
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088e4:	464b      	mov	r3, r9
 80088e6:	460a      	mov	r2, r1
 80088e8:	eb42 0303 	adc.w	r3, r2, r3
 80088ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80088fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	f04f 0300 	mov.w	r3, #0
 8008904:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008908:	4649      	mov	r1, r9
 800890a:	008b      	lsls	r3, r1, #2
 800890c:	4641      	mov	r1, r8
 800890e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008912:	4641      	mov	r1, r8
 8008914:	008a      	lsls	r2, r1, #2
 8008916:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800891a:	f7f7 fcd1 	bl	80002c0 <__aeabi_uldivmod>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4611      	mov	r1, r2
 8008924:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <UART_SetConfig+0x4e4>)
 8008926:	fba3 2301 	umull	r2, r3, r3, r1
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	2264      	movs	r2, #100	; 0x64
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	1acb      	subs	r3, r1, r3
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	3332      	adds	r3, #50	; 0x32
 8008938:	4a33      	ldr	r2, [pc, #204]	; (8008a08 <UART_SetConfig+0x4e4>)
 800893a:	fba2 2303 	umull	r2, r3, r2, r3
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008944:	441c      	add	r4, r3
 8008946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800894a:	2200      	movs	r2, #0
 800894c:	673b      	str	r3, [r7, #112]	; 0x70
 800894e:	677a      	str	r2, [r7, #116]	; 0x74
 8008950:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	1891      	adds	r1, r2, r2
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	415b      	adcs	r3, r3
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008964:	4641      	mov	r1, r8
 8008966:	1851      	adds	r1, r2, r1
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	4649      	mov	r1, r9
 800896c:	414b      	adcs	r3, r1
 800896e:	607b      	str	r3, [r7, #4]
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800897c:	4659      	mov	r1, fp
 800897e:	00cb      	lsls	r3, r1, #3
 8008980:	4651      	mov	r1, sl
 8008982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008986:	4651      	mov	r1, sl
 8008988:	00ca      	lsls	r2, r1, #3
 800898a:	4610      	mov	r0, r2
 800898c:	4619      	mov	r1, r3
 800898e:	4603      	mov	r3, r0
 8008990:	4642      	mov	r2, r8
 8008992:	189b      	adds	r3, r3, r2
 8008994:	66bb      	str	r3, [r7, #104]	; 0x68
 8008996:	464b      	mov	r3, r9
 8008998:	460a      	mov	r2, r1
 800899a:	eb42 0303 	adc.w	r3, r2, r3
 800899e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	663b      	str	r3, [r7, #96]	; 0x60
 80089aa:	667a      	str	r2, [r7, #100]	; 0x64
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089b8:	4649      	mov	r1, r9
 80089ba:	008b      	lsls	r3, r1, #2
 80089bc:	4641      	mov	r1, r8
 80089be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089c2:	4641      	mov	r1, r8
 80089c4:	008a      	lsls	r2, r1, #2
 80089c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089ca:	f7f7 fc79 	bl	80002c0 <__aeabi_uldivmod>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <UART_SetConfig+0x4e4>)
 80089d4:	fba3 1302 	umull	r1, r3, r3, r2
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	2164      	movs	r1, #100	; 0x64
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	3332      	adds	r3, #50	; 0x32
 80089e6:	4a08      	ldr	r2, [pc, #32]	; (8008a08 <UART_SetConfig+0x4e4>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4422      	add	r2, r4
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a02:	46bd      	mov	sp, r7
 8008a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a08:	51eb851f 	.word	0x51eb851f

08008a0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	f107 001c 	add.w	r0, r7, #28
 8008a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d122      	bne.n	8008a6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d105      	bne.n	8008a5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa9c 	bl	8008f9c <USB_CoreReset>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
 8008a68:	e01a      	b.n	8008aa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa90 	bl	8008f9c <USB_CoreReset>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38
 8008a92:	e005      	b.n	8008aa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10b      	bne.n	8008abe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f043 0206 	orr.w	r2, r3, #6
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f043 0220 	orr.w	r2, r3, #32
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aca:	b004      	add	sp, #16
 8008acc:	4770      	bx	lr

08008ace <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f023 0201 	bic.w	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d115      	bne.n	8008b3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b1e:	2001      	movs	r0, #1
 8008b20:	f7f9 f83e 	bl	8001ba0 <HAL_Delay>
      ms++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa28 	bl	8008f80 <USB_GetMode>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d01e      	beq.n	8008b74 <USB_SetCurrentMode+0x84>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b31      	cmp	r3, #49	; 0x31
 8008b3a:	d9f0      	bls.n	8008b1e <USB_SetCurrentMode+0x2e>
 8008b3c:	e01a      	b.n	8008b74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d115      	bne.n	8008b70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b50:	2001      	movs	r0, #1
 8008b52:	f7f9 f825 	bl	8001ba0 <HAL_Delay>
      ms++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa0f 	bl	8008f80 <USB_GetMode>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <USB_SetCurrentMode+0x84>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b31      	cmp	r3, #49	; 0x31
 8008b6c:	d9f0      	bls.n	8008b50 <USB_SetCurrentMode+0x60>
 8008b6e:	e001      	b.n	8008b74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e005      	b.n	8008b80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b32      	cmp	r3, #50	; 0x32
 8008b78:	d101      	bne.n	8008b7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b88:	b084      	sub	sp, #16
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b086      	sub	sp, #24
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	613b      	str	r3, [r7, #16]
 8008ba6:	e009      	b.n	8008bbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	3340      	adds	r3, #64	; 0x40
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	613b      	str	r3, [r7, #16]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b0e      	cmp	r3, #14
 8008bc0:	d9f2      	bls.n	8008ba8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11c      	bne.n	8008c02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd6:	f043 0302 	orr.w	r3, r3, #2
 8008bda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	e005      	b.n	8008c0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c14:	461a      	mov	r2, r3
 8008c16:	2300      	movs	r3, #0
 8008c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c20:	4619      	mov	r1, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c28:	461a      	mov	r2, r3
 8008c2a:	680b      	ldr	r3, [r1, #0]
 8008c2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d10c      	bne.n	8008c4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f965 	bl	8008f0c <USB_SetDevSpeed>
 8008c42:	e008      	b.n	8008c56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c44:	2101      	movs	r1, #1
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f960 	bl	8008f0c <USB_SetDevSpeed>
 8008c4c:	e003      	b.n	8008c56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c4e:	2103      	movs	r1, #3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f95b 	bl	8008f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c56:	2110      	movs	r1, #16
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f8f3 	bl	8008e44 <USB_FlushTxFifo>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f91f 	bl	8008eac <USB_FlushRxFifo>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	461a      	mov	r2, r3
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	e043      	b.n	8008d2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cb8:	d118      	bne.n	8008cec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	461a      	mov	r2, r3
 8008cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	e013      	b.n	8008cfe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	e008      	b.n	8008cfe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3301      	adds	r3, #1
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d3b7      	bcc.n	8008ca2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d32:	2300      	movs	r3, #0
 8008d34:	613b      	str	r3, [r7, #16]
 8008d36:	e043      	b.n	8008dc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d4e:	d118      	bne.n	8008d82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d62:	461a      	mov	r2, r3
 8008d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	e013      	b.n	8008d94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	e008      	b.n	8008d94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8e:	461a      	mov	r2, r3
 8008d90:	2300      	movs	r3, #0
 8008d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	461a      	mov	r2, r3
 8008da2:	2300      	movs	r3, #0
 8008da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db2:	461a      	mov	r2, r3
 8008db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d3b7      	bcc.n	8008d38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d105      	bne.n	8008dfc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	f043 0210 	orr.w	r2, r3, #16
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699a      	ldr	r2, [r3, #24]
 8008e00:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <USB_DevInit+0x2b8>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f043 0208 	orr.w	r2, r3, #8
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d107      	bne.n	8008e30 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e28:	f043 0304 	orr.w	r3, r3, #4
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e3c:	b004      	add	sp, #16
 8008e3e:	4770      	bx	lr
 8008e40:	803c3800 	.word	0x803c3800

08008e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a13      	ldr	r2, [pc, #76]	; (8008ea8 <USB_FlushTxFifo+0x64>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d901      	bls.n	8008e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e01b      	b.n	8008e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	daf2      	bge.n	8008e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	019b      	lsls	r3, r3, #6
 8008e74:	f043 0220 	orr.w	r2, r3, #32
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4a08      	ldr	r2, [pc, #32]	; (8008ea8 <USB_FlushTxFifo+0x64>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d901      	bls.n	8008e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e006      	b.n	8008e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	d0f0      	beq.n	8008e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	00030d40 	.word	0x00030d40

08008eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4a11      	ldr	r2, [pc, #68]	; (8008f08 <USB_FlushRxFifo+0x5c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d901      	bls.n	8008eca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e018      	b.n	8008efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	daf2      	bge.n	8008eb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2210      	movs	r2, #16
 8008eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4a08      	ldr	r2, [pc, #32]	; (8008f08 <USB_FlushRxFifo+0x5c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d901      	bls.n	8008eee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e006      	b.n	8008efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 0310 	and.w	r3, r3, #16
 8008ef6:	2b10      	cmp	r3, #16
 8008ef8:	d0f0      	beq.n	8008edc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	00030d40 	.word	0x00030d40

08008f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b085      	sub	sp, #20
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f58:	f023 0303 	bic.w	r3, r3, #3
 8008f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f6c:	f043 0302 	orr.w	r3, r3, #2
 8008f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4a13      	ldr	r2, [pc, #76]	; (8009000 <USB_CoreReset+0x64>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d901      	bls.n	8008fba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e01b      	b.n	8008ff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	daf2      	bge.n	8008fa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f043 0201 	orr.w	r2, r3, #1
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a09      	ldr	r2, [pc, #36]	; (8009000 <USB_CoreReset+0x64>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d901      	bls.n	8008fe4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e006      	b.n	8008ff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d0f0      	beq.n	8008fd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	00030d40 	.word	0x00030d40

08009004 <siprintf>:
 8009004:	b40e      	push	{r1, r2, r3}
 8009006:	b500      	push	{lr}
 8009008:	b09c      	sub	sp, #112	; 0x70
 800900a:	ab1d      	add	r3, sp, #116	; 0x74
 800900c:	9002      	str	r0, [sp, #8]
 800900e:	9006      	str	r0, [sp, #24]
 8009010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009014:	4809      	ldr	r0, [pc, #36]	; (800903c <siprintf+0x38>)
 8009016:	9107      	str	r1, [sp, #28]
 8009018:	9104      	str	r1, [sp, #16]
 800901a:	4909      	ldr	r1, [pc, #36]	; (8009040 <siprintf+0x3c>)
 800901c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009020:	9105      	str	r1, [sp, #20]
 8009022:	6800      	ldr	r0, [r0, #0]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	a902      	add	r1, sp, #8
 8009028:	f000 f89a 	bl	8009160 <_svfiprintf_r>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	b01c      	add	sp, #112	; 0x70
 8009034:	f85d eb04 	ldr.w	lr, [sp], #4
 8009038:	b003      	add	sp, #12
 800903a:	4770      	bx	lr
 800903c:	2000005c 	.word	0x2000005c
 8009040:	ffff0208 	.word	0xffff0208

08009044 <memset>:
 8009044:	4402      	add	r2, r0
 8009046:	4603      	mov	r3, r0
 8009048:	4293      	cmp	r3, r2
 800904a:	d100      	bne.n	800904e <memset+0xa>
 800904c:	4770      	bx	lr
 800904e:	f803 1b01 	strb.w	r1, [r3], #1
 8009052:	e7f9      	b.n	8009048 <memset+0x4>

08009054 <__errno>:
 8009054:	4b01      	ldr	r3, [pc, #4]	; (800905c <__errno+0x8>)
 8009056:	6818      	ldr	r0, [r3, #0]
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	2000005c 	.word	0x2000005c

08009060 <__libc_init_array>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	4d0d      	ldr	r5, [pc, #52]	; (8009098 <__libc_init_array+0x38>)
 8009064:	4c0d      	ldr	r4, [pc, #52]	; (800909c <__libc_init_array+0x3c>)
 8009066:	1b64      	subs	r4, r4, r5
 8009068:	10a4      	asrs	r4, r4, #2
 800906a:	2600      	movs	r6, #0
 800906c:	42a6      	cmp	r6, r4
 800906e:	d109      	bne.n	8009084 <__libc_init_array+0x24>
 8009070:	4d0b      	ldr	r5, [pc, #44]	; (80090a0 <__libc_init_array+0x40>)
 8009072:	4c0c      	ldr	r4, [pc, #48]	; (80090a4 <__libc_init_array+0x44>)
 8009074:	f000 fc6a 	bl	800994c <_init>
 8009078:	1b64      	subs	r4, r4, r5
 800907a:	10a4      	asrs	r4, r4, #2
 800907c:	2600      	movs	r6, #0
 800907e:	42a6      	cmp	r6, r4
 8009080:	d105      	bne.n	800908e <__libc_init_array+0x2e>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	f855 3b04 	ldr.w	r3, [r5], #4
 8009088:	4798      	blx	r3
 800908a:	3601      	adds	r6, #1
 800908c:	e7ee      	b.n	800906c <__libc_init_array+0xc>
 800908e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009092:	4798      	blx	r3
 8009094:	3601      	adds	r6, #1
 8009096:	e7f2      	b.n	800907e <__libc_init_array+0x1e>
 8009098:	08009c48 	.word	0x08009c48
 800909c:	08009c48 	.word	0x08009c48
 80090a0:	08009c48 	.word	0x08009c48
 80090a4:	08009c4c 	.word	0x08009c4c

080090a8 <__retarget_lock_acquire_recursive>:
 80090a8:	4770      	bx	lr

080090aa <__retarget_lock_release_recursive>:
 80090aa:	4770      	bx	lr

080090ac <__ssputs_r>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	688e      	ldr	r6, [r1, #8]
 80090b2:	461f      	mov	r7, r3
 80090b4:	42be      	cmp	r6, r7
 80090b6:	680b      	ldr	r3, [r1, #0]
 80090b8:	4682      	mov	sl, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	4690      	mov	r8, r2
 80090be:	d82c      	bhi.n	800911a <__ssputs_r+0x6e>
 80090c0:	898a      	ldrh	r2, [r1, #12]
 80090c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090c6:	d026      	beq.n	8009116 <__ssputs_r+0x6a>
 80090c8:	6965      	ldr	r5, [r4, #20]
 80090ca:	6909      	ldr	r1, [r1, #16]
 80090cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090d0:	eba3 0901 	sub.w	r9, r3, r1
 80090d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090d8:	1c7b      	adds	r3, r7, #1
 80090da:	444b      	add	r3, r9
 80090dc:	106d      	asrs	r5, r5, #1
 80090de:	429d      	cmp	r5, r3
 80090e0:	bf38      	it	cc
 80090e2:	461d      	movcc	r5, r3
 80090e4:	0553      	lsls	r3, r2, #21
 80090e6:	d527      	bpl.n	8009138 <__ssputs_r+0x8c>
 80090e8:	4629      	mov	r1, r5
 80090ea:	f000 f957 	bl	800939c <_malloc_r>
 80090ee:	4606      	mov	r6, r0
 80090f0:	b360      	cbz	r0, 800914c <__ssputs_r+0xa0>
 80090f2:	6921      	ldr	r1, [r4, #16]
 80090f4:	464a      	mov	r2, r9
 80090f6:	f000 fbc7 	bl	8009888 <memcpy>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	6126      	str	r6, [r4, #16]
 8009108:	6165      	str	r5, [r4, #20]
 800910a:	444e      	add	r6, r9
 800910c:	eba5 0509 	sub.w	r5, r5, r9
 8009110:	6026      	str	r6, [r4, #0]
 8009112:	60a5      	str	r5, [r4, #8]
 8009114:	463e      	mov	r6, r7
 8009116:	42be      	cmp	r6, r7
 8009118:	d900      	bls.n	800911c <__ssputs_r+0x70>
 800911a:	463e      	mov	r6, r7
 800911c:	6820      	ldr	r0, [r4, #0]
 800911e:	4632      	mov	r2, r6
 8009120:	4641      	mov	r1, r8
 8009122:	f000 fb86 	bl	8009832 <memmove>
 8009126:	68a3      	ldr	r3, [r4, #8]
 8009128:	1b9b      	subs	r3, r3, r6
 800912a:	60a3      	str	r3, [r4, #8]
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	4433      	add	r3, r6
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	2000      	movs	r0, #0
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	462a      	mov	r2, r5
 800913a:	f000 fb4b 	bl	80097d4 <_realloc_r>
 800913e:	4606      	mov	r6, r0
 8009140:	2800      	cmp	r0, #0
 8009142:	d1e0      	bne.n	8009106 <__ssputs_r+0x5a>
 8009144:	6921      	ldr	r1, [r4, #16]
 8009146:	4650      	mov	r0, sl
 8009148:	f000 fbac 	bl	80098a4 <_free_r>
 800914c:	230c      	movs	r3, #12
 800914e:	f8ca 3000 	str.w	r3, [sl]
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009158:	81a3      	strh	r3, [r4, #12]
 800915a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800915e:	e7e9      	b.n	8009134 <__ssputs_r+0x88>

08009160 <_svfiprintf_r>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	4698      	mov	r8, r3
 8009166:	898b      	ldrh	r3, [r1, #12]
 8009168:	061b      	lsls	r3, r3, #24
 800916a:	b09d      	sub	sp, #116	; 0x74
 800916c:	4607      	mov	r7, r0
 800916e:	460d      	mov	r5, r1
 8009170:	4614      	mov	r4, r2
 8009172:	d50e      	bpl.n	8009192 <_svfiprintf_r+0x32>
 8009174:	690b      	ldr	r3, [r1, #16]
 8009176:	b963      	cbnz	r3, 8009192 <_svfiprintf_r+0x32>
 8009178:	2140      	movs	r1, #64	; 0x40
 800917a:	f000 f90f 	bl	800939c <_malloc_r>
 800917e:	6028      	str	r0, [r5, #0]
 8009180:	6128      	str	r0, [r5, #16]
 8009182:	b920      	cbnz	r0, 800918e <_svfiprintf_r+0x2e>
 8009184:	230c      	movs	r3, #12
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800918c:	e0d0      	b.n	8009330 <_svfiprintf_r+0x1d0>
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	616b      	str	r3, [r5, #20]
 8009192:	2300      	movs	r3, #0
 8009194:	9309      	str	r3, [sp, #36]	; 0x24
 8009196:	2320      	movs	r3, #32
 8009198:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800919c:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a0:	2330      	movs	r3, #48	; 0x30
 80091a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009348 <_svfiprintf_r+0x1e8>
 80091a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091aa:	f04f 0901 	mov.w	r9, #1
 80091ae:	4623      	mov	r3, r4
 80091b0:	469a      	mov	sl, r3
 80091b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b6:	b10a      	cbz	r2, 80091bc <_svfiprintf_r+0x5c>
 80091b8:	2a25      	cmp	r2, #37	; 0x25
 80091ba:	d1f9      	bne.n	80091b0 <_svfiprintf_r+0x50>
 80091bc:	ebba 0b04 	subs.w	fp, sl, r4
 80091c0:	d00b      	beq.n	80091da <_svfiprintf_r+0x7a>
 80091c2:	465b      	mov	r3, fp
 80091c4:	4622      	mov	r2, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	4638      	mov	r0, r7
 80091ca:	f7ff ff6f 	bl	80090ac <__ssputs_r>
 80091ce:	3001      	adds	r0, #1
 80091d0:	f000 80a9 	beq.w	8009326 <_svfiprintf_r+0x1c6>
 80091d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d6:	445a      	add	r2, fp
 80091d8:	9209      	str	r2, [sp, #36]	; 0x24
 80091da:	f89a 3000 	ldrb.w	r3, [sl]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80a1 	beq.w	8009326 <_svfiprintf_r+0x1c6>
 80091e4:	2300      	movs	r3, #0
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ee:	f10a 0a01 	add.w	sl, sl, #1
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	9307      	str	r3, [sp, #28]
 80091f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091fa:	931a      	str	r3, [sp, #104]	; 0x68
 80091fc:	4654      	mov	r4, sl
 80091fe:	2205      	movs	r2, #5
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	4850      	ldr	r0, [pc, #320]	; (8009348 <_svfiprintf_r+0x1e8>)
 8009206:	f7f7 f80b 	bl	8000220 <memchr>
 800920a:	9a04      	ldr	r2, [sp, #16]
 800920c:	b9d8      	cbnz	r0, 8009246 <_svfiprintf_r+0xe6>
 800920e:	06d0      	lsls	r0, r2, #27
 8009210:	bf44      	itt	mi
 8009212:	2320      	movmi	r3, #32
 8009214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009218:	0711      	lsls	r1, r2, #28
 800921a:	bf44      	itt	mi
 800921c:	232b      	movmi	r3, #43	; 0x2b
 800921e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009222:	f89a 3000 	ldrb.w	r3, [sl]
 8009226:	2b2a      	cmp	r3, #42	; 0x2a
 8009228:	d015      	beq.n	8009256 <_svfiprintf_r+0xf6>
 800922a:	9a07      	ldr	r2, [sp, #28]
 800922c:	4654      	mov	r4, sl
 800922e:	2000      	movs	r0, #0
 8009230:	f04f 0c0a 	mov.w	ip, #10
 8009234:	4621      	mov	r1, r4
 8009236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800923a:	3b30      	subs	r3, #48	; 0x30
 800923c:	2b09      	cmp	r3, #9
 800923e:	d94d      	bls.n	80092dc <_svfiprintf_r+0x17c>
 8009240:	b1b0      	cbz	r0, 8009270 <_svfiprintf_r+0x110>
 8009242:	9207      	str	r2, [sp, #28]
 8009244:	e014      	b.n	8009270 <_svfiprintf_r+0x110>
 8009246:	eba0 0308 	sub.w	r3, r0, r8
 800924a:	fa09 f303 	lsl.w	r3, r9, r3
 800924e:	4313      	orrs	r3, r2
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	46a2      	mov	sl, r4
 8009254:	e7d2      	b.n	80091fc <_svfiprintf_r+0x9c>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	1d19      	adds	r1, r3, #4
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	9103      	str	r1, [sp, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	bfbb      	ittet	lt
 8009262:	425b      	neglt	r3, r3
 8009264:	f042 0202 	orrlt.w	r2, r2, #2
 8009268:	9307      	strge	r3, [sp, #28]
 800926a:	9307      	strlt	r3, [sp, #28]
 800926c:	bfb8      	it	lt
 800926e:	9204      	strlt	r2, [sp, #16]
 8009270:	7823      	ldrb	r3, [r4, #0]
 8009272:	2b2e      	cmp	r3, #46	; 0x2e
 8009274:	d10c      	bne.n	8009290 <_svfiprintf_r+0x130>
 8009276:	7863      	ldrb	r3, [r4, #1]
 8009278:	2b2a      	cmp	r3, #42	; 0x2a
 800927a:	d134      	bne.n	80092e6 <_svfiprintf_r+0x186>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	1d1a      	adds	r2, r3, #4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	9203      	str	r2, [sp, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	bfb8      	it	lt
 8009288:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800928c:	3402      	adds	r4, #2
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009358 <_svfiprintf_r+0x1f8>
 8009294:	7821      	ldrb	r1, [r4, #0]
 8009296:	2203      	movs	r2, #3
 8009298:	4650      	mov	r0, sl
 800929a:	f7f6 ffc1 	bl	8000220 <memchr>
 800929e:	b138      	cbz	r0, 80092b0 <_svfiprintf_r+0x150>
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	eba0 000a 	sub.w	r0, r0, sl
 80092a6:	2240      	movs	r2, #64	; 0x40
 80092a8:	4082      	lsls	r2, r0
 80092aa:	4313      	orrs	r3, r2
 80092ac:	3401      	adds	r4, #1
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b4:	4825      	ldr	r0, [pc, #148]	; (800934c <_svfiprintf_r+0x1ec>)
 80092b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ba:	2206      	movs	r2, #6
 80092bc:	f7f6 ffb0 	bl	8000220 <memchr>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d038      	beq.n	8009336 <_svfiprintf_r+0x1d6>
 80092c4:	4b22      	ldr	r3, [pc, #136]	; (8009350 <_svfiprintf_r+0x1f0>)
 80092c6:	bb1b      	cbnz	r3, 8009310 <_svfiprintf_r+0x1b0>
 80092c8:	9b03      	ldr	r3, [sp, #12]
 80092ca:	3307      	adds	r3, #7
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d6:	4433      	add	r3, r6
 80092d8:	9309      	str	r3, [sp, #36]	; 0x24
 80092da:	e768      	b.n	80091ae <_svfiprintf_r+0x4e>
 80092dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e0:	460c      	mov	r4, r1
 80092e2:	2001      	movs	r0, #1
 80092e4:	e7a6      	b.n	8009234 <_svfiprintf_r+0xd4>
 80092e6:	2300      	movs	r3, #0
 80092e8:	3401      	adds	r4, #1
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	4619      	mov	r1, r3
 80092ee:	f04f 0c0a 	mov.w	ip, #10
 80092f2:	4620      	mov	r0, r4
 80092f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f8:	3a30      	subs	r2, #48	; 0x30
 80092fa:	2a09      	cmp	r2, #9
 80092fc:	d903      	bls.n	8009306 <_svfiprintf_r+0x1a6>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0c6      	beq.n	8009290 <_svfiprintf_r+0x130>
 8009302:	9105      	str	r1, [sp, #20]
 8009304:	e7c4      	b.n	8009290 <_svfiprintf_r+0x130>
 8009306:	fb0c 2101 	mla	r1, ip, r1, r2
 800930a:	4604      	mov	r4, r0
 800930c:	2301      	movs	r3, #1
 800930e:	e7f0      	b.n	80092f2 <_svfiprintf_r+0x192>
 8009310:	ab03      	add	r3, sp, #12
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	462a      	mov	r2, r5
 8009316:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <_svfiprintf_r+0x1f4>)
 8009318:	a904      	add	r1, sp, #16
 800931a:	4638      	mov	r0, r7
 800931c:	f3af 8000 	nop.w
 8009320:	1c42      	adds	r2, r0, #1
 8009322:	4606      	mov	r6, r0
 8009324:	d1d6      	bne.n	80092d4 <_svfiprintf_r+0x174>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	065b      	lsls	r3, r3, #25
 800932a:	f53f af2d 	bmi.w	8009188 <_svfiprintf_r+0x28>
 800932e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009330:	b01d      	add	sp, #116	; 0x74
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	ab03      	add	r3, sp, #12
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	462a      	mov	r2, r5
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <_svfiprintf_r+0x1f4>)
 800933e:	a904      	add	r1, sp, #16
 8009340:	4638      	mov	r0, r7
 8009342:	f000 f919 	bl	8009578 <_printf_i>
 8009346:	e7eb      	b.n	8009320 <_svfiprintf_r+0x1c0>
 8009348:	08009c0c 	.word	0x08009c0c
 800934c:	08009c16 	.word	0x08009c16
 8009350:	00000000 	.word	0x00000000
 8009354:	080090ad 	.word	0x080090ad
 8009358:	08009c12 	.word	0x08009c12

0800935c <sbrk_aligned>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	4e0e      	ldr	r6, [pc, #56]	; (8009398 <sbrk_aligned+0x3c>)
 8009360:	460c      	mov	r4, r1
 8009362:	6831      	ldr	r1, [r6, #0]
 8009364:	4605      	mov	r5, r0
 8009366:	b911      	cbnz	r1, 800936e <sbrk_aligned+0x12>
 8009368:	f000 fa7e 	bl	8009868 <_sbrk_r>
 800936c:	6030      	str	r0, [r6, #0]
 800936e:	4621      	mov	r1, r4
 8009370:	4628      	mov	r0, r5
 8009372:	f000 fa79 	bl	8009868 <_sbrk_r>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d00a      	beq.n	8009390 <sbrk_aligned+0x34>
 800937a:	1cc4      	adds	r4, r0, #3
 800937c:	f024 0403 	bic.w	r4, r4, #3
 8009380:	42a0      	cmp	r0, r4
 8009382:	d007      	beq.n	8009394 <sbrk_aligned+0x38>
 8009384:	1a21      	subs	r1, r4, r0
 8009386:	4628      	mov	r0, r5
 8009388:	f000 fa6e 	bl	8009868 <_sbrk_r>
 800938c:	3001      	adds	r0, #1
 800938e:	d101      	bne.n	8009394 <sbrk_aligned+0x38>
 8009390:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009394:	4620      	mov	r0, r4
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	20019148 	.word	0x20019148

0800939c <_malloc_r>:
 800939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a0:	1ccd      	adds	r5, r1, #3
 80093a2:	f025 0503 	bic.w	r5, r5, #3
 80093a6:	3508      	adds	r5, #8
 80093a8:	2d0c      	cmp	r5, #12
 80093aa:	bf38      	it	cc
 80093ac:	250c      	movcc	r5, #12
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	4607      	mov	r7, r0
 80093b2:	db01      	blt.n	80093b8 <_malloc_r+0x1c>
 80093b4:	42a9      	cmp	r1, r5
 80093b6:	d905      	bls.n	80093c4 <_malloc_r+0x28>
 80093b8:	230c      	movs	r3, #12
 80093ba:	603b      	str	r3, [r7, #0]
 80093bc:	2600      	movs	r6, #0
 80093be:	4630      	mov	r0, r6
 80093c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009498 <_malloc_r+0xfc>
 80093c8:	f000 f9f8 	bl	80097bc <__malloc_lock>
 80093cc:	f8d8 3000 	ldr.w	r3, [r8]
 80093d0:	461c      	mov	r4, r3
 80093d2:	bb5c      	cbnz	r4, 800942c <_malloc_r+0x90>
 80093d4:	4629      	mov	r1, r5
 80093d6:	4638      	mov	r0, r7
 80093d8:	f7ff ffc0 	bl	800935c <sbrk_aligned>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	4604      	mov	r4, r0
 80093e0:	d155      	bne.n	800948e <_malloc_r+0xf2>
 80093e2:	f8d8 4000 	ldr.w	r4, [r8]
 80093e6:	4626      	mov	r6, r4
 80093e8:	2e00      	cmp	r6, #0
 80093ea:	d145      	bne.n	8009478 <_malloc_r+0xdc>
 80093ec:	2c00      	cmp	r4, #0
 80093ee:	d048      	beq.n	8009482 <_malloc_r+0xe6>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	4631      	mov	r1, r6
 80093f4:	4638      	mov	r0, r7
 80093f6:	eb04 0903 	add.w	r9, r4, r3
 80093fa:	f000 fa35 	bl	8009868 <_sbrk_r>
 80093fe:	4581      	cmp	r9, r0
 8009400:	d13f      	bne.n	8009482 <_malloc_r+0xe6>
 8009402:	6821      	ldr	r1, [r4, #0]
 8009404:	1a6d      	subs	r5, r5, r1
 8009406:	4629      	mov	r1, r5
 8009408:	4638      	mov	r0, r7
 800940a:	f7ff ffa7 	bl	800935c <sbrk_aligned>
 800940e:	3001      	adds	r0, #1
 8009410:	d037      	beq.n	8009482 <_malloc_r+0xe6>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	442b      	add	r3, r5
 8009416:	6023      	str	r3, [r4, #0]
 8009418:	f8d8 3000 	ldr.w	r3, [r8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d038      	beq.n	8009492 <_malloc_r+0xf6>
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	42a2      	cmp	r2, r4
 8009424:	d12b      	bne.n	800947e <_malloc_r+0xe2>
 8009426:	2200      	movs	r2, #0
 8009428:	605a      	str	r2, [r3, #4]
 800942a:	e00f      	b.n	800944c <_malloc_r+0xb0>
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	1b52      	subs	r2, r2, r5
 8009430:	d41f      	bmi.n	8009472 <_malloc_r+0xd6>
 8009432:	2a0b      	cmp	r2, #11
 8009434:	d917      	bls.n	8009466 <_malloc_r+0xca>
 8009436:	1961      	adds	r1, r4, r5
 8009438:	42a3      	cmp	r3, r4
 800943a:	6025      	str	r5, [r4, #0]
 800943c:	bf18      	it	ne
 800943e:	6059      	strne	r1, [r3, #4]
 8009440:	6863      	ldr	r3, [r4, #4]
 8009442:	bf08      	it	eq
 8009444:	f8c8 1000 	streq.w	r1, [r8]
 8009448:	5162      	str	r2, [r4, r5]
 800944a:	604b      	str	r3, [r1, #4]
 800944c:	4638      	mov	r0, r7
 800944e:	f104 060b 	add.w	r6, r4, #11
 8009452:	f000 f9b9 	bl	80097c8 <__malloc_unlock>
 8009456:	f026 0607 	bic.w	r6, r6, #7
 800945a:	1d23      	adds	r3, r4, #4
 800945c:	1af2      	subs	r2, r6, r3
 800945e:	d0ae      	beq.n	80093be <_malloc_r+0x22>
 8009460:	1b9b      	subs	r3, r3, r6
 8009462:	50a3      	str	r3, [r4, r2]
 8009464:	e7ab      	b.n	80093be <_malloc_r+0x22>
 8009466:	42a3      	cmp	r3, r4
 8009468:	6862      	ldr	r2, [r4, #4]
 800946a:	d1dd      	bne.n	8009428 <_malloc_r+0x8c>
 800946c:	f8c8 2000 	str.w	r2, [r8]
 8009470:	e7ec      	b.n	800944c <_malloc_r+0xb0>
 8009472:	4623      	mov	r3, r4
 8009474:	6864      	ldr	r4, [r4, #4]
 8009476:	e7ac      	b.n	80093d2 <_malloc_r+0x36>
 8009478:	4634      	mov	r4, r6
 800947a:	6876      	ldr	r6, [r6, #4]
 800947c:	e7b4      	b.n	80093e8 <_malloc_r+0x4c>
 800947e:	4613      	mov	r3, r2
 8009480:	e7cc      	b.n	800941c <_malloc_r+0x80>
 8009482:	230c      	movs	r3, #12
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4638      	mov	r0, r7
 8009488:	f000 f99e 	bl	80097c8 <__malloc_unlock>
 800948c:	e797      	b.n	80093be <_malloc_r+0x22>
 800948e:	6025      	str	r5, [r4, #0]
 8009490:	e7dc      	b.n	800944c <_malloc_r+0xb0>
 8009492:	605b      	str	r3, [r3, #4]
 8009494:	deff      	udf	#255	; 0xff
 8009496:	bf00      	nop
 8009498:	20019144 	.word	0x20019144

0800949c <_printf_common>:
 800949c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a0:	4616      	mov	r6, r2
 80094a2:	4699      	mov	r9, r3
 80094a4:	688a      	ldr	r2, [r1, #8]
 80094a6:	690b      	ldr	r3, [r1, #16]
 80094a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094ac:	4293      	cmp	r3, r2
 80094ae:	bfb8      	it	lt
 80094b0:	4613      	movlt	r3, r2
 80094b2:	6033      	str	r3, [r6, #0]
 80094b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094b8:	4607      	mov	r7, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	b10a      	cbz	r2, 80094c2 <_printf_common+0x26>
 80094be:	3301      	adds	r3, #1
 80094c0:	6033      	str	r3, [r6, #0]
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	0699      	lsls	r1, r3, #26
 80094c6:	bf42      	ittt	mi
 80094c8:	6833      	ldrmi	r3, [r6, #0]
 80094ca:	3302      	addmi	r3, #2
 80094cc:	6033      	strmi	r3, [r6, #0]
 80094ce:	6825      	ldr	r5, [r4, #0]
 80094d0:	f015 0506 	ands.w	r5, r5, #6
 80094d4:	d106      	bne.n	80094e4 <_printf_common+0x48>
 80094d6:	f104 0a19 	add.w	sl, r4, #25
 80094da:	68e3      	ldr	r3, [r4, #12]
 80094dc:	6832      	ldr	r2, [r6, #0]
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	42ab      	cmp	r3, r5
 80094e2:	dc26      	bgt.n	8009532 <_printf_common+0x96>
 80094e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094e8:	1e13      	subs	r3, r2, #0
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	bf18      	it	ne
 80094ee:	2301      	movne	r3, #1
 80094f0:	0692      	lsls	r2, r2, #26
 80094f2:	d42b      	bmi.n	800954c <_printf_common+0xb0>
 80094f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094f8:	4649      	mov	r1, r9
 80094fa:	4638      	mov	r0, r7
 80094fc:	47c0      	blx	r8
 80094fe:	3001      	adds	r0, #1
 8009500:	d01e      	beq.n	8009540 <_printf_common+0xa4>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	6922      	ldr	r2, [r4, #16]
 8009506:	f003 0306 	and.w	r3, r3, #6
 800950a:	2b04      	cmp	r3, #4
 800950c:	bf02      	ittt	eq
 800950e:	68e5      	ldreq	r5, [r4, #12]
 8009510:	6833      	ldreq	r3, [r6, #0]
 8009512:	1aed      	subeq	r5, r5, r3
 8009514:	68a3      	ldr	r3, [r4, #8]
 8009516:	bf0c      	ite	eq
 8009518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800951c:	2500      	movne	r5, #0
 800951e:	4293      	cmp	r3, r2
 8009520:	bfc4      	itt	gt
 8009522:	1a9b      	subgt	r3, r3, r2
 8009524:	18ed      	addgt	r5, r5, r3
 8009526:	2600      	movs	r6, #0
 8009528:	341a      	adds	r4, #26
 800952a:	42b5      	cmp	r5, r6
 800952c:	d11a      	bne.n	8009564 <_printf_common+0xc8>
 800952e:	2000      	movs	r0, #0
 8009530:	e008      	b.n	8009544 <_printf_common+0xa8>
 8009532:	2301      	movs	r3, #1
 8009534:	4652      	mov	r2, sl
 8009536:	4649      	mov	r1, r9
 8009538:	4638      	mov	r0, r7
 800953a:	47c0      	blx	r8
 800953c:	3001      	adds	r0, #1
 800953e:	d103      	bne.n	8009548 <_printf_common+0xac>
 8009540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	3501      	adds	r5, #1
 800954a:	e7c6      	b.n	80094da <_printf_common+0x3e>
 800954c:	18e1      	adds	r1, r4, r3
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	2030      	movs	r0, #48	; 0x30
 8009552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009556:	4422      	add	r2, r4
 8009558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800955c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009560:	3302      	adds	r3, #2
 8009562:	e7c7      	b.n	80094f4 <_printf_common+0x58>
 8009564:	2301      	movs	r3, #1
 8009566:	4622      	mov	r2, r4
 8009568:	4649      	mov	r1, r9
 800956a:	4638      	mov	r0, r7
 800956c:	47c0      	blx	r8
 800956e:	3001      	adds	r0, #1
 8009570:	d0e6      	beq.n	8009540 <_printf_common+0xa4>
 8009572:	3601      	adds	r6, #1
 8009574:	e7d9      	b.n	800952a <_printf_common+0x8e>
	...

08009578 <_printf_i>:
 8009578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	7e0f      	ldrb	r7, [r1, #24]
 800957e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009580:	2f78      	cmp	r7, #120	; 0x78
 8009582:	4691      	mov	r9, r2
 8009584:	4680      	mov	r8, r0
 8009586:	460c      	mov	r4, r1
 8009588:	469a      	mov	sl, r3
 800958a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800958e:	d807      	bhi.n	80095a0 <_printf_i+0x28>
 8009590:	2f62      	cmp	r7, #98	; 0x62
 8009592:	d80a      	bhi.n	80095aa <_printf_i+0x32>
 8009594:	2f00      	cmp	r7, #0
 8009596:	f000 80d4 	beq.w	8009742 <_printf_i+0x1ca>
 800959a:	2f58      	cmp	r7, #88	; 0x58
 800959c:	f000 80c0 	beq.w	8009720 <_printf_i+0x1a8>
 80095a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095a8:	e03a      	b.n	8009620 <_printf_i+0xa8>
 80095aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ae:	2b15      	cmp	r3, #21
 80095b0:	d8f6      	bhi.n	80095a0 <_printf_i+0x28>
 80095b2:	a101      	add	r1, pc, #4	; (adr r1, 80095b8 <_printf_i+0x40>)
 80095b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095b8:	08009611 	.word	0x08009611
 80095bc:	08009625 	.word	0x08009625
 80095c0:	080095a1 	.word	0x080095a1
 80095c4:	080095a1 	.word	0x080095a1
 80095c8:	080095a1 	.word	0x080095a1
 80095cc:	080095a1 	.word	0x080095a1
 80095d0:	08009625 	.word	0x08009625
 80095d4:	080095a1 	.word	0x080095a1
 80095d8:	080095a1 	.word	0x080095a1
 80095dc:	080095a1 	.word	0x080095a1
 80095e0:	080095a1 	.word	0x080095a1
 80095e4:	08009729 	.word	0x08009729
 80095e8:	08009651 	.word	0x08009651
 80095ec:	080096e3 	.word	0x080096e3
 80095f0:	080095a1 	.word	0x080095a1
 80095f4:	080095a1 	.word	0x080095a1
 80095f8:	0800974b 	.word	0x0800974b
 80095fc:	080095a1 	.word	0x080095a1
 8009600:	08009651 	.word	0x08009651
 8009604:	080095a1 	.word	0x080095a1
 8009608:	080095a1 	.word	0x080095a1
 800960c:	080096eb 	.word	0x080096eb
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	1d1a      	adds	r2, r3, #4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	602a      	str	r2, [r5, #0]
 8009618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800961c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009620:	2301      	movs	r3, #1
 8009622:	e09f      	b.n	8009764 <_printf_i+0x1ec>
 8009624:	6820      	ldr	r0, [r4, #0]
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	0607      	lsls	r7, r0, #24
 800962a:	f103 0104 	add.w	r1, r3, #4
 800962e:	6029      	str	r1, [r5, #0]
 8009630:	d501      	bpl.n	8009636 <_printf_i+0xbe>
 8009632:	681e      	ldr	r6, [r3, #0]
 8009634:	e003      	b.n	800963e <_printf_i+0xc6>
 8009636:	0646      	lsls	r6, r0, #25
 8009638:	d5fb      	bpl.n	8009632 <_printf_i+0xba>
 800963a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800963e:	2e00      	cmp	r6, #0
 8009640:	da03      	bge.n	800964a <_printf_i+0xd2>
 8009642:	232d      	movs	r3, #45	; 0x2d
 8009644:	4276      	negs	r6, r6
 8009646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964a:	485a      	ldr	r0, [pc, #360]	; (80097b4 <_printf_i+0x23c>)
 800964c:	230a      	movs	r3, #10
 800964e:	e012      	b.n	8009676 <_printf_i+0xfe>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	6820      	ldr	r0, [r4, #0]
 8009654:	1d19      	adds	r1, r3, #4
 8009656:	6029      	str	r1, [r5, #0]
 8009658:	0605      	lsls	r5, r0, #24
 800965a:	d501      	bpl.n	8009660 <_printf_i+0xe8>
 800965c:	681e      	ldr	r6, [r3, #0]
 800965e:	e002      	b.n	8009666 <_printf_i+0xee>
 8009660:	0641      	lsls	r1, r0, #25
 8009662:	d5fb      	bpl.n	800965c <_printf_i+0xe4>
 8009664:	881e      	ldrh	r6, [r3, #0]
 8009666:	4853      	ldr	r0, [pc, #332]	; (80097b4 <_printf_i+0x23c>)
 8009668:	2f6f      	cmp	r7, #111	; 0x6f
 800966a:	bf0c      	ite	eq
 800966c:	2308      	moveq	r3, #8
 800966e:	230a      	movne	r3, #10
 8009670:	2100      	movs	r1, #0
 8009672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009676:	6865      	ldr	r5, [r4, #4]
 8009678:	60a5      	str	r5, [r4, #8]
 800967a:	2d00      	cmp	r5, #0
 800967c:	bfa2      	ittt	ge
 800967e:	6821      	ldrge	r1, [r4, #0]
 8009680:	f021 0104 	bicge.w	r1, r1, #4
 8009684:	6021      	strge	r1, [r4, #0]
 8009686:	b90e      	cbnz	r6, 800968c <_printf_i+0x114>
 8009688:	2d00      	cmp	r5, #0
 800968a:	d04b      	beq.n	8009724 <_printf_i+0x1ac>
 800968c:	4615      	mov	r5, r2
 800968e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009692:	fb03 6711 	mls	r7, r3, r1, r6
 8009696:	5dc7      	ldrb	r7, [r0, r7]
 8009698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800969c:	4637      	mov	r7, r6
 800969e:	42bb      	cmp	r3, r7
 80096a0:	460e      	mov	r6, r1
 80096a2:	d9f4      	bls.n	800968e <_printf_i+0x116>
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d10b      	bne.n	80096c0 <_printf_i+0x148>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	07de      	lsls	r6, r3, #31
 80096ac:	d508      	bpl.n	80096c0 <_printf_i+0x148>
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	6861      	ldr	r1, [r4, #4]
 80096b2:	4299      	cmp	r1, r3
 80096b4:	bfde      	ittt	le
 80096b6:	2330      	movle	r3, #48	; 0x30
 80096b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80096c0:	1b52      	subs	r2, r2, r5
 80096c2:	6122      	str	r2, [r4, #16]
 80096c4:	f8cd a000 	str.w	sl, [sp]
 80096c8:	464b      	mov	r3, r9
 80096ca:	aa03      	add	r2, sp, #12
 80096cc:	4621      	mov	r1, r4
 80096ce:	4640      	mov	r0, r8
 80096d0:	f7ff fee4 	bl	800949c <_printf_common>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d14a      	bne.n	800976e <_printf_i+0x1f6>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096dc:	b004      	add	sp, #16
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	f043 0320 	orr.w	r3, r3, #32
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	4833      	ldr	r0, [pc, #204]	; (80097b8 <_printf_i+0x240>)
 80096ec:	2778      	movs	r7, #120	; 0x78
 80096ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	6829      	ldr	r1, [r5, #0]
 80096f6:	061f      	lsls	r7, r3, #24
 80096f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80096fc:	d402      	bmi.n	8009704 <_printf_i+0x18c>
 80096fe:	065f      	lsls	r7, r3, #25
 8009700:	bf48      	it	mi
 8009702:	b2b6      	uxthmi	r6, r6
 8009704:	07df      	lsls	r7, r3, #31
 8009706:	bf48      	it	mi
 8009708:	f043 0320 	orrmi.w	r3, r3, #32
 800970c:	6029      	str	r1, [r5, #0]
 800970e:	bf48      	it	mi
 8009710:	6023      	strmi	r3, [r4, #0]
 8009712:	b91e      	cbnz	r6, 800971c <_printf_i+0x1a4>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	f023 0320 	bic.w	r3, r3, #32
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	2310      	movs	r3, #16
 800971e:	e7a7      	b.n	8009670 <_printf_i+0xf8>
 8009720:	4824      	ldr	r0, [pc, #144]	; (80097b4 <_printf_i+0x23c>)
 8009722:	e7e4      	b.n	80096ee <_printf_i+0x176>
 8009724:	4615      	mov	r5, r2
 8009726:	e7bd      	b.n	80096a4 <_printf_i+0x12c>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	6826      	ldr	r6, [r4, #0]
 800972c:	6961      	ldr	r1, [r4, #20]
 800972e:	1d18      	adds	r0, r3, #4
 8009730:	6028      	str	r0, [r5, #0]
 8009732:	0635      	lsls	r5, r6, #24
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	d501      	bpl.n	800973c <_printf_i+0x1c4>
 8009738:	6019      	str	r1, [r3, #0]
 800973a:	e002      	b.n	8009742 <_printf_i+0x1ca>
 800973c:	0670      	lsls	r0, r6, #25
 800973e:	d5fb      	bpl.n	8009738 <_printf_i+0x1c0>
 8009740:	8019      	strh	r1, [r3, #0]
 8009742:	2300      	movs	r3, #0
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	4615      	mov	r5, r2
 8009748:	e7bc      	b.n	80096c4 <_printf_i+0x14c>
 800974a:	682b      	ldr	r3, [r5, #0]
 800974c:	1d1a      	adds	r2, r3, #4
 800974e:	602a      	str	r2, [r5, #0]
 8009750:	681d      	ldr	r5, [r3, #0]
 8009752:	6862      	ldr	r2, [r4, #4]
 8009754:	2100      	movs	r1, #0
 8009756:	4628      	mov	r0, r5
 8009758:	f7f6 fd62 	bl	8000220 <memchr>
 800975c:	b108      	cbz	r0, 8009762 <_printf_i+0x1ea>
 800975e:	1b40      	subs	r0, r0, r5
 8009760:	6060      	str	r0, [r4, #4]
 8009762:	6863      	ldr	r3, [r4, #4]
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	2300      	movs	r3, #0
 8009768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800976c:	e7aa      	b.n	80096c4 <_printf_i+0x14c>
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	462a      	mov	r2, r5
 8009772:	4649      	mov	r1, r9
 8009774:	4640      	mov	r0, r8
 8009776:	47d0      	blx	sl
 8009778:	3001      	adds	r0, #1
 800977a:	d0ad      	beq.n	80096d8 <_printf_i+0x160>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	079b      	lsls	r3, r3, #30
 8009780:	d413      	bmi.n	80097aa <_printf_i+0x232>
 8009782:	68e0      	ldr	r0, [r4, #12]
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	4298      	cmp	r0, r3
 8009788:	bfb8      	it	lt
 800978a:	4618      	movlt	r0, r3
 800978c:	e7a6      	b.n	80096dc <_printf_i+0x164>
 800978e:	2301      	movs	r3, #1
 8009790:	4632      	mov	r2, r6
 8009792:	4649      	mov	r1, r9
 8009794:	4640      	mov	r0, r8
 8009796:	47d0      	blx	sl
 8009798:	3001      	adds	r0, #1
 800979a:	d09d      	beq.n	80096d8 <_printf_i+0x160>
 800979c:	3501      	adds	r5, #1
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	9903      	ldr	r1, [sp, #12]
 80097a2:	1a5b      	subs	r3, r3, r1
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	dcf2      	bgt.n	800978e <_printf_i+0x216>
 80097a8:	e7eb      	b.n	8009782 <_printf_i+0x20a>
 80097aa:	2500      	movs	r5, #0
 80097ac:	f104 0619 	add.w	r6, r4, #25
 80097b0:	e7f5      	b.n	800979e <_printf_i+0x226>
 80097b2:	bf00      	nop
 80097b4:	08009c1d 	.word	0x08009c1d
 80097b8:	08009c2e 	.word	0x08009c2e

080097bc <__malloc_lock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_lock+0x8>)
 80097be:	f7ff bc73 	b.w	80090a8 <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	20019140 	.word	0x20019140

080097c8 <__malloc_unlock>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__malloc_unlock+0x8>)
 80097ca:	f7ff bc6e 	b.w	80090aa <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	20019140 	.word	0x20019140

080097d4 <_realloc_r>:
 80097d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d8:	4680      	mov	r8, r0
 80097da:	4614      	mov	r4, r2
 80097dc:	460e      	mov	r6, r1
 80097de:	b921      	cbnz	r1, 80097ea <_realloc_r+0x16>
 80097e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	4611      	mov	r1, r2
 80097e6:	f7ff bdd9 	b.w	800939c <_malloc_r>
 80097ea:	b92a      	cbnz	r2, 80097f8 <_realloc_r+0x24>
 80097ec:	f000 f85a 	bl	80098a4 <_free_r>
 80097f0:	4625      	mov	r5, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	f000 f8a0 	bl	800993c <_malloc_usable_size_r>
 80097fc:	4284      	cmp	r4, r0
 80097fe:	4607      	mov	r7, r0
 8009800:	d802      	bhi.n	8009808 <_realloc_r+0x34>
 8009802:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009806:	d812      	bhi.n	800982e <_realloc_r+0x5a>
 8009808:	4621      	mov	r1, r4
 800980a:	4640      	mov	r0, r8
 800980c:	f7ff fdc6 	bl	800939c <_malloc_r>
 8009810:	4605      	mov	r5, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	d0ed      	beq.n	80097f2 <_realloc_r+0x1e>
 8009816:	42bc      	cmp	r4, r7
 8009818:	4622      	mov	r2, r4
 800981a:	4631      	mov	r1, r6
 800981c:	bf28      	it	cs
 800981e:	463a      	movcs	r2, r7
 8009820:	f000 f832 	bl	8009888 <memcpy>
 8009824:	4631      	mov	r1, r6
 8009826:	4640      	mov	r0, r8
 8009828:	f000 f83c 	bl	80098a4 <_free_r>
 800982c:	e7e1      	b.n	80097f2 <_realloc_r+0x1e>
 800982e:	4635      	mov	r5, r6
 8009830:	e7df      	b.n	80097f2 <_realloc_r+0x1e>

08009832 <memmove>:
 8009832:	4288      	cmp	r0, r1
 8009834:	b510      	push	{r4, lr}
 8009836:	eb01 0402 	add.w	r4, r1, r2
 800983a:	d902      	bls.n	8009842 <memmove+0x10>
 800983c:	4284      	cmp	r4, r0
 800983e:	4623      	mov	r3, r4
 8009840:	d807      	bhi.n	8009852 <memmove+0x20>
 8009842:	1e43      	subs	r3, r0, #1
 8009844:	42a1      	cmp	r1, r4
 8009846:	d008      	beq.n	800985a <memmove+0x28>
 8009848:	f811 2b01 	ldrb.w	r2, [r1], #1
 800984c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009850:	e7f8      	b.n	8009844 <memmove+0x12>
 8009852:	4402      	add	r2, r0
 8009854:	4601      	mov	r1, r0
 8009856:	428a      	cmp	r2, r1
 8009858:	d100      	bne.n	800985c <memmove+0x2a>
 800985a:	bd10      	pop	{r4, pc}
 800985c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009860:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009864:	e7f7      	b.n	8009856 <memmove+0x24>
	...

08009868 <_sbrk_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_sbrk_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f8 f8b0 	bl	80019d8 <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_sbrk_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_sbrk_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	2001914c 	.word	0x2001914c

08009888 <memcpy>:
 8009888:	440a      	add	r2, r1
 800988a:	4291      	cmp	r1, r2
 800988c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009890:	d100      	bne.n	8009894 <memcpy+0xc>
 8009892:	4770      	bx	lr
 8009894:	b510      	push	{r4, lr}
 8009896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989e:	4291      	cmp	r1, r2
 80098a0:	d1f9      	bne.n	8009896 <memcpy+0xe>
 80098a2:	bd10      	pop	{r4, pc}

080098a4 <_free_r>:
 80098a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d044      	beq.n	8009934 <_free_r+0x90>
 80098aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ae:	9001      	str	r0, [sp, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f1a1 0404 	sub.w	r4, r1, #4
 80098b6:	bfb8      	it	lt
 80098b8:	18e4      	addlt	r4, r4, r3
 80098ba:	f7ff ff7f 	bl	80097bc <__malloc_lock>
 80098be:	4a1e      	ldr	r2, [pc, #120]	; (8009938 <_free_r+0x94>)
 80098c0:	9801      	ldr	r0, [sp, #4]
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	b933      	cbnz	r3, 80098d4 <_free_r+0x30>
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	6014      	str	r4, [r2, #0]
 80098ca:	b003      	add	sp, #12
 80098cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098d0:	f7ff bf7a 	b.w	80097c8 <__malloc_unlock>
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d908      	bls.n	80098ea <_free_r+0x46>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf01      	itttt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	1949      	addeq	r1, r1, r5
 80098e6:	6021      	streq	r1, [r4, #0]
 80098e8:	e7ed      	b.n	80098c6 <_free_r+0x22>
 80098ea:	461a      	mov	r2, r3
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	b10b      	cbz	r3, 80098f4 <_free_r+0x50>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d9fa      	bls.n	80098ea <_free_r+0x46>
 80098f4:	6811      	ldr	r1, [r2, #0]
 80098f6:	1855      	adds	r5, r2, r1
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d10b      	bne.n	8009914 <_free_r+0x70>
 80098fc:	6824      	ldr	r4, [r4, #0]
 80098fe:	4421      	add	r1, r4
 8009900:	1854      	adds	r4, r2, r1
 8009902:	42a3      	cmp	r3, r4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	d1e0      	bne.n	80098ca <_free_r+0x26>
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	6053      	str	r3, [r2, #4]
 800990e:	440c      	add	r4, r1
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	e7da      	b.n	80098ca <_free_r+0x26>
 8009914:	d902      	bls.n	800991c <_free_r+0x78>
 8009916:	230c      	movs	r3, #12
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	e7d6      	b.n	80098ca <_free_r+0x26>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf04      	itt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	bf04      	itt	eq
 800992c:	1949      	addeq	r1, r1, r5
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	6054      	str	r4, [r2, #4]
 8009932:	e7ca      	b.n	80098ca <_free_r+0x26>
 8009934:	b003      	add	sp, #12
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	20019144 	.word	0x20019144

0800993c <_malloc_usable_size_r>:
 800993c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009940:	1f18      	subs	r0, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	bfbc      	itt	lt
 8009946:	580b      	ldrlt	r3, [r1, r0]
 8009948:	18c0      	addlt	r0, r0, r3
 800994a:	4770      	bx	lr

0800994c <_init>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr

08009958 <_fini>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	bf00      	nop
 800995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995e:	bc08      	pop	{r3}
 8009960:	469e      	mov	lr, r3
 8009962:	4770      	bx	lr
