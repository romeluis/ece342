
lab_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009540  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08009710  08009710  00019710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a04  08009a04  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a0c  08009a0c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a10  08009a10  00019a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f230  20000060  08009a74  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f290  08009a74  0002f290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185fb  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000344f  00000000  00000000  000386ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0003bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103f  00000000  00000000  0003cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cc  00000000  00000000  0003e00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b76e  00000000  00000000  000625db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7401  00000000  00000000  0007dd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d88  00000000  00000000  0015514c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015aed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096f8 	.word	0x080096f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080096f8 	.word	0x080096f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <print_msg>:
DMA_HandleTypeDef hdma_usart3_tx;

PCD_HandleTypeDef hpcd_USB_OTG_FS;


HAL_StatusTypeDef print_msg(char * msg) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  // Your code here
  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe23 	bl	8000210 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <print_msg+0x28>)
 80005d4:	f007 f8b6 	bl	8007744 <HAL_UART_Transmit_DMA>
 80005d8:	4603      	mov	r3, r0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000210 	.word	0x20000210

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fbfa 	bl	8008df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <SystemClock_Config+0xd4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000648:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fec1 	bl	80063f8 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f000 fa9a 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 f836 	bl	8005710 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f000 fa83 	bl	8000bb4 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
void MX_DCMI_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_DCMI_Init+0x60>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_DCMI_Init+0x64>)
 80006c8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_DCMI_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_DCMI_Init+0x60>)
 80006d2:	2220      	movs	r2, #32
 80006d4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_DCMI_Init+0x60>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_DCMI_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_DCMI_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_DCMI_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DCMI_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_DCMI_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_DCMI_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_DCMI_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_DCMI_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_DCMI_Init+0x60>)
 800070e:	f001 fda1 	bl	8002254 <HAL_DCMI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 fa4c 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000007c 	.word	0x2000007c
 8000724:	50050000 	.word	0x50050000

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C2_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C2_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C2_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C2_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C2_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C2_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C2_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C2_Init+0x50>)
 8000766:	f003 fd65 	bl	8004234 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fa20 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000012c 	.word	0x2000012c
 800077c:	40005800 	.word	0x40005800
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b092      	sub	sp, #72	; 0x48
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f008 fb1e 	bl	8008df0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007b6:	4a33      	ldr	r2, [pc, #204]	; (8000884 <MX_TIM1_Init+0x100>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007c8:	2214      	movs	r2, #20
 80007ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007de:	4828      	ldr	r0, [pc, #160]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007e0:	f006 f8f7 	bl	80069d2 <HAL_TIM_PWM_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 f9e3 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007fa:	4619      	mov	r1, r3
 80007fc:	4820      	ldr	r0, [pc, #128]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007fe:	f006 fe71 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000808:	f000 f9d4 	bl	8000bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8000810:	230a      	movs	r3, #10
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <MX_TIM1_Init+0xfc>)
 8000832:	f006 faed 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800083c:	f000 f9ba 	bl	8000bb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <MX_TIM1_Init+0xfc>)
 8000864:	f006 feba 	bl	80075dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800086e:	f000 f9a1 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <MX_TIM1_Init+0xfc>)
 8000874:	f000 febc 	bl	80015f0 <HAL_TIM_MspPostInit>

}
 8000878:	bf00      	nop
 800087a:	3748      	adds	r7, #72	; 0x48
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000180 	.word	0x20000180
 8000884:	40010000 	.word	0x40010000

08000888 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM6_Init+0x64>)
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_TIM6_Init+0x68>)
 800089a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_TIM6_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_TIM6_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_TIM6_Init+0x64>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_TIM6_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_TIM6_Init+0x64>)
 80008b8:	f006 f83c 	bl	8006934 <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008c2:	f000 f977 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_TIM6_Init+0x64>)
 80008d4:	f006 fe06 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008de:	f000 f969 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001c8 	.word	0x200001c8
 80008f0:	40001000 	.word	0x40001000

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART3_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800092c:	f006 febc 	bl	80076a8 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f93d 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000210 	.word	0x20000210
 8000944:	40004800 	.word	0x40004800

08000948 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2206      	movs	r2, #6
 8000958:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2202      	movs	r2, #2
 800095e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2201      	movs	r2, #1
 8000970:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2201      	movs	r2, #1
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	f004 fd77 	bl	800547e <HAL_PCD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f90d 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200002b4 	.word	0x200002b4

080009a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_DMA_Init+0x68>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <MX_DMA_Init+0x68>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_DMA_Init+0x68>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_DMA_Init+0x68>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_DMA_Init+0x68>)
 80009d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_DMA_Init+0x68>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200e      	movs	r0, #14
 80009e8:	f001 f9af 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009ec:	200e      	movs	r0, #14
 80009ee:	f001 f9c8 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2039      	movs	r0, #57	; 0x39
 80009f8:	f001 f9a7 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009fc:	2039      	movs	r0, #57	; 0x39
 80009fe:	f001 f9c0 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
 8000a2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a5d      	ldr	r2, [pc, #372]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	623b      	str	r3, [r7, #32]
 8000a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a56      	ldr	r2, [pc, #344]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b54      	ldr	r3, [pc, #336]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b50      	ldr	r3, [pc, #320]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4f      	ldr	r2, [pc, #316]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a41      	ldr	r2, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a33      	ldr	r2, [pc, #204]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b0c:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <MX_GPIO_Init+0x198>)
 8000b0e:	f003 fb39 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	4825      	ldr	r0, [pc, #148]	; (8000bac <MX_GPIO_Init+0x19c>)
 8000b18:	f003 fb34 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000b34:	f003 f992 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b38:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0x198>)
 8000b52:	f003 f983 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <MX_GPIO_Init+0x19c>)
 8000b6e:	f003 f975 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <MX_GPIO_Init+0x19c>)
 8000b86:	f003 f969 	bl	8003e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2028      	movs	r0, #40	; 0x28
 8000b90:	f001 f8db 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b94:	2028      	movs	r0, #40	; 0x28
 8000b96:	f001 f8f4 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3738      	adds	r7, #56	; 0x38
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  print_msg("ERROR!\r\n");
 8000bbc:	4801      	ldr	r0, [pc, #4]	; (8000bc4 <Error_Handler+0x10>)
 8000bbe:	f7ff fcfd 	bl	80005bc <print_msg>
 8000bc2:	e7fb      	b.n	8000bbc <Error_Handler+0x8>
 8000bc4:	08009710 	.word	0x08009710

08000bc8 <main>:
uint8_t findNumberOfRepeatedPixels(uint8_t startRow, uint8_t startCol);
void transferRawBufferToIntermediate();
int rle(int bufferIndex);

int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  HAL_Init();
 8000bcc:	f000 ff4c 	bl	8001a68 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f7ff fd0a 	bl	80005e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f7ff ff1c 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd8:	f7ff fee4 	bl	80009a4 <MX_DMA_Init>
  MX_DCMI_Init();
 8000bdc:	f7ff fd70 	bl	80006c0 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000be0:	f7ff fe88 	bl	80008f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000be4:	f7ff feb0 	bl	8000948 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000be8:	f7ff fd9e 	bl	8000728 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000bec:	f7ff fdca 	bl	8000784 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000bf0:	f7ff fe4a 	bl	8000888 <MX_TIM6_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <main+0x44>)
 8000bf8:	f005 ff3a 	bl	8006a70 <HAL_TIM_PWM_Start>
  ov7670_init();
 8000bfc:	f000 f996 	bl	8000f2c <ov7670_init>
    //*****Modes*****
	//pictureMode();
	//videoMode();
	//truncatedVideoMode();
	//extraTruncatedVideoMode();
	compressedExtraTruncatedVideoMode();
 8000c00:	f000 f806 	bl	8000c10 <compressedExtraTruncatedVideoMode>
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000180 	.word	0x20000180

08000c10 <compressedExtraTruncatedVideoMode>:
	}

}


void compressedExtraTruncatedVideoMode() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
	uint8_t pass = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	77fb      	strb	r3, [r7, #31]

	//Loop forever
	while(1) {
		//Reset
		dma_flag = 0;
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	; (8000d98 <compressedExtraTruncatedVideoMode+0x188>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
		ov7670_capture(raw_buff);
 8000c20:	485e      	ldr	r0, [pc, #376]	; (8000d9c <compressedExtraTruncatedVideoMode+0x18c>)
 8000c22:	f000 fb07 	bl	8001234 <ov7670_capture>

		//Wait for capture to finish
		while (!dma_flag) {
 8000c26:	e002      	b.n	8000c2e <compressedExtraTruncatedVideoMode+0x1e>
			HAL_Delay(0);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 ff8f 	bl	8001b4c <HAL_Delay>
		while (!dma_flag) {
 8000c2e:	4b5a      	ldr	r3, [pc, #360]	; (8000d98 <compressedExtraTruncatedVideoMode+0x188>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f8      	beq.n	8000c28 <compressedExtraTruncatedVideoMode+0x18>
		}

		//Extract grey scale
		transferRawBufferToIntermediate();
 8000c36:	f000 f8fb 	bl	8000e30 <transferRawBufferToIntermediate>

		//Refresh frame
		int bufferIndex = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
		if (pass == 0) {
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d119      	bne.n	8000c78 <compressedExtraTruncatedVideoMode+0x68>

			//Add pre-amble
			for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00b      	b.n	8000c62 <compressedExtraTruncatedVideoMode+0x52>
				video_buff[bufferIndex++] = PREAMBLE[index];
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	61ba      	str	r2, [r7, #24]
 8000c50:	4953      	ldr	r1, [pc, #332]	; (8000da0 <compressedExtraTruncatedVideoMode+0x190>)
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	440a      	add	r2, r1
 8000c56:	7811      	ldrb	r1, [r2, #0]
 8000c58:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <compressedExtraTruncatedVideoMode+0x194>)
 8000c5a:	54d1      	strb	r1, [r2, r3]
			for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2b0b      	cmp	r3, #11
 8000c66:	d9f0      	bls.n	8000c4a <compressedExtraTruncatedVideoMode+0x3a>
			}

			//RLE and place between pre-amble and suffix
			bufferIndex = rle(sizeof(PREAMBLE));
 8000c68:	200c      	movs	r0, #12
 8000c6a:	f000 f91d 	bl	8000ea8 <rle>
 8000c6e:	61b8      	str	r0, [r7, #24]

			pass++;
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	3301      	adds	r3, #1
 8000c74:	77fb      	strb	r3, [r7, #31]
 8000c76:	e06a      	b.n	8000d4e <compressedExtraTruncatedVideoMode+0x13e>

		//Update difference
		} else {
			//Add delta
			for (int index = 0; index < sizeof(DELTA_PREAMBLE); index++) {
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	e00e      	b.n	8000c9c <compressedExtraTruncatedVideoMode+0x8c>
				video_buff[bufferIndex] = DELTA_PREAMBLE[index];
 8000c7e:	4a4a      	ldr	r2, [pc, #296]	; (8000da8 <compressedExtraTruncatedVideoMode+0x198>)
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4413      	add	r3, r2
 8000c84:	7819      	ldrb	r1, [r3, #0]
 8000c86:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <compressedExtraTruncatedVideoMode+0x194>)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
				bufferIndex++;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	3301      	adds	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
			for (int index = 0; index < sizeof(DELTA_PREAMBLE); index++) {
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	2b0b      	cmp	r3, #11
 8000ca0:	d9ed      	bls.n	8000c7e <compressedExtraTruncatedVideoMode+0x6e>
			}

			//Calculate difference and hot swap
			for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e043      	b.n	8000d30 <compressedExtraTruncatedVideoMode+0x120>
				for (int colIndex = 0; colIndex < IMG_COLS; colIndex++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	e03a      	b.n	8000d24 <compressedExtraTruncatedVideoMode+0x114>
					uint8_t difference = ((previous_buff[rowIndex][colIndex] >> 4) - (intermediate_buff[rowIndex][colIndex] >> 4)) & 0xF0;
 8000cae:	4a3f      	ldr	r2, [pc, #252]	; (8000dac <compressedExtraTruncatedVideoMode+0x19c>)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	21ae      	movs	r1, #174	; 0xae
 8000cb4:	fb01 f303 	mul.w	r3, r1, r3
 8000cb8:	441a      	add	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	493a      	ldr	r1, [pc, #232]	; (8000db0 <compressedExtraTruncatedVideoMode+0x1a0>)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	20ae      	movs	r0, #174	; 0xae
 8000cca:	fb00 f303 	mul.w	r3, r0, r3
 8000cce:	4419      	add	r1, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	440b      	add	r3, r1
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f023 030f 	bic.w	r3, r3, #15
 8000ce2:	70fb      	strb	r3, [r7, #3]
					previous_buff[rowIndex][colIndex] = intermediate_buff[rowIndex][colIndex];
 8000ce4:	4a32      	ldr	r2, [pc, #200]	; (8000db0 <compressedExtraTruncatedVideoMode+0x1a0>)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	21ae      	movs	r1, #174	; 0xae
 8000cea:	fb01 f303 	mul.w	r3, r1, r3
 8000cee:	441a      	add	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	7818      	ldrb	r0, [r3, #0]
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <compressedExtraTruncatedVideoMode+0x19c>)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	21ae      	movs	r1, #174	; 0xae
 8000cfc:	fb01 f303 	mul.w	r3, r1, r3
 8000d00:	441a      	add	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	4413      	add	r3, r2
 8000d06:	4602      	mov	r2, r0
 8000d08:	701a      	strb	r2, [r3, #0]
					intermediate_buff[rowIndex][colIndex] = difference;
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <compressedExtraTruncatedVideoMode+0x1a0>)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	21ae      	movs	r1, #174	; 0xae
 8000d10:	fb01 f303 	mul.w	r3, r1, r3
 8000d14:	441a      	add	r2, r3
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4413      	add	r3, r2
 8000d1a:	78fa      	ldrb	r2, [r7, #3]
 8000d1c:	701a      	strb	r2, [r3, #0]
				for (int colIndex = 0; colIndex < IMG_COLS; colIndex++) {
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2bad      	cmp	r3, #173	; 0xad
 8000d28:	ddc1      	ble.n	8000cae <compressedExtraTruncatedVideoMode+0x9e>
			for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b8f      	cmp	r3, #143	; 0x8f
 8000d34:	ddb8      	ble.n	8000ca8 <compressedExtraTruncatedVideoMode+0x98>
				}
			}

			//Compress
			bufferIndex = rle(bufferIndex);
 8000d36:	69b8      	ldr	r0, [r7, #24]
 8000d38:	f000 f8b6 	bl	8000ea8 <rle>
 8000d3c:	61b8      	str	r0, [r7, #24]

			pass++;
 8000d3e:	7ffb      	ldrb	r3, [r7, #31]
 8000d40:	3301      	adds	r3, #1
 8000d42:	77fb      	strb	r3, [r7, #31]

			if (pass == 6) pass = 0;
 8000d44:	7ffb      	ldrb	r3, [r7, #31]
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d101      	bne.n	8000d4e <compressedExtraTruncatedVideoMode+0x13e>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	77fb      	strb	r3, [r7, #31]
		}

		//Append suffix
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e00e      	b.n	8000d72 <compressedExtraTruncatedVideoMode+0x162>
			video_buff[bufferIndex] = SUFFIX[index];
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <compressedExtraTruncatedVideoMode+0x1a4>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	7819      	ldrb	r1, [r3, #0]
 8000d5c:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <compressedExtraTruncatedVideoMode+0x194>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4413      	add	r3, r2
 8000d62:	460a      	mov	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
			bufferIndex++;
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	d9ed      	bls.n	8000d54 <compressedExtraTruncatedVideoMode+0x144>
		}

		//Export Data
		if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY) {
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <compressedExtraTruncatedVideoMode+0x1a8>)
 8000d7a:	f007 f823 	bl	8007dc4 <HAL_UART_GetState>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b20      	cmp	r3, #32
 8000d82:	f47f af4a 	bne.w	8000c1a <compressedExtraTruncatedVideoMode+0xa>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)video_buff, bufferIndex);
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4905      	ldr	r1, [pc, #20]	; (8000da4 <compressedExtraTruncatedVideoMode+0x194>)
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <compressedExtraTruncatedVideoMode+0x1a8>)
 8000d90:	f006 fcd8 	bl	8007744 <HAL_UART_Transmit_DMA>
	while(1) {
 8000d94:	e741      	b.n	8000c1a <compressedExtraTruncatedVideoMode+0xa>
 8000d96:	bf00      	nop
 8000d98:	2001f134 	.word	0x2001f134
 8000d9c:	200007c0 	.word	0x200007c0
 8000da0:	0800971c 	.word	0x0800971c
 8000da4:	20018f40 	.word	0x20018f40
 8000da8:	08009730 	.word	0x08009730
 8000dac:	20012d60 	.word	0x20012d60
 8000db0:	2000cb80 	.word	0x2000cb80
 8000db4:	08009728 	.word	0x08009728
 8000db8:	20000210 	.word	0x20000210

08000dbc <findNumberOfRepeatedPixels>:
	}

}

//Returns the number of pixels that are consecutive, beginning search at [startRow, startCol]
uint8_t findNumberOfRepeatedPixels(uint8_t startRow, uint8_t startCol) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	uint8_t count = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	75fb      	strb	r3, [r7, #23]
	uint8_t prevColour = intermediate_buff[startRow][startCol];
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	4915      	ldr	r1, [pc, #84]	; (8000e2c <findNumberOfRepeatedPixels+0x70>)
 8000dd6:	20ae      	movs	r0, #174	; 0xae
 8000dd8:	fb00 f202 	mul.w	r2, r0, r2
 8000ddc:	440a      	add	r2, r1
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	73fb      	strb	r3, [r7, #15]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	e011      	b.n	8000e0e <findNumberOfRepeatedPixels+0x52>
		if (intermediate_buff[startRow][columnIndex] == prevColour) {
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <findNumberOfRepeatedPixels+0x70>)
 8000dee:	21ae      	movs	r1, #174	; 0xae
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	441a      	add	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d10c      	bne.n	8000e1c <findNumberOfRepeatedPixels+0x60>
			count++;
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	3301      	adds	r3, #1
 8000e06:	75fb      	strb	r3, [r7, #23]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2bad      	cmp	r3, #173	; 0xad
 8000e12:	dc04      	bgt.n	8000e1e <findNumberOfRepeatedPixels+0x62>
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	2b0e      	cmp	r3, #14
 8000e18:	d9e7      	bls.n	8000dea <findNumberOfRepeatedPixels+0x2e>
 8000e1a:	e000      	b.n	8000e1e <findNumberOfRepeatedPixels+0x62>
		} else {
			break;
 8000e1c:	bf00      	nop
		}
	}
	return count;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	2000cb80 	.word	0x2000cb80

08000e30 <transferRawBufferToIntermediate>:

//Extracts grey-scale data from the raw buffer to the intermediate buffer and formats it in a 2D array
void transferRawBufferToIntermediate() {
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
	int rowIndex = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
	int colIndex = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8000e3e:	2301      	movs	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e022      	b.n	8000e8a <transferRawBufferToIntermediate+0x5a>
		if (rawIndex % 2 != 0) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d01a      	beq.n	8000e84 <transferRawBufferToIntermediate+0x54>
			intermediate_buff[rowIndex][colIndex++] = raw_buff[rawIndex] & 0xF0;
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <transferRawBufferToIntermediate+0x70>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1c59      	adds	r1, r3, #1
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	f022 020f 	bic.w	r2, r2, #15
 8000e60:	b2d4      	uxtb	r4, r2
 8000e62:	4910      	ldr	r1, [pc, #64]	; (8000ea4 <transferRawBufferToIntermediate+0x74>)
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	20ae      	movs	r0, #174	; 0xae
 8000e68:	fb00 f202 	mul.w	r2, r0, r2
 8000e6c:	440a      	add	r2, r1
 8000e6e:	4413      	add	r3, r2
 8000e70:	4622      	mov	r2, r4
 8000e72:	701a      	strb	r2, [r3, #0]
			if (colIndex == IMG_COLS) {
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2bae      	cmp	r3, #174	; 0xae
 8000e78:	d104      	bne.n	8000e84 <transferRawBufferToIntermediate+0x54>
				rowIndex++;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
				colIndex = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f24c 32bf 	movw	r2, #50111	; 0xc3bf
 8000e90:	4293      	cmp	r3, r2
 8000e92:	ddd7      	ble.n	8000e44 <transferRawBufferToIntermediate+0x14>
			}
		}
	}
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc90      	pop	{r4, r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	200007c0 	.word	0x200007c0
 8000ea4:	2000cb80 	.word	0x2000cb80

08000ea8 <rle>:

//Compresses contents of intermediate buff using RLE and places data in the output buffer beginning at bufferIndex
int rle(int bufferIndex) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e02d      	b.n	8000f12 <rle+0x6a>
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	e024      	b.n	8000f06 <rle+0x5e>
			uint8_t repetitions = findNumberOfRepeatedPixels(rowIndex, colIndex);
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff78 	bl	8000dbc <findNumberOfRepeatedPixels>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]

			video_buff[bufferIndex++] = intermediate_buff[rowIndex][colIndex] | (repetitions & 0xF);
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <rle+0x7c>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	21ae      	movs	r1, #174	; 0xae
 8000ed6:	fb01 f303 	mul.w	r3, r1, r3
 8000eda:	441a      	add	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b25a      	sxtb	r2, r3
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	f003 030f 	and.w	r3, r3, #15
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b259      	sxtb	r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	b2c9      	uxtb	r1, r1
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <rle+0x80>)
 8000efc:	54d1      	strb	r1, [r2, r3]

			colIndex += repetitions;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2bad      	cmp	r3, #173	; 0xad
 8000f0a:	ddd7      	ble.n	8000ebc <rle+0x14>
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b8f      	cmp	r3, #143	; 0x8f
 8000f16:	ddce      	ble.n	8000eb6 <rle+0xe>
		}
	}
	return bufferIndex;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000cb80 	.word	0x2000cb80
 8000f28:	20018f40 	.word	0x20018f40

08000f2c <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b0a1      	sub	sp, #132	; 0x84
 8000f30:	af02      	add	r7, sp, #8
  uint8_t val;
  char msg[100];

  print_msg("Beginning reading check\r\n");
 8000f32:	484d      	ldr	r0, [pc, #308]	; (8001068 <ov7670_init+0x13c>)
 8000f34:	f7ff fb42 	bl	80005bc <print_msg>
  HAL_Delay(10);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f000 fe07 	bl	8001b4c <HAL_Delay>
  val = ov7670_read(0x0A);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f000 f8a4 	bl	800108c <ov7670_read>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  if (val != 0x76) {
 8000f4a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000f4e:	2b76      	cmp	r3, #118	; 0x76
 8000f50:	d00f      	beq.n	8000f72 <ov7670_init+0x46>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8000f52:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4944      	ldr	r1, [pc, #272]	; (800106c <ov7670_init+0x140>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f007 ff28 	bl	8008db0 <siprintf>
    print_msg(msg);
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fb2a 	bl	80005bc <print_msg>
    HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f000 fdef 	bl	8001b4c <HAL_Delay>
    return 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e076      	b.n	8001060 <ov7670_init+0x134>
  } else {
	  print_msg("Value correct\r\n");
 8000f72:	483f      	ldr	r0, [pc, #252]	; (8001070 <ov7670_init+0x144>)
 8000f74:	f7ff fb22 	bl	80005bc <print_msg>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	483e      	ldr	r0, [pc, #248]	; (8001074 <ov7670_init+0x148>)
 8000f7c:	f003 f91b 	bl	80041b6 <HAL_GPIO_TogglePin>
  }

  print_msg("Writing to registers...\r\n");
 8000f80:	483d      	ldr	r0, [pc, #244]	; (8001078 <ov7670_init+0x14c>)
 8000f82:	f7ff fb1b 	bl	80005bc <print_msg>
  HAL_Delay(10);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f000 fde0 	bl	8001b4c <HAL_Delay>

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	677b      	str	r3, [r7, #116]	; 0x74
 8000f90:	e012      	b.n	8000fb8 <ov7670_init+0x8c>
	  ov7670_write(OV7670_reg[index][0], OV7670_reg[index][1]);
 8000f92:	4a3a      	ldr	r2, [pc, #232]	; (800107c <ov7670_init+0x150>)
 8000f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f96:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000f9a:	4938      	ldr	r1, [pc, #224]	; (800107c <ov7670_init+0x150>)
 8000f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	440b      	add	r3, r1
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	f000 f8f4 	bl	8001194 <ov7670_write>
	  HAL_Delay(11);
 8000fac:	200b      	movs	r0, #11
 8000fae:	f000 fdcd 	bl	8001b4c <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	677b      	str	r3, [r7, #116]	; 0x74
 8000fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fba:	2b79      	cmp	r3, #121	; 0x79
 8000fbc:	dde9      	ble.n	8000f92 <ov7670_init+0x66>
  }

  print_msg("Beginning sanity check\r\n");
 8000fbe:	4830      	ldr	r0, [pc, #192]	; (8001080 <ov7670_init+0x154>)
 8000fc0:	f7ff fafc 	bl	80005bc <print_msg>
  HAL_Delay(10);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f000 fdc1 	bl	8001b4c <HAL_Delay>

  uint8_t isDataCorrect = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fd4:	e032      	b.n	800103c <ov7670_init+0x110>
	  uint8_t dataRead = ov7670_read(OV7670_reg[index][0]);
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <ov7670_init+0x150>)
 8000fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fda:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f854 	bl	800108c <ov7670_read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	  if (dataRead != OV7670_reg[index][1]) {
 8000fea:	4a24      	ldr	r2, [pc, #144]	; (800107c <ov7670_init+0x150>)
 8000fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d01c      	beq.n	8001036 <ov7670_init+0x10a>
		  isDataCorrect = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  sprintf(msg, "Register 0x%x contains incorrect data 0x%x (should be 0x%x)\r\n", OV7670_reg[index][0], dataRead, OV7670_reg[index][1]);
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <ov7670_init+0x150>)
 8001004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001006:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800100a:	461c      	mov	r4, r3
 800100c:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8001010:	491a      	ldr	r1, [pc, #104]	; (800107c <ov7670_init+0x150>)
 8001012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	440b      	add	r3, r1
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	1d38      	adds	r0, r7, #4
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	4622      	mov	r2, r4
 8001022:	4918      	ldr	r1, [pc, #96]	; (8001084 <ov7670_init+0x158>)
 8001024:	f007 fec4 	bl	8008db0 <siprintf>
		  print_msg(msg);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fac6 	bl	80005bc <print_msg>
		  HAL_Delay(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f000 fd8b 	bl	8001b4c <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8001036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001038:	3301      	adds	r3, #1
 800103a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800103c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800103e:	2b79      	cmp	r3, #121	; 0x79
 8001040:	ddc9      	ble.n	8000fd6 <ov7670_init+0xaa>
	  }
  }

  if (isDataCorrect) {
 8001042:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <ov7670_init+0x12a>
	  print_msg("All data OK\r\n");
 800104a:	480f      	ldr	r0, [pc, #60]	; (8001088 <ov7670_init+0x15c>)
 800104c:	f7ff fab6 	bl	80005bc <print_msg>
	  HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f000 fd7b 	bl	8001b4c <HAL_Delay>
  }
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <ov7670_init+0x148>)
 800105a:	f003 f8ac 	bl	80041b6 <HAL_GPIO_TogglePin>
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	377c      	adds	r7, #124	; 0x7c
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	0800973c 	.word	0x0800973c
 800106c:	08009758 	.word	0x08009758
 8001070:	08009774 	.word	0x08009774
 8001074:	40020400 	.word	0x40020400
 8001078:	08009784 	.word	0x08009784
 800107c:	080098bc 	.word	0x080098bc
 8001080:	080097a0 	.word	0x080097a0
 8001084:	080097bc 	.word	0x080097bc
 8001088:	080097fc 	.word	0x080097fc

0800108c <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a0      	sub	sp, #128	; 0x80
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	char msg[100];
	uint8_t data = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	72fb      	strb	r3, [r7, #11]
	uint8_t attempts = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	uint8_t *regAddress = &reg;
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 80010aa:	e028      	b.n	80010fe <ov7670_read+0x72>
		status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670_READ, regAddress, 1, 100);
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80010b4:	2143      	movs	r1, #67	; 0x43
 80010b6:	4834      	ldr	r0, [pc, #208]	; (8001188 <ov7670_read+0xfc>)
 80010b8:	f003 fa00 	bl	80044bc <HAL_I2C_Master_Transmit>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 80010c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010c6:	3301      	adds	r3, #1
 80010c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 80010cc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d014      	beq.n	80010fe <ov7670_read+0x72>
			sprintf(msg, "Transmit Status: %d on attempt %d with register 0x%x\r\n", status, attempts, *regAddress);
 80010d4:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80010d8:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 80010dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f107 000c 	add.w	r0, r7, #12
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	460b      	mov	r3, r1
 80010e8:	4928      	ldr	r1, [pc, #160]	; (800118c <ov7670_read+0x100>)
 80010ea:	f007 fe61 	bl	8008db0 <siprintf>
			print_msg(msg);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa62 	bl	80005bc <print_msg>
			HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 fd27 	bl	8001b4c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 80010fe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <ov7670_read+0x82>
 8001106:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800110a:	2b04      	cmp	r3, #4
 800110c:	d9ce      	bls.n	80010ac <ov7670_read+0x20>
		}
	}

	status = HAL_BUSY;
 800110e:	2302      	movs	r3, #2
 8001110:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	attempts = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	while (status != HAL_OK && attempts < 5) {
 800111a:	e027      	b.n	800116c <ov7670_read+0xe0>
		status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670_READ, &data, 1, 100);
 800111c:	f107 020b 	add.w	r2, r7, #11
 8001120:	2364      	movs	r3, #100	; 0x64
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2143      	movs	r1, #67	; 0x43
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <ov7670_read+0xfc>)
 800112a:	f003 fac5 	bl	80046b8 <HAL_I2C_Master_Receive>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 8001134:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001138:	3301      	adds	r3, #1
 800113a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 800113e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001142:	2b00      	cmp	r3, #0
 8001144:	d012      	beq.n	800116c <ov7670_read+0xe0>
			sprintf(msg, "Receive Status: %d on attempt %d with current data: 0x%x\r\n", status, attempts, data);
 8001146:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800114a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800114e:	7af9      	ldrb	r1, [r7, #11]
 8001150:	f107 000c 	add.w	r0, r7, #12
 8001154:	9100      	str	r1, [sp, #0]
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <ov7670_read+0x104>)
 8001158:	f007 fe2a 	bl	8008db0 <siprintf>
			print_msg(msg);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fa2b 	bl	80005bc <print_msg>
			HAL_Delay(10);
 8001166:	200a      	movs	r0, #10
 8001168:	f000 fcf0 	bl	8001b4c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 800116c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <ov7670_read+0xf0>
 8001174:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001178:	2b04      	cmp	r3, #4
 800117a:	d9cf      	bls.n	800111c <ov7670_read+0x90>
		}
	}


	return data;
 800117c:	7afb      	ldrb	r3, [r7, #11]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3778      	adds	r7, #120	; 0x78
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000012c 	.word	0x2000012c
 800118c:	0800980c 	.word	0x0800980c
 8001190:	08009844 	.word	0x08009844

08001194 <ov7670_write>:

HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
 8001194:	b580      	push	{r7, lr}
 8001196:	b0a2      	sub	sp, #136	; 0x88
 8001198:	af04      	add	r7, sp, #16
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
	char msg[100];
	uint8_t attempts = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	//uint8_t *regAddress = &reg;
	uint8_t *data = &val;
 80011b0:	1dbb      	adds	r3, r7, #6
 80011b2:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 80011b4:	e02c      	b.n	8001210 <ov7670_write+0x7c>
		status = HAL_I2C_Mem_Write(&hi2c2,ADDR_OV7670_WRITE,reg,I2C_MEMADD_SIZE_8BIT,data,1,100);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	2142      	movs	r1, #66	; 0x42
 80011ca:	4818      	ldr	r0, [pc, #96]	; (800122c <ov7670_write+0x98>)
 80011cc:	f003 fc9a 	bl	8004b04 <HAL_I2C_Mem_Write>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 80011d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80011da:	3301      	adds	r3, #1
 80011dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 80011e0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <ov7670_write+0x7c>
			sprintf(msg, "Memory Write Status: %d on attempt %d with register 0x%x\r\n", status, attempts, reg);
 80011e8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80011ec:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f107 000c 	add.w	r0, r7, #12
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	460b      	mov	r3, r1
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <ov7670_write+0x9c>)
 80011fc:	f007 fdd8 	bl	8008db0 <siprintf>
			print_msg(msg);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f9d9 	bl	80005bc <print_msg>
			HAL_Delay(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f000 fc9e 	bl	8001b4c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001210:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <ov7670_write+0x8c>
 8001218:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800121c:	2b04      	cmp	r3, #4
 800121e:	d9ca      	bls.n	80011b6 <ov7670_write+0x22>
			HAL_Delay(10);
		}
	}
	*/

	return status;
 8001220:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
}
 8001224:	4618      	mov	r0, r3
 8001226:	3778      	adds	r7, #120	; 0x78
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000012c 	.word	0x2000012c
 8001230:	08009880 	.word	0x08009880

08001234 <ov7670_capture>:

void ov7670_snapshot(uint8_t *buff){
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
}

void ov7670_capture(uint8_t *buff){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	f243 03f0 	movw	r3, #12528	; 0x30f0
 8001242:	2100      	movs	r1, #0
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <ov7670_capture+0x20>)
 8001246:	f000 fdb7 	bl	8001db8 <HAL_DCMI_Start_DMA>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000007c 	.word	0x2000007c

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <HAL_DCMI_MspInit+0x200>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	f040 80e9 	bne.w	800149e <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
 80012d0:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	4a75      	ldr	r2, [pc, #468]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6353      	str	r3, [r2, #52]	; 0x34
 80012dc:	4b73      	ldr	r3, [pc, #460]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
 80012e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a6e      	ldr	r2, [pc, #440]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b6c      	ldr	r3, [pc, #432]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a67      	ldr	r2, [pc, #412]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b65      	ldr	r3, [pc, #404]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	4b61      	ldr	r3, [pc, #388]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a60      	ldr	r2, [pc, #384]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a59      	ldr	r2, [pc, #356]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b57      	ldr	r3, [pc, #348]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 8001362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_DCMI_MspInit+0x204>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001374:	2370      	movs	r3, #112	; 0x70
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001384:	230d      	movs	r3, #13
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	4848      	ldr	r0, [pc, #288]	; (80014b0 <HAL_DCMI_MspInit+0x208>)
 8001390:	f002 fd64 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001394:	2350      	movs	r3, #80	; 0x50
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013a4:	230d      	movs	r3, #13
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4841      	ldr	r0, [pc, #260]	; (80014b4 <HAL_DCMI_MspInit+0x20c>)
 80013b0:	f002 fd54 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013b4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013c6:	230d      	movs	r3, #13
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4839      	ldr	r0, [pc, #228]	; (80014b8 <HAL_DCMI_MspInit+0x210>)
 80013d2:	f002 fd43 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d6:	2308      	movs	r3, #8
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013e6:	230d      	movs	r3, #13
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4832      	ldr	r0, [pc, #200]	; (80014bc <HAL_DCMI_MspInit+0x214>)
 80013f2:	f002 fd33 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001408:	230d      	movs	r3, #13
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	482b      	ldr	r0, [pc, #172]	; (80014c0 <HAL_DCMI_MspInit+0x218>)
 8001414:	f002 fd22 	bl	8003e5c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 800141a:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <HAL_DCMI_MspInit+0x220>)
 800141c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001420:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001424:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001438:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 800143c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001440:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001444:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001448:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001454:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001458:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 800145c:	2204      	movs	r2, #4
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001462:	2203      	movs	r2, #3
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 800146e:	2200      	movs	r2, #0
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001474:	f000 ff68 	bl	8002348 <HAL_DMA_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 800147e:	f7ff fb99 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 8001486:	649a      	str	r2, [r3, #72]	; 0x48
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_DCMI_MspInit+0x21c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	204e      	movs	r0, #78	; 0x4e
 8001494:	f000 fc59 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001498:	204e      	movs	r0, #78	; 0x4e
 800149a:	f000 fc72 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	50050000 	.word	0x50050000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021800 	.word	0x40021800
 80014c4:	200000cc 	.word	0x200000cc
 80014c8:	40026428 	.word	0x40026428

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_I2C_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12b      	bne.n	8001546 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150a:	2303      	movs	r3, #3
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150e:	2312      	movs	r3, #18
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151a:	2304      	movs	r3, #4
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_I2C_MspInit+0x8c>)
 8001526:	f002 fc99 	bl	8003e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_I2C_MspInit+0x88>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40005800 	.word	0x40005800
 8001554:	40023800 	.word	0x40023800
 8001558:	40021400 	.word	0x40021400

0800155c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10d      	bne.n	800158a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_TIM_PWM_MspInit+0x40>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_TIM_PWM_MspInit+0x40>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_TIM_PWM_MspInit+0x40>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_TIM_Base_MspInit+0x48>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d115      	bne.n	80015de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_TIM_Base_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_TIM_Base_MspInit+0x4c>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_TIM_Base_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2036      	movs	r0, #54	; 0x36
 80015d4:	f000 fbb9 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d8:	2036      	movs	r0, #54	; 0x36
 80015da:	f000 fbd2 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40001000 	.word	0x40001000
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_TIM_MspPostInit+0x68>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d11e      	bne.n	8001650 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_TIM_MspPostInit+0x6c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_TIM_MspPostInit+0x6c>)
 800161c:	f043 0310 	orr.w	r3, r3, #16
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_TIM_MspPostInit+0x6c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001632:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_TIM_MspPostInit+0x70>)
 800164c:	f002 fc06 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010000 	.word	0x40010000
 800165c:	40023800 	.word	0x40023800
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <HAL_UART_MspInit+0x104>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d16b      	bne.n	800175e <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_UART_MspInit+0x108>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_UART_MspInit+0x108>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_UART_MspInit+0x108>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_UART_MspInit+0x108>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <HAL_UART_MspInit+0x108>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_UART_MspInit+0x108>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d0:	2307      	movs	r3, #7
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4825      	ldr	r0, [pc, #148]	; (8001770 <HAL_UART_MspInit+0x10c>)
 80016dc:	f002 fbbe 	bl	8003e5c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_UART_MspInit+0x110>)
 80016e2:	4a25      	ldr	r2, [pc, #148]	; (8001778 <HAL_UART_MspInit+0x114>)
 80016e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_UART_MspInit+0x110>)
 80016e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_UART_MspInit+0x110>)
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <HAL_UART_MspInit+0x110>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_UART_MspInit+0x110>)
 80016fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001700:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_UART_MspInit+0x110>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_UART_MspInit+0x110>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_UART_MspInit+0x110>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_UART_MspInit+0x110>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_UART_MspInit+0x110>)
 800171c:	2204      	movs	r2, #4
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_UART_MspInit+0x110>)
 8001722:	2203      	movs	r2, #3
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_UART_MspInit+0x110>)
 8001728:	2200      	movs	r2, #0
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_UART_MspInit+0x110>)
 800172e:	2200      	movs	r2, #0
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <HAL_UART_MspInit+0x110>)
 8001734:	f000 fe08 	bl	8002348 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800173e:	f7ff fa39 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_UART_MspInit+0x110>)
 8001746:	635a      	str	r2, [r3, #52]	; 0x34
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_UART_MspInit+0x110>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2027      	movs	r0, #39	; 0x27
 8001754:	f000 faf9 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001758:	2027      	movs	r0, #39	; 0x27
 800175a:	f000 fb12 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40004800 	.word	0x40004800
 800176c:	40023800 	.word	0x40023800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	20000254 	.word	0x20000254
 8001778:	40026058 	.word	0x40026058

0800177c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0a0      	sub	sp, #128	; 0x80
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	225c      	movs	r2, #92	; 0x5c
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f007 fb27 	bl	8008df0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017aa:	d14e      	bne.n	800184a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80017b2:	2300      	movs	r3, #0
 80017b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 f8c2 	bl	8005944 <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80017c6:	f7ff f9f5 	bl	8000bb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017f8:	230a      	movs	r3, #10
 80017fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001800:	4619      	mov	r1, r3
 8001802:	4815      	ldr	r0, [pc, #84]	; (8001858 <HAL_PCD_MspInit+0xdc>)
 8001804:	f002 fb2a 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800181a:	4619      	mov	r1, r3
 800181c:	480e      	ldr	r0, [pc, #56]	; (8001858 <HAL_PCD_MspInit+0xdc>)
 800181e:	f002 fb1d 	bl	8003e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6353      	str	r3, [r2, #52]	; 0x34
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_PCD_MspInit+0xd8>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3780      	adds	r7, #128	; 0x80
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler+0x4>
	...

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <HardFault_Handler+0x10>)
 800186e:	f002 fca2 	bl	80041b6 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0xe>
 8001874:	40020400 	.word	0x40020400

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f928 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <DMA1_Stream3_IRQHandler+0x10>)
 80018c6:	f000 fed7 	bl	8002678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000254 	.word	0x20000254

080018d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <USART3_IRQHandler+0x10>)
 80018da:	f005 ffb1 	bl	8007840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000210 	.word	0x20000210

080018e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	thisTime = HAL_GetTick();
 80018ec:	f000 f922 	bl	8001b34 <HAL_GetTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <EXTI15_10_IRQHandler+0x3c>)
 80018f4:	6013      	str	r3, [r2, #0]
		if (thisTime-lastTime >= interval) {
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <EXTI15_10_IRQHandler+0x3c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <EXTI15_10_IRQHandler+0x40>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <EXTI15_10_IRQHandler+0x44>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d302      	bcc.n	800190e <EXTI15_10_IRQHandler+0x26>
			button_flag = 1;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <EXTI15_10_IRQHandler+0x48>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800190e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001912:	f002 fc6b 	bl	80041ec <HAL_GPIO_EXTI_IRQHandler>
		lastTime = thisTime;
 8001916:	4b03      	ldr	r3, [pc, #12]	; (8001924 <EXTI15_10_IRQHandler+0x3c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a03      	ldr	r2, [pc, #12]	; (8001928 <EXTI15_10_IRQHandler+0x40>)
 800191c:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2001f13c 	.word	0x2001f13c
 8001928:	2001f138 	.word	0x2001f138
 800192c:	20000000 	.word	0x20000000
 8001930:	2001f135 	.word	0x2001f135

08001934 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <TIM6_DAC_IRQHandler+0x10>)
 800193a:	f005 f961 	bl	8006c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001c8 	.word	0x200001c8

08001948 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	HAL_DCMI_Stop(&hdcmi);
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <DMA2_Stream1_IRQHandler+0x1c>)
 800194e:	f000 fad3 	bl	8001ef8 <HAL_DCMI_Stop>
	dma_flag = 1;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <DMA2_Stream1_IRQHandler+0x20>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dcmi);
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <DMA2_Stream1_IRQHandler+0x24>)
 800195a:	f000 fe8d 	bl	8002678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000007c 	.word	0x2000007c
 8001968:	2001f134 	.word	0x2001f134
 800196c:	200000cc 	.word	0x200000cc

08001970 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DCMI_IRQHandler+0x10>)
 8001976:	f000 fb1b 	bl	8001fb0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000007c 	.word	0x2000007c

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f007 fa24 	bl	8008e00 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20020000 	.word	0x20020000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	2001f140 	.word	0x2001f140
 80019ec:	2001f290 	.word	0x2001f290

080019f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a1a:	490e      	ldr	r1, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a30:	4c0b      	ldr	r4, [pc, #44]	; (8001a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a3e:	f7ff ffd7 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a42:	f007 f9e3 	bl	8008e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a46:	f7ff f8bf 	bl	8000bc8 <main>
  bx  lr    
 8001a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a58:	08009a14 	.word	0x08009a14
  ldr r2, =_sbss
 8001a5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a60:	2001f290 	.word	0x2001f290

08001a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC_IRQHandler>
	...

08001a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_Init+0x40>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_Init+0x40>)
 8001a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_Init+0x40>)
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 f94f 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f808 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9c:	f7ff fbdc 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f967 	bl	8001d9e <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae8:	f000 f92f 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000004 	.word	0x20000004
 8001b04:	2000000c 	.word	0x2000000c
 8001b08:	20000008 	.word	0x20000008

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	2000000c 	.word	0x2000000c
 8001b30:	2001f144 	.word	0x2001f144

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2001f144 	.word	0x2001f144

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff ffee 	bl	8001b34 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffde 	bl	8001b34 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000000c 	.word	0x2000000c

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_DCMI_Start_DMA+0x20>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e086      	b.n	8001ee6 <HAL_DCMI_Start_DMA+0x12e>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001df6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0202 	bic.w	r2, r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1c:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <HAL_DCMI_Start_DMA+0x138>)
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e24:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_DCMI_Start_DMA+0x13c>)
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40

  if(Length <= 0xFFFFU)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e42:	d20a      	bcs.n	8001e5a <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3328      	adds	r3, #40	; 0x28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	f000 fb26 	bl	80024a4 <HAL_DMA_Start_IT>
 8001e58:	e038      	b.n	8001ecc <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5e:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <HAL_DCMI_Start_DMA+0x138>)
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001e74:	e009      	b.n	8001e8a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	085a      	lsrs	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	005a      	lsls	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e92:	d2f0      	bcs.n	8001e76 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	1e9a      	subs	r2, r3, #2
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3328      	adds	r3, #40	; 0x28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	f000 fe40 	bl	8002b4c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	080020fd 	.word	0x080020fd
 8001ef4:	08002227 	.word	0x08002227

08001ef8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_DCMI_Stop+0xb0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	4a29      	ldr	r2, [pc, #164]	; (8001fac <HAL_DCMI_Stop+0xb4>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_DCMI_Stop+0x2a>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e03e      	b.n	8001fa0 <HAL_DCMI_Stop+0xa8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	60ba      	str	r2, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d108      	bne.n	8001f5e <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5c:	e006      	b.n	8001f6c <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ea      	bne.n	8001f42 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fae7 	bl	8002554 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	92492493 	.word	0x92492493

08001fb0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fea:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <HAL_DCMI_IRQHandler+0xf8>)
 8001fec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fb1e 	bl	8002634 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2202      	movs	r2, #2
 8002008:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2204      	movs	r2, #4
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002022:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <HAL_DCMI_IRQHandler+0xf8>)
 8002024:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fb02 	bl	8002634 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2210      	movs	r2, #16
 8002040:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f83c 	bl	80020c0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2208      	movs	r2, #8
 8002058:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f83a 	bl	80020d4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d019      	beq.n	800209e <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b02      	cmp	r3, #2
 8002076:	d107      	bne.n	8002088 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 021e 	bic.w	r2, r2, #30
 8002086:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f825 	bl	80020e8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	08002227 	.word	0x08002227

080020ac <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	2b00      	cmp	r3, #0
 8002114:	d043      	beq.n	800219e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002122:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d118      	bne.n	8002162 <DCMI_DMAXferCplt+0x66>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	00da      	lsls	r2, r3, #3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	2200      	movs	r2, #0
 8002150:	4619      	mov	r1, r3
 8002152:	f001 fe43 	bl	8003ddc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	1e5a      	subs	r2, r3, #1
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
 8002160:	e044      	b.n	80021ec <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d13c      	bne.n	80021ec <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	00da      	lsls	r2, r3, #3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	2201      	movs	r2, #1
 800218c:	4619      	mov	r1, r3
 800218e:	f001 fe25 	bl	8003ddc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
 800219c:	e026      	b.n	80021ec <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	e017      	b.n	80021ec <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	0099      	lsls	r1, r3, #2
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	440a      	add	r2, r1
 80021e2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d112      	bne.n	800221e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d103      	bne.n	800221e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	2b02      	cmp	r3, #2
 800223c:	d003      	beq.n	8002246 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff ff30 	bl	80020ac <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e069      	b.n	800233a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff f814 	bl	80012a8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff f811 	bl	80012a8 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_DCMI_Init+0xf0>)
 800229a:	400b      	ands	r3, r1
 800229c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022b2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022be:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022ca:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 80022d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80022e2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d112      	bne.n	800231a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7f1b      	ldrb	r3, [r3, #28]
 80022f8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7f5b      	ldrb	r3, [r3, #29]
 80022fe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002300:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7f9b      	ldrb	r3, [r3, #30]
 8002306:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002308:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7fdb      	ldrb	r3, [r3, #31]
 8002310:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002316:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002318:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 021e 	orr.w	r2, r2, #30
 8002328:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	ffe0f007 	.word	0xffe0f007

08002348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff fbee 	bl	8001b34 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e099      	b.n	8002498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002384:	e00f      	b.n	80023a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002386:	f7ff fbd5 	bl	8001b34 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b05      	cmp	r3, #5
 8002392:	d908      	bls.n	80023a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2203      	movs	r2, #3
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e078      	b.n	8002498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e8      	bne.n	8002386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_DMA_Init+0x158>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4313      	orrs	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0307 	bic.w	r3, r3, #7
 8002426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b04      	cmp	r3, #4
 8002438:	d117      	bne.n	800246a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fb01 	bl	8002a54 <DMA_CheckFifoParam>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002466:	2301      	movs	r3, #1
 8002468:	e016      	b.n	8002498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fab8 	bl	80029e8 <DMA_CalcBaseAndBitshift>
 8002478:	4603      	mov	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	223f      	movs	r2, #63	; 0x3f
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	f010803f 	.word	0xf010803f

080024a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_Start_IT+0x26>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e040      	b.n	800254c <HAL_DMA_Start_IT+0xa8>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d12f      	bne.n	800253e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fa4a 	bl	800298c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	223f      	movs	r2, #63	; 0x3f
 80024fe:	409a      	lsls	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0216 	orr.w	r2, r2, #22
 8002512:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e005      	b.n	800254a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002546:	2302      	movs	r3, #2
 8002548:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800254a:	7dfb      	ldrb	r3, [r7, #23]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002562:	f7ff fae7 	bl	8001b34 <HAL_GetTick>
 8002566:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d008      	beq.n	8002586 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e052      	b.n	800262c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0216 	bic.w	r2, r2, #22
 8002594:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_DMA_Abort+0x62>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0208 	bic.w	r2, r2, #8
 80025c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	e013      	b.n	8002600 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d8:	f7ff faac 	bl	8001b34 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d90c      	bls.n	8002600 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2203      	movs	r2, #3
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e015      	b.n	800262c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e4      	bne.n	80025d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	223f      	movs	r2, #63	; 0x3f
 8002614:	409a      	lsls	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00c      	b.n	800266c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2205      	movs	r2, #5
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002684:	4b8e      	ldr	r3, [pc, #568]	; (80028c0 <HAL_DMA_IRQHandler+0x248>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a8e      	ldr	r2, [pc, #568]	; (80028c4 <HAL_DMA_IRQHandler+0x24c>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0a9b      	lsrs	r3, r3, #10
 8002690:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2208      	movs	r2, #8
 80026a4:	409a      	lsls	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01a      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	2208      	movs	r2, #8
 80026d2:	409a      	lsls	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	2201      	movs	r2, #1
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d012      	beq.n	800271a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	2201      	movs	r2, #1
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f043 0202 	orr.w	r2, r3, #2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2204      	movs	r2, #4
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d012      	beq.n	8002750 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	2204      	movs	r2, #4
 800273e:	409a      	lsls	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	f043 0204 	orr.w	r2, r3, #4
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	2210      	movs	r2, #16
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d043      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d03c      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2210      	movs	r2, #16
 8002774:	409a      	lsls	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d018      	beq.n	80027ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d024      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
 80027a6:	e01f      	b.n	80027e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01b      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
 80027b8:	e016      	b.n	80027e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0208 	bic.w	r2, r2, #8
 80027d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2220      	movs	r2, #32
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 808f 	beq.w	8002918 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8087 	beq.w	8002918 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	2220      	movs	r2, #32
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b05      	cmp	r3, #5
 8002820:	d136      	bne.n	8002890 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0216 	bic.w	r2, r2, #22
 8002830:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002840:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <HAL_DMA_IRQHandler+0x1da>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0208 	bic.w	r2, r2, #8
 8002860:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	223f      	movs	r2, #63	; 0x3f
 8002868:	409a      	lsls	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	2b00      	cmp	r3, #0
 8002884:	d07e      	beq.n	8002984 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
        }
        return;
 800288e:	e079      	b.n	8002984 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01d      	beq.n	80028da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d031      	beq.n	8002918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e02c      	b.n	8002918 <HAL_DMA_IRQHandler+0x2a0>
 80028be:	bf00      	nop
 80028c0:	20000004 	.word	0x20000004
 80028c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e01e      	b.n	8002918 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0210 	bic.w	r2, r2, #16
 80028f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	2b00      	cmp	r3, #0
 800291e:	d032      	beq.n	8002986 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d022      	beq.n	8002972 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2205      	movs	r2, #5
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3301      	adds	r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	d307      	bcc.n	8002960 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f2      	bne.n	8002944 <HAL_DMA_IRQHandler+0x2cc>
 800295e:	e000      	b.n	8002962 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002960:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
 8002982:	e000      	b.n	8002986 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002984:	bf00      	nop
    }
  }
}
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d108      	bne.n	80029cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ca:	e007      	b.n	80029dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3b10      	subs	r3, #16
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <DMA_CalcBaseAndBitshift+0x64>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <DMA_CalcBaseAndBitshift+0x68>)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d909      	bls.n	8002a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	1d1a      	adds	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	659a      	str	r2, [r3, #88]	; 0x58
 8002a28:	e007      	b.n	8002a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	aaaaaaab 	.word	0xaaaaaaab
 8002a50:	080099c8 	.word	0x080099c8

08002a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11f      	bne.n	8002aae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d856      	bhi.n	8002b22 <DMA_CheckFifoParam+0xce>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <DMA_CheckFifoParam+0x28>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a9f 	.word	0x08002a9f
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002b23 	.word	0x08002b23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d046      	beq.n	8002b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9c:	e043      	b.n	8002b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aa6:	d140      	bne.n	8002b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aac:	e03d      	b.n	8002b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab6:	d121      	bne.n	8002afc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d837      	bhi.n	8002b2e <DMA_CheckFifoParam+0xda>
 8002abe:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <DMA_CheckFifoParam+0x70>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002adb 	.word	0x08002adb
 8002acc:	08002ad5 	.word	0x08002ad5
 8002ad0:	08002aed 	.word	0x08002aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e030      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d025      	beq.n	8002b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aea:	e022      	b.n	8002b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002af4:	d11f      	bne.n	8002b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002afa:	e01c      	b.n	8002b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d903      	bls.n	8002b0a <DMA_CheckFifoParam+0xb6>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d003      	beq.n	8002b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b08:	e018      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0e:	e015      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00e      	beq.n	8002b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e00b      	b.n	8002b3a <DMA_CheckFifoParam+0xe6>
      break;
 8002b22:	bf00      	nop
 8002b24:	e00a      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
 8002b28:	e008      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e006      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e004      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d106      	bne.n	8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f001 b911 	b.w	8003d96 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f001 b8ff 	b.w	8003d96 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f001 b8f7 	b.w	8003d96 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f041 80e5 	bne.w	8003d88 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bda:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f001 f910 	bl	8003e10 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b8d      	ldr	r3, [pc, #564]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d960      	bls.n	8002cbe <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a8b      	ldr	r2, [pc, #556]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d057      	beq.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a8a      	ldr	r2, [pc, #552]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d050      	beq.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a88      	ldr	r2, [pc, #544]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d049      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a87      	ldr	r2, [pc, #540]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d042      	beq.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a85      	ldr	r2, [pc, #532]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d03a      	beq.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a84      	ldr	r2, [pc, #528]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d032      	beq.n	8002c9e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a82      	ldr	r2, [pc, #520]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02a      	beq.n	8002c98 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a81      	ldr	r2, [pc, #516]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7f      	ldr	r2, [pc, #508]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01a      	beq.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7e      	ldr	r2, [pc, #504]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d012      	beq.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7c      	ldr	r2, [pc, #496]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00a      	beq.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7b      	ldr	r2, [pc, #492]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002c74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c78:	e01e      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c7e:	e01b      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c84:	e018      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c8a:	e015      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c90:	e012      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c96:	e00f      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c9c:	e00c      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ca2:	e009      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ca8:	e006      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002caa:	2320      	movs	r3, #32
 8002cac:	e004      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e002      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	4a69      	ldr	r2, [pc, #420]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002cba:	60d3      	str	r3, [r2, #12]
 8002cbc:	e14f      	b.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d960      	bls.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a58      	ldr	r2, [pc, #352]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d057      	beq.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d050      	beq.n	8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a55      	ldr	r2, [pc, #340]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d049      	beq.n	8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d042      	beq.n	8002d78 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03a      	beq.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d032      	beq.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a4f      	ldr	r2, [pc, #316]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d02a      	beq.n	8002d66 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a4d      	ldr	r2, [pc, #308]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d022      	beq.n	8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a4c      	ldr	r2, [pc, #304]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d01a      	beq.n	8002d5a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d012      	beq.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a49      	ldr	r2, [pc, #292]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00a      	beq.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a47      	ldr	r2, [pc, #284]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d102      	bne.n	8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002d42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d46:	e01e      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d4c:	e01b      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d52:	e018      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d58:	e015      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d5e:	e012      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d64:	e00f      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d6a:	e00c      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	e009      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d76:	e006      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d78:	2320      	movs	r3, #32
 8002d7a:	e004      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e002      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d80:	2320      	movs	r3, #32
 8002d82:	e000      	b.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d84:	2320      	movs	r3, #32
 8002d86:	4a36      	ldr	r2, [pc, #216]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002d88:	6093      	str	r3, [r2, #8]
 8002d8a:	e0e8      	b.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f240 8082 	bls.w	8002e9e <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d078      	beq.n	8002e96 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d071      	beq.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d06a      	beq.n	8002e8e <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d063      	beq.n	8002e8a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d05b      	beq.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d053      	beq.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04b      	beq.n	8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d043      	beq.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d03b      	beq.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d012      	beq.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00a      	beq.n	8002e1e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d102      	bne.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002e12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e16:	e03f      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e1c:	e03c      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e22:	e039      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e28:	e036      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e2a:	bf00      	nop
 8002e2c:	40026458 	.word	0x40026458
 8002e30:	40026010 	.word	0x40026010
 8002e34:	40026410 	.word	0x40026410
 8002e38:	40026070 	.word	0x40026070
 8002e3c:	40026470 	.word	0x40026470
 8002e40:	40026028 	.word	0x40026028
 8002e44:	40026428 	.word	0x40026428
 8002e48:	40026088 	.word	0x40026088
 8002e4c:	40026488 	.word	0x40026488
 8002e50:	40026040 	.word	0x40026040
 8002e54:	40026440 	.word	0x40026440
 8002e58:	400260a0 	.word	0x400260a0
 8002e5c:	400264a0 	.word	0x400264a0
 8002e60:	40026400 	.word	0x40026400
 8002e64:	400260b8 	.word	0x400260b8
 8002e68:	40026058 	.word	0x40026058
 8002e6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e70:	e012      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e76:	e00f      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e7c:	e00c      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e82:	e009      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e88:	e006      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e004      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e002      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e92:	2320      	movs	r3, #32
 8002e94:	e000      	b.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e96:	2320      	movs	r3, #32
 8002e98:	4a8c      	ldr	r2, [pc, #560]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002e9a:	60d3      	str	r3, [r2, #12]
 8002e9c:	e05f      	b.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a8b      	ldr	r2, [pc, #556]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d057      	beq.n	8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a89      	ldr	r2, [pc, #548]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d050      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a88      	ldr	r2, [pc, #544]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d049      	beq.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a86      	ldr	r2, [pc, #536]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d042      	beq.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a85      	ldr	r2, [pc, #532]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d03a      	beq.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a83      	ldr	r2, [pc, #524]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d032      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a82      	ldr	r2, [pc, #520]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02a      	beq.n	8002f3a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a80      	ldr	r2, [pc, #512]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d022      	beq.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7f      	ldr	r2, [pc, #508]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d01a      	beq.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a7d      	ldr	r2, [pc, #500]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d012      	beq.n	8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a7c      	ldr	r2, [pc, #496]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00a      	beq.n	8002f22 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a7a      	ldr	r2, [pc, #488]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d102      	bne.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002f16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f1a:	e01e      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f20:	e01b      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f26:	e018      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f2c:	e015      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f32:	e012      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f38:	e00f      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f3e:	e00c      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f44:	e009      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f4a:	e006      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e004      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f50:	2320      	movs	r3, #32
 8002f52:	e002      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f54:	2320      	movs	r3, #32
 8002f56:	e000      	b.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f58:	2320      	movs	r3, #32
 8002f5a:	4a5c      	ldr	r2, [pc, #368]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002f5c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d960      	bls.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d057      	beq.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d050      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a55      	ldr	r2, [pc, #340]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d049      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a53      	ldr	r2, [pc, #332]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d042      	beq.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d03a      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d032      	beq.n	800300c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4f      	ldr	r2, [pc, #316]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d02a      	beq.n	8003006 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4d      	ldr	r2, [pc, #308]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d022      	beq.n	8003000 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4c      	ldr	r2, [pc, #304]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d01a      	beq.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d012      	beq.n	8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a49      	ldr	r2, [pc, #292]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00a      	beq.n	8002fee <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a47      	ldr	r2, [pc, #284]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d102      	bne.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002fe2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fe6:	e01e      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002fe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fec:	e01b      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002fee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ff2:	e018      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ff4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ff8:	e015      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ffe:	e012      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003004:	e00f      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300a:	e00c      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800300c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003010:	e009      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003016:	e006      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003018:	2310      	movs	r3, #16
 800301a:	e004      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800301c:	2310      	movs	r3, #16
 800301e:	e002      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003020:	2310      	movs	r3, #16
 8003022:	e000      	b.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003024:	2310      	movs	r3, #16
 8003026:	4a37      	ldr	r2, [pc, #220]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003028:	60d3      	str	r3, [r2, #12]
 800302a:	e14f      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b35      	ldr	r3, [pc, #212]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003034:	429a      	cmp	r2, r3
 8003036:	f240 8082 	bls.w	800313e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d078      	beq.n	8003136 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d071      	beq.n	8003132 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d06a      	beq.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d063      	beq.n	800312a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d05b      	beq.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d053      	beq.n	800311e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d04b      	beq.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d043      	beq.n	8003112 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d03b      	beq.n	800310c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d012      	beq.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00a      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d102      	bne.n	80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80030b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030b6:	e03f      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030bc:	e03c      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030c2:	e039      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030c8:	e036      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030ca:	bf00      	nop
 80030cc:	40026000 	.word	0x40026000
 80030d0:	40026010 	.word	0x40026010
 80030d4:	40026410 	.word	0x40026410
 80030d8:	40026070 	.word	0x40026070
 80030dc:	40026470 	.word	0x40026470
 80030e0:	40026028 	.word	0x40026028
 80030e4:	40026428 	.word	0x40026428
 80030e8:	40026088 	.word	0x40026088
 80030ec:	40026488 	.word	0x40026488
 80030f0:	40026040 	.word	0x40026040
 80030f4:	40026440 	.word	0x40026440
 80030f8:	400260a0 	.word	0x400260a0
 80030fc:	400264a0 	.word	0x400264a0
 8003100:	40026458 	.word	0x40026458
 8003104:	40026400 	.word	0x40026400
 8003108:	400260b8 	.word	0x400260b8
 800310c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003110:	e012      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003116:	e00f      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800311c:	e00c      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800311e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003122:	e009      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003128:	e006      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800312a:	2310      	movs	r3, #16
 800312c:	e004      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800312e:	2310      	movs	r3, #16
 8003130:	e002      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003132:	2310      	movs	r3, #16
 8003134:	e000      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003136:	2310      	movs	r3, #16
 8003138:	4a8c      	ldr	r2, [pc, #560]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800313a:	6093      	str	r3, [r2, #8]
 800313c:	e0c6      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	4b8a      	ldr	r3, [pc, #552]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8003146:	429a      	cmp	r2, r3
 8003148:	d960      	bls.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a89      	ldr	r2, [pc, #548]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d057      	beq.n	8003204 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a87      	ldr	r2, [pc, #540]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d050      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a86      	ldr	r2, [pc, #536]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d049      	beq.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a84      	ldr	r2, [pc, #528]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d042      	beq.n	80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a83      	ldr	r2, [pc, #524]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d03a      	beq.n	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a81      	ldr	r2, [pc, #516]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d032      	beq.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a80      	ldr	r2, [pc, #512]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02a      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a7e      	ldr	r2, [pc, #504]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d022      	beq.n	80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7d      	ldr	r2, [pc, #500]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d01a      	beq.n	80031da <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a7b      	ldr	r2, [pc, #492]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d012      	beq.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7a      	ldr	r2, [pc, #488]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00a      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a78      	ldr	r2, [pc, #480]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d102      	bne.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80031c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031c6:	e01e      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031cc:	e01b      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031d2:	e018      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031d8:	e015      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031de:	e012      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e4:	e00f      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ea:	e00c      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f0:	e009      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f6:	e006      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031f8:	2310      	movs	r3, #16
 80031fa:	e004      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031fc:	2310      	movs	r3, #16
 80031fe:	e002      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003200:	2310      	movs	r3, #16
 8003202:	e000      	b.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003204:	2310      	movs	r3, #16
 8003206:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003208:	60d3      	str	r3, [r2, #12]
 800320a:	e05f      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a58      	ldr	r2, [pc, #352]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d057      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a57      	ldr	r2, [pc, #348]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d050      	beq.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a55      	ldr	r2, [pc, #340]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d049      	beq.n	80032be <HAL_DMAEx_MultiBufferStart_IT+0x772>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a54      	ldr	r2, [pc, #336]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d042      	beq.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a52      	ldr	r2, [pc, #328]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d03a      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a51      	ldr	r2, [pc, #324]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d032      	beq.n	80032ae <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a4f      	ldr	r2, [pc, #316]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02a      	beq.n	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a4e      	ldr	r2, [pc, #312]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a4c      	ldr	r2, [pc, #304]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01a      	beq.n	800329c <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4b      	ldr	r2, [pc, #300]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d012      	beq.n	8003296 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a49      	ldr	r2, [pc, #292]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00a      	beq.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a48      	ldr	r2, [pc, #288]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d102      	bne.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003284:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003288:	e01e      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800328a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800328e:	e01b      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003290:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003294:	e018      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003296:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800329a:	e015      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800329c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032a0:	e012      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a6:	e00f      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ac:	e00c      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b2:	e009      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b8:	e006      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032ba:	2310      	movs	r3, #16
 80032bc:	e004      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032be:	2310      	movs	r3, #16
 80032c0:	e002      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032c2:	2310      	movs	r3, #16
 80032c4:	e000      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032c6:	2310      	movs	r3, #16
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80032ca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f240 8082 	bls.w	80033de <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d078      	beq.n	80033d6 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a23      	ldr	r2, [pc, #140]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d071      	beq.n	80033d2 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d06a      	beq.n	80033ce <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a20      	ldr	r2, [pc, #128]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d063      	beq.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d05b      	beq.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d053      	beq.n	80033be <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04b      	beq.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d043      	beq.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a19      	ldr	r2, [pc, #100]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d03b      	beq.n	80033ac <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a17      	ldr	r2, [pc, #92]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d012      	beq.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00a      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d102      	bne.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003352:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003356:	e03f      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335c:	e03c      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800335e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003362:	e039      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003364:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003368:	e036      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800336a:	bf00      	nop
 800336c:	40026400 	.word	0x40026400
 8003370:	40026058 	.word	0x40026058
 8003374:	40026010 	.word	0x40026010
 8003378:	40026410 	.word	0x40026410
 800337c:	40026070 	.word	0x40026070
 8003380:	40026470 	.word	0x40026470
 8003384:	40026028 	.word	0x40026028
 8003388:	40026428 	.word	0x40026428
 800338c:	40026088 	.word	0x40026088
 8003390:	40026488 	.word	0x40026488
 8003394:	40026040 	.word	0x40026040
 8003398:	40026440 	.word	0x40026440
 800339c:	400260a0 	.word	0x400260a0
 80033a0:	400264a0 	.word	0x400264a0
 80033a4:	40026000 	.word	0x40026000
 80033a8:	40026458 	.word	0x40026458
 80033ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033b0:	e012      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033b6:	e00f      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033bc:	e00c      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c2:	e009      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c8:	e006      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033ca:	2308      	movs	r3, #8
 80033cc:	e004      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033ce:	2308      	movs	r3, #8
 80033d0:	e002      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033d2:	2308      	movs	r3, #8
 80033d4:	e000      	b.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033d6:	2308      	movs	r3, #8
 80033d8:	4a8c      	ldr	r2, [pc, #560]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80033da:	60d3      	str	r3, [r2, #12]
 80033dc:	e14e      	b.n	800367c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b8a      	ldr	r3, [pc, #552]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d960      	bls.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a89      	ldr	r2, [pc, #548]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d057      	beq.n	80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a87      	ldr	r2, [pc, #540]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d050      	beq.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a86      	ldr	r2, [pc, #536]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d049      	beq.n	800349c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a84      	ldr	r2, [pc, #528]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d042      	beq.n	8003498 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a83      	ldr	r2, [pc, #524]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d03a      	beq.n	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a81      	ldr	r2, [pc, #516]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d032      	beq.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a80      	ldr	r2, [pc, #512]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02a      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a7e      	ldr	r2, [pc, #504]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a7d      	ldr	r2, [pc, #500]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01a      	beq.n	800347a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a7b      	ldr	r2, [pc, #492]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d012      	beq.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7a      	ldr	r2, [pc, #488]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00a      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a78      	ldr	r2, [pc, #480]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d102      	bne.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003462:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003466:	e01e      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346c:	e01b      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800346e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003472:	e018      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003474:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003478:	e015      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800347a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800347e:	e012      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003484:	e00f      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348a:	e00c      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800348c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003490:	e009      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003496:	e006      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003498:	2308      	movs	r3, #8
 800349a:	e004      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800349c:	2308      	movs	r3, #8
 800349e:	e002      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034a0:	2308      	movs	r3, #8
 80034a2:	e000      	b.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034a4:	2308      	movs	r3, #8
 80034a6:	4a59      	ldr	r2, [pc, #356]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80034a8:	6093      	str	r3, [r2, #8]
 80034aa:	e0e7      	b.n	800367c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b64      	ldr	r3, [pc, #400]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d960      	bls.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a55      	ldr	r2, [pc, #340]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d057      	beq.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a54      	ldr	r2, [pc, #336]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d050      	beq.n	800356e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d049      	beq.n	800356a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a51      	ldr	r2, [pc, #324]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d042      	beq.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a4f      	ldr	r2, [pc, #316]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d03a      	beq.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4e      	ldr	r2, [pc, #312]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d032      	beq.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a4c      	ldr	r2, [pc, #304]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02a      	beq.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a4b      	ldr	r2, [pc, #300]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a49      	ldr	r2, [pc, #292]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01a      	beq.n	8003548 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a48      	ldr	r2, [pc, #288]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d012      	beq.n	8003542 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a46      	ldr	r2, [pc, #280]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00a      	beq.n	800353c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a45      	ldr	r2, [pc, #276]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003530:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003534:	e01e      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353a:	e01b      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800353c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003540:	e018      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003542:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003546:	e015      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800354c:	e012      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800354e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003552:	e00f      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003558:	e00c      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800355a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800355e:	e009      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003564:	e006      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003566:	2308      	movs	r3, #8
 8003568:	e004      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800356a:	2308      	movs	r3, #8
 800356c:	e002      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800356e:	2308      	movs	r3, #8
 8003570:	e000      	b.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003572:	2308      	movs	r3, #8
 8003574:	4a34      	ldr	r2, [pc, #208]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003576:	60d3      	str	r3, [r2, #12]
 8003578:	e080      	b.n	800367c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a25      	ldr	r2, [pc, #148]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d078      	beq.n	8003676 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d071      	beq.n	8003672 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d06a      	beq.n	800366e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a20      	ldr	r2, [pc, #128]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d063      	beq.n	800366a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d05b      	beq.n	8003664 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d053      	beq.n	800365e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d04b      	beq.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d043      	beq.n	8003652 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d03b      	beq.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a17      	ldr	r2, [pc, #92]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d012      	beq.n	8003604 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00a      	beq.n	80035fe <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d102      	bne.n	80035f8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80035f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035f6:	e03f      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80035f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035fc:	e03c      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80035fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003602:	e039      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003604:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003608:	e036      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800360a:	bf00      	nop
 800360c:	40026400 	.word	0x40026400
 8003610:	400260b8 	.word	0x400260b8
 8003614:	40026010 	.word	0x40026010
 8003618:	40026410 	.word	0x40026410
 800361c:	40026070 	.word	0x40026070
 8003620:	40026470 	.word	0x40026470
 8003624:	40026028 	.word	0x40026028
 8003628:	40026428 	.word	0x40026428
 800362c:	40026088 	.word	0x40026088
 8003630:	40026488 	.word	0x40026488
 8003634:	40026040 	.word	0x40026040
 8003638:	40026440 	.word	0x40026440
 800363c:	400260a0 	.word	0x400260a0
 8003640:	400264a0 	.word	0x400264a0
 8003644:	40026058 	.word	0x40026058
 8003648:	40026000 	.word	0x40026000
 800364c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003650:	e012      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003656:	e00f      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800365c:	e00c      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800365e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003662:	e009      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003668:	e006      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800366a:	2308      	movs	r3, #8
 800366c:	e004      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800366e:	2308      	movs	r3, #8
 8003670:	e002      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003672:	2308      	movs	r3, #8
 8003674:	e000      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003676:	2308      	movs	r3, #8
 8003678:	4a8a      	ldr	r2, [pc, #552]	; (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800367a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4b89      	ldr	r3, [pc, #548]	; (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003684:	429a      	cmp	r2, r3
 8003686:	d960      	bls.n	800374a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a87      	ldr	r2, [pc, #540]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d057      	beq.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a86      	ldr	r2, [pc, #536]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d050      	beq.n	800373e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a84      	ldr	r2, [pc, #528]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d049      	beq.n	800373a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a83      	ldr	r2, [pc, #524]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d042      	beq.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a81      	ldr	r2, [pc, #516]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d03a      	beq.n	8003730 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a80      	ldr	r2, [pc, #512]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d032      	beq.n	800372a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a7e      	ldr	r2, [pc, #504]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d02a      	beq.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7d      	ldr	r2, [pc, #500]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7b      	ldr	r2, [pc, #492]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01a      	beq.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7a      	ldr	r2, [pc, #488]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d012      	beq.n	8003712 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a78      	ldr	r2, [pc, #480]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00a      	beq.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a77      	ldr	r2, [pc, #476]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d102      	bne.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003700:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003704:	e01e      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800370a:	e01b      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800370c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003710:	e018      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003712:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003716:	e015      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003718:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800371c:	e012      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800371e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003722:	e00f      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003728:	e00c      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800372a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800372e:	e009      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003734:	e006      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003736:	2304      	movs	r3, #4
 8003738:	e004      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800373a:	2304      	movs	r3, #4
 800373c:	e002      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800373e:	2304      	movs	r3, #4
 8003740:	e000      	b.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003742:	2304      	movs	r3, #4
 8003744:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003746:	60d3      	str	r3, [r2, #12]
 8003748:	e150      	b.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003752:	429a      	cmp	r2, r3
 8003754:	d960      	bls.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a54      	ldr	r2, [pc, #336]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d057      	beq.n	8003810 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d050      	beq.n	800380c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a51      	ldr	r2, [pc, #324]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d049      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d042      	beq.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a4e      	ldr	r2, [pc, #312]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d03a      	beq.n	80037fe <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a4c      	ldr	r2, [pc, #304]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d032      	beq.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a4b      	ldr	r2, [pc, #300]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d02a      	beq.n	80037f2 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a49      	ldr	r2, [pc, #292]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a48      	ldr	r2, [pc, #288]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d01a      	beq.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a46      	ldr	r2, [pc, #280]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d012      	beq.n	80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a45      	ldr	r2, [pc, #276]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00a      	beq.n	80037da <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a43      	ldr	r2, [pc, #268]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d102      	bne.n	80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80037ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037d2:	e01e      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d8:	e01b      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037de:	e018      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037e4:	e015      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037ea:	e012      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f0:	e00f      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f6:	e00c      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037fc:	e009      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003802:	e006      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003804:	2304      	movs	r3, #4
 8003806:	e004      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003808:	2304      	movs	r3, #4
 800380a:	e002      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800380c:	2304      	movs	r3, #4
 800380e:	e000      	b.n	8003812 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003810:	2304      	movs	r3, #4
 8003812:	4a32      	ldr	r2, [pc, #200]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003814:	6093      	str	r3, [r2, #8]
 8003816:	e0e9      	b.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003820:	429a      	cmp	r2, r3
 8003822:	f240 8083 	bls.w	800392c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a20      	ldr	r2, [pc, #128]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d079      	beq.n	8003924 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d072      	beq.n	8003920 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d06b      	beq.n	800391c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d064      	beq.n	8003918 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d05c      	beq.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d054      	beq.n	800390c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d04c      	beq.n	8003906 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d044      	beq.n	8003900 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d03c      	beq.n	80038fa <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d034      	beq.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d02c      	beq.n	80038ee <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d124      	bne.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800389e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038a2:	e040      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80038a4:	40026000 	.word	0x40026000
 80038a8:	40026458 	.word	0x40026458
 80038ac:	40026010 	.word	0x40026010
 80038b0:	40026410 	.word	0x40026410
 80038b4:	40026070 	.word	0x40026070
 80038b8:	40026470 	.word	0x40026470
 80038bc:	40026028 	.word	0x40026028
 80038c0:	40026428 	.word	0x40026428
 80038c4:	40026088 	.word	0x40026088
 80038c8:	40026488 	.word	0x40026488
 80038cc:	40026040 	.word	0x40026040
 80038d0:	40026440 	.word	0x40026440
 80038d4:	400260a0 	.word	0x400260a0
 80038d8:	400264a0 	.word	0x400264a0
 80038dc:	40026400 	.word	0x40026400
 80038e0:	400260b8 	.word	0x400260b8
 80038e4:	40026058 	.word	0x40026058
 80038e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ec:	e01b      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80038ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038f2:	e018      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80038f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038f8:	e015      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80038fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038fe:	e012      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003904:	e00f      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800390a:	e00c      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800390c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003910:	e009      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003916:	e006      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003918:	2304      	movs	r3, #4
 800391a:	e004      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800391c:	2304      	movs	r3, #4
 800391e:	e002      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003920:	2304      	movs	r3, #4
 8003922:	e000      	b.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003924:	2304      	movs	r3, #4
 8003926:	4a8b      	ldr	r2, [pc, #556]	; (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003928:	60d3      	str	r3, [r2, #12]
 800392a:	e05f      	b.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a89      	ldr	r2, [pc, #548]	; (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d057      	beq.n	80039e6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a88      	ldr	r2, [pc, #544]	; (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d050      	beq.n	80039e2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a86      	ldr	r2, [pc, #536]	; (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d049      	beq.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a85      	ldr	r2, [pc, #532]	; (8003b64 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d042      	beq.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a83      	ldr	r2, [pc, #524]	; (8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d03a      	beq.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a82      	ldr	r2, [pc, #520]	; (8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d032      	beq.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02a      	beq.n	80039c8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7f      	ldr	r2, [pc, #508]	; (8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7d      	ldr	r2, [pc, #500]	; (8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01a      	beq.n	80039bc <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7c      	ldr	r2, [pc, #496]	; (8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d012      	beq.n	80039b6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a7a      	ldr	r2, [pc, #488]	; (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00a      	beq.n	80039b0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a79      	ldr	r2, [pc, #484]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d102      	bne.n	80039aa <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80039a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039a8:	e01e      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ae:	e01b      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039b4:	e018      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039ba:	e015      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039c0:	e012      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c6:	e00f      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039cc:	e00c      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d2:	e009      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d8:	e006      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039da:	2304      	movs	r3, #4
 80039dc:	e004      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039de:	2304      	movs	r3, #4
 80039e0:	e002      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039e2:	2304      	movs	r3, #4
 80039e4:	e000      	b.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039e6:	2304      	movs	r3, #4
 80039e8:	4a5a      	ldr	r2, [pc, #360]	; (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80039ea:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d95c      	bls.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d053      	beq.n	8003aaa <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a55      	ldr	r2, [pc, #340]	; (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d04c      	beq.n	8003aa6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a53      	ldr	r2, [pc, #332]	; (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d045      	beq.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a52      	ldr	r2, [pc, #328]	; (8003b64 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03e      	beq.n	8003a9e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d037      	beq.n	8003a9a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a4f      	ldr	r2, [pc, #316]	; (8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d030      	beq.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a4d      	ldr	r2, [pc, #308]	; (8003b70 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d029      	beq.n	8003a92 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a4c      	ldr	r2, [pc, #304]	; (8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01a      	beq.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a49      	ldr	r2, [pc, #292]	; (8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d012      	beq.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a47      	ldr	r2, [pc, #284]	; (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00a      	beq.n	8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a46      	ldr	r2, [pc, #280]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d102      	bne.n	8003a76 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a74:	e01a      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a7a:	e017      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a80:	e014      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a86:	e011      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a8c:	e00e      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a8e:	2340      	movs	r3, #64	; 0x40
 8003a90:	e00c      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a92:	2340      	movs	r3, #64	; 0x40
 8003a94:	e00a      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a96:	2340      	movs	r3, #64	; 0x40
 8003a98:	e008      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	e006      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e004      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e002      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4a37      	ldr	r2, [pc, #220]	; (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003aae:	60d3      	str	r3, [r2, #12]
 8003ab0:	e141      	b.n	8003d36 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d97c      	bls.n	8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d073      	beq.n	8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d06c      	beq.n	8003bac <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d065      	beq.n	8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d05e      	beq.n	8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d057      	beq.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d050      	beq.n	8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d049      	beq.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d042      	beq.n	8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01a      	beq.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d012      	beq.n	8003b48 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00a      	beq.n	8003b42 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d102      	bne.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3a:	e03a      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b40:	e037      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b46:	e034      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b4c:	e031      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b52:	e02e      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b54:	40026000 	.word	0x40026000
 8003b58:	40026010 	.word	0x40026010
 8003b5c:	40026410 	.word	0x40026410
 8003b60:	40026070 	.word	0x40026070
 8003b64:	40026470 	.word	0x40026470
 8003b68:	40026028 	.word	0x40026028
 8003b6c:	40026428 	.word	0x40026428
 8003b70:	40026088 	.word	0x40026088
 8003b74:	40026488 	.word	0x40026488
 8003b78:	40026040 	.word	0x40026040
 8003b7c:	40026440 	.word	0x40026440
 8003b80:	400260a0 	.word	0x400260a0
 8003b84:	400264a0 	.word	0x400264a0
 8003b88:	40026458 	.word	0x40026458
 8003b8c:	40026400 	.word	0x40026400
 8003b90:	400260b8 	.word	0x400260b8
 8003b94:	2340      	movs	r3, #64	; 0x40
 8003b96:	e00c      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b98:	2340      	movs	r3, #64	; 0x40
 8003b9a:	e00a      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b9c:	2340      	movs	r3, #64	; 0x40
 8003b9e:	e008      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ba0:	2340      	movs	r3, #64	; 0x40
 8003ba2:	e006      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e004      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e002      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4a7b      	ldr	r2, [pc, #492]	; (8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003bb4:	6093      	str	r3, [r2, #8]
 8003bb6:	e0be      	b.n	8003d36 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b79      	ldr	r3, [pc, #484]	; (8003da4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d95c      	bls.n	8003c7e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a77      	ldr	r2, [pc, #476]	; (8003da8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d053      	beq.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a76      	ldr	r2, [pc, #472]	; (8003dac <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d04c      	beq.n	8003c72 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a74      	ldr	r2, [pc, #464]	; (8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d045      	beq.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a73      	ldr	r2, [pc, #460]	; (8003db4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d03e      	beq.n	8003c6a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a71      	ldr	r2, [pc, #452]	; (8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d037      	beq.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a70      	ldr	r2, [pc, #448]	; (8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d030      	beq.n	8003c62 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a6e      	ldr	r2, [pc, #440]	; (8003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d029      	beq.n	8003c5e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a6d      	ldr	r2, [pc, #436]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a6b      	ldr	r2, [pc, #428]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01a      	beq.n	8003c54 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d012      	beq.n	8003c4e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00a      	beq.n	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a67      	ldr	r2, [pc, #412]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d102      	bne.n	8003c42 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c40:	e01a      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c46:	e017      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c4c:	e014      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c52:	e011      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c58:	e00e      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	e00c      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	e00a      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c62:	2340      	movs	r3, #64	; 0x40
 8003c64:	e008      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c66:	2340      	movs	r3, #64	; 0x40
 8003c68:	e006      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e004      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e002      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4a57      	ldr	r2, [pc, #348]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003c7a:	60d3      	str	r3, [r2, #12]
 8003c7c:	e05b      	b.n	8003d36 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a49      	ldr	r2, [pc, #292]	; (8003da8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d053      	beq.n	8003d30 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a47      	ldr	r2, [pc, #284]	; (8003dac <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04c      	beq.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a46      	ldr	r2, [pc, #280]	; (8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d045      	beq.n	8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a44      	ldr	r2, [pc, #272]	; (8003db4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03e      	beq.n	8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a43      	ldr	r2, [pc, #268]	; (8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d037      	beq.n	8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a41      	ldr	r2, [pc, #260]	; (8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d030      	beq.n	8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a40      	ldr	r2, [pc, #256]	; (8003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d029      	beq.n	8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3e      	ldr	r2, [pc, #248]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d022      	beq.n	8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3d      	ldr	r2, [pc, #244]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d01a      	beq.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d012      	beq.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00a      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d102      	bne.n	8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cfa:	e01a      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d00:	e017      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d06:	e014      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d0c:	e011      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d12:	e00e      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d14:	2340      	movs	r3, #64	; 0x40
 8003d16:	e00c      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d18:	2340      	movs	r3, #64	; 0x40
 8003d1a:	e00a      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d1c:	2340      	movs	r3, #64	; 0x40
 8003d1e:	e008      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d20:	2340      	movs	r3, #64	; 0x40
 8003d22:	e006      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e004      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e002      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d30:	2301      	movs	r3, #1
 8003d32:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003d34:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0216 	orr.w	r2, r2, #22
 8003d44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0208 	orr.w	r2, r2, #8
 8003d74:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e005      	b.n	8003d94 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
 8003d92:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40026400 	.word	0x40026400
 8003da4:	40026058 	.word	0x40026058
 8003da8:	40026010 	.word	0x40026010
 8003dac:	40026410 	.word	0x40026410
 8003db0:	40026070 	.word	0x40026070
 8003db4:	40026470 	.word	0x40026470
 8003db8:	40026028 	.word	0x40026028
 8003dbc:	40026428 	.word	0x40026428
 8003dc0:	40026088 	.word	0x40026088
 8003dc4:	40026488 	.word	0x40026488
 8003dc8:	40026040 	.word	0x40026040
 8003dcc:	40026440 	.word	0x40026440
 8003dd0:	400260a0 	.word	0x400260a0
 8003dd4:	400264a0 	.word	0x400264a0
 8003dd8:	40026000 	.word	0x40026000

08003ddc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	e003      	b.n	8003e02 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d108      	bne.n	8003e40 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e3e:	e007      	b.n	8003e50 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e165      	b.n	8004144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e78:	2201      	movs	r2, #1
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	f040 8154 	bne.w	800413e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d005      	beq.n	8003eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d130      	bne.n	8003f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	2203      	movs	r2, #3
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 0201 	and.w	r2, r3, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d017      	beq.n	8003f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d123      	bne.n	8003fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3208      	adds	r2, #8
 8003f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	220f      	movs	r2, #15
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80ae 	beq.w	800413e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b5d      	ldr	r3, [pc, #372]	; (800415c <HAL_GPIO_Init+0x300>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a5c      	ldr	r2, [pc, #368]	; (800415c <HAL_GPIO_Init+0x300>)
 8003fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b5a      	ldr	r3, [pc, #360]	; (800415c <HAL_GPIO_Init+0x300>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ffe:	4a58      	ldr	r2, [pc, #352]	; (8004160 <HAL_GPIO_Init+0x304>)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4f      	ldr	r2, [pc, #316]	; (8004164 <HAL_GPIO_Init+0x308>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d025      	beq.n	8004076 <HAL_GPIO_Init+0x21a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4e      	ldr	r2, [pc, #312]	; (8004168 <HAL_GPIO_Init+0x30c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <HAL_GPIO_Init+0x216>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4d      	ldr	r2, [pc, #308]	; (800416c <HAL_GPIO_Init+0x310>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d019      	beq.n	800406e <HAL_GPIO_Init+0x212>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4c      	ldr	r2, [pc, #304]	; (8004170 <HAL_GPIO_Init+0x314>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0x20e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <HAL_GPIO_Init+0x318>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_Init+0x20a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <HAL_GPIO_Init+0x31c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x206>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a49      	ldr	r2, [pc, #292]	; (800417c <HAL_GPIO_Init+0x320>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_Init+0x202>
 800405a:	2306      	movs	r3, #6
 800405c:	e00c      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 800405e:	2307      	movs	r3, #7
 8004060:	e00a      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004062:	2305      	movs	r3, #5
 8004064:	e008      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004066:	2304      	movs	r3, #4
 8004068:	e006      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 800406a:	2303      	movs	r3, #3
 800406c:	e004      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 800406e:	2302      	movs	r3, #2
 8004070:	e002      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004076:	2300      	movs	r3, #0
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f002 0203 	and.w	r2, r2, #3
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4093      	lsls	r3, r2
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004088:	4935      	ldr	r1, [pc, #212]	; (8004160 <HAL_GPIO_Init+0x304>)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_GPIO_Init+0x324>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ba:	4a31      	ldr	r2, [pc, #196]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c0:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_GPIO_Init+0x324>)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <HAL_GPIO_Init+0x324>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004138:	4a11      	ldr	r2, [pc, #68]	; (8004180 <HAL_GPIO_Init+0x324>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3301      	adds	r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b0f      	cmp	r3, #15
 8004148:	f67f ae96 	bls.w	8003e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	40013800 	.word	0x40013800
 8004164:	40020000 	.word	0x40020000
 8004168:	40020400 	.word	0x40020400
 800416c:	40020800 	.word	0x40020800
 8004170:	40020c00 	.word	0x40020c00
 8004174:	40021000 	.word	0x40021000
 8004178:	40021400 	.word	0x40021400
 800417c:	40021800 	.word	0x40021800
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
 8004190:	4613      	mov	r3, r2
 8004192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004194:	787b      	ldrb	r3, [r7, #1]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041a0:	e003      	b.n	80041aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	041a      	lsls	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	619a      	str	r2, [r3, #24]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	041a      	lsls	r2, r3, #16
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	400b      	ands	r3, r1
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004202:	4a05      	ldr	r2, [pc, #20]	; (8004218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f806 	bl	800421c <HAL_GPIO_EXTI_Callback>
  }
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40013c00 	.word	0x40013c00

0800421c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e12b      	b.n	800449e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd f936 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	; 0x24
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004298:	f001 fb2c 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 800429c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4a81      	ldr	r2, [pc, #516]	; (80044a8 <HAL_I2C_Init+0x274>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d807      	bhi.n	80042b8 <HAL_I2C_Init+0x84>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a80      	ldr	r2, [pc, #512]	; (80044ac <HAL_I2C_Init+0x278>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	bf94      	ite	ls
 80042b0:	2301      	movls	r3, #1
 80042b2:	2300      	movhi	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e006      	b.n	80042c6 <HAL_I2C_Init+0x92>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_I2C_Init+0x27c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	bf94      	ite	ls
 80042c0:	2301      	movls	r3, #1
 80042c2:	2300      	movhi	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0e7      	b.n	800449e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a78      	ldr	r2, [pc, #480]	; (80044b4 <HAL_I2C_Init+0x280>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	0c9b      	lsrs	r3, r3, #18
 80042d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4a6a      	ldr	r2, [pc, #424]	; (80044a8 <HAL_I2C_Init+0x274>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d802      	bhi.n	8004308 <HAL_I2C_Init+0xd4>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3301      	adds	r3, #1
 8004306:	e009      	b.n	800431c <HAL_I2C_Init+0xe8>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	4a69      	ldr	r2, [pc, #420]	; (80044b8 <HAL_I2C_Init+0x284>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	3301      	adds	r3, #1
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	430b      	orrs	r3, r1
 8004322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800432e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	495c      	ldr	r1, [pc, #368]	; (80044a8 <HAL_I2C_Init+0x274>)
 8004338:	428b      	cmp	r3, r1
 800433a:	d819      	bhi.n	8004370 <HAL_I2C_Init+0x13c>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1e59      	subs	r1, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fbb1 f3f3 	udiv	r3, r1, r3
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004350:	400b      	ands	r3, r1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_I2C_Init+0x138>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1e59      	subs	r1, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fbb1 f3f3 	udiv	r3, r1, r3
 8004364:	3301      	adds	r3, #1
 8004366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436a:	e051      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 800436c:	2304      	movs	r3, #4
 800436e:	e04f      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d111      	bne.n	800439c <HAL_I2C_Init+0x168>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1e58      	subs	r0, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	440b      	add	r3, r1
 8004386:	fbb0 f3f3 	udiv	r3, r0, r3
 800438a:	3301      	adds	r3, #1
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e012      	b.n	80043c2 <HAL_I2C_Init+0x18e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1e58      	subs	r0, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	0099      	lsls	r1, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Init+0x196>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e022      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10e      	bne.n	80043f0 <HAL_I2C_Init+0x1bc>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1e58      	subs	r0, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	440b      	add	r3, r1
 80043e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	e00f      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1e58      	subs	r0, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	0099      	lsls	r1, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	fbb0 f3f3 	udiv	r3, r0, r3
 8004406:	3301      	adds	r3, #1
 8004408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800440c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6809      	ldr	r1, [r1, #0]
 8004414:	4313      	orrs	r3, r2
 8004416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800443e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6911      	ldr	r1, [r2, #16]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68d2      	ldr	r2, [r2, #12]
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	430b      	orrs	r3, r1
 8004452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	000186a0 	.word	0x000186a0
 80044ac:	001e847f 	.word	0x001e847f
 80044b0:	003d08ff 	.word	0x003d08ff
 80044b4:	431bde83 	.word	0x431bde83
 80044b8:	10624dd3 	.word	0x10624dd3

080044bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	461a      	mov	r2, r3
 80044c8:	460b      	mov	r3, r1
 80044ca:	817b      	strh	r3, [r7, #10]
 80044cc:	4613      	mov	r3, r2
 80044ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044d0:	f7fd fb30 	bl	8001b34 <HAL_GetTick>
 80044d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	f040 80e0 	bne.w	80046a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2319      	movs	r3, #25
 80044ea:	2201      	movs	r2, #1
 80044ec:	4970      	ldr	r1, [pc, #448]	; (80046b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fde8 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0d3      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_I2C_Master_Transmit+0x50>
 8004508:	2302      	movs	r3, #2
 800450a:	e0cc      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d007      	beq.n	8004532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2221      	movs	r2, #33	; 0x21
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2210      	movs	r2, #16
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	893a      	ldrh	r2, [r7, #8]
 8004562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a50      	ldr	r2, [pc, #320]	; (80046b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004574:	8979      	ldrh	r1, [r7, #10]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fbbc 	bl	8004cf8 <I2C_MasterRequestWrite>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e08d      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045a0:	e066      	b.n	8004670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fe62 	bl	8005270 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d107      	bne.n	80045ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e06b      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	781a      	ldrb	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b04      	cmp	r3, #4
 800460a:	d11b      	bne.n	8004644 <HAL_I2C_Master_Transmit+0x188>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	d017      	beq.n	8004644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	6a39      	ldr	r1, [r7, #32]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fe52 	bl	80052f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	2b04      	cmp	r3, #4
 800465a:	d107      	bne.n	800466c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e01a      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d194      	bne.n	80045a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	00100002 	.word	0x00100002
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08c      	sub	sp, #48	; 0x30
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	461a      	mov	r2, r3
 80046c4:	460b      	mov	r3, r1
 80046c6:	817b      	strh	r3, [r7, #10]
 80046c8:	4613      	mov	r3, r2
 80046ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046cc:	f7fd fa32 	bl	8001b34 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	f040 820b 	bne.w	8004af6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2319      	movs	r3, #25
 80046e6:	2201      	movs	r2, #1
 80046e8:	497c      	ldr	r1, [pc, #496]	; (80048dc <HAL_I2C_Master_Receive+0x224>)
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fcea 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
 80046f8:	e1fe      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_I2C_Master_Receive+0x50>
 8004704:	2302      	movs	r3, #2
 8004706:	e1f7      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d007      	beq.n	800472e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2222      	movs	r2, #34	; 0x22
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2210      	movs	r2, #16
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	893a      	ldrh	r2, [r7, #8]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a5c      	ldr	r2, [pc, #368]	; (80048e0 <HAL_I2C_Master_Receive+0x228>)
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004770:	8979      	ldrh	r1, [r7, #10]
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fb40 	bl	8004dfc <I2C_MasterRequestRead>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1b8      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d113      	bne.n	80047b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	623b      	str	r3, [r7, #32]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e18c      	b.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d11b      	bne.n	80047f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e16c      	b.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d11b      	bne.n	8004836 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	e14c      	b.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800485c:	e138      	b.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	2b03      	cmp	r3, #3
 8004864:	f200 80f1 	bhi.w	8004a4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486c:	2b01      	cmp	r3, #1
 800486e:	d123      	bne.n	80048b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fd7d 	bl	8005374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e139      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048b6:	e10b      	b.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d14e      	bne.n	800495e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	2200      	movs	r2, #0
 80048c8:	4906      	ldr	r1, [pc, #24]	; (80048e4 <HAL_I2C_Master_Receive+0x22c>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 fbfa 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e10e      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
 80048da:	bf00      	nop
 80048dc:	00100002 	.word	0x00100002
 80048e0:	ffff0000 	.word	0xffff0000
 80048e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800495c:	e0b8      	b.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	2200      	movs	r2, #0
 8004966:	4966      	ldr	r1, [pc, #408]	; (8004b00 <HAL_I2C_Master_Receive+0x448>)
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fbab 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0bf      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	2200      	movs	r2, #0
 80049c2:	494f      	ldr	r1, [pc, #316]	; (8004b00 <HAL_I2C_Master_Receive+0x448>)
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fb7d 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e091      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a48:	e042      	b.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fc90 	bl	8005374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e04c      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d118      	bne.n	8004ad0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f47f aec2 	bne.w	800485e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3728      	adds	r7, #40	; 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	00010004 	.word	0x00010004

08004b04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	460b      	mov	r3, r1
 8004b18:	813b      	strh	r3, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b1e:	f7fd f809 	bl	8001b34 <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	f040 80d9 	bne.w	8004ce4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2319      	movs	r3, #25
 8004b38:	2201      	movs	r2, #1
 8004b3a:	496d      	ldr	r1, [pc, #436]	; (8004cf0 <HAL_I2C_Mem_Write+0x1ec>)
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fac1 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e0cc      	b.n	8004ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_Mem_Write+0x56>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e0c5      	b.n	8004ce6 <HAL_I2C_Mem_Write+0x1e2>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d007      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2221      	movs	r2, #33	; 0x21
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a4d      	ldr	r2, [pc, #308]	; (8004cf4 <HAL_I2C_Mem_Write+0x1f0>)
 8004bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc2:	88f8      	ldrh	r0, [r7, #6]
 8004bc4:	893a      	ldrh	r2, [r7, #8]
 8004bc6:	8979      	ldrh	r1, [r7, #10]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f9e0 	bl	8004f98 <I2C_RequestMemoryWrite>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d052      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e081      	b.n	8004ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fb42 	bl	8005270 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d107      	bne.n	8004c0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e06b      	b.n	8004ce6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d11b      	bne.n	8004c84 <HAL_I2C_Mem_Write+0x180>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d017      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1aa      	bne.n	8004be2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fb2e 	bl	80052f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00d      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d107      	bne.n	8004cb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e016      	b.n	8004ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	00100002 	.word	0x00100002
 8004cf4:	ffff0000 	.word	0xffff0000

08004cf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	460b      	mov	r3, r1
 8004d06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d006      	beq.n	8004d22 <I2C_MasterRequestWrite+0x2a>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <I2C_MasterRequestWrite+0x2a>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d20:	d108      	bne.n	8004d34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e00b      	b.n	8004d4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	2b12      	cmp	r3, #18
 8004d3a:	d107      	bne.n	8004d4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f9b3 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d72:	d103      	bne.n	8004d7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e035      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e01b      	b.n	8004dd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d9c:	897b      	ldrh	r3, [r7, #10]
 8004d9e:	11db      	asrs	r3, r3, #7
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f063 030f 	orn	r3, r3, #15
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	490e      	ldr	r1, [pc, #56]	; (8004df4 <I2C_MasterRequestWrite+0xfc>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f9d9 	bl	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e010      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4907      	ldr	r1, [pc, #28]	; (8004df8 <I2C_MasterRequestWrite+0x100>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f9c9 	bl	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	00010008 	.word	0x00010008
 8004df8:	00010002 	.word	0x00010002

08004dfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d006      	beq.n	8004e36 <I2C_MasterRequestRead+0x3a>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d003      	beq.n	8004e36 <I2C_MasterRequestRead+0x3a>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e34:	d108      	bne.n	8004e48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e00b      	b.n	8004e60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	2b11      	cmp	r3, #17
 8004e4e:	d107      	bne.n	8004e60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f929 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e86:	d103      	bne.n	8004e90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e079      	b.n	8004f88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e9c:	d108      	bne.n	8004eb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	611a      	str	r2, [r3, #16]
 8004eae:	e05f      	b.n	8004f70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eb0:	897b      	ldrh	r3, [r7, #10]
 8004eb2:	11db      	asrs	r3, r3, #7
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	f003 0306 	and.w	r3, r3, #6
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f063 030f 	orn	r3, r3, #15
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4930      	ldr	r1, [pc, #192]	; (8004f90 <I2C_MasterRequestRead+0x194>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f94f 	bl	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e054      	b.n	8004f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ede:	897b      	ldrh	r3, [r7, #10]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4929      	ldr	r1, [pc, #164]	; (8004f94 <I2C_MasterRequestRead+0x198>)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f93f 	bl	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e044      	b.n	8004f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f8c7 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d103      	bne.n	8004f54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e017      	b.n	8004f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	11db      	asrs	r3, r3, #7
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f003 0306 	and.w	r3, r3, #6
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f063 030e 	orn	r3, r3, #14
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4907      	ldr	r1, [pc, #28]	; (8004f94 <I2C_MasterRequestRead+0x198>)
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f8fb 	bl	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	00010008 	.word	0x00010008
 8004f94:	00010002 	.word	0x00010002

08004f98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	817b      	strh	r3, [r7, #10]
 8004faa:	460b      	mov	r3, r1
 8004fac:	813b      	strh	r3, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f878 	bl	80050c4 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe8:	d103      	bne.n	8004ff2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e05f      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005004:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	492d      	ldr	r1, [pc, #180]	; (80050c0 <I2C_RequestMemoryWrite+0x128>)
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f8b0 	bl	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e04c      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005034:	6a39      	ldr	r1, [r7, #32]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f91a 	bl	8005270 <I2C_WaitOnTXEFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	2b04      	cmp	r3, #4
 8005048:	d107      	bne.n	800505a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005058:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e02b      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d105      	bne.n	8005070 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005064:	893b      	ldrh	r3, [r7, #8]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	611a      	str	r2, [r3, #16]
 800506e:	e021      	b.n	80050b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005070:	893b      	ldrh	r3, [r7, #8]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b29b      	uxth	r3, r3
 8005076:	b2da      	uxtb	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	6a39      	ldr	r1, [r7, #32]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f8f4 	bl	8005270 <I2C_WaitOnTXEFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b04      	cmp	r3, #4
 8005094:	d107      	bne.n	80050a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e005      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050aa:	893b      	ldrh	r3, [r7, #8]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	00010002 	.word	0x00010002

080050c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050d4:	e025      	b.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050dc:	d021      	beq.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fc fd29 	bl	8001b34 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d116      	bne.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e023      	b.n	800516a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d10d      	bne.n	8005148 <I2C_WaitOnFlagUntilTimeout+0x84>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	e00c      	b.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	43da      	mvns	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	429a      	cmp	r2, r3
 8005166:	d0b6      	beq.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005180:	e051      	b.n	8005226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005190:	d123      	bne.n	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0204 	orr.w	r2, r3, #4
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e046      	b.n	8005268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e0:	d021      	beq.n	8005226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fc fca7 	bl	8001b34 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d116      	bne.n	8005226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e020      	b.n	8005268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d10c      	bne.n	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	43da      	mvns	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4013      	ands	r3, r2
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e00b      	b.n	8005262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	43da      	mvns	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4013      	ands	r3, r2
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d18d      	bne.n	8005182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800527c:	e02d      	b.n	80052da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8ce 	bl	8005420 <I2C_IsAcknowledgeFailed>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e02d      	b.n	80052ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005294:	d021      	beq.n	80052da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005296:	f7fc fc4d 	bl	8001b34 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d302      	bcc.n	80052ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d116      	bne.n	80052da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e007      	b.n	80052ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d1ca      	bne.n	800527e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052fe:	e02d      	b.n	800535c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f88d 	bl	8005420 <I2C_IsAcknowledgeFailed>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e02d      	b.n	800536c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005316:	d021      	beq.n	800535c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005318:	f7fc fc0c 	bl	8001b34 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	429a      	cmp	r2, r3
 8005326:	d302      	bcc.n	800532e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d116      	bne.n	800535c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f043 0220 	orr.w	r2, r3, #32
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e007      	b.n	800536c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b04      	cmp	r3, #4
 8005368:	d1ca      	bne.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005380:	e042      	b.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b10      	cmp	r3, #16
 800538e:	d119      	bne.n	80053c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0210 	mvn.w	r2, #16
 8005398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e029      	b.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c4:	f7fc fbb6 	bl	8001b34 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d302      	bcc.n	80053da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d116      	bne.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e007      	b.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d1b5      	bne.n	8005382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005436:	d11b      	bne.n	8005470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f043 0204 	orr.w	r2, r3, #4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800547e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005480:	b08f      	sub	sp, #60	; 0x3c
 8005482:	af0a      	add	r7, sp, #40	; 0x28
 8005484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e116      	b.n	80056be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc f966 	bl	800177c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2203      	movs	r2, #3
 80054b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f003 f9d3 	bl	800887a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	687e      	ldr	r6, [r7, #4]
 80054dc:	466d      	mov	r5, sp
 80054de:	f106 0410 	add.w	r4, r6, #16
 80054e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80054f2:	1d33      	adds	r3, r6, #4
 80054f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054f6:	6838      	ldr	r0, [r7, #0]
 80054f8:	f003 f95e 	bl	80087b8 <USB_CoreInit>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0d7      	b.n	80056be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f003 f9c1 	bl	800889c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
 800551e:	e04a      	b.n	80055b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005520:	7bfa      	ldrb	r2, [r7, #15]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	333d      	adds	r3, #61	; 0x3d
 8005530:	2201      	movs	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	333c      	adds	r3, #60	; 0x3c
 8005544:	7bfa      	ldrb	r2, [r7, #15]
 8005546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005548:	7bfa      	ldrb	r2, [r7, #15]
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	b298      	uxth	r0, r3
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	3344      	adds	r3, #68	; 0x44
 800555c:	4602      	mov	r2, r0
 800555e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005560:	7bfa      	ldrb	r2, [r7, #15]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	3340      	adds	r3, #64	; 0x40
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	3348      	adds	r3, #72	; 0x48
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	334c      	adds	r3, #76	; 0x4c
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	3354      	adds	r3, #84	; 0x54
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	3301      	adds	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3af      	bcc.n	8005520 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
 80055c4:	e044      	b.n	8005650 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055ee:	7bfa      	ldrb	r2, [r7, #15]
 80055f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	3301      	adds	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	7bfa      	ldrb	r2, [r7, #15]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d3b5      	bcc.n	80055c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	687e      	ldr	r6, [r7, #4]
 8005662:	466d      	mov	r5, sp
 8005664:	f106 0410 	add.w	r4, r6, #16
 8005668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800566a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800566c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800566e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005674:	e885 0003 	stmia.w	r5, {r0, r1}
 8005678:	1d33      	adds	r3, r6, #4
 800567a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800567c:	6838      	ldr	r0, [r7, #0]
 800567e:	f003 f959 	bl	8008934 <USB_DevInit>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e014      	b.n	80056be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d102      	bne.n	80056b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f80a 	bl	80056c6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f003 fb17 	bl	8008cea <USB_DevDisconnect>

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056c6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f8:	f043 0303 	orr.w	r3, r3, #3
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0cc      	b.n	80058be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005724:	4b68      	ldr	r3, [pc, #416]	; (80058c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d90c      	bls.n	800574c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005732:	4b65      	ldr	r3, [pc, #404]	; (80058c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800573a:	4b63      	ldr	r3, [pc, #396]	; (80058c8 <HAL_RCC_ClockConfig+0x1b8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d001      	beq.n	800574c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0b8      	b.n	80058be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d020      	beq.n	800579a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005764:	4b59      	ldr	r3, [pc, #356]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	4a58      	ldr	r2, [pc, #352]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800576e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800577c:	4b53      	ldr	r3, [pc, #332]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4a52      	ldr	r2, [pc, #328]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005788:	4b50      	ldr	r3, [pc, #320]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	494d      	ldr	r1, [pc, #308]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005796:	4313      	orrs	r3, r2
 8005798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d044      	beq.n	8005830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d107      	bne.n	80057be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ae:	4b47      	ldr	r3, [pc, #284]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d119      	bne.n	80057ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e07f      	b.n	80058be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d003      	beq.n	80057ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d107      	bne.n	80057de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ce:	4b3f      	ldr	r3, [pc, #252]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e06f      	b.n	80058be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057de:	4b3b      	ldr	r3, [pc, #236]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e067      	b.n	80058be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ee:	4b37      	ldr	r3, [pc, #220]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f023 0203 	bic.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	4934      	ldr	r1, [pc, #208]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005800:	f7fc f998 	bl	8001b34 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005806:	e00a      	b.n	800581e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005808:	f7fc f994 	bl	8001b34 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f241 3288 	movw	r2, #5000	; 0x1388
 8005816:	4293      	cmp	r3, r2
 8005818:	d901      	bls.n	800581e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e04f      	b.n	80058be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581e:	4b2b      	ldr	r3, [pc, #172]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 020c 	and.w	r2, r3, #12
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	429a      	cmp	r2, r3
 800582e:	d1eb      	bne.n	8005808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005830:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d20c      	bcs.n	8005858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005846:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d001      	beq.n	8005858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e032      	b.n	80058be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4916      	ldr	r1, [pc, #88]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	490e      	ldr	r1, [pc, #56]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005896:	f000 fb7f 	bl	8005f98 <HAL_RCC_GetSysClockFreq>
 800589a:	4602      	mov	r2, r0
 800589c:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	490a      	ldr	r1, [pc, #40]	; (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 80058a8:	5ccb      	ldrb	r3, [r1, r3]
 80058aa:	fa22 f303 	lsr.w	r3, r2, r3
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 80058b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <HAL_RCC_ClockConfig+0x1c8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fc f8f8 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023c00 	.word	0x40023c00
 80058cc:	40023800 	.word	0x40023800
 80058d0:	080099b0 	.word	0x080099b0
 80058d4:	20000004 	.word	0x20000004
 80058d8:	20000008 	.word	0x20000008

080058dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000004 	.word	0x20000004

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058f8:	f7ff fff0 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	0a9b      	lsrs	r3, r3, #10
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4903      	ldr	r1, [pc, #12]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40023800 	.word	0x40023800
 8005918:	080099c0 	.word	0x080099c0

0800591c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005920:	f7ff ffdc 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	0b5b      	lsrs	r3, r3, #13
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4903      	ldr	r1, [pc, #12]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40023800 	.word	0x40023800
 8005940:	080099c0 	.word	0x080099c0

08005944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800597c:	4b6f      	ldr	r3, [pc, #444]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800597e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005982:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	496c      	ldr	r1, [pc, #432]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800599a:	2301      	movs	r3, #1
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d010      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80059aa:	4b64      	ldr	r3, [pc, #400]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	4960      	ldr	r1, [pc, #384]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80059c8:	2301      	movs	r3, #1
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d017      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059d8:	4b58      	ldr	r3, [pc, #352]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	4955      	ldr	r1, [pc, #340]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f6:	d101      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80059f8:	2301      	movs	r3, #1
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005a04:	2301      	movs	r3, #1
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d017      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a14:	4b49      	ldr	r3, [pc, #292]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	4946      	ldr	r1, [pc, #280]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a32:	d101      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005a34:	2301      	movs	r3, #1
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005a40:	2301      	movs	r3, #1
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 808a 	beq.w	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	4b39      	ldr	r3, [pc, #228]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a60:	6413      	str	r3, [r2, #64]	; 0x40
 8005a62:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a6e:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a7a:	f7fc f85b 	bl	8001b34 <HAL_GetTick>
 8005a7e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fc f857 	bl	8001b34 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e278      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aa0:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d02f      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d028      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005abe:	4b1f      	ldr	r3, [pc, #124]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ada:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d114      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ae6:	f7fc f825 	bl	8001b34 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fc f821 	bl	8001b34 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e240      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b04:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ee      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1c:	d114      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b32:	4902      	ldr	r1, [pc, #8]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	608b      	str	r3, [r1, #8]
 8005b38:	e00c      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005b3a:	bf00      	nop
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40007000 	.word	0x40007000
 8005b44:	42470e40 	.word	0x42470e40
 8005b48:	4b4a      	ldr	r3, [pc, #296]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	4a49      	ldr	r2, [pc, #292]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b52:	6093      	str	r3, [r2, #8]
 8005b54:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b60:	4944      	ldr	r1, [pc, #272]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005b78:	4b3f      	ldr	r3, [pc, #252]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005b7a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005b88:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b96:	4937      	ldr	r1, [pc, #220]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005baa:	4b32      	ldr	r3, [pc, #200]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb8:	492e      	ldr	r1, [pc, #184]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d011      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bcc:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	4926      	ldr	r1, [pc, #152]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005bec:	2301      	movs	r3, #1
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	491a      	ldr	r1, [pc, #104]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d011      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c24:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2c:	4911      	ldr	r1, [pc, #68]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d005      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c50:	f040 80ff 	bne.w	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5a:	f7fb ff6b 	bl	8001b34 <HAL_GetTick>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c60:	e00e      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c62:	f7fb ff67 	bl	8001b34 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d907      	bls.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e188      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005c74:	40023800 	.word	0x40023800
 8005c78:	424711e0 	.word	0x424711e0
 8005c7c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c80:	4b7e      	ldr	r3, [pc, #504]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1ea      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d028      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d124      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005cb4:	4b71      	ldr	r3, [pc, #452]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cba:	0c1b      	lsrs	r3, r3, #16
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cc6:	4b6d      	ldr	r3, [pc, #436]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ccc:	0e1b      	lsrs	r3, r3, #24
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	019b      	lsls	r3, r3, #6
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	061b      	lsls	r3, r3, #24
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	071b      	lsls	r3, r3, #28
 8005cf6:	4961      	ldr	r1, [pc, #388]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d12:	d00a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d035      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d28:	d130      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005d2a:	4b54      	ldr	r3, [pc, #336]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	3301      	adds	r3, #1
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d3c:	4b4f      	ldr	r3, [pc, #316]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d42:	0f1b      	lsrs	r3, r3, #28
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	019b      	lsls	r3, r3, #6
 8005d54:	431a      	orrs	r2, r3
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	061b      	lsls	r3, r3, #24
 8005d66:	431a      	orrs	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	071b      	lsls	r3, r3, #28
 8005d6c:	4943      	ldr	r1, [pc, #268]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d74:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7a:	f023 021f 	bic.w	r2, r3, #31
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	3b01      	subs	r3, #1
 8005d84:	493d      	ldr	r1, [pc, #244]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d029      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da0:	d124      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005da2:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	3301      	adds	r3, #1
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dba:	0f1b      	lsrs	r3, r3, #28
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	019b      	lsls	r3, r3, #6
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	061b      	lsls	r3, r3, #24
 8005dde:	431a      	orrs	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	071b      	lsls	r3, r3, #28
 8005de4:	4925      	ldr	r1, [pc, #148]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d016      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	4917      	ldr	r1, [pc, #92]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e26:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7fb fe82 	bl	8001b34 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e34:	f7fb fe7e 	bl	8001b34 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e09f      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	f040 8095 	bne.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e60:	f7fb fe68 	bl	8001b34 <HAL_GetTick>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e66:	e00f      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e68:	f7fb fe64 	bl	8001b34 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d908      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e085      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	42470068 	.word	0x42470068
 8005e84:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e88:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e94:	d0e8      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02b      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d127      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005ebe:	4b34      	ldr	r3, [pc, #208]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	3301      	adds	r3, #1
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	019b      	lsls	r3, r3, #6
 8005eda:	431a      	orrs	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	061b      	lsls	r3, r3, #24
 8005eec:	4928      	ldr	r1, [pc, #160]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ef4:	4b26      	ldr	r3, [pc, #152]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	3b01      	subs	r3, #1
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	4922      	ldr	r1, [pc, #136]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01d      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f22:	d118      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f24:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	0e1b      	lsrs	r3, r3, #24
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	019b      	lsls	r3, r3, #6
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	3b01      	subs	r3, #1
 8005f46:	041b      	lsls	r3, r3, #16
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	4910      	ldr	r1, [pc, #64]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f56:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f5c:	f7fb fdea 	bl	8001b34 <HAL_GetTick>
 8005f60:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f64:	f7fb fde6 	bl	8001b34 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e007      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f82:	d1ef      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3730      	adds	r7, #48	; 0x30
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40023800 	.word	0x40023800
 8005f94:	42470070 	.word	0x42470070

08005f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b0ae      	sub	sp, #184	; 0xb8
 8005f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fbe:	4bcb      	ldr	r3, [pc, #812]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	2b0c      	cmp	r3, #12
 8005fc8:	f200 8206 	bhi.w	80063d8 <HAL_RCC_GetSysClockFreq+0x440>
 8005fcc:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08006009 	.word	0x08006009
 8005fd8:	080063d9 	.word	0x080063d9
 8005fdc:	080063d9 	.word	0x080063d9
 8005fe0:	080063d9 	.word	0x080063d9
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	080063d9 	.word	0x080063d9
 8005fec:	080063d9 	.word	0x080063d9
 8005ff0:	080063d9 	.word	0x080063d9
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	080063d9 	.word	0x080063d9
 8005ffc:	080063d9 	.word	0x080063d9
 8006000:	080063d9 	.word	0x080063d9
 8006004:	08006209 	.word	0x08006209
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006008:	4bb9      	ldr	r3, [pc, #740]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800600a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800600e:	e1e7      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006010:	4bb8      	ldr	r3, [pc, #736]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006016:	e1e3      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006018:	4bb4      	ldr	r3, [pc, #720]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006024:	4bb1      	ldr	r3, [pc, #708]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d071      	beq.n	8006114 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006030:	4bae      	ldr	r3, [pc, #696]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	099b      	lsrs	r3, r3, #6
 8006036:	2200      	movs	r2, #0
 8006038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800603c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006056:	4622      	mov	r2, r4
 8006058:	462b      	mov	r3, r5
 800605a:	f04f 0000 	mov.w	r0, #0
 800605e:	f04f 0100 	mov.w	r1, #0
 8006062:	0159      	lsls	r1, r3, #5
 8006064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006068:	0150      	lsls	r0, r2, #5
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4621      	mov	r1, r4
 8006070:	1a51      	subs	r1, r2, r1
 8006072:	6439      	str	r1, [r7, #64]	; 0x40
 8006074:	4629      	mov	r1, r5
 8006076:	eb63 0301 	sbc.w	r3, r3, r1
 800607a:	647b      	str	r3, [r7, #68]	; 0x44
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006088:	4649      	mov	r1, r9
 800608a:	018b      	lsls	r3, r1, #6
 800608c:	4641      	mov	r1, r8
 800608e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006092:	4641      	mov	r1, r8
 8006094:	018a      	lsls	r2, r1, #6
 8006096:	4641      	mov	r1, r8
 8006098:	1a51      	subs	r1, r2, r1
 800609a:	63b9      	str	r1, [r7, #56]	; 0x38
 800609c:	4649      	mov	r1, r9
 800609e:	eb63 0301 	sbc.w	r3, r3, r1
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80060b0:	4649      	mov	r1, r9
 80060b2:	00cb      	lsls	r3, r1, #3
 80060b4:	4641      	mov	r1, r8
 80060b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ba:	4641      	mov	r1, r8
 80060bc:	00ca      	lsls	r2, r1, #3
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	4622      	mov	r2, r4
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ca:	462b      	mov	r3, r5
 80060cc:	460a      	mov	r2, r1
 80060ce:	eb42 0303 	adc.w	r3, r2, r3
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060e0:	4629      	mov	r1, r5
 80060e2:	024b      	lsls	r3, r1, #9
 80060e4:	4621      	mov	r1, r4
 80060e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060ea:	4621      	mov	r1, r4
 80060ec:	024a      	lsls	r2, r1, #9
 80060ee:	4610      	mov	r0, r2
 80060f0:	4619      	mov	r1, r3
 80060f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006100:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006104:	f7fa f8dc 	bl	80002c0 <__aeabi_uldivmod>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4613      	mov	r3, r2
 800610e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006112:	e067      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006114:	4b75      	ldr	r3, [pc, #468]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	099b      	lsrs	r3, r3, #6
 800611a:	2200      	movs	r2, #0
 800611c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006120:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006124:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612c:	67bb      	str	r3, [r7, #120]	; 0x78
 800612e:	2300      	movs	r3, #0
 8006130:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006132:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006136:	4622      	mov	r2, r4
 8006138:	462b      	mov	r3, r5
 800613a:	f04f 0000 	mov.w	r0, #0
 800613e:	f04f 0100 	mov.w	r1, #0
 8006142:	0159      	lsls	r1, r3, #5
 8006144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006148:	0150      	lsls	r0, r2, #5
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4621      	mov	r1, r4
 8006150:	1a51      	subs	r1, r2, r1
 8006152:	62b9      	str	r1, [r7, #40]	; 0x28
 8006154:	4629      	mov	r1, r5
 8006156:	eb63 0301 	sbc.w	r3, r3, r1
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006168:	4649      	mov	r1, r9
 800616a:	018b      	lsls	r3, r1, #6
 800616c:	4641      	mov	r1, r8
 800616e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006172:	4641      	mov	r1, r8
 8006174:	018a      	lsls	r2, r1, #6
 8006176:	4641      	mov	r1, r8
 8006178:	ebb2 0a01 	subs.w	sl, r2, r1
 800617c:	4649      	mov	r1, r9
 800617e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800618e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006196:	4692      	mov	sl, r2
 8006198:	469b      	mov	fp, r3
 800619a:	4623      	mov	r3, r4
 800619c:	eb1a 0303 	adds.w	r3, sl, r3
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	462b      	mov	r3, r5
 80061a4:	eb4b 0303 	adc.w	r3, fp, r3
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80061b6:	4629      	mov	r1, r5
 80061b8:	028b      	lsls	r3, r1, #10
 80061ba:	4621      	mov	r1, r4
 80061bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061c0:	4621      	mov	r1, r4
 80061c2:	028a      	lsls	r2, r1, #10
 80061c4:	4610      	mov	r0, r2
 80061c6:	4619      	mov	r1, r3
 80061c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061cc:	2200      	movs	r2, #0
 80061ce:	673b      	str	r3, [r7, #112]	; 0x70
 80061d0:	677a      	str	r2, [r7, #116]	; 0x74
 80061d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80061d6:	f7fa f873 	bl	80002c0 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4613      	mov	r3, r2
 80061e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e4:	4b41      	ldr	r3, [pc, #260]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80061f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006206:	e0eb      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006208:	4b38      	ldr	r3, [pc, #224]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006214:	4b35      	ldr	r3, [pc, #212]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d06b      	beq.n	80062f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006220:	4b32      	ldr	r3, [pc, #200]	; (80062ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	099b      	lsrs	r3, r3, #6
 8006226:	2200      	movs	r2, #0
 8006228:	66bb      	str	r3, [r7, #104]	; 0x68
 800622a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800622c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	663b      	str	r3, [r7, #96]	; 0x60
 8006234:	2300      	movs	r3, #0
 8006236:	667b      	str	r3, [r7, #100]	; 0x64
 8006238:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800623c:	4622      	mov	r2, r4
 800623e:	462b      	mov	r3, r5
 8006240:	f04f 0000 	mov.w	r0, #0
 8006244:	f04f 0100 	mov.w	r1, #0
 8006248:	0159      	lsls	r1, r3, #5
 800624a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800624e:	0150      	lsls	r0, r2, #5
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4621      	mov	r1, r4
 8006256:	1a51      	subs	r1, r2, r1
 8006258:	61b9      	str	r1, [r7, #24]
 800625a:	4629      	mov	r1, r5
 800625c:	eb63 0301 	sbc.w	r3, r3, r1
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800626e:	4659      	mov	r1, fp
 8006270:	018b      	lsls	r3, r1, #6
 8006272:	4651      	mov	r1, sl
 8006274:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006278:	4651      	mov	r1, sl
 800627a:	018a      	lsls	r2, r1, #6
 800627c:	4651      	mov	r1, sl
 800627e:	ebb2 0801 	subs.w	r8, r2, r1
 8006282:	4659      	mov	r1, fp
 8006284:	eb63 0901 	sbc.w	r9, r3, r1
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006294:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006298:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800629c:	4690      	mov	r8, r2
 800629e:	4699      	mov	r9, r3
 80062a0:	4623      	mov	r3, r4
 80062a2:	eb18 0303 	adds.w	r3, r8, r3
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	462b      	mov	r3, r5
 80062aa:	eb49 0303 	adc.w	r3, r9, r3
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80062bc:	4629      	mov	r1, r5
 80062be:	024b      	lsls	r3, r1, #9
 80062c0:	4621      	mov	r1, r4
 80062c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062c6:	4621      	mov	r1, r4
 80062c8:	024a      	lsls	r2, r1, #9
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062d2:	2200      	movs	r2, #0
 80062d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80062d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80062d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062dc:	f7f9 fff0 	bl	80002c0 <__aeabi_uldivmod>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4613      	mov	r3, r2
 80062e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062ea:	e065      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x420>
 80062ec:	40023800 	.word	0x40023800
 80062f0:	00f42400 	.word	0x00f42400
 80062f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062f8:	4b3d      	ldr	r3, [pc, #244]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	099b      	lsrs	r3, r3, #6
 80062fe:	2200      	movs	r2, #0
 8006300:	4618      	mov	r0, r3
 8006302:	4611      	mov	r1, r2
 8006304:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006308:	653b      	str	r3, [r7, #80]	; 0x50
 800630a:	2300      	movs	r3, #0
 800630c:	657b      	str	r3, [r7, #84]	; 0x54
 800630e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006312:	4642      	mov	r2, r8
 8006314:	464b      	mov	r3, r9
 8006316:	f04f 0000 	mov.w	r0, #0
 800631a:	f04f 0100 	mov.w	r1, #0
 800631e:	0159      	lsls	r1, r3, #5
 8006320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006324:	0150      	lsls	r0, r2, #5
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4641      	mov	r1, r8
 800632c:	1a51      	subs	r1, r2, r1
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	4649      	mov	r1, r9
 8006332:	eb63 0301 	sbc.w	r3, r3, r1
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006344:	4659      	mov	r1, fp
 8006346:	018b      	lsls	r3, r1, #6
 8006348:	4651      	mov	r1, sl
 800634a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800634e:	4651      	mov	r1, sl
 8006350:	018a      	lsls	r2, r1, #6
 8006352:	4651      	mov	r1, sl
 8006354:	1a54      	subs	r4, r2, r1
 8006356:	4659      	mov	r1, fp
 8006358:	eb63 0501 	sbc.w	r5, r3, r1
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	00eb      	lsls	r3, r5, #3
 8006366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800636a:	00e2      	lsls	r2, r4, #3
 800636c:	4614      	mov	r4, r2
 800636e:	461d      	mov	r5, r3
 8006370:	4643      	mov	r3, r8
 8006372:	18e3      	adds	r3, r4, r3
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	464b      	mov	r3, r9
 8006378:	eb45 0303 	adc.w	r3, r5, r3
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800638a:	4629      	mov	r1, r5
 800638c:	028b      	lsls	r3, r1, #10
 800638e:	4621      	mov	r1, r4
 8006390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006394:	4621      	mov	r1, r4
 8006396:	028a      	lsls	r2, r1, #10
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063a0:	2200      	movs	r2, #0
 80063a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80063a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063aa:	f7f9 ff89 	bl	80002c0 <__aeabi_uldivmod>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4613      	mov	r3, r2
 80063b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	0f1b      	lsrs	r3, r3, #28
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80063c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80063d6:	e003      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80063da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80063de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	37b8      	adds	r7, #184	; 0xb8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ee:	bf00      	nop
 80063f0:	40023800 	.word	0x40023800
 80063f4:	00f42400 	.word	0x00f42400

080063f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e28d      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8083 	beq.w	800651e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006418:	4b94      	ldr	r3, [pc, #592]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	2b04      	cmp	r3, #4
 8006422:	d019      	beq.n	8006458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006424:	4b91      	ldr	r3, [pc, #580]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800642c:	2b08      	cmp	r3, #8
 800642e:	d106      	bne.n	800643e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006430:	4b8e      	ldr	r3, [pc, #568]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643c:	d00c      	beq.n	8006458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800643e:	4b8b      	ldr	r3, [pc, #556]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d112      	bne.n	8006470 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800644a:	4b88      	ldr	r3, [pc, #544]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006456:	d10b      	bne.n	8006470 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	4b84      	ldr	r3, [pc, #528]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d05b      	beq.n	800651c <HAL_RCC_OscConfig+0x124>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d157      	bne.n	800651c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e25a      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006478:	d106      	bne.n	8006488 <HAL_RCC_OscConfig+0x90>
 800647a:	4b7c      	ldr	r3, [pc, #496]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a7b      	ldr	r2, [pc, #492]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e01d      	b.n	80064c4 <HAL_RCC_OscConfig+0xcc>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0xb4>
 8006492:	4b76      	ldr	r3, [pc, #472]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a75      	ldr	r2, [pc, #468]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4b73      	ldr	r3, [pc, #460]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a72      	ldr	r2, [pc, #456]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0xcc>
 80064ac:	4b6f      	ldr	r3, [pc, #444]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a6e      	ldr	r2, [pc, #440]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4b6c      	ldr	r3, [pc, #432]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6b      	ldr	r2, [pc, #428]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80064be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fb fb32 	bl	8001b34 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fb fb2e 	bl	8001b34 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e21f      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064e6:	4b61      	ldr	r3, [pc, #388]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0xdc>
 80064f2:	e014      	b.n	800651e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fb fb1e 	bl	8001b34 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fb fb1a 	bl	8001b34 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	; 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e20b      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800650e:	4b57      	ldr	r3, [pc, #348]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x104>
 800651a:	e000      	b.n	800651e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06f      	beq.n	800660a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800652a:	4b50      	ldr	r3, [pc, #320]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006536:	4b4d      	ldr	r3, [pc, #308]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800653e:	2b08      	cmp	r3, #8
 8006540:	d105      	bne.n	800654e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006542:	4b4a      	ldr	r3, [pc, #296]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800654e:	4b47      	ldr	r3, [pc, #284]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006556:	2b0c      	cmp	r3, #12
 8006558:	d11c      	bne.n	8006594 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800655a:	4b44      	ldr	r3, [pc, #272]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d116      	bne.n	8006594 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006566:	4b41      	ldr	r3, [pc, #260]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <HAL_RCC_OscConfig+0x186>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d001      	beq.n	800657e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e1d3      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657e:	4b3b      	ldr	r3, [pc, #236]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4937      	ldr	r1, [pc, #220]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800658e:	4313      	orrs	r3, r2
 8006590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006592:	e03a      	b.n	800660a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d020      	beq.n	80065de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800659c:	4b34      	ldr	r3, [pc, #208]	; (8006670 <HAL_RCC_OscConfig+0x278>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a2:	f7fb fac7 	bl	8001b34 <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065aa:	f7fb fac3 	bl	8001b34 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e1b4      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c8:	4b28      	ldr	r3, [pc, #160]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4925      	ldr	r1, [pc, #148]	; (800666c <HAL_RCC_OscConfig+0x274>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	600b      	str	r3, [r1, #0]
 80065dc:	e015      	b.n	800660a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <HAL_RCC_OscConfig+0x278>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e4:	f7fb faa6 	bl	8001b34 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ec:	f7fb faa2 	bl	8001b34 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e193      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fe:	4b1b      	ldr	r3, [pc, #108]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f0      	bne.n	80065ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d036      	beq.n	8006684 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800661e:	4b15      	ldr	r3, [pc, #84]	; (8006674 <HAL_RCC_OscConfig+0x27c>)
 8006620:	2201      	movs	r2, #1
 8006622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006624:	f7fb fa86 	bl	8001b34 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800662c:	f7fb fa82 	bl	8001b34 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e173      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800663e:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_RCC_OscConfig+0x274>)
 8006640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0x234>
 800664a:	e01b      	b.n	8006684 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800664c:	4b09      	ldr	r3, [pc, #36]	; (8006674 <HAL_RCC_OscConfig+0x27c>)
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006652:	f7fb fa6f 	bl	8001b34 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006658:	e00e      	b.n	8006678 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800665a:	f7fb fa6b 	bl	8001b34 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d907      	bls.n	8006678 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e15c      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
 800666c:	40023800 	.word	0x40023800
 8006670:	42470000 	.word	0x42470000
 8006674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006678:	4b8a      	ldr	r3, [pc, #552]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800667a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ea      	bne.n	800665a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8097 	beq.w	80067c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006696:	4b83      	ldr	r3, [pc, #524]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10f      	bne.n	80066c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	4b7f      	ldr	r3, [pc, #508]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a7e      	ldr	r2, [pc, #504]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
 80066b2:	4b7c      	ldr	r3, [pc, #496]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c2:	4b79      	ldr	r3, [pc, #484]	; (80068a8 <HAL_RCC_OscConfig+0x4b0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d118      	bne.n	8006700 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ce:	4b76      	ldr	r3, [pc, #472]	; (80068a8 <HAL_RCC_OscConfig+0x4b0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <HAL_RCC_OscConfig+0x4b0>)
 80066d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066da:	f7fb fa2b 	bl	8001b34 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e2:	f7fb fa27 	bl	8001b34 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e118      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f4:	4b6c      	ldr	r3, [pc, #432]	; (80068a8 <HAL_RCC_OscConfig+0x4b0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d106      	bne.n	8006716 <HAL_RCC_OscConfig+0x31e>
 8006708:	4b66      	ldr	r3, [pc, #408]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	4a65      	ldr	r2, [pc, #404]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	6713      	str	r3, [r2, #112]	; 0x70
 8006714:	e01c      	b.n	8006750 <HAL_RCC_OscConfig+0x358>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b05      	cmp	r3, #5
 800671c:	d10c      	bne.n	8006738 <HAL_RCC_OscConfig+0x340>
 800671e:	4b61      	ldr	r3, [pc, #388]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a60      	ldr	r2, [pc, #384]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006724:	f043 0304 	orr.w	r3, r3, #4
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
 800672a:	4b5e      	ldr	r3, [pc, #376]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	4a5d      	ldr	r2, [pc, #372]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006730:	f043 0301 	orr.w	r3, r3, #1
 8006734:	6713      	str	r3, [r2, #112]	; 0x70
 8006736:	e00b      	b.n	8006750 <HAL_RCC_OscConfig+0x358>
 8006738:	4b5a      	ldr	r3, [pc, #360]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a59      	ldr	r2, [pc, #356]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800673e:	f023 0301 	bic.w	r3, r3, #1
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
 8006744:	4b57      	ldr	r3, [pc, #348]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a56      	ldr	r2, [pc, #344]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800674a:	f023 0304 	bic.w	r3, r3, #4
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d015      	beq.n	8006784 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006758:	f7fb f9ec 	bl	8001b34 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800675e:	e00a      	b.n	8006776 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006760:	f7fb f9e8 	bl	8001b34 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	f241 3288 	movw	r2, #5000	; 0x1388
 800676e:	4293      	cmp	r3, r2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e0d7      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006776:	4b4b      	ldr	r3, [pc, #300]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0ee      	beq.n	8006760 <HAL_RCC_OscConfig+0x368>
 8006782:	e014      	b.n	80067ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006784:	f7fb f9d6 	bl	8001b34 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800678a:	e00a      	b.n	80067a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800678c:	f7fb f9d2 	bl	8001b34 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	f241 3288 	movw	r2, #5000	; 0x1388
 800679a:	4293      	cmp	r3, r2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e0c1      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a2:	4b40      	ldr	r3, [pc, #256]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1ee      	bne.n	800678c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b4:	4b3b      	ldr	r3, [pc, #236]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	4a3a      	ldr	r2, [pc, #232]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 80067ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80ad 	beq.w	8006924 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067ca:	4b36      	ldr	r3, [pc, #216]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d060      	beq.n	8006898 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d145      	bne.n	800686a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067de:	4b33      	ldr	r3, [pc, #204]	; (80068ac <HAL_RCC_OscConfig+0x4b4>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fb f9a6 	bl	8001b34 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fb f9a2 	bl	8001b34 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e093      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fe:	4b29      	ldr	r3, [pc, #164]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69da      	ldr	r2, [r3, #28]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	019b      	lsls	r3, r3, #6
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	3b01      	subs	r3, #1
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	071b      	lsls	r3, r3, #28
 8006836:	491b      	ldr	r1, [pc, #108]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 8006838:	4313      	orrs	r3, r2
 800683a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <HAL_RCC_OscConfig+0x4b4>)
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006842:	f7fb f977 	bl	8001b34 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684a:	f7fb f973 	bl	8001b34 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e064      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f0      	beq.n	800684a <HAL_RCC_OscConfig+0x452>
 8006868:	e05c      	b.n	8006924 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <HAL_RCC_OscConfig+0x4b4>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006870:	f7fb f960 	bl	8001b34 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006878:	f7fb f95c 	bl	8001b34 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e04d      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688a:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <HAL_RCC_OscConfig+0x4ac>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x480>
 8006896:	e045      	b.n	8006924 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d107      	bne.n	80068b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e040      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40007000 	.word	0x40007000
 80068ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068b0:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <HAL_RCC_OscConfig+0x538>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d030      	beq.n	8006920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d129      	bne.n	8006920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d122      	bne.n	8006920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068e0:	4013      	ands	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d119      	bne.n	8006920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	3b01      	subs	r3, #1
 80068fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d10f      	bne.n	8006920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d107      	bne.n	8006920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d001      	beq.n	8006924 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40023800 	.word	0x40023800

08006934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e041      	b.n	80069ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fa fe20 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3304      	adds	r3, #4
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f000 fb40 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e041      	b.n	8006a68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d106      	bne.n	80069fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fa fdaf 	bl	800155c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f000 faf1 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_TIM_PWM_Start+0x24>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	e022      	b.n	8006ada <HAL_TIM_PWM_Start+0x6a>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d109      	bne.n	8006aae <HAL_TIM_PWM_Start+0x3e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	bf14      	ite	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	2300      	moveq	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	e015      	b.n	8006ada <HAL_TIM_PWM_Start+0x6a>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d109      	bne.n	8006ac8 <HAL_TIM_PWM_Start+0x58>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e008      	b.n	8006ada <HAL_TIM_PWM_Start+0x6a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e07c      	b.n	8006bdc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_PWM_Start+0x82>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af0:	e013      	b.n	8006b1a <HAL_TIM_PWM_Start+0xaa>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_PWM_Start+0x92>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b00:	e00b      	b.n	8006b1a <HAL_TIM_PWM_Start+0xaa>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_PWM_Start+0xa2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b10:	e003      	b.n	8006b1a <HAL_TIM_PWM_Start+0xaa>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fcb8 	bl	8007498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <HAL_TIM_PWM_Start+0x174>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIM_PWM_Start+0xcc>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2c      	ldr	r2, [pc, #176]	; (8006be8 <HAL_TIM_PWM_Start+0x178>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_PWM_Start+0xd0>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_PWM_Start+0xd2>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <HAL_TIM_PWM_Start+0x174>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d01d      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <HAL_TIM_PWM_Start+0x17c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <HAL_TIM_PWM_Start+0x180>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <HAL_TIM_PWM_Start+0x184>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <HAL_TIM_PWM_Start+0x178>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <HAL_TIM_PWM_Start+0x188>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a16      	ldr	r2, [pc, #88]	; (8006bfc <HAL_TIM_PWM_Start+0x18c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d111      	bne.n	8006bca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b06      	cmp	r3, #6
 8006bb6:	d010      	beq.n	8006bda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc8:	e007      	b.n	8006bda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0201 	orr.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800

08006c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d122      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d11b      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0202 	mvn.w	r2, #2
 8006c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9ba 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 8006c48:	e005      	b.n	8006c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f9ac 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9bd 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d122      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d11b      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0204 	mvn.w	r2, #4
 8006c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f990 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f982 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f993 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d122      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d11b      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0208 	mvn.w	r2, #8
 8006cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f966 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 8006cf0:	e005      	b.n	8006cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f958 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f969 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d122      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d11b      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0210 	mvn.w	r2, #16
 8006d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f93c 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 8006d44:	e005      	b.n	8006d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f92e 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f93f 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d10e      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d107      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0201 	mvn.w	r2, #1
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f908 	bl	8006f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b80      	cmp	r3, #128	; 0x80
 8006d90:	d10e      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9c:	2b80      	cmp	r3, #128	; 0x80
 8006d9e:	d107      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc72 	bl	8007694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dba:	2b40      	cmp	r3, #64	; 0x40
 8006dbc:	d10e      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d107      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f904 	bl	8006fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d10e      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d107      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0220 	mvn.w	r2, #32
 8006e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fc3c 	bl	8007680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e08:	bf00      	nop
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e0ae      	b.n	8006f8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b0c      	cmp	r3, #12
 8006e3a:	f200 809f 	bhi.w	8006f7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e79 	.word	0x08006e79
 8006e48:	08006f7d 	.word	0x08006f7d
 8006e4c:	08006f7d 	.word	0x08006f7d
 8006e50:	08006f7d 	.word	0x08006f7d
 8006e54:	08006eb9 	.word	0x08006eb9
 8006e58:	08006f7d 	.word	0x08006f7d
 8006e5c:	08006f7d 	.word	0x08006f7d
 8006e60:	08006f7d 	.word	0x08006f7d
 8006e64:	08006efb 	.word	0x08006efb
 8006e68:	08006f7d 	.word	0x08006f7d
 8006e6c:	08006f7d 	.word	0x08006f7d
 8006e70:	08006f7d 	.word	0x08006f7d
 8006e74:	08006f3b 	.word	0x08006f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f95a 	bl	8007138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0208 	orr.w	r2, r2, #8
 8006e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0204 	bic.w	r2, r2, #4
 8006ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6999      	ldr	r1, [r3, #24]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	619a      	str	r2, [r3, #24]
      break;
 8006eb6:	e064      	b.n	8006f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f9aa 	bl	8007218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6999      	ldr	r1, [r3, #24]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	619a      	str	r2, [r3, #24]
      break;
 8006ef8:	e043      	b.n	8006f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f9ff 	bl	8007304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0208 	orr.w	r2, r2, #8
 8006f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69da      	ldr	r2, [r3, #28]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0204 	bic.w	r2, r2, #4
 8006f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69d9      	ldr	r1, [r3, #28]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	61da      	str	r2, [r3, #28]
      break;
 8006f38:	e023      	b.n	8006f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fa53 	bl	80073ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69d9      	ldr	r1, [r3, #28]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	021a      	lsls	r2, r3, #8
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	61da      	str	r2, [r3, #28]
      break;
 8006f7a:	e002      	b.n	8006f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a40      	ldr	r2, [pc, #256]	; (800710c <TIM_Base_SetConfig+0x114>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d00f      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3d      	ldr	r2, [pc, #244]	; (8007110 <TIM_Base_SetConfig+0x118>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00b      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a3c      	ldr	r2, [pc, #240]	; (8007114 <TIM_Base_SetConfig+0x11c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d007      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a3b      	ldr	r2, [pc, #236]	; (8007118 <TIM_Base_SetConfig+0x120>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a3a      	ldr	r2, [pc, #232]	; (800711c <TIM_Base_SetConfig+0x124>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d108      	bne.n	800704a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2f      	ldr	r2, [pc, #188]	; (800710c <TIM_Base_SetConfig+0x114>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d02b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007058:	d027      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <TIM_Base_SetConfig+0x118>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d023      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <TIM_Base_SetConfig+0x11c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01f      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <TIM_Base_SetConfig+0x120>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a29      	ldr	r2, [pc, #164]	; (800711c <TIM_Base_SetConfig+0x124>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d017      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a28      	ldr	r2, [pc, #160]	; (8007120 <TIM_Base_SetConfig+0x128>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a27      	ldr	r2, [pc, #156]	; (8007124 <TIM_Base_SetConfig+0x12c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00f      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a26      	ldr	r2, [pc, #152]	; (8007128 <TIM_Base_SetConfig+0x130>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a25      	ldr	r2, [pc, #148]	; (800712c <TIM_Base_SetConfig+0x134>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a24      	ldr	r2, [pc, #144]	; (8007130 <TIM_Base_SetConfig+0x138>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a23      	ldr	r2, [pc, #140]	; (8007134 <TIM_Base_SetConfig+0x13c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d108      	bne.n	80070bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <TIM_Base_SetConfig+0x114>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_Base_SetConfig+0xf8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a0c      	ldr	r2, [pc, #48]	; (800711c <TIM_Base_SetConfig+0x124>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d103      	bne.n	80070f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	615a      	str	r2, [r3, #20]
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40010000 	.word	0x40010000
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40000c00 	.word	0x40000c00
 800711c:	40010400 	.word	0x40010400
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800
 800712c:	40001800 	.word	0x40001800
 8007130:	40001c00 	.word	0x40001c00
 8007134:	40002000 	.word	0x40002000

08007138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f023 0201 	bic.w	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 0302 	bic.w	r3, r3, #2
 8007180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a20      	ldr	r2, [pc, #128]	; (8007210 <TIM_OC1_SetConfig+0xd8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_OC1_SetConfig+0x64>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a1f      	ldr	r2, [pc, #124]	; (8007214 <TIM_OC1_SetConfig+0xdc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d10c      	bne.n	80071b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0308 	bic.w	r3, r3, #8
 80071a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f023 0304 	bic.w	r3, r3, #4
 80071b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a15      	ldr	r2, [pc, #84]	; (8007210 <TIM_OC1_SetConfig+0xd8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_OC1_SetConfig+0x8e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a14      	ldr	r2, [pc, #80]	; (8007214 <TIM_OC1_SetConfig+0xdc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d111      	bne.n	80071ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	621a      	str	r2, [r3, #32]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40010000 	.word	0x40010000
 8007214:	40010400 	.word	0x40010400

08007218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0210 	bic.w	r2, r3, #16
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 0320 	bic.w	r3, r3, #32
 8007262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a22      	ldr	r2, [pc, #136]	; (80072fc <TIM_OC2_SetConfig+0xe4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <TIM_OC2_SetConfig+0x68>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a21      	ldr	r2, [pc, #132]	; (8007300 <TIM_OC2_SetConfig+0xe8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10d      	bne.n	800729c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <TIM_OC2_SetConfig+0xe4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC2_SetConfig+0x94>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a16      	ldr	r2, [pc, #88]	; (8007300 <TIM_OC2_SetConfig+0xe8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d113      	bne.n	80072d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40010400 	.word	0x40010400

08007304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800734c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <TIM_OC3_SetConfig+0xe0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d003      	beq.n	800736a <TIM_OC3_SetConfig+0x66>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a20      	ldr	r2, [pc, #128]	; (80073e8 <TIM_OC3_SetConfig+0xe4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d10d      	bne.n	8007386 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a16      	ldr	r2, [pc, #88]	; (80073e4 <TIM_OC3_SetConfig+0xe0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d003      	beq.n	8007396 <TIM_OC3_SetConfig+0x92>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <TIM_OC3_SetConfig+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d113      	bne.n	80073be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800739c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	621a      	str	r2, [r3, #32]
}
 80073d8:	bf00      	nop
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400

080073ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a12      	ldr	r2, [pc, #72]	; (8007490 <TIM_OC4_SetConfig+0xa4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_OC4_SetConfig+0x68>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a11      	ldr	r2, [pc, #68]	; (8007494 <TIM_OC4_SetConfig+0xa8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d109      	bne.n	8007468 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800745a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	019b      	lsls	r3, r3, #6
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	4313      	orrs	r3, r2
 8007466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	621a      	str	r2, [r3, #32]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40010000 	.word	0x40010000
 8007494:	40010400 	.word	0x40010400

08007498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2201      	movs	r2, #1
 80074ac:	fa02 f303 	lsl.w	r3, r2, r3
 80074b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1a      	ldr	r2, [r3, #32]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	401a      	ands	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a1a      	ldr	r2, [r3, #32]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	fa01 f303 	lsl.w	r3, r1, r3
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e05a      	b.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a21      	ldr	r2, [pc, #132]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d01d      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1d      	ldr	r2, [pc, #116]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1a      	ldr	r2, [pc, #104]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a17      	ldr	r2, [pc, #92]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d10c      	bne.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	4313      	orrs	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40010400 	.word	0x40010400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40001800 	.word	0x40001800

080075dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e03d      	b.n	8007674 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e03f      	b.n	800773a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7f9 ffc8 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2224      	movs	r2, #36	; 0x24
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fdef 	bl	80082d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695a      	ldr	r2, [r3, #20]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	; 0x30
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b20      	cmp	r3, #32
 800775c:	d165      	bne.n	800782a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_UART_Transmit_DMA+0x26>
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e05e      	b.n	800782c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_UART_Transmit_DMA+0x38>
 8007778:	2302      	movs	r3, #2
 800777a:	e057      	b.n	800782c <HAL_UART_Transmit_DMA+0xe8>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	88fa      	ldrh	r2, [r7, #6]
 800778e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	88fa      	ldrh	r2, [r7, #6]
 8007794:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2221      	movs	r2, #33	; 0x21
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	4a22      	ldr	r2, [pc, #136]	; (8007834 <HAL_UART_Transmit_DMA+0xf0>)
 80077aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b0:	4a21      	ldr	r2, [pc, #132]	; (8007838 <HAL_UART_Transmit_DMA+0xf4>)
 80077b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	4a20      	ldr	r2, [pc, #128]	; (800783c <HAL_UART_Transmit_DMA+0xf8>)
 80077ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	2200      	movs	r2, #0
 80077c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80077c4:	f107 0308 	add.w	r3, r7, #8
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	6819      	ldr	r1, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3304      	adds	r3, #4
 80077d8:	461a      	mov	r2, r3
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	f7fa fe62 	bl	80024a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077e8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	617b      	str	r3, [r7, #20]
   return(result);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3314      	adds	r3, #20
 8007810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007812:	627a      	str	r2, [r7, #36]	; 0x24
 8007814:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6a39      	ldr	r1, [r7, #32]
 8007818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e5      	bne.n	80077f2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e000      	b.n	800782c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800782a:	2302      	movs	r3, #2
  }
}
 800782c:	4618      	mov	r0, r3
 800782e:	3730      	adds	r7, #48	; 0x30
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	08007e01 	.word	0x08007e01
 8007838:	08007e9b 	.word	0x08007e9b
 800783c:	08007eb7 	.word	0x08007eb7

08007840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b0ba      	sub	sp, #232	; 0xe8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007866:	2300      	movs	r3, #0
 8007868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800786c:	2300      	movs	r3, #0
 800786e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800787e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10f      	bne.n	80078a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <HAL_UART_IRQHandler+0x66>
 8007892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fc5a 	bl	8008158 <UART_Receive_IT>
      return;
 80078a4:	e256      	b.n	8007d54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 80de 	beq.w	8007a6c <HAL_UART_IRQHandler+0x22c>
 80078b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80d1 	beq.w	8007a6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <HAL_UART_IRQHandler+0xae>
 80078d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	f043 0201 	orr.w	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00b      	beq.n	8007912 <HAL_UART_IRQHandler+0xd2>
 80078fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d005      	beq.n	8007912 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	f043 0202 	orr.w	r2, r3, #2
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <HAL_UART_IRQHandler+0xf6>
 800791e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	f043 0204 	orr.w	r2, r3, #4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d011      	beq.n	8007966 <HAL_UART_IRQHandler+0x126>
 8007942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800794e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	f043 0208 	orr.w	r2, r3, #8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 81ed 	beq.w	8007d4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <HAL_UART_IRQHandler+0x14e>
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fbe5 	bl	8008158 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d103      	bne.n	80079ba <HAL_UART_IRQHandler+0x17a>
 80079b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d04f      	beq.n	8007a5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 faed 	bl	8007f9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d141      	bne.n	8007a52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3314      	adds	r3, #20
 80079d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3314      	adds	r3, #20
 80079f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1d9      	bne.n	80079ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d013      	beq.n	8007a4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	4a7d      	ldr	r2, [pc, #500]	; (8007c1c <HAL_UART_IRQHandler+0x3dc>)
 8007a28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fa fe00 	bl	8002634 <HAL_DMA_Abort_IT>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d016      	beq.n	8007a68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a48:	e00e      	b.n	8007a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9a4 	bl	8007d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e00a      	b.n	8007a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f9a0 	bl	8007d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e006      	b.n	8007a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f99c 	bl	8007d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a66:	e170      	b.n	8007d4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a68:	bf00      	nop
    return;
 8007a6a:	e16e      	b.n	8007d4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	f040 814a 	bne.w	8007d0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7a:	f003 0310 	and.w	r3, r3, #16
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 8143 	beq.w	8007d0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 813c 	beq.w	8007d0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	f040 80b4 	bne.w	8007c20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ac4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8140 	beq.w	8007d4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	f080 8139 	bcs.w	8007d4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aee:	f000 8088 	beq.w	8007c02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1d9      	bne.n	8007af2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3314      	adds	r3, #20
 8007b44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e1      	bne.n	8007b3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3314      	adds	r3, #20
 8007b80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3314      	adds	r3, #20
 8007b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e3      	bne.n	8007b7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007be4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007be6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e3      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fa fca9 	bl	8002554 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8ca 	bl	8007dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c18:	e099      	b.n	8007d4e <HAL_UART_IRQHandler+0x50e>
 8007c1a:	bf00      	nop
 8007c1c:	08008061 	.word	0x08008061
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 808b 	beq.w	8007d52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8086 	beq.w	8007d52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c6a:	647a      	str	r2, [r7, #68]	; 0x44
 8007c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e3      	bne.n	8007c46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3314      	adds	r3, #20
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3314      	adds	r3, #20
 8007c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e3      	bne.n	8007c7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	330c      	adds	r3, #12
 8007cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	330c      	adds	r3, #12
 8007ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ce8:	61fa      	str	r2, [r7, #28]
 8007cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	69b9      	ldr	r1, [r7, #24]
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e3      	bne.n	8007cc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f852 	bl	8007dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d08:	e023      	b.n	8007d52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <HAL_UART_IRQHandler+0x4ea>
 8007d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9b0 	bl	8008088 <UART_Transmit_IT>
    return;
 8007d28:	e014      	b.n	8007d54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00e      	beq.n	8007d54 <HAL_UART_IRQHandler+0x514>
 8007d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9f0 	bl	8008128 <UART_EndTransmit_IT>
    return;
 8007d48:	e004      	b.n	8007d54 <HAL_UART_IRQHandler+0x514>
    return;
 8007d4a:	bf00      	nop
 8007d4c:	e002      	b.n	8007d54 <HAL_UART_IRQHandler+0x514>
      return;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <HAL_UART_IRQHandler+0x514>
      return;
 8007d52:	bf00      	nop
  }
}
 8007d54:	37e8      	adds	r7, #232	; 0xe8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop

08007d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b2db      	uxtb	r3, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b090      	sub	sp, #64	; 0x40
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d137      	bne.n	8007e8c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	2200      	movs	r2, #0
 8007e20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3314      	adds	r3, #20
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	623b      	str	r3, [r7, #32]
   return(result);
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e42:	633a      	str	r2, [r7, #48]	; 0x30
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e5      	bne.n	8007e22 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	330c      	adds	r3, #12
 8007e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e76:	61fa      	str	r2, [r7, #28]
 8007e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	69b9      	ldr	r1, [r7, #24]
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	617b      	str	r3, [r7, #20]
   return(result);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e5      	bne.n	8007e56 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e8a:	e002      	b.n	8007e92 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e8e:	f7ff ff65 	bl	8007d5c <HAL_UART_TxCpltCallback>
}
 8007e92:	bf00      	nop
 8007e94:	3740      	adds	r7, #64	; 0x40
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff ff61 	bl	8007d70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b80      	cmp	r3, #128	; 0x80
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b21      	cmp	r3, #33	; 0x21
 8007ee8:	d108      	bne.n	8007efc <UART_DMAError+0x46>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ef6:	68b8      	ldr	r0, [r7, #8]
 8007ef8:	f000 f827 	bl	8007f4a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	bf0c      	ite	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	2300      	movne	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b22      	cmp	r3, #34	; 0x22
 8007f1c:	d108      	bne.n	8007f30 <UART_DMAError+0x7a>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2200      	movs	r2, #0
 8007f28:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f2a:	68b8      	ldr	r0, [r7, #8]
 8007f2c:	f000 f835 	bl	8007f9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	f043 0210 	orr.w	r2, r3, #16
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f3c:	68b8      	ldr	r0, [r7, #8]
 8007f3e:	f7ff ff2b 	bl	8007d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b089      	sub	sp, #36	; 0x24
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	61ba      	str	r2, [r7, #24]
 8007f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6979      	ldr	r1, [r7, #20]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e5      	bne.n	8007f52 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f8e:	bf00      	nop
 8007f90:	3724      	adds	r7, #36	; 0x24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b095      	sub	sp, #84	; 0x54
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	330c      	adds	r3, #12
 8007fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc2:	643a      	str	r2, [r7, #64]	; 0x40
 8007fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3314      	adds	r3, #20
 8007fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f023 0301 	bic.w	r3, r3, #1
 8007fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	2b01      	cmp	r3, #1
 8008010:	d119      	bne.n	8008046 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	330c      	adds	r3, #12
 8008018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	60bb      	str	r3, [r7, #8]
   return(result);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f023 0310 	bic.w	r3, r3, #16
 8008028:	647b      	str	r3, [r7, #68]	; 0x44
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	330c      	adds	r3, #12
 8008030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008032:	61ba      	str	r2, [r7, #24]
 8008034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6979      	ldr	r1, [r7, #20]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	613b      	str	r3, [r7, #16]
   return(result);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e5      	bne.n	8008012 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008054:	bf00      	nop
 8008056:	3754      	adds	r7, #84	; 0x54
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7ff fe8c 	bl	8007d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008080:	bf00      	nop
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b21      	cmp	r3, #33	; 0x21
 800809a:	d13e      	bne.n	800811a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a4:	d114      	bne.n	80080d0 <UART_Transmit_IT+0x48>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d110      	bne.n	80080d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	1c9a      	adds	r2, r3, #2
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	621a      	str	r2, [r3, #32]
 80080ce:	e008      	b.n	80080e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	1c59      	adds	r1, r3, #1
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6211      	str	r1, [r2, #32]
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4619      	mov	r1, r3
 80080f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10f      	bne.n	8008116 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008104:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008114:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e000      	b.n	800811c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800811a:	2302      	movs	r3, #2
  }
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800813e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff fe07 	bl	8007d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08c      	sub	sp, #48	; 0x30
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b22      	cmp	r3, #34	; 0x22
 800816a:	f040 80ab 	bne.w	80082c4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008176:	d117      	bne.n	80081a8 <UART_Receive_IT+0x50>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d113      	bne.n	80081a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008180:	2300      	movs	r3, #0
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	b29a      	uxth	r2, r3
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	1c9a      	adds	r2, r3, #2
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	629a      	str	r2, [r3, #40]	; 0x28
 80081a6:	e026      	b.n	80081f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ba:	d007      	beq.n	80081cc <UART_Receive_IT+0x74>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <UART_Receive_IT+0x82>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	e008      	b.n	80081ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29b      	uxth	r3, r3
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	4619      	mov	r1, r3
 8008204:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008206:	2b00      	cmp	r3, #0
 8008208:	d15a      	bne.n	80082c0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0220 	bic.w	r2, r2, #32
 8008218:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008228:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695a      	ldr	r2, [r3, #20]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0201 	bic.w	r2, r2, #1
 8008238:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	2b01      	cmp	r3, #1
 8008248:	d135      	bne.n	80082b6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	330c      	adds	r3, #12
 8008256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	613b      	str	r3, [r7, #16]
   return(result);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f023 0310 	bic.w	r3, r3, #16
 8008266:	627b      	str	r3, [r7, #36]	; 0x24
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	330c      	adds	r3, #12
 800826e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008270:	623a      	str	r2, [r7, #32]
 8008272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	69f9      	ldr	r1, [r7, #28]
 8008276:	6a3a      	ldr	r2, [r7, #32]
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	61bb      	str	r3, [r7, #24]
   return(result);
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e5      	bne.n	8008250 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b10      	cmp	r3, #16
 8008290:	d10a      	bne.n	80082a8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fd7c 	bl	8007dac <HAL_UARTEx_RxEventCallback>
 80082b4:	e002      	b.n	80082bc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fd64 	bl	8007d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e002      	b.n	80082c6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e000      	b.n	80082c6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082c4:	2302      	movs	r3, #2
  }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3730      	adds	r7, #48	; 0x30
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082d4:	b0c0      	sub	sp, #256	; 0x100
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ec:	68d9      	ldr	r1, [r3, #12]
 80082ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	ea40 0301 	orr.w	r3, r0, r1
 80082f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	431a      	orrs	r2, r3
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	431a      	orrs	r2, r3
 8008310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008328:	f021 010c 	bic.w	r1, r1, #12
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008336:	430b      	orrs	r3, r1
 8008338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800833a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834a:	6999      	ldr	r1, [r3, #24]
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	ea40 0301 	orr.w	r3, r0, r1
 8008356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4b8f      	ldr	r3, [pc, #572]	; (800859c <UART_SetConfig+0x2cc>)
 8008360:	429a      	cmp	r2, r3
 8008362:	d005      	beq.n	8008370 <UART_SetConfig+0xa0>
 8008364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4b8d      	ldr	r3, [pc, #564]	; (80085a0 <UART_SetConfig+0x2d0>)
 800836c:	429a      	cmp	r2, r3
 800836e:	d104      	bne.n	800837a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008370:	f7fd fad4 	bl	800591c <HAL_RCC_GetPCLK2Freq>
 8008374:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008378:	e003      	b.n	8008382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800837a:	f7fd fabb 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 800837e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800838c:	f040 810c 	bne.w	80085a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008394:	2200      	movs	r2, #0
 8008396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800839a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800839e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083a2:	4622      	mov	r2, r4
 80083a4:	462b      	mov	r3, r5
 80083a6:	1891      	adds	r1, r2, r2
 80083a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80083aa:	415b      	adcs	r3, r3
 80083ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083b2:	4621      	mov	r1, r4
 80083b4:	eb12 0801 	adds.w	r8, r2, r1
 80083b8:	4629      	mov	r1, r5
 80083ba:	eb43 0901 	adc.w	r9, r3, r1
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083d2:	4690      	mov	r8, r2
 80083d4:	4699      	mov	r9, r3
 80083d6:	4623      	mov	r3, r4
 80083d8:	eb18 0303 	adds.w	r3, r8, r3
 80083dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083e0:	462b      	mov	r3, r5
 80083e2:	eb49 0303 	adc.w	r3, r9, r3
 80083e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083fe:	460b      	mov	r3, r1
 8008400:	18db      	adds	r3, r3, r3
 8008402:	653b      	str	r3, [r7, #80]	; 0x50
 8008404:	4613      	mov	r3, r2
 8008406:	eb42 0303 	adc.w	r3, r2, r3
 800840a:	657b      	str	r3, [r7, #84]	; 0x54
 800840c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008414:	f7f7 ff54 	bl	80002c0 <__aeabi_uldivmod>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4b61      	ldr	r3, [pc, #388]	; (80085a4 <UART_SetConfig+0x2d4>)
 800841e:	fba3 2302 	umull	r2, r3, r3, r2
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	011c      	lsls	r4, r3, #4
 8008426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842a:	2200      	movs	r2, #0
 800842c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008430:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	1891      	adds	r1, r2, r2
 800843e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008440:	415b      	adcs	r3, r3
 8008442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008448:	4641      	mov	r1, r8
 800844a:	eb12 0a01 	adds.w	sl, r2, r1
 800844e:	4649      	mov	r1, r9
 8008450:	eb43 0b01 	adc.w	fp, r3, r1
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008468:	4692      	mov	sl, r2
 800846a:	469b      	mov	fp, r3
 800846c:	4643      	mov	r3, r8
 800846e:	eb1a 0303 	adds.w	r3, sl, r3
 8008472:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008476:	464b      	mov	r3, r9
 8008478:	eb4b 0303 	adc.w	r3, fp, r3
 800847c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800848c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008494:	460b      	mov	r3, r1
 8008496:	18db      	adds	r3, r3, r3
 8008498:	643b      	str	r3, [r7, #64]	; 0x40
 800849a:	4613      	mov	r3, r2
 800849c:	eb42 0303 	adc.w	r3, r2, r3
 80084a0:	647b      	str	r3, [r7, #68]	; 0x44
 80084a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084aa:	f7f7 ff09 	bl	80002c0 <__aeabi_uldivmod>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	4b3b      	ldr	r3, [pc, #236]	; (80085a4 <UART_SetConfig+0x2d4>)
 80084b6:	fba3 2301 	umull	r2, r3, r3, r1
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	2264      	movs	r2, #100	; 0x64
 80084be:	fb02 f303 	mul.w	r3, r2, r3
 80084c2:	1acb      	subs	r3, r1, r3
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084ca:	4b36      	ldr	r3, [pc, #216]	; (80085a4 <UART_SetConfig+0x2d4>)
 80084cc:	fba3 2302 	umull	r2, r3, r3, r2
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084d8:	441c      	add	r4, r3
 80084da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084ec:	4642      	mov	r2, r8
 80084ee:	464b      	mov	r3, r9
 80084f0:	1891      	adds	r1, r2, r2
 80084f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80084f4:	415b      	adcs	r3, r3
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084fc:	4641      	mov	r1, r8
 80084fe:	1851      	adds	r1, r2, r1
 8008500:	6339      	str	r1, [r7, #48]	; 0x30
 8008502:	4649      	mov	r1, r9
 8008504:	414b      	adcs	r3, r1
 8008506:	637b      	str	r3, [r7, #52]	; 0x34
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008514:	4659      	mov	r1, fp
 8008516:	00cb      	lsls	r3, r1, #3
 8008518:	4651      	mov	r1, sl
 800851a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800851e:	4651      	mov	r1, sl
 8008520:	00ca      	lsls	r2, r1, #3
 8008522:	4610      	mov	r0, r2
 8008524:	4619      	mov	r1, r3
 8008526:	4603      	mov	r3, r0
 8008528:	4642      	mov	r2, r8
 800852a:	189b      	adds	r3, r3, r2
 800852c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008530:	464b      	mov	r3, r9
 8008532:	460a      	mov	r2, r1
 8008534:	eb42 0303 	adc.w	r3, r2, r3
 8008538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008548:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800854c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008550:	460b      	mov	r3, r1
 8008552:	18db      	adds	r3, r3, r3
 8008554:	62bb      	str	r3, [r7, #40]	; 0x28
 8008556:	4613      	mov	r3, r2
 8008558:	eb42 0303 	adc.w	r3, r2, r3
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800855e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008566:	f7f7 feab 	bl	80002c0 <__aeabi_uldivmod>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <UART_SetConfig+0x2d4>)
 8008570:	fba3 1302 	umull	r1, r3, r3, r2
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	2164      	movs	r1, #100	; 0x64
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	3332      	adds	r3, #50	; 0x32
 8008582:	4a08      	ldr	r2, [pc, #32]	; (80085a4 <UART_SetConfig+0x2d4>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	f003 0207 	and.w	r2, r3, #7
 800858e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4422      	add	r2, r4
 8008596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008598:	e106      	b.n	80087a8 <UART_SetConfig+0x4d8>
 800859a:	bf00      	nop
 800859c:	40011000 	.word	0x40011000
 80085a0:	40011400 	.word	0x40011400
 80085a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085ba:	4642      	mov	r2, r8
 80085bc:	464b      	mov	r3, r9
 80085be:	1891      	adds	r1, r2, r2
 80085c0:	6239      	str	r1, [r7, #32]
 80085c2:	415b      	adcs	r3, r3
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
 80085c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085ca:	4641      	mov	r1, r8
 80085cc:	1854      	adds	r4, r2, r1
 80085ce:	4649      	mov	r1, r9
 80085d0:	eb43 0501 	adc.w	r5, r3, r1
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	00eb      	lsls	r3, r5, #3
 80085de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085e2:	00e2      	lsls	r2, r4, #3
 80085e4:	4614      	mov	r4, r2
 80085e6:	461d      	mov	r5, r3
 80085e8:	4643      	mov	r3, r8
 80085ea:	18e3      	adds	r3, r4, r3
 80085ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085f0:	464b      	mov	r3, r9
 80085f2:	eb45 0303 	adc.w	r3, r5, r3
 80085f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	f04f 0300 	mov.w	r3, #0
 8008612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008616:	4629      	mov	r1, r5
 8008618:	008b      	lsls	r3, r1, #2
 800861a:	4621      	mov	r1, r4
 800861c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008620:	4621      	mov	r1, r4
 8008622:	008a      	lsls	r2, r1, #2
 8008624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008628:	f7f7 fe4a 	bl	80002c0 <__aeabi_uldivmod>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4b60      	ldr	r3, [pc, #384]	; (80087b4 <UART_SetConfig+0x4e4>)
 8008632:	fba3 2302 	umull	r2, r3, r3, r2
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	011c      	lsls	r4, r3, #4
 800863a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863e:	2200      	movs	r2, #0
 8008640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800864c:	4642      	mov	r2, r8
 800864e:	464b      	mov	r3, r9
 8008650:	1891      	adds	r1, r2, r2
 8008652:	61b9      	str	r1, [r7, #24]
 8008654:	415b      	adcs	r3, r3
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800865c:	4641      	mov	r1, r8
 800865e:	1851      	adds	r1, r2, r1
 8008660:	6139      	str	r1, [r7, #16]
 8008662:	4649      	mov	r1, r9
 8008664:	414b      	adcs	r3, r1
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	f04f 0200 	mov.w	r2, #0
 800866c:	f04f 0300 	mov.w	r3, #0
 8008670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008674:	4659      	mov	r1, fp
 8008676:	00cb      	lsls	r3, r1, #3
 8008678:	4651      	mov	r1, sl
 800867a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800867e:	4651      	mov	r1, sl
 8008680:	00ca      	lsls	r2, r1, #3
 8008682:	4610      	mov	r0, r2
 8008684:	4619      	mov	r1, r3
 8008686:	4603      	mov	r3, r0
 8008688:	4642      	mov	r2, r8
 800868a:	189b      	adds	r3, r3, r2
 800868c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008690:	464b      	mov	r3, r9
 8008692:	460a      	mov	r2, r1
 8008694:	eb42 0303 	adc.w	r3, r2, r3
 8008698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800869c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80086a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086b4:	4649      	mov	r1, r9
 80086b6:	008b      	lsls	r3, r1, #2
 80086b8:	4641      	mov	r1, r8
 80086ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086be:	4641      	mov	r1, r8
 80086c0:	008a      	lsls	r2, r1, #2
 80086c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086c6:	f7f7 fdfb 	bl	80002c0 <__aeabi_uldivmod>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4611      	mov	r1, r2
 80086d0:	4b38      	ldr	r3, [pc, #224]	; (80087b4 <UART_SetConfig+0x4e4>)
 80086d2:	fba3 2301 	umull	r2, r3, r3, r1
 80086d6:	095b      	lsrs	r3, r3, #5
 80086d8:	2264      	movs	r2, #100	; 0x64
 80086da:	fb02 f303 	mul.w	r3, r2, r3
 80086de:	1acb      	subs	r3, r1, r3
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	3332      	adds	r3, #50	; 0x32
 80086e4:	4a33      	ldr	r2, [pc, #204]	; (80087b4 <UART_SetConfig+0x4e4>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086f0:	441c      	add	r4, r3
 80086f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f6:	2200      	movs	r2, #0
 80086f8:	673b      	str	r3, [r7, #112]	; 0x70
 80086fa:	677a      	str	r2, [r7, #116]	; 0x74
 80086fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	1891      	adds	r1, r2, r2
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	415b      	adcs	r3, r3
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008710:	4641      	mov	r1, r8
 8008712:	1851      	adds	r1, r2, r1
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	4649      	mov	r1, r9
 8008718:	414b      	adcs	r3, r1
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008728:	4659      	mov	r1, fp
 800872a:	00cb      	lsls	r3, r1, #3
 800872c:	4651      	mov	r1, sl
 800872e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008732:	4651      	mov	r1, sl
 8008734:	00ca      	lsls	r2, r1, #3
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	4603      	mov	r3, r0
 800873c:	4642      	mov	r2, r8
 800873e:	189b      	adds	r3, r3, r2
 8008740:	66bb      	str	r3, [r7, #104]	; 0x68
 8008742:	464b      	mov	r3, r9
 8008744:	460a      	mov	r2, r1
 8008746:	eb42 0303 	adc.w	r3, r2, r3
 800874a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800874c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	663b      	str	r3, [r7, #96]	; 0x60
 8008756:	667a      	str	r2, [r7, #100]	; 0x64
 8008758:	f04f 0200 	mov.w	r2, #0
 800875c:	f04f 0300 	mov.w	r3, #0
 8008760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008764:	4649      	mov	r1, r9
 8008766:	008b      	lsls	r3, r1, #2
 8008768:	4641      	mov	r1, r8
 800876a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800876e:	4641      	mov	r1, r8
 8008770:	008a      	lsls	r2, r1, #2
 8008772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008776:	f7f7 fda3 	bl	80002c0 <__aeabi_uldivmod>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <UART_SetConfig+0x4e4>)
 8008780:	fba3 1302 	umull	r1, r3, r3, r2
 8008784:	095b      	lsrs	r3, r3, #5
 8008786:	2164      	movs	r1, #100	; 0x64
 8008788:	fb01 f303 	mul.w	r3, r1, r3
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	3332      	adds	r3, #50	; 0x32
 8008792:	4a08      	ldr	r2, [pc, #32]	; (80087b4 <UART_SetConfig+0x4e4>)
 8008794:	fba2 2303 	umull	r2, r3, r2, r3
 8008798:	095b      	lsrs	r3, r3, #5
 800879a:	f003 020f 	and.w	r2, r3, #15
 800879e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4422      	add	r2, r4
 80087a6:	609a      	str	r2, [r3, #8]
}
 80087a8:	bf00      	nop
 80087aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087ae:	46bd      	mov	sp, r7
 80087b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087b4:	51eb851f 	.word	0x51eb851f

080087b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087b8:	b084      	sub	sp, #16
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	f107 001c 	add.w	r0, r7, #28
 80087c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d122      	bne.n	8008816 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d105      	bne.n	800880a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa9c 	bl	8008d48 <USB_CoreReset>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
 8008814:	e01a      	b.n	800884c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa90 	bl	8008d48 <USB_CoreReset>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800882c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	639a      	str	r2, [r3, #56]	; 0x38
 800883e:	e005      	b.n	800884c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10b      	bne.n	800886a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f043 0206 	orr.w	r2, r3, #6
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f043 0220 	orr.w	r2, r3, #32
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008876:	b004      	add	sp, #16
 8008878:	4770      	bx	lr

0800887a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f023 0201 	bic.w	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d115      	bne.n	80088ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088ca:	2001      	movs	r0, #1
 80088cc:	f7f9 f93e 	bl	8001b4c <HAL_Delay>
      ms++;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa28 	bl	8008d2c <USB_GetMode>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d01e      	beq.n	8008920 <USB_SetCurrentMode+0x84>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b31      	cmp	r3, #49	; 0x31
 80088e6:	d9f0      	bls.n	80088ca <USB_SetCurrentMode+0x2e>
 80088e8:	e01a      	b.n	8008920 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d115      	bne.n	800891c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088fc:	2001      	movs	r0, #1
 80088fe:	f7f9 f925 	bl	8001b4c <HAL_Delay>
      ms++;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fa0f 	bl	8008d2c <USB_GetMode>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <USB_SetCurrentMode+0x84>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b31      	cmp	r3, #49	; 0x31
 8008918:	d9f0      	bls.n	80088fc <USB_SetCurrentMode+0x60>
 800891a:	e001      	b.n	8008920 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e005      	b.n	800892c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b32      	cmp	r3, #50	; 0x32
 8008924:	d101      	bne.n	800892a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008934:	b084      	sub	sp, #16
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800894e:	2300      	movs	r3, #0
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	e009      	b.n	8008968 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	3340      	adds	r3, #64	; 0x40
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	2200      	movs	r2, #0
 8008960:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	3301      	adds	r3, #1
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b0e      	cmp	r3, #14
 800896c:	d9f2      	bls.n	8008954 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800896e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11c      	bne.n	80089ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008982:	f043 0302 	orr.w	r3, r3, #2
 8008986:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	e005      	b.n	80089ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089c0:	461a      	mov	r2, r3
 80089c2:	2300      	movs	r3, #0
 80089c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089cc:	4619      	mov	r1, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d4:	461a      	mov	r2, r3
 80089d6:	680b      	ldr	r3, [r1, #0]
 80089d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d10c      	bne.n	80089fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089e6:	2100      	movs	r1, #0
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f965 	bl	8008cb8 <USB_SetDevSpeed>
 80089ee:	e008      	b.n	8008a02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089f0:	2101      	movs	r1, #1
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f960 	bl	8008cb8 <USB_SetDevSpeed>
 80089f8:	e003      	b.n	8008a02 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089fa:	2103      	movs	r1, #3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f95b 	bl	8008cb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a02:	2110      	movs	r1, #16
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f8f3 	bl	8008bf0 <USB_FlushTxFifo>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f91f 	bl	8008c58 <USB_FlushRxFifo>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a36:	461a      	mov	r2, r3
 8008a38:	2300      	movs	r3, #0
 8008a3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	461a      	mov	r2, r3
 8008a44:	2300      	movs	r3, #0
 8008a46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a48:	2300      	movs	r3, #0
 8008a4a:	613b      	str	r3, [r7, #16]
 8008a4c:	e043      	b.n	8008ad6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a64:	d118      	bne.n	8008a98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	e013      	b.n	8008aaa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	e008      	b.n	8008aaa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ace:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	613b      	str	r3, [r7, #16]
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d3b7      	bcc.n	8008a4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ade:	2300      	movs	r3, #0
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	e043      	b.n	8008b6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008afa:	d118      	bne.n	8008b2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e013      	b.n	8008b40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	461a      	mov	r2, r3
 8008b26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	e008      	b.n	8008b40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d3b7      	bcc.n	8008ae4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	f043 0210 	orr.w	r2, r3, #16
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699a      	ldr	r2, [r3, #24]
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <USB_DevInit+0x2b8>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f043 0208 	orr.w	r2, r3, #8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d107      	bne.n	8008bdc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bd4:	f043 0304 	orr.w	r3, r3, #4
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008be8:	b004      	add	sp, #16
 8008bea:	4770      	bx	lr
 8008bec:	803c3800 	.word	0x803c3800

08008bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4a13      	ldr	r2, [pc, #76]	; (8008c54 <USB_FlushTxFifo+0x64>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d901      	bls.n	8008c10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e01b      	b.n	8008c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	daf2      	bge.n	8008bfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	019b      	lsls	r3, r3, #6
 8008c20:	f043 0220 	orr.w	r2, r3, #32
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4a08      	ldr	r2, [pc, #32]	; (8008c54 <USB_FlushTxFifo+0x64>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d901      	bls.n	8008c3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e006      	b.n	8008c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d0f0      	beq.n	8008c28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	00030d40 	.word	0x00030d40

08008c58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4a11      	ldr	r2, [pc, #68]	; (8008cb4 <USB_FlushRxFifo+0x5c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d901      	bls.n	8008c76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e018      	b.n	8008ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	daf2      	bge.n	8008c64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2210      	movs	r2, #16
 8008c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4a08      	ldr	r2, [pc, #32]	; (8008cb4 <USB_FlushRxFifo+0x5c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d901      	bls.n	8008c9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e006      	b.n	8008ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0310 	and.w	r3, r3, #16
 8008ca2:	2b10      	cmp	r3, #16
 8008ca4:	d0f0      	beq.n	8008c88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	00030d40 	.word	0x00030d40

08008cb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d18:	f043 0302 	orr.w	r3, r3, #2
 8008d1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	f003 0301 	and.w	r3, r3, #1
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4a13      	ldr	r2, [pc, #76]	; (8008dac <USB_CoreReset+0x64>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d901      	bls.n	8008d66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e01b      	b.n	8008d9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	daf2      	bge.n	8008d54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	f043 0201 	orr.w	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4a09      	ldr	r2, [pc, #36]	; (8008dac <USB_CoreReset+0x64>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d901      	bls.n	8008d90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e006      	b.n	8008d9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d0f0      	beq.n	8008d7e <USB_CoreReset+0x36>

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	00030d40 	.word	0x00030d40

08008db0 <siprintf>:
 8008db0:	b40e      	push	{r1, r2, r3}
 8008db2:	b500      	push	{lr}
 8008db4:	b09c      	sub	sp, #112	; 0x70
 8008db6:	ab1d      	add	r3, sp, #116	; 0x74
 8008db8:	9002      	str	r0, [sp, #8]
 8008dba:	9006      	str	r0, [sp, #24]
 8008dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dc0:	4809      	ldr	r0, [pc, #36]	; (8008de8 <siprintf+0x38>)
 8008dc2:	9107      	str	r1, [sp, #28]
 8008dc4:	9104      	str	r1, [sp, #16]
 8008dc6:	4909      	ldr	r1, [pc, #36]	; (8008dec <siprintf+0x3c>)
 8008dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	a902      	add	r1, sp, #8
 8008dd4:	f000 f89a 	bl	8008f0c <_svfiprintf_r>
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	b01c      	add	sp, #112	; 0x70
 8008de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de4:	b003      	add	sp, #12
 8008de6:	4770      	bx	lr
 8008de8:	2000005c 	.word	0x2000005c
 8008dec:	ffff0208 	.word	0xffff0208

08008df0 <memset>:
 8008df0:	4402      	add	r2, r0
 8008df2:	4603      	mov	r3, r0
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d100      	bne.n	8008dfa <memset+0xa>
 8008df8:	4770      	bx	lr
 8008dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8008dfe:	e7f9      	b.n	8008df4 <memset+0x4>

08008e00 <__errno>:
 8008e00:	4b01      	ldr	r3, [pc, #4]	; (8008e08 <__errno+0x8>)
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	2000005c 	.word	0x2000005c

08008e0c <__libc_init_array>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	4d0d      	ldr	r5, [pc, #52]	; (8008e44 <__libc_init_array+0x38>)
 8008e10:	4c0d      	ldr	r4, [pc, #52]	; (8008e48 <__libc_init_array+0x3c>)
 8008e12:	1b64      	subs	r4, r4, r5
 8008e14:	10a4      	asrs	r4, r4, #2
 8008e16:	2600      	movs	r6, #0
 8008e18:	42a6      	cmp	r6, r4
 8008e1a:	d109      	bne.n	8008e30 <__libc_init_array+0x24>
 8008e1c:	4d0b      	ldr	r5, [pc, #44]	; (8008e4c <__libc_init_array+0x40>)
 8008e1e:	4c0c      	ldr	r4, [pc, #48]	; (8008e50 <__libc_init_array+0x44>)
 8008e20:	f000 fc6a 	bl	80096f8 <_init>
 8008e24:	1b64      	subs	r4, r4, r5
 8008e26:	10a4      	asrs	r4, r4, #2
 8008e28:	2600      	movs	r6, #0
 8008e2a:	42a6      	cmp	r6, r4
 8008e2c:	d105      	bne.n	8008e3a <__libc_init_array+0x2e>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e34:	4798      	blx	r3
 8008e36:	3601      	adds	r6, #1
 8008e38:	e7ee      	b.n	8008e18 <__libc_init_array+0xc>
 8008e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3e:	4798      	blx	r3
 8008e40:	3601      	adds	r6, #1
 8008e42:	e7f2      	b.n	8008e2a <__libc_init_array+0x1e>
 8008e44:	08009a0c 	.word	0x08009a0c
 8008e48:	08009a0c 	.word	0x08009a0c
 8008e4c:	08009a0c 	.word	0x08009a0c
 8008e50:	08009a10 	.word	0x08009a10

08008e54 <__retarget_lock_acquire_recursive>:
 8008e54:	4770      	bx	lr

08008e56 <__retarget_lock_release_recursive>:
 8008e56:	4770      	bx	lr

08008e58 <__ssputs_r>:
 8008e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	688e      	ldr	r6, [r1, #8]
 8008e5e:	461f      	mov	r7, r3
 8008e60:	42be      	cmp	r6, r7
 8008e62:	680b      	ldr	r3, [r1, #0]
 8008e64:	4682      	mov	sl, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	4690      	mov	r8, r2
 8008e6a:	d82c      	bhi.n	8008ec6 <__ssputs_r+0x6e>
 8008e6c:	898a      	ldrh	r2, [r1, #12]
 8008e6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e72:	d026      	beq.n	8008ec2 <__ssputs_r+0x6a>
 8008e74:	6965      	ldr	r5, [r4, #20]
 8008e76:	6909      	ldr	r1, [r1, #16]
 8008e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e7c:	eba3 0901 	sub.w	r9, r3, r1
 8008e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e84:	1c7b      	adds	r3, r7, #1
 8008e86:	444b      	add	r3, r9
 8008e88:	106d      	asrs	r5, r5, #1
 8008e8a:	429d      	cmp	r5, r3
 8008e8c:	bf38      	it	cc
 8008e8e:	461d      	movcc	r5, r3
 8008e90:	0553      	lsls	r3, r2, #21
 8008e92:	d527      	bpl.n	8008ee4 <__ssputs_r+0x8c>
 8008e94:	4629      	mov	r1, r5
 8008e96:	f000 f957 	bl	8009148 <_malloc_r>
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	b360      	cbz	r0, 8008ef8 <__ssputs_r+0xa0>
 8008e9e:	6921      	ldr	r1, [r4, #16]
 8008ea0:	464a      	mov	r2, r9
 8008ea2:	f000 fbc7 	bl	8009634 <memcpy>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	6126      	str	r6, [r4, #16]
 8008eb4:	6165      	str	r5, [r4, #20]
 8008eb6:	444e      	add	r6, r9
 8008eb8:	eba5 0509 	sub.w	r5, r5, r9
 8008ebc:	6026      	str	r6, [r4, #0]
 8008ebe:	60a5      	str	r5, [r4, #8]
 8008ec0:	463e      	mov	r6, r7
 8008ec2:	42be      	cmp	r6, r7
 8008ec4:	d900      	bls.n	8008ec8 <__ssputs_r+0x70>
 8008ec6:	463e      	mov	r6, r7
 8008ec8:	6820      	ldr	r0, [r4, #0]
 8008eca:	4632      	mov	r2, r6
 8008ecc:	4641      	mov	r1, r8
 8008ece:	f000 fb86 	bl	80095de <memmove>
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	1b9b      	subs	r3, r3, r6
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	4433      	add	r3, r6
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	f000 fb4b 	bl	8009580 <_realloc_r>
 8008eea:	4606      	mov	r6, r0
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d1e0      	bne.n	8008eb2 <__ssputs_r+0x5a>
 8008ef0:	6921      	ldr	r1, [r4, #16]
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	f000 fbac 	bl	8009650 <_free_r>
 8008ef8:	230c      	movs	r3, #12
 8008efa:	f8ca 3000 	str.w	r3, [sl]
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f0a:	e7e9      	b.n	8008ee0 <__ssputs_r+0x88>

08008f0c <_svfiprintf_r>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	4698      	mov	r8, r3
 8008f12:	898b      	ldrh	r3, [r1, #12]
 8008f14:	061b      	lsls	r3, r3, #24
 8008f16:	b09d      	sub	sp, #116	; 0x74
 8008f18:	4607      	mov	r7, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	d50e      	bpl.n	8008f3e <_svfiprintf_r+0x32>
 8008f20:	690b      	ldr	r3, [r1, #16]
 8008f22:	b963      	cbnz	r3, 8008f3e <_svfiprintf_r+0x32>
 8008f24:	2140      	movs	r1, #64	; 0x40
 8008f26:	f000 f90f 	bl	8009148 <_malloc_r>
 8008f2a:	6028      	str	r0, [r5, #0]
 8008f2c:	6128      	str	r0, [r5, #16]
 8008f2e:	b920      	cbnz	r0, 8008f3a <_svfiprintf_r+0x2e>
 8008f30:	230c      	movs	r3, #12
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f38:	e0d0      	b.n	80090dc <_svfiprintf_r+0x1d0>
 8008f3a:	2340      	movs	r3, #64	; 0x40
 8008f3c:	616b      	str	r3, [r5, #20]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9309      	str	r3, [sp, #36]	; 0x24
 8008f42:	2320      	movs	r3, #32
 8008f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f4c:	2330      	movs	r3, #48	; 0x30
 8008f4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090f4 <_svfiprintf_r+0x1e8>
 8008f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f56:	f04f 0901 	mov.w	r9, #1
 8008f5a:	4623      	mov	r3, r4
 8008f5c:	469a      	mov	sl, r3
 8008f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f62:	b10a      	cbz	r2, 8008f68 <_svfiprintf_r+0x5c>
 8008f64:	2a25      	cmp	r2, #37	; 0x25
 8008f66:	d1f9      	bne.n	8008f5c <_svfiprintf_r+0x50>
 8008f68:	ebba 0b04 	subs.w	fp, sl, r4
 8008f6c:	d00b      	beq.n	8008f86 <_svfiprintf_r+0x7a>
 8008f6e:	465b      	mov	r3, fp
 8008f70:	4622      	mov	r2, r4
 8008f72:	4629      	mov	r1, r5
 8008f74:	4638      	mov	r0, r7
 8008f76:	f7ff ff6f 	bl	8008e58 <__ssputs_r>
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	f000 80a9 	beq.w	80090d2 <_svfiprintf_r+0x1c6>
 8008f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f82:	445a      	add	r2, fp
 8008f84:	9209      	str	r2, [sp, #36]	; 0x24
 8008f86:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 80a1 	beq.w	80090d2 <_svfiprintf_r+0x1c6>
 8008f90:	2300      	movs	r3, #0
 8008f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f9a:	f10a 0a01 	add.w	sl, sl, #1
 8008f9e:	9304      	str	r3, [sp, #16]
 8008fa0:	9307      	str	r3, [sp, #28]
 8008fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa8:	4654      	mov	r4, sl
 8008faa:	2205      	movs	r2, #5
 8008fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb0:	4850      	ldr	r0, [pc, #320]	; (80090f4 <_svfiprintf_r+0x1e8>)
 8008fb2:	f7f7 f935 	bl	8000220 <memchr>
 8008fb6:	9a04      	ldr	r2, [sp, #16]
 8008fb8:	b9d8      	cbnz	r0, 8008ff2 <_svfiprintf_r+0xe6>
 8008fba:	06d0      	lsls	r0, r2, #27
 8008fbc:	bf44      	itt	mi
 8008fbe:	2320      	movmi	r3, #32
 8008fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc4:	0711      	lsls	r1, r2, #28
 8008fc6:	bf44      	itt	mi
 8008fc8:	232b      	movmi	r3, #43	; 0x2b
 8008fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fce:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd4:	d015      	beq.n	8009002 <_svfiprintf_r+0xf6>
 8008fd6:	9a07      	ldr	r2, [sp, #28]
 8008fd8:	4654      	mov	r4, sl
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f04f 0c0a 	mov.w	ip, #10
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fe6:	3b30      	subs	r3, #48	; 0x30
 8008fe8:	2b09      	cmp	r3, #9
 8008fea:	d94d      	bls.n	8009088 <_svfiprintf_r+0x17c>
 8008fec:	b1b0      	cbz	r0, 800901c <_svfiprintf_r+0x110>
 8008fee:	9207      	str	r2, [sp, #28]
 8008ff0:	e014      	b.n	800901c <_svfiprintf_r+0x110>
 8008ff2:	eba0 0308 	sub.w	r3, r0, r8
 8008ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	46a2      	mov	sl, r4
 8009000:	e7d2      	b.n	8008fa8 <_svfiprintf_r+0x9c>
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	1d19      	adds	r1, r3, #4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	9103      	str	r1, [sp, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	bfbb      	ittet	lt
 800900e:	425b      	neglt	r3, r3
 8009010:	f042 0202 	orrlt.w	r2, r2, #2
 8009014:	9307      	strge	r3, [sp, #28]
 8009016:	9307      	strlt	r3, [sp, #28]
 8009018:	bfb8      	it	lt
 800901a:	9204      	strlt	r2, [sp, #16]
 800901c:	7823      	ldrb	r3, [r4, #0]
 800901e:	2b2e      	cmp	r3, #46	; 0x2e
 8009020:	d10c      	bne.n	800903c <_svfiprintf_r+0x130>
 8009022:	7863      	ldrb	r3, [r4, #1]
 8009024:	2b2a      	cmp	r3, #42	; 0x2a
 8009026:	d134      	bne.n	8009092 <_svfiprintf_r+0x186>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	1d1a      	adds	r2, r3, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	9203      	str	r2, [sp, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfb8      	it	lt
 8009034:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009038:	3402      	adds	r4, #2
 800903a:	9305      	str	r3, [sp, #20]
 800903c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009104 <_svfiprintf_r+0x1f8>
 8009040:	7821      	ldrb	r1, [r4, #0]
 8009042:	2203      	movs	r2, #3
 8009044:	4650      	mov	r0, sl
 8009046:	f7f7 f8eb 	bl	8000220 <memchr>
 800904a:	b138      	cbz	r0, 800905c <_svfiprintf_r+0x150>
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	eba0 000a 	sub.w	r0, r0, sl
 8009052:	2240      	movs	r2, #64	; 0x40
 8009054:	4082      	lsls	r2, r0
 8009056:	4313      	orrs	r3, r2
 8009058:	3401      	adds	r4, #1
 800905a:	9304      	str	r3, [sp, #16]
 800905c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009060:	4825      	ldr	r0, [pc, #148]	; (80090f8 <_svfiprintf_r+0x1ec>)
 8009062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009066:	2206      	movs	r2, #6
 8009068:	f7f7 f8da 	bl	8000220 <memchr>
 800906c:	2800      	cmp	r0, #0
 800906e:	d038      	beq.n	80090e2 <_svfiprintf_r+0x1d6>
 8009070:	4b22      	ldr	r3, [pc, #136]	; (80090fc <_svfiprintf_r+0x1f0>)
 8009072:	bb1b      	cbnz	r3, 80090bc <_svfiprintf_r+0x1b0>
 8009074:	9b03      	ldr	r3, [sp, #12]
 8009076:	3307      	adds	r3, #7
 8009078:	f023 0307 	bic.w	r3, r3, #7
 800907c:	3308      	adds	r3, #8
 800907e:	9303      	str	r3, [sp, #12]
 8009080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009082:	4433      	add	r3, r6
 8009084:	9309      	str	r3, [sp, #36]	; 0x24
 8009086:	e768      	b.n	8008f5a <_svfiprintf_r+0x4e>
 8009088:	fb0c 3202 	mla	r2, ip, r2, r3
 800908c:	460c      	mov	r4, r1
 800908e:	2001      	movs	r0, #1
 8009090:	e7a6      	b.n	8008fe0 <_svfiprintf_r+0xd4>
 8009092:	2300      	movs	r3, #0
 8009094:	3401      	adds	r4, #1
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	4619      	mov	r1, r3
 800909a:	f04f 0c0a 	mov.w	ip, #10
 800909e:	4620      	mov	r0, r4
 80090a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090a4:	3a30      	subs	r2, #48	; 0x30
 80090a6:	2a09      	cmp	r2, #9
 80090a8:	d903      	bls.n	80090b2 <_svfiprintf_r+0x1a6>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0c6      	beq.n	800903c <_svfiprintf_r+0x130>
 80090ae:	9105      	str	r1, [sp, #20]
 80090b0:	e7c4      	b.n	800903c <_svfiprintf_r+0x130>
 80090b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090b6:	4604      	mov	r4, r0
 80090b8:	2301      	movs	r3, #1
 80090ba:	e7f0      	b.n	800909e <_svfiprintf_r+0x192>
 80090bc:	ab03      	add	r3, sp, #12
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	462a      	mov	r2, r5
 80090c2:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <_svfiprintf_r+0x1f4>)
 80090c4:	a904      	add	r1, sp, #16
 80090c6:	4638      	mov	r0, r7
 80090c8:	f3af 8000 	nop.w
 80090cc:	1c42      	adds	r2, r0, #1
 80090ce:	4606      	mov	r6, r0
 80090d0:	d1d6      	bne.n	8009080 <_svfiprintf_r+0x174>
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	065b      	lsls	r3, r3, #25
 80090d6:	f53f af2d 	bmi.w	8008f34 <_svfiprintf_r+0x28>
 80090da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090dc:	b01d      	add	sp, #116	; 0x74
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	ab03      	add	r3, sp, #12
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	462a      	mov	r2, r5
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <_svfiprintf_r+0x1f4>)
 80090ea:	a904      	add	r1, sp, #16
 80090ec:	4638      	mov	r0, r7
 80090ee:	f000 f919 	bl	8009324 <_printf_i>
 80090f2:	e7eb      	b.n	80090cc <_svfiprintf_r+0x1c0>
 80090f4:	080099d0 	.word	0x080099d0
 80090f8:	080099da 	.word	0x080099da
 80090fc:	00000000 	.word	0x00000000
 8009100:	08008e59 	.word	0x08008e59
 8009104:	080099d6 	.word	0x080099d6

08009108 <sbrk_aligned>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4e0e      	ldr	r6, [pc, #56]	; (8009144 <sbrk_aligned+0x3c>)
 800910c:	460c      	mov	r4, r1
 800910e:	6831      	ldr	r1, [r6, #0]
 8009110:	4605      	mov	r5, r0
 8009112:	b911      	cbnz	r1, 800911a <sbrk_aligned+0x12>
 8009114:	f000 fa7e 	bl	8009614 <_sbrk_r>
 8009118:	6030      	str	r0, [r6, #0]
 800911a:	4621      	mov	r1, r4
 800911c:	4628      	mov	r0, r5
 800911e:	f000 fa79 	bl	8009614 <_sbrk_r>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	d00a      	beq.n	800913c <sbrk_aligned+0x34>
 8009126:	1cc4      	adds	r4, r0, #3
 8009128:	f024 0403 	bic.w	r4, r4, #3
 800912c:	42a0      	cmp	r0, r4
 800912e:	d007      	beq.n	8009140 <sbrk_aligned+0x38>
 8009130:	1a21      	subs	r1, r4, r0
 8009132:	4628      	mov	r0, r5
 8009134:	f000 fa6e 	bl	8009614 <_sbrk_r>
 8009138:	3001      	adds	r0, #1
 800913a:	d101      	bne.n	8009140 <sbrk_aligned+0x38>
 800913c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009140:	4620      	mov	r0, r4
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	2001f288 	.word	0x2001f288

08009148 <_malloc_r>:
 8009148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800914c:	1ccd      	adds	r5, r1, #3
 800914e:	f025 0503 	bic.w	r5, r5, #3
 8009152:	3508      	adds	r5, #8
 8009154:	2d0c      	cmp	r5, #12
 8009156:	bf38      	it	cc
 8009158:	250c      	movcc	r5, #12
 800915a:	2d00      	cmp	r5, #0
 800915c:	4607      	mov	r7, r0
 800915e:	db01      	blt.n	8009164 <_malloc_r+0x1c>
 8009160:	42a9      	cmp	r1, r5
 8009162:	d905      	bls.n	8009170 <_malloc_r+0x28>
 8009164:	230c      	movs	r3, #12
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	2600      	movs	r6, #0
 800916a:	4630      	mov	r0, r6
 800916c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009170:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009244 <_malloc_r+0xfc>
 8009174:	f000 f9f8 	bl	8009568 <__malloc_lock>
 8009178:	f8d8 3000 	ldr.w	r3, [r8]
 800917c:	461c      	mov	r4, r3
 800917e:	bb5c      	cbnz	r4, 80091d8 <_malloc_r+0x90>
 8009180:	4629      	mov	r1, r5
 8009182:	4638      	mov	r0, r7
 8009184:	f7ff ffc0 	bl	8009108 <sbrk_aligned>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	4604      	mov	r4, r0
 800918c:	d155      	bne.n	800923a <_malloc_r+0xf2>
 800918e:	f8d8 4000 	ldr.w	r4, [r8]
 8009192:	4626      	mov	r6, r4
 8009194:	2e00      	cmp	r6, #0
 8009196:	d145      	bne.n	8009224 <_malloc_r+0xdc>
 8009198:	2c00      	cmp	r4, #0
 800919a:	d048      	beq.n	800922e <_malloc_r+0xe6>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	4631      	mov	r1, r6
 80091a0:	4638      	mov	r0, r7
 80091a2:	eb04 0903 	add.w	r9, r4, r3
 80091a6:	f000 fa35 	bl	8009614 <_sbrk_r>
 80091aa:	4581      	cmp	r9, r0
 80091ac:	d13f      	bne.n	800922e <_malloc_r+0xe6>
 80091ae:	6821      	ldr	r1, [r4, #0]
 80091b0:	1a6d      	subs	r5, r5, r1
 80091b2:	4629      	mov	r1, r5
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff ffa7 	bl	8009108 <sbrk_aligned>
 80091ba:	3001      	adds	r0, #1
 80091bc:	d037      	beq.n	800922e <_malloc_r+0xe6>
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	442b      	add	r3, r5
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	f8d8 3000 	ldr.w	r3, [r8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d038      	beq.n	800923e <_malloc_r+0xf6>
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	42a2      	cmp	r2, r4
 80091d0:	d12b      	bne.n	800922a <_malloc_r+0xe2>
 80091d2:	2200      	movs	r2, #0
 80091d4:	605a      	str	r2, [r3, #4]
 80091d6:	e00f      	b.n	80091f8 <_malloc_r+0xb0>
 80091d8:	6822      	ldr	r2, [r4, #0]
 80091da:	1b52      	subs	r2, r2, r5
 80091dc:	d41f      	bmi.n	800921e <_malloc_r+0xd6>
 80091de:	2a0b      	cmp	r2, #11
 80091e0:	d917      	bls.n	8009212 <_malloc_r+0xca>
 80091e2:	1961      	adds	r1, r4, r5
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	6025      	str	r5, [r4, #0]
 80091e8:	bf18      	it	ne
 80091ea:	6059      	strne	r1, [r3, #4]
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	bf08      	it	eq
 80091f0:	f8c8 1000 	streq.w	r1, [r8]
 80091f4:	5162      	str	r2, [r4, r5]
 80091f6:	604b      	str	r3, [r1, #4]
 80091f8:	4638      	mov	r0, r7
 80091fa:	f104 060b 	add.w	r6, r4, #11
 80091fe:	f000 f9b9 	bl	8009574 <__malloc_unlock>
 8009202:	f026 0607 	bic.w	r6, r6, #7
 8009206:	1d23      	adds	r3, r4, #4
 8009208:	1af2      	subs	r2, r6, r3
 800920a:	d0ae      	beq.n	800916a <_malloc_r+0x22>
 800920c:	1b9b      	subs	r3, r3, r6
 800920e:	50a3      	str	r3, [r4, r2]
 8009210:	e7ab      	b.n	800916a <_malloc_r+0x22>
 8009212:	42a3      	cmp	r3, r4
 8009214:	6862      	ldr	r2, [r4, #4]
 8009216:	d1dd      	bne.n	80091d4 <_malloc_r+0x8c>
 8009218:	f8c8 2000 	str.w	r2, [r8]
 800921c:	e7ec      	b.n	80091f8 <_malloc_r+0xb0>
 800921e:	4623      	mov	r3, r4
 8009220:	6864      	ldr	r4, [r4, #4]
 8009222:	e7ac      	b.n	800917e <_malloc_r+0x36>
 8009224:	4634      	mov	r4, r6
 8009226:	6876      	ldr	r6, [r6, #4]
 8009228:	e7b4      	b.n	8009194 <_malloc_r+0x4c>
 800922a:	4613      	mov	r3, r2
 800922c:	e7cc      	b.n	80091c8 <_malloc_r+0x80>
 800922e:	230c      	movs	r3, #12
 8009230:	603b      	str	r3, [r7, #0]
 8009232:	4638      	mov	r0, r7
 8009234:	f000 f99e 	bl	8009574 <__malloc_unlock>
 8009238:	e797      	b.n	800916a <_malloc_r+0x22>
 800923a:	6025      	str	r5, [r4, #0]
 800923c:	e7dc      	b.n	80091f8 <_malloc_r+0xb0>
 800923e:	605b      	str	r3, [r3, #4]
 8009240:	deff      	udf	#255	; 0xff
 8009242:	bf00      	nop
 8009244:	2001f284 	.word	0x2001f284

08009248 <_printf_common>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	4616      	mov	r6, r2
 800924e:	4699      	mov	r9, r3
 8009250:	688a      	ldr	r2, [r1, #8]
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009258:	4293      	cmp	r3, r2
 800925a:	bfb8      	it	lt
 800925c:	4613      	movlt	r3, r2
 800925e:	6033      	str	r3, [r6, #0]
 8009260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009264:	4607      	mov	r7, r0
 8009266:	460c      	mov	r4, r1
 8009268:	b10a      	cbz	r2, 800926e <_printf_common+0x26>
 800926a:	3301      	adds	r3, #1
 800926c:	6033      	str	r3, [r6, #0]
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	0699      	lsls	r1, r3, #26
 8009272:	bf42      	ittt	mi
 8009274:	6833      	ldrmi	r3, [r6, #0]
 8009276:	3302      	addmi	r3, #2
 8009278:	6033      	strmi	r3, [r6, #0]
 800927a:	6825      	ldr	r5, [r4, #0]
 800927c:	f015 0506 	ands.w	r5, r5, #6
 8009280:	d106      	bne.n	8009290 <_printf_common+0x48>
 8009282:	f104 0a19 	add.w	sl, r4, #25
 8009286:	68e3      	ldr	r3, [r4, #12]
 8009288:	6832      	ldr	r2, [r6, #0]
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	42ab      	cmp	r3, r5
 800928e:	dc26      	bgt.n	80092de <_printf_common+0x96>
 8009290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009294:	1e13      	subs	r3, r2, #0
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	bf18      	it	ne
 800929a:	2301      	movne	r3, #1
 800929c:	0692      	lsls	r2, r2, #26
 800929e:	d42b      	bmi.n	80092f8 <_printf_common+0xb0>
 80092a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092a4:	4649      	mov	r1, r9
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c0      	blx	r8
 80092aa:	3001      	adds	r0, #1
 80092ac:	d01e      	beq.n	80092ec <_printf_common+0xa4>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	6922      	ldr	r2, [r4, #16]
 80092b2:	f003 0306 	and.w	r3, r3, #6
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	bf02      	ittt	eq
 80092ba:	68e5      	ldreq	r5, [r4, #12]
 80092bc:	6833      	ldreq	r3, [r6, #0]
 80092be:	1aed      	subeq	r5, r5, r3
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	bf0c      	ite	eq
 80092c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092c8:	2500      	movne	r5, #0
 80092ca:	4293      	cmp	r3, r2
 80092cc:	bfc4      	itt	gt
 80092ce:	1a9b      	subgt	r3, r3, r2
 80092d0:	18ed      	addgt	r5, r5, r3
 80092d2:	2600      	movs	r6, #0
 80092d4:	341a      	adds	r4, #26
 80092d6:	42b5      	cmp	r5, r6
 80092d8:	d11a      	bne.n	8009310 <_printf_common+0xc8>
 80092da:	2000      	movs	r0, #0
 80092dc:	e008      	b.n	80092f0 <_printf_common+0xa8>
 80092de:	2301      	movs	r3, #1
 80092e0:	4652      	mov	r2, sl
 80092e2:	4649      	mov	r1, r9
 80092e4:	4638      	mov	r0, r7
 80092e6:	47c0      	blx	r8
 80092e8:	3001      	adds	r0, #1
 80092ea:	d103      	bne.n	80092f4 <_printf_common+0xac>
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f4:	3501      	adds	r5, #1
 80092f6:	e7c6      	b.n	8009286 <_printf_common+0x3e>
 80092f8:	18e1      	adds	r1, r4, r3
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	2030      	movs	r0, #48	; 0x30
 80092fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009302:	4422      	add	r2, r4
 8009304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800930c:	3302      	adds	r3, #2
 800930e:	e7c7      	b.n	80092a0 <_printf_common+0x58>
 8009310:	2301      	movs	r3, #1
 8009312:	4622      	mov	r2, r4
 8009314:	4649      	mov	r1, r9
 8009316:	4638      	mov	r0, r7
 8009318:	47c0      	blx	r8
 800931a:	3001      	adds	r0, #1
 800931c:	d0e6      	beq.n	80092ec <_printf_common+0xa4>
 800931e:	3601      	adds	r6, #1
 8009320:	e7d9      	b.n	80092d6 <_printf_common+0x8e>
	...

08009324 <_printf_i>:
 8009324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009328:	7e0f      	ldrb	r7, [r1, #24]
 800932a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800932c:	2f78      	cmp	r7, #120	; 0x78
 800932e:	4691      	mov	r9, r2
 8009330:	4680      	mov	r8, r0
 8009332:	460c      	mov	r4, r1
 8009334:	469a      	mov	sl, r3
 8009336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800933a:	d807      	bhi.n	800934c <_printf_i+0x28>
 800933c:	2f62      	cmp	r7, #98	; 0x62
 800933e:	d80a      	bhi.n	8009356 <_printf_i+0x32>
 8009340:	2f00      	cmp	r7, #0
 8009342:	f000 80d4 	beq.w	80094ee <_printf_i+0x1ca>
 8009346:	2f58      	cmp	r7, #88	; 0x58
 8009348:	f000 80c0 	beq.w	80094cc <_printf_i+0x1a8>
 800934c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009354:	e03a      	b.n	80093cc <_printf_i+0xa8>
 8009356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800935a:	2b15      	cmp	r3, #21
 800935c:	d8f6      	bhi.n	800934c <_printf_i+0x28>
 800935e:	a101      	add	r1, pc, #4	; (adr r1, 8009364 <_printf_i+0x40>)
 8009360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009364:	080093bd 	.word	0x080093bd
 8009368:	080093d1 	.word	0x080093d1
 800936c:	0800934d 	.word	0x0800934d
 8009370:	0800934d 	.word	0x0800934d
 8009374:	0800934d 	.word	0x0800934d
 8009378:	0800934d 	.word	0x0800934d
 800937c:	080093d1 	.word	0x080093d1
 8009380:	0800934d 	.word	0x0800934d
 8009384:	0800934d 	.word	0x0800934d
 8009388:	0800934d 	.word	0x0800934d
 800938c:	0800934d 	.word	0x0800934d
 8009390:	080094d5 	.word	0x080094d5
 8009394:	080093fd 	.word	0x080093fd
 8009398:	0800948f 	.word	0x0800948f
 800939c:	0800934d 	.word	0x0800934d
 80093a0:	0800934d 	.word	0x0800934d
 80093a4:	080094f7 	.word	0x080094f7
 80093a8:	0800934d 	.word	0x0800934d
 80093ac:	080093fd 	.word	0x080093fd
 80093b0:	0800934d 	.word	0x0800934d
 80093b4:	0800934d 	.word	0x0800934d
 80093b8:	08009497 	.word	0x08009497
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	1d1a      	adds	r2, r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	602a      	str	r2, [r5, #0]
 80093c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093cc:	2301      	movs	r3, #1
 80093ce:	e09f      	b.n	8009510 <_printf_i+0x1ec>
 80093d0:	6820      	ldr	r0, [r4, #0]
 80093d2:	682b      	ldr	r3, [r5, #0]
 80093d4:	0607      	lsls	r7, r0, #24
 80093d6:	f103 0104 	add.w	r1, r3, #4
 80093da:	6029      	str	r1, [r5, #0]
 80093dc:	d501      	bpl.n	80093e2 <_printf_i+0xbe>
 80093de:	681e      	ldr	r6, [r3, #0]
 80093e0:	e003      	b.n	80093ea <_printf_i+0xc6>
 80093e2:	0646      	lsls	r6, r0, #25
 80093e4:	d5fb      	bpl.n	80093de <_printf_i+0xba>
 80093e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	da03      	bge.n	80093f6 <_printf_i+0xd2>
 80093ee:	232d      	movs	r3, #45	; 0x2d
 80093f0:	4276      	negs	r6, r6
 80093f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f6:	485a      	ldr	r0, [pc, #360]	; (8009560 <_printf_i+0x23c>)
 80093f8:	230a      	movs	r3, #10
 80093fa:	e012      	b.n	8009422 <_printf_i+0xfe>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	6820      	ldr	r0, [r4, #0]
 8009400:	1d19      	adds	r1, r3, #4
 8009402:	6029      	str	r1, [r5, #0]
 8009404:	0605      	lsls	r5, r0, #24
 8009406:	d501      	bpl.n	800940c <_printf_i+0xe8>
 8009408:	681e      	ldr	r6, [r3, #0]
 800940a:	e002      	b.n	8009412 <_printf_i+0xee>
 800940c:	0641      	lsls	r1, r0, #25
 800940e:	d5fb      	bpl.n	8009408 <_printf_i+0xe4>
 8009410:	881e      	ldrh	r6, [r3, #0]
 8009412:	4853      	ldr	r0, [pc, #332]	; (8009560 <_printf_i+0x23c>)
 8009414:	2f6f      	cmp	r7, #111	; 0x6f
 8009416:	bf0c      	ite	eq
 8009418:	2308      	moveq	r3, #8
 800941a:	230a      	movne	r3, #10
 800941c:	2100      	movs	r1, #0
 800941e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009422:	6865      	ldr	r5, [r4, #4]
 8009424:	60a5      	str	r5, [r4, #8]
 8009426:	2d00      	cmp	r5, #0
 8009428:	bfa2      	ittt	ge
 800942a:	6821      	ldrge	r1, [r4, #0]
 800942c:	f021 0104 	bicge.w	r1, r1, #4
 8009430:	6021      	strge	r1, [r4, #0]
 8009432:	b90e      	cbnz	r6, 8009438 <_printf_i+0x114>
 8009434:	2d00      	cmp	r5, #0
 8009436:	d04b      	beq.n	80094d0 <_printf_i+0x1ac>
 8009438:	4615      	mov	r5, r2
 800943a:	fbb6 f1f3 	udiv	r1, r6, r3
 800943e:	fb03 6711 	mls	r7, r3, r1, r6
 8009442:	5dc7      	ldrb	r7, [r0, r7]
 8009444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009448:	4637      	mov	r7, r6
 800944a:	42bb      	cmp	r3, r7
 800944c:	460e      	mov	r6, r1
 800944e:	d9f4      	bls.n	800943a <_printf_i+0x116>
 8009450:	2b08      	cmp	r3, #8
 8009452:	d10b      	bne.n	800946c <_printf_i+0x148>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	07de      	lsls	r6, r3, #31
 8009458:	d508      	bpl.n	800946c <_printf_i+0x148>
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	6861      	ldr	r1, [r4, #4]
 800945e:	4299      	cmp	r1, r3
 8009460:	bfde      	ittt	le
 8009462:	2330      	movle	r3, #48	; 0x30
 8009464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009468:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800946c:	1b52      	subs	r2, r2, r5
 800946e:	6122      	str	r2, [r4, #16]
 8009470:	f8cd a000 	str.w	sl, [sp]
 8009474:	464b      	mov	r3, r9
 8009476:	aa03      	add	r2, sp, #12
 8009478:	4621      	mov	r1, r4
 800947a:	4640      	mov	r0, r8
 800947c:	f7ff fee4 	bl	8009248 <_printf_common>
 8009480:	3001      	adds	r0, #1
 8009482:	d14a      	bne.n	800951a <_printf_i+0x1f6>
 8009484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009488:	b004      	add	sp, #16
 800948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	f043 0320 	orr.w	r3, r3, #32
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	4833      	ldr	r0, [pc, #204]	; (8009564 <_printf_i+0x240>)
 8009498:	2778      	movs	r7, #120	; 0x78
 800949a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	6829      	ldr	r1, [r5, #0]
 80094a2:	061f      	lsls	r7, r3, #24
 80094a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80094a8:	d402      	bmi.n	80094b0 <_printf_i+0x18c>
 80094aa:	065f      	lsls	r7, r3, #25
 80094ac:	bf48      	it	mi
 80094ae:	b2b6      	uxthmi	r6, r6
 80094b0:	07df      	lsls	r7, r3, #31
 80094b2:	bf48      	it	mi
 80094b4:	f043 0320 	orrmi.w	r3, r3, #32
 80094b8:	6029      	str	r1, [r5, #0]
 80094ba:	bf48      	it	mi
 80094bc:	6023      	strmi	r3, [r4, #0]
 80094be:	b91e      	cbnz	r6, 80094c8 <_printf_i+0x1a4>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	f023 0320 	bic.w	r3, r3, #32
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	2310      	movs	r3, #16
 80094ca:	e7a7      	b.n	800941c <_printf_i+0xf8>
 80094cc:	4824      	ldr	r0, [pc, #144]	; (8009560 <_printf_i+0x23c>)
 80094ce:	e7e4      	b.n	800949a <_printf_i+0x176>
 80094d0:	4615      	mov	r5, r2
 80094d2:	e7bd      	b.n	8009450 <_printf_i+0x12c>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	6826      	ldr	r6, [r4, #0]
 80094d8:	6961      	ldr	r1, [r4, #20]
 80094da:	1d18      	adds	r0, r3, #4
 80094dc:	6028      	str	r0, [r5, #0]
 80094de:	0635      	lsls	r5, r6, #24
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	d501      	bpl.n	80094e8 <_printf_i+0x1c4>
 80094e4:	6019      	str	r1, [r3, #0]
 80094e6:	e002      	b.n	80094ee <_printf_i+0x1ca>
 80094e8:	0670      	lsls	r0, r6, #25
 80094ea:	d5fb      	bpl.n	80094e4 <_printf_i+0x1c0>
 80094ec:	8019      	strh	r1, [r3, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	4615      	mov	r5, r2
 80094f4:	e7bc      	b.n	8009470 <_printf_i+0x14c>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	1d1a      	adds	r2, r3, #4
 80094fa:	602a      	str	r2, [r5, #0]
 80094fc:	681d      	ldr	r5, [r3, #0]
 80094fe:	6862      	ldr	r2, [r4, #4]
 8009500:	2100      	movs	r1, #0
 8009502:	4628      	mov	r0, r5
 8009504:	f7f6 fe8c 	bl	8000220 <memchr>
 8009508:	b108      	cbz	r0, 800950e <_printf_i+0x1ea>
 800950a:	1b40      	subs	r0, r0, r5
 800950c:	6060      	str	r0, [r4, #4]
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	6123      	str	r3, [r4, #16]
 8009512:	2300      	movs	r3, #0
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009518:	e7aa      	b.n	8009470 <_printf_i+0x14c>
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	462a      	mov	r2, r5
 800951e:	4649      	mov	r1, r9
 8009520:	4640      	mov	r0, r8
 8009522:	47d0      	blx	sl
 8009524:	3001      	adds	r0, #1
 8009526:	d0ad      	beq.n	8009484 <_printf_i+0x160>
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	079b      	lsls	r3, r3, #30
 800952c:	d413      	bmi.n	8009556 <_printf_i+0x232>
 800952e:	68e0      	ldr	r0, [r4, #12]
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	4298      	cmp	r0, r3
 8009534:	bfb8      	it	lt
 8009536:	4618      	movlt	r0, r3
 8009538:	e7a6      	b.n	8009488 <_printf_i+0x164>
 800953a:	2301      	movs	r3, #1
 800953c:	4632      	mov	r2, r6
 800953e:	4649      	mov	r1, r9
 8009540:	4640      	mov	r0, r8
 8009542:	47d0      	blx	sl
 8009544:	3001      	adds	r0, #1
 8009546:	d09d      	beq.n	8009484 <_printf_i+0x160>
 8009548:	3501      	adds	r5, #1
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	9903      	ldr	r1, [sp, #12]
 800954e:	1a5b      	subs	r3, r3, r1
 8009550:	42ab      	cmp	r3, r5
 8009552:	dcf2      	bgt.n	800953a <_printf_i+0x216>
 8009554:	e7eb      	b.n	800952e <_printf_i+0x20a>
 8009556:	2500      	movs	r5, #0
 8009558:	f104 0619 	add.w	r6, r4, #25
 800955c:	e7f5      	b.n	800954a <_printf_i+0x226>
 800955e:	bf00      	nop
 8009560:	080099e1 	.word	0x080099e1
 8009564:	080099f2 	.word	0x080099f2

08009568 <__malloc_lock>:
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <__malloc_lock+0x8>)
 800956a:	f7ff bc73 	b.w	8008e54 <__retarget_lock_acquire_recursive>
 800956e:	bf00      	nop
 8009570:	2001f280 	.word	0x2001f280

08009574 <__malloc_unlock>:
 8009574:	4801      	ldr	r0, [pc, #4]	; (800957c <__malloc_unlock+0x8>)
 8009576:	f7ff bc6e 	b.w	8008e56 <__retarget_lock_release_recursive>
 800957a:	bf00      	nop
 800957c:	2001f280 	.word	0x2001f280

08009580 <_realloc_r>:
 8009580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	4680      	mov	r8, r0
 8009586:	4614      	mov	r4, r2
 8009588:	460e      	mov	r6, r1
 800958a:	b921      	cbnz	r1, 8009596 <_realloc_r+0x16>
 800958c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009590:	4611      	mov	r1, r2
 8009592:	f7ff bdd9 	b.w	8009148 <_malloc_r>
 8009596:	b92a      	cbnz	r2, 80095a4 <_realloc_r+0x24>
 8009598:	f000 f85a 	bl	8009650 <_free_r>
 800959c:	4625      	mov	r5, r4
 800959e:	4628      	mov	r0, r5
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	f000 f8a0 	bl	80096e8 <_malloc_usable_size_r>
 80095a8:	4284      	cmp	r4, r0
 80095aa:	4607      	mov	r7, r0
 80095ac:	d802      	bhi.n	80095b4 <_realloc_r+0x34>
 80095ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095b2:	d812      	bhi.n	80095da <_realloc_r+0x5a>
 80095b4:	4621      	mov	r1, r4
 80095b6:	4640      	mov	r0, r8
 80095b8:	f7ff fdc6 	bl	8009148 <_malloc_r>
 80095bc:	4605      	mov	r5, r0
 80095be:	2800      	cmp	r0, #0
 80095c0:	d0ed      	beq.n	800959e <_realloc_r+0x1e>
 80095c2:	42bc      	cmp	r4, r7
 80095c4:	4622      	mov	r2, r4
 80095c6:	4631      	mov	r1, r6
 80095c8:	bf28      	it	cs
 80095ca:	463a      	movcs	r2, r7
 80095cc:	f000 f832 	bl	8009634 <memcpy>
 80095d0:	4631      	mov	r1, r6
 80095d2:	4640      	mov	r0, r8
 80095d4:	f000 f83c 	bl	8009650 <_free_r>
 80095d8:	e7e1      	b.n	800959e <_realloc_r+0x1e>
 80095da:	4635      	mov	r5, r6
 80095dc:	e7df      	b.n	800959e <_realloc_r+0x1e>

080095de <memmove>:
 80095de:	4288      	cmp	r0, r1
 80095e0:	b510      	push	{r4, lr}
 80095e2:	eb01 0402 	add.w	r4, r1, r2
 80095e6:	d902      	bls.n	80095ee <memmove+0x10>
 80095e8:	4284      	cmp	r4, r0
 80095ea:	4623      	mov	r3, r4
 80095ec:	d807      	bhi.n	80095fe <memmove+0x20>
 80095ee:	1e43      	subs	r3, r0, #1
 80095f0:	42a1      	cmp	r1, r4
 80095f2:	d008      	beq.n	8009606 <memmove+0x28>
 80095f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095fc:	e7f8      	b.n	80095f0 <memmove+0x12>
 80095fe:	4402      	add	r2, r0
 8009600:	4601      	mov	r1, r0
 8009602:	428a      	cmp	r2, r1
 8009604:	d100      	bne.n	8009608 <memmove+0x2a>
 8009606:	bd10      	pop	{r4, pc}
 8009608:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800960c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009610:	e7f7      	b.n	8009602 <memmove+0x24>
	...

08009614 <_sbrk_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d06      	ldr	r5, [pc, #24]	; (8009630 <_sbrk_r+0x1c>)
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	602b      	str	r3, [r5, #0]
 8009620:	f7f8 f9b0 	bl	8001984 <_sbrk>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_sbrk_r+0x1a>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_sbrk_r+0x1a>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	2001f28c 	.word	0x2001f28c

08009634 <memcpy>:
 8009634:	440a      	add	r2, r1
 8009636:	4291      	cmp	r1, r2
 8009638:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800963c:	d100      	bne.n	8009640 <memcpy+0xc>
 800963e:	4770      	bx	lr
 8009640:	b510      	push	{r4, lr}
 8009642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800964a:	4291      	cmp	r1, r2
 800964c:	d1f9      	bne.n	8009642 <memcpy+0xe>
 800964e:	bd10      	pop	{r4, pc}

08009650 <_free_r>:
 8009650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009652:	2900      	cmp	r1, #0
 8009654:	d044      	beq.n	80096e0 <_free_r+0x90>
 8009656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965a:	9001      	str	r0, [sp, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f1a1 0404 	sub.w	r4, r1, #4
 8009662:	bfb8      	it	lt
 8009664:	18e4      	addlt	r4, r4, r3
 8009666:	f7ff ff7f 	bl	8009568 <__malloc_lock>
 800966a:	4a1e      	ldr	r2, [pc, #120]	; (80096e4 <_free_r+0x94>)
 800966c:	9801      	ldr	r0, [sp, #4]
 800966e:	6813      	ldr	r3, [r2, #0]
 8009670:	b933      	cbnz	r3, 8009680 <_free_r+0x30>
 8009672:	6063      	str	r3, [r4, #4]
 8009674:	6014      	str	r4, [r2, #0]
 8009676:	b003      	add	sp, #12
 8009678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800967c:	f7ff bf7a 	b.w	8009574 <__malloc_unlock>
 8009680:	42a3      	cmp	r3, r4
 8009682:	d908      	bls.n	8009696 <_free_r+0x46>
 8009684:	6825      	ldr	r5, [r4, #0]
 8009686:	1961      	adds	r1, r4, r5
 8009688:	428b      	cmp	r3, r1
 800968a:	bf01      	itttt	eq
 800968c:	6819      	ldreq	r1, [r3, #0]
 800968e:	685b      	ldreq	r3, [r3, #4]
 8009690:	1949      	addeq	r1, r1, r5
 8009692:	6021      	streq	r1, [r4, #0]
 8009694:	e7ed      	b.n	8009672 <_free_r+0x22>
 8009696:	461a      	mov	r2, r3
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	b10b      	cbz	r3, 80096a0 <_free_r+0x50>
 800969c:	42a3      	cmp	r3, r4
 800969e:	d9fa      	bls.n	8009696 <_free_r+0x46>
 80096a0:	6811      	ldr	r1, [r2, #0]
 80096a2:	1855      	adds	r5, r2, r1
 80096a4:	42a5      	cmp	r5, r4
 80096a6:	d10b      	bne.n	80096c0 <_free_r+0x70>
 80096a8:	6824      	ldr	r4, [r4, #0]
 80096aa:	4421      	add	r1, r4
 80096ac:	1854      	adds	r4, r2, r1
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	6011      	str	r1, [r2, #0]
 80096b2:	d1e0      	bne.n	8009676 <_free_r+0x26>
 80096b4:	681c      	ldr	r4, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	6053      	str	r3, [r2, #4]
 80096ba:	440c      	add	r4, r1
 80096bc:	6014      	str	r4, [r2, #0]
 80096be:	e7da      	b.n	8009676 <_free_r+0x26>
 80096c0:	d902      	bls.n	80096c8 <_free_r+0x78>
 80096c2:	230c      	movs	r3, #12
 80096c4:	6003      	str	r3, [r0, #0]
 80096c6:	e7d6      	b.n	8009676 <_free_r+0x26>
 80096c8:	6825      	ldr	r5, [r4, #0]
 80096ca:	1961      	adds	r1, r4, r5
 80096cc:	428b      	cmp	r3, r1
 80096ce:	bf04      	itt	eq
 80096d0:	6819      	ldreq	r1, [r3, #0]
 80096d2:	685b      	ldreq	r3, [r3, #4]
 80096d4:	6063      	str	r3, [r4, #4]
 80096d6:	bf04      	itt	eq
 80096d8:	1949      	addeq	r1, r1, r5
 80096da:	6021      	streq	r1, [r4, #0]
 80096dc:	6054      	str	r4, [r2, #4]
 80096de:	e7ca      	b.n	8009676 <_free_r+0x26>
 80096e0:	b003      	add	sp, #12
 80096e2:	bd30      	pop	{r4, r5, pc}
 80096e4:	2001f284 	.word	0x2001f284

080096e8 <_malloc_usable_size_r>:
 80096e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ec:	1f18      	subs	r0, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bfbc      	itt	lt
 80096f2:	580b      	ldrlt	r3, [r1, r0]
 80096f4:	18c0      	addlt	r0, r0, r3
 80096f6:	4770      	bx	lr

080096f8 <_init>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr

08009704 <_fini>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	bf00      	nop
 8009708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970a:	bc08      	pop	{r3}
 800970c:	469e      	mov	lr, r3
 800970e:	4770      	bx	lr
