
lab_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009448  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800990c  0800990c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009914  08009914  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009914  08009914  00019914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009918  08009918  00019918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800991c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001904c  20000060  0800997c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200190ac  0800997c  000290ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018601  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347b  00000000  00000000  000386d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0003bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103f  00000000  00000000  0003d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cc  00000000  00000000  0003e03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b76e  00000000  00000000  0006260b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d73d6  00000000  00000000  0007dd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d90  00000000  00000000  00155150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009600 	.word	0x08009600

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08009600 	.word	0x08009600

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <print_msg>:
DMA_HandleTypeDef hdma_usart3_tx;

PCD_HandleTypeDef hpcd_USB_OTG_FS;


HAL_StatusTypeDef print_msg(char * msg) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  // Your code here
  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe23 	bl	8000210 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <print_msg+0x28>)
 80005d4:	f007 f83a 	bl	800764c <HAL_UART_Transmit_DMA>
 80005d8:	4603      	mov	r3, r0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000210 	.word	0x20000210

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fb7e 	bl	8008cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <SystemClock_Config+0xd4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000648:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fe45 	bl	8006300 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f000 fa9a 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 ffba 	bl	8005618 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f000 fa83 	bl	8000bb4 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
void MX_DCMI_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_DCMI_Init+0x60>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_DCMI_Init+0x64>)
 80006c8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_DCMI_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_DCMI_Init+0x60>)
 80006d2:	2220      	movs	r2, #32
 80006d4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_DCMI_Init+0x60>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_DCMI_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_DCMI_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_DCMI_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DCMI_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_DCMI_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_DCMI_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_DCMI_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_DCMI_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_DCMI_Init+0x60>)
 800070e:	f001 fd25 	bl	800215c <HAL_DCMI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 fa4c 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000007c 	.word	0x2000007c
 8000724:	50050000 	.word	0x50050000

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C2_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C2_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C2_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C2_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C2_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C2_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C2_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C2_Init+0x50>)
 8000766:	f003 fce9 	bl	800413c <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fa20 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000012c 	.word	0x2000012c
 800077c:	40005800 	.word	0x40005800
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b092      	sub	sp, #72	; 0x48
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f008 faa2 	bl	8008cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007b6:	4a33      	ldr	r2, [pc, #204]	; (8000884 <MX_TIM1_Init+0x100>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007c8:	2214      	movs	r2, #20
 80007ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007de:	4828      	ldr	r0, [pc, #160]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007e0:	f006 f87b 	bl	80068da <HAL_TIM_PWM_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 f9e3 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007fa:	4619      	mov	r1, r3
 80007fc:	4820      	ldr	r0, [pc, #128]	; (8000880 <MX_TIM1_Init+0xfc>)
 80007fe:	f006 fdf5 	bl	80073ec <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000808:	f000 f9d4 	bl	8000bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8000810:	230a      	movs	r3, #10
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <MX_TIM1_Init+0xfc>)
 8000832:	f006 fa71 	bl	8006d18 <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800083c:	f000 f9ba 	bl	8000bb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <MX_TIM1_Init+0xfc>)
 8000864:	f006 fe3e 	bl	80074e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800086e:	f000 f9a1 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <MX_TIM1_Init+0xfc>)
 8000874:	f000 fe40 	bl	80014f8 <HAL_TIM_MspPostInit>

}
 8000878:	bf00      	nop
 800087a:	3748      	adds	r7, #72	; 0x48
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000180 	.word	0x20000180
 8000884:	40010000 	.word	0x40010000

08000888 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM6_Init+0x64>)
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_TIM6_Init+0x68>)
 800089a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_TIM6_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_TIM6_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_TIM6_Init+0x64>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_TIM6_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_TIM6_Init+0x64>)
 80008b8:	f005 ffc0 	bl	800683c <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008c2:	f000 f977 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_TIM6_Init+0x64>)
 80008d4:	f006 fd8a 	bl	80073ec <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008de:	f000 f969 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001c8 	.word	0x200001c8
 80008f0:	40001000 	.word	0x40001000

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART3_UART_Init+0x48>)
 80008fa:	4a11      	ldr	r2, [pc, #68]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1152000;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART3_UART_Init+0x48>)
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_USART3_UART_Init+0x50>)
 8000902:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_USART3_UART_Init+0x48>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x48>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_USART3_UART_Init+0x48>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x48>)
 8000918:	220c      	movs	r2, #12
 800091a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_USART3_UART_Init+0x48>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x48>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART3_UART_Init+0x48>)
 800092a:	f006 fe41 	bl	80075b0 <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8000934:	f000 f93e 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000210 	.word	0x20000210
 8000940:	40004800 	.word	0x40004800
 8000944:	00119400 	.word	0x00119400

08000948 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2206      	movs	r2, #6
 8000958:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2202      	movs	r2, #2
 800095e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2201      	movs	r2, #1
 8000970:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2201      	movs	r2, #1
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	f004 fcfb 	bl	8005386 <HAL_PCD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f90d 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200002b4 	.word	0x200002b4

080009a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_DMA_Init+0x68>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <MX_DMA_Init+0x68>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_DMA_Init+0x68>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_DMA_Init+0x68>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_DMA_Init+0x68>)
 80009d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_DMA_Init+0x68>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200e      	movs	r0, #14
 80009e8:	f001 f933 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009ec:	200e      	movs	r0, #14
 80009ee:	f001 f94c 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2039      	movs	r0, #57	; 0x39
 80009f8:	f001 f92b 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009fc:	2039      	movs	r0, #57	; 0x39
 80009fe:	f001 f944 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
 8000a2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a5d      	ldr	r2, [pc, #372]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	623b      	str	r3, [r7, #32]
 8000a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a56      	ldr	r2, [pc, #344]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b54      	ldr	r3, [pc, #336]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b50      	ldr	r3, [pc, #320]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4f      	ldr	r2, [pc, #316]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a41      	ldr	r2, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a33      	ldr	r2, [pc, #204]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_GPIO_Init+0x194>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b0c:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <MX_GPIO_Init+0x198>)
 8000b0e:	f003 fabd 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	4825      	ldr	r0, [pc, #148]	; (8000bac <MX_GPIO_Init+0x19c>)
 8000b18:	f003 fab8 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000b34:	f003 f916 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b38:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0x198>)
 8000b52:	f003 f907 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <MX_GPIO_Init+0x19c>)
 8000b6e:	f003 f8f9 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <MX_GPIO_Init+0x19c>)
 8000b86:	f003 f8ed 	bl	8003d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2028      	movs	r0, #40	; 0x28
 8000b90:	f001 f85f 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b94:	2028      	movs	r0, #40	; 0x28
 8000b96:	f001 f878 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3738      	adds	r7, #56	; 0x38
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  print_msg("ERROR!\r\n");
 8000bbc:	4801      	ldr	r0, [pc, #4]	; (8000bc4 <Error_Handler+0x10>)
 8000bbe:	f7ff fcfd 	bl	80005bc <print_msg>
 8000bc2:	e7fb      	b.n	8000bbc <Error_Handler+0x8>
 8000bc4:	08009618 	.word	0x08009618

08000bc8 <main>:
uint8_t findNumberOfRepeatedPixels(uint8_t startRow, uint8_t startCol);
void transferRawBufferToIntermediate();
int rle(int bufferIndex);

int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  HAL_Init();
 8000bcc:	f000 fed0 	bl	8001970 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f7ff fd0a 	bl	80005e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f7ff ff1c 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd8:	f7ff fee4 	bl	80009a4 <MX_DMA_Init>
  MX_DCMI_Init();
 8000bdc:	f7ff fd70 	bl	80006c0 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000be0:	f7ff fe88 	bl	80008f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000be4:	f7ff feb0 	bl	8000948 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000be8:	f7ff fd9e 	bl	8000728 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000bec:	f7ff fdca 	bl	8000784 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000bf0:	f7ff fe4a 	bl	8000888 <MX_TIM6_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <main+0x44>)
 8000bf8:	f005 febe 	bl	8006978 <HAL_TIM_PWM_Start>
  ov7670_init();
 8000bfc:	f000 f91a 	bl	8000e34 <ov7670_init>

    //*****Modes*****
	//pictureMode();
	//videoMode();
	//truncatedVideoMode();
	extraTruncatedVideoMode();
 8000c00:	f000 f806 	bl	8000c10 <extraTruncatedVideoMode>
 8000c04:	2300      	movs	r3, #0
	//compressedExtraTruncatedVideoMode();
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000180 	.word	0x20000180

08000c10 <extraTruncatedVideoMode>:

	}

}

void extraTruncatedVideoMode() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
	int bufferIndex= 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	e00b      	b.n	8000c38 <extraTruncatedVideoMode+0x28>
		video_buff[bufferIndex++] = PREAMBLE[index];
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60fa      	str	r2, [r7, #12]
 8000c26:	4921      	ldr	r1, [pc, #132]	; (8000cac <extraTruncatedVideoMode+0x9c>)
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	440a      	add	r2, r1
 8000c2c:	7811      	ldrb	r1, [r2, #0]
 8000c2e:	4a20      	ldr	r2, [pc, #128]	; (8000cb0 <extraTruncatedVideoMode+0xa0>)
 8000c30:	54d1      	strb	r1, [r2, r3]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b0b      	cmp	r3, #11
 8000c3c:	d9f0      	bls.n	8000c20 <extraTruncatedVideoMode+0x10>
	}

	//Loop forever
	while(1) {
		//Reset
		dma_flag = 0;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <extraTruncatedVideoMode+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
		ov7670_capture(raw_buff);
 8000c44:	481c      	ldr	r0, [pc, #112]	; (8000cb8 <extraTruncatedVideoMode+0xa8>)
 8000c46:	f000 fa79 	bl	800113c <ov7670_capture>

		//Wait for capture to finish
		while (!dma_flag) {
 8000c4a:	e002      	b.n	8000c52 <extraTruncatedVideoMode+0x42>
			HAL_Delay(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 ff01 	bl	8001a54 <HAL_Delay>
		while (!dma_flag) {
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <extraTruncatedVideoMode+0xa4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f8      	beq.n	8000c4c <extraTruncatedVideoMode+0x3c>
		}

		//Extract grey scale
		transferRawBufferToIntermediate();
 8000c5a:	f000 f86d 	bl	8000d38 <transferRawBufferToIntermediate>

		//RLE and place between pre-amble and suffix
		bufferIndex = rle(sizeof(PREAMBLE));
 8000c5e:	200c      	movs	r0, #12
 8000c60:	f000 f8a6 	bl	8000db0 <rle>
 8000c64:	60f8      	str	r0, [r7, #12]

		//Append suffix
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	e00e      	b.n	8000c8a <extraTruncatedVideoMode+0x7a>
			video_buff[bufferIndex] = SUFFIX[index];
 8000c6c:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <extraTruncatedVideoMode+0xac>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	7819      	ldrb	r1, [r3, #0]
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <extraTruncatedVideoMode+0xa0>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4413      	add	r3, r2
 8000c7a:	460a      	mov	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
			bufferIndex++;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3301      	adds	r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d9ed      	bls.n	8000c6c <extraTruncatedVideoMode+0x5c>
		}

		//Export Data
		if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY) {
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <extraTruncatedVideoMode+0xb0>)
 8000c92:	f007 f81b 	bl	8007ccc <HAL_UART_GetState>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b20      	cmp	r3, #32
 8000c9a:	d1d0      	bne.n	8000c3e <extraTruncatedVideoMode+0x2e>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)video_buff, bufferIndex);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4903      	ldr	r1, [pc, #12]	; (8000cb0 <extraTruncatedVideoMode+0xa0>)
 8000ca4:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <extraTruncatedVideoMode+0xb0>)
 8000ca6:	f006 fcd1 	bl	800764c <HAL_UART_Transmit_DMA>
		dma_flag = 0;
 8000caa:	e7c8      	b.n	8000c3e <extraTruncatedVideoMode+0x2e>
 8000cac:	08009624 	.word	0x08009624
 8000cb0:	20012d60 	.word	0x20012d60
 8000cb4:	20018f54 	.word	0x20018f54
 8000cb8:	200007c0 	.word	0x200007c0
 8000cbc:	08009630 	.word	0x08009630
 8000cc0:	20000210 	.word	0x20000210

08000cc4 <findNumberOfRepeatedPixels>:
	}

}

//Returns the number of pixels that are consecutive, beginning search at [startRow, startCol]
uint8_t findNumberOfRepeatedPixels(uint8_t startRow, uint8_t startCol) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	uint8_t count = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	75fb      	strb	r3, [r7, #23]
	uint8_t prevColour = intermediate_buff[startRow][startCol];
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	4915      	ldr	r1, [pc, #84]	; (8000d34 <findNumberOfRepeatedPixels+0x70>)
 8000cde:	20ae      	movs	r0, #174	; 0xae
 8000ce0:	fb00 f202 	mul.w	r2, r0, r2
 8000ce4:	440a      	add	r2, r1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	73fb      	strb	r3, [r7, #15]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e011      	b.n	8000d16 <findNumberOfRepeatedPixels+0x52>
		if (intermediate_buff[startRow][columnIndex] == prevColour) {
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <findNumberOfRepeatedPixels+0x70>)
 8000cf6:	21ae      	movs	r1, #174	; 0xae
 8000cf8:	fb01 f303 	mul.w	r3, r1, r3
 8000cfc:	441a      	add	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d10c      	bne.n	8000d24 <findNumberOfRepeatedPixels+0x60>
			count++;
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	75fb      	strb	r3, [r7, #23]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	3301      	adds	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2bad      	cmp	r3, #173	; 0xad
 8000d1a:	dc04      	bgt.n	8000d26 <findNumberOfRepeatedPixels+0x62>
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	2b0e      	cmp	r3, #14
 8000d20:	d9e7      	bls.n	8000cf2 <findNumberOfRepeatedPixels+0x2e>
 8000d22:	e000      	b.n	8000d26 <findNumberOfRepeatedPixels+0x62>
		} else {
			break;
 8000d24:	bf00      	nop
		}
	}
	return count;
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	2000cb80 	.word	0x2000cb80

08000d38 <transferRawBufferToIntermediate>:

//Extracts grey-scale data from the raw buffer to the intermediate buffer and formats it in a 2D array
void transferRawBufferToIntermediate() {
 8000d38:	b490      	push	{r4, r7}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
	int rowIndex = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
	int colIndex = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8000d46:	2301      	movs	r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	e022      	b.n	8000d92 <transferRawBufferToIntermediate+0x5a>
		if (rawIndex % 2 != 0) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01a      	beq.n	8000d8c <transferRawBufferToIntermediate+0x54>
			intermediate_buff[rowIndex][colIndex++] = raw_buff[rawIndex] & 0xF0;
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <transferRawBufferToIntermediate+0x70>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1c59      	adds	r1, r3, #1
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	f022 020f 	bic.w	r2, r2, #15
 8000d68:	b2d4      	uxtb	r4, r2
 8000d6a:	4910      	ldr	r1, [pc, #64]	; (8000dac <transferRawBufferToIntermediate+0x74>)
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	20ae      	movs	r0, #174	; 0xae
 8000d70:	fb00 f202 	mul.w	r2, r0, r2
 8000d74:	440a      	add	r2, r1
 8000d76:	4413      	add	r3, r2
 8000d78:	4622      	mov	r2, r4
 8000d7a:	701a      	strb	r2, [r3, #0]
			if (colIndex == IMG_COLS) {
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2bae      	cmp	r3, #174	; 0xae
 8000d80:	d104      	bne.n	8000d8c <transferRawBufferToIntermediate+0x54>
				rowIndex++;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
				colIndex = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f24c 32bf 	movw	r2, #50111	; 0xc3bf
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	ddd7      	ble.n	8000d4c <transferRawBufferToIntermediate+0x14>
			}
		}
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc90      	pop	{r4, r7}
 8000da6:	4770      	bx	lr
 8000da8:	200007c0 	.word	0x200007c0
 8000dac:	2000cb80 	.word	0x2000cb80

08000db0 <rle>:

//Compresses contents of intermediate buff using RLE and places data in the output buffer beginning at bufferIndex
int rle(int bufferIndex) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e02d      	b.n	8000e1a <rle+0x6a>
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	e024      	b.n	8000e0e <rle+0x5e>
			uint8_t repetitions = findNumberOfRepeatedPixels(rowIndex, colIndex);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff78 	bl	8000cc4 <findNumberOfRepeatedPixels>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]

			video_buff[bufferIndex++] = intermediate_buff[rowIndex][colIndex] | (repetitions & 0xF);
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <rle+0x7c>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	21ae      	movs	r1, #174	; 0xae
 8000dde:	fb01 f303 	mul.w	r3, r1, r3
 8000de2:	441a      	add	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4413      	add	r3, r2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b259      	sxtb	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	b2c9      	uxtb	r1, r1
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <rle+0x80>)
 8000e04:	54d1      	strb	r1, [r2, r3]

			colIndex += repetitions;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2bad      	cmp	r3, #173	; 0xad
 8000e12:	ddd7      	ble.n	8000dc4 <rle+0x14>
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b8f      	cmp	r3, #143	; 0x8f
 8000e1e:	ddce      	ble.n	8000dbe <rle+0xe>
		}
	}
	return bufferIndex;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000cb80 	.word	0x2000cb80
 8000e30:	20012d60 	.word	0x20012d60

08000e34 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b0a1      	sub	sp, #132	; 0x84
 8000e38:	af02      	add	r7, sp, #8
  uint8_t val;
  char msg[100];

  print_msg("Beginning reading check\r\n");
 8000e3a:	484d      	ldr	r0, [pc, #308]	; (8000f70 <ov7670_init+0x13c>)
 8000e3c:	f7ff fbbe 	bl	80005bc <print_msg>
  HAL_Delay(10);
 8000e40:	200a      	movs	r0, #10
 8000e42:	f000 fe07 	bl	8001a54 <HAL_Delay>
  val = ov7670_read(0x0A);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f000 f8a4 	bl	8000f94 <ov7670_read>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  if (val != 0x76) {
 8000e52:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000e56:	2b76      	cmp	r3, #118	; 0x76
 8000e58:	d00f      	beq.n	8000e7a <ov7670_init+0x46>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8000e5a:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4944      	ldr	r1, [pc, #272]	; (8000f74 <ov7670_init+0x140>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 ff28 	bl	8008cb8 <siprintf>
    print_msg(msg);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fba6 	bl	80005bc <print_msg>
    HAL_Delay(10);
 8000e70:	200a      	movs	r0, #10
 8000e72:	f000 fdef 	bl	8001a54 <HAL_Delay>
    return 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e076      	b.n	8000f68 <ov7670_init+0x134>
  } else {
	  print_msg("Value correct\r\n");
 8000e7a:	483f      	ldr	r0, [pc, #252]	; (8000f78 <ov7670_init+0x144>)
 8000e7c:	f7ff fb9e 	bl	80005bc <print_msg>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e80:	2101      	movs	r1, #1
 8000e82:	483e      	ldr	r0, [pc, #248]	; (8000f7c <ov7670_init+0x148>)
 8000e84:	f003 f91b 	bl	80040be <HAL_GPIO_TogglePin>
  }

  print_msg("Writing to registers...\r\n");
 8000e88:	483d      	ldr	r0, [pc, #244]	; (8000f80 <ov7670_init+0x14c>)
 8000e8a:	f7ff fb97 	bl	80005bc <print_msg>
  HAL_Delay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f000 fde0 	bl	8001a54 <HAL_Delay>

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	677b      	str	r3, [r7, #116]	; 0x74
 8000e98:	e012      	b.n	8000ec0 <ov7670_init+0x8c>
	  ov7670_write(OV7670_reg[index][0], OV7670_reg[index][1]);
 8000e9a:	4a3a      	ldr	r2, [pc, #232]	; (8000f84 <ov7670_init+0x150>)
 8000e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e9e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000ea2:	4938      	ldr	r1, [pc, #224]	; (8000f84 <ov7670_init+0x150>)
 8000ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	440b      	add	r3, r1
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	4619      	mov	r1, r3
 8000eae:	4610      	mov	r0, r2
 8000eb0:	f000 f8f4 	bl	800109c <ov7670_write>
	  HAL_Delay(11);
 8000eb4:	200b      	movs	r0, #11
 8000eb6:	f000 fdcd 	bl	8001a54 <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	677b      	str	r3, [r7, #116]	; 0x74
 8000ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ec2:	2b79      	cmp	r3, #121	; 0x79
 8000ec4:	dde9      	ble.n	8000e9a <ov7670_init+0x66>
  }

  print_msg("Beginning sanity check\r\n");
 8000ec6:	4830      	ldr	r0, [pc, #192]	; (8000f88 <ov7670_init+0x154>)
 8000ec8:	f7ff fb78 	bl	80005bc <print_msg>
  HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f000 fdc1 	bl	8001a54 <HAL_Delay>

  uint8_t isDataCorrect = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000edc:	e032      	b.n	8000f44 <ov7670_init+0x110>
	  uint8_t dataRead = ov7670_read(OV7670_reg[index][0]);
 8000ede:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <ov7670_init+0x150>)
 8000ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ee2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f854 	bl	8000f94 <ov7670_read>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	  if (dataRead != OV7670_reg[index][1]) {
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <ov7670_init+0x150>)
 8000ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d01c      	beq.n	8000f3e <ov7670_init+0x10a>
		  isDataCorrect = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  sprintf(msg, "Register 0x%x contains incorrect data 0x%x (should be 0x%x)\r\n", OV7670_reg[index][0], dataRead, OV7670_reg[index][1]);
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <ov7670_init+0x150>)
 8000f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f0e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f12:	461c      	mov	r4, r3
 8000f14:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8000f18:	491a      	ldr	r1, [pc, #104]	; (8000f84 <ov7670_init+0x150>)
 8000f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	440b      	add	r3, r1
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	1d38      	adds	r0, r7, #4
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	4613      	mov	r3, r2
 8000f28:	4622      	mov	r2, r4
 8000f2a:	4918      	ldr	r1, [pc, #96]	; (8000f8c <ov7670_init+0x158>)
 8000f2c:	f007 fec4 	bl	8008cb8 <siprintf>
		  print_msg(msg);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fb42 	bl	80005bc <print_msg>
		  HAL_Delay(10);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f000 fd8b 	bl	8001a54 <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8000f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f40:	3301      	adds	r3, #1
 8000f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f46:	2b79      	cmp	r3, #121	; 0x79
 8000f48:	ddc9      	ble.n	8000ede <ov7670_init+0xaa>
	  }
  }

  if (isDataCorrect) {
 8000f4a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <ov7670_init+0x12a>
	  print_msg("All data OK\r\n");
 8000f52:	480f      	ldr	r0, [pc, #60]	; (8000f90 <ov7670_init+0x15c>)
 8000f54:	f7ff fb32 	bl	80005bc <print_msg>
	  HAL_Delay(10);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f000 fd7b 	bl	8001a54 <HAL_Delay>
  }
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <ov7670_init+0x148>)
 8000f62:	f003 f8ac 	bl	80040be <HAL_GPIO_TogglePin>
  return 0;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	377c      	adds	r7, #124	; 0x7c
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	08009644 	.word	0x08009644
 8000f74:	08009660 	.word	0x08009660
 8000f78:	0800967c 	.word	0x0800967c
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	0800968c 	.word	0x0800968c
 8000f84:	080097c4 	.word	0x080097c4
 8000f88:	080096a8 	.word	0x080096a8
 8000f8c:	080096c4 	.word	0x080096c4
 8000f90:	08009704 	.word	0x08009704

08000f94 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0a0      	sub	sp, #128	; 0x80
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	char msg[100];
	uint8_t data = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
	uint8_t attempts = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	uint8_t *regAddress = &reg;
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 8000fb2:	e028      	b.n	8001006 <ov7670_read+0x72>
		status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670_READ, regAddress, 1, 100);
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000fbc:	2143      	movs	r1, #67	; 0x43
 8000fbe:	4834      	ldr	r0, [pc, #208]	; (8001090 <ov7670_read+0xfc>)
 8000fc0:	f003 fa00 	bl	80043c4 <HAL_I2C_Master_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 8000fca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 8000fd4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d014      	beq.n	8001006 <ov7670_read+0x72>
			sprintf(msg, "Transmit Status: %d on attempt %d with register 0x%x\r\n", status, attempts, *regAddress);
 8000fdc:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8000fe0:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8000fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f107 000c 	add.w	r0, r7, #12
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4928      	ldr	r1, [pc, #160]	; (8001094 <ov7670_read+0x100>)
 8000ff2:	f007 fe61 	bl	8008cb8 <siprintf>
			print_msg(msg);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fade 	bl	80005bc <print_msg>
			HAL_Delay(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f000 fd27 	bl	8001a54 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001006:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <ov7670_read+0x82>
 800100e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001012:	2b04      	cmp	r3, #4
 8001014:	d9ce      	bls.n	8000fb4 <ov7670_read+0x20>
		}
	}

	status = HAL_BUSY;
 8001016:	2302      	movs	r3, #2
 8001018:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	attempts = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	while (status != HAL_OK && attempts < 5) {
 8001022:	e027      	b.n	8001074 <ov7670_read+0xe0>
		status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670_READ, &data, 1, 100);
 8001024:	f107 020b 	add.w	r2, r7, #11
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	2143      	movs	r1, #67	; 0x43
 8001030:	4817      	ldr	r0, [pc, #92]	; (8001090 <ov7670_read+0xfc>)
 8001032:	f003 fac5 	bl	80045c0 <HAL_I2C_Master_Receive>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 800103c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001040:	3301      	adds	r3, #1
 8001042:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 8001046:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800104a:	2b00      	cmp	r3, #0
 800104c:	d012      	beq.n	8001074 <ov7670_read+0xe0>
			sprintf(msg, "Receive Status: %d on attempt %d with current data: 0x%x\r\n", status, attempts, data);
 800104e:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001052:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001056:	7af9      	ldrb	r1, [r7, #11]
 8001058:	f107 000c 	add.w	r0, r7, #12
 800105c:	9100      	str	r1, [sp, #0]
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <ov7670_read+0x104>)
 8001060:	f007 fe2a 	bl	8008cb8 <siprintf>
			print_msg(msg);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff faa7 	bl	80005bc <print_msg>
			HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f000 fcf0 	bl	8001a54 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001074:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <ov7670_read+0xf0>
 800107c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001080:	2b04      	cmp	r3, #4
 8001082:	d9cf      	bls.n	8001024 <ov7670_read+0x90>
		}
	}


	return data;
 8001084:	7afb      	ldrb	r3, [r7, #11]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3778      	adds	r7, #120	; 0x78
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000012c 	.word	0x2000012c
 8001094:	08009714 	.word	0x08009714
 8001098:	0800974c 	.word	0x0800974c

0800109c <ov7670_write>:

HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
 800109c:	b580      	push	{r7, lr}
 800109e:	b0a2      	sub	sp, #136	; 0x88
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
	char msg[100];
	uint8_t attempts = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	//uint8_t *regAddress = &reg;
	uint8_t *data = &val;
 80010b8:	1dbb      	adds	r3, r7, #6
 80010ba:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 80010bc:	e02c      	b.n	8001118 <ov7670_write+0x7c>
		status = HAL_I2C_Mem_Write(&hi2c2,ADDR_OV7670_WRITE,reg,I2C_MEMADD_SIZE_8BIT,data,1,100);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	2142      	movs	r1, #66	; 0x42
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <ov7670_write+0x98>)
 80010d4:	f003 fc9a 	bl	8004a0c <HAL_I2C_Mem_Write>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 80010de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010e2:	3301      	adds	r3, #1
 80010e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 80010e8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <ov7670_write+0x7c>
			sprintf(msg, "Memory Write Status: %d on attempt %d with register 0x%x\r\n", status, attempts, reg);
 80010f0:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80010f4:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f107 000c 	add.w	r0, r7, #12
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <ov7670_write+0x9c>)
 8001104:	f007 fdd8 	bl	8008cb8 <siprintf>
			print_msg(msg);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa55 	bl	80005bc <print_msg>
			HAL_Delay(10);
 8001112:	200a      	movs	r0, #10
 8001114:	f000 fc9e 	bl	8001a54 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001118:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <ov7670_write+0x8c>
 8001120:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001124:	2b04      	cmp	r3, #4
 8001126:	d9ca      	bls.n	80010be <ov7670_write+0x22>
			HAL_Delay(10);
		}
	}
	*/

	return status;
 8001128:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
}
 800112c:	4618      	mov	r0, r3
 800112e:	3778      	adds	r7, #120	; 0x78
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000012c 	.word	0x2000012c
 8001138:	08009788 	.word	0x08009788

0800113c <ov7670_capture>:

void ov7670_snapshot(uint8_t *buff){
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
}

void ov7670_capture(uint8_t *buff){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	f243 03f0 	movw	r3, #12528	; 0x30f0
 800114a:	2100      	movs	r1, #0
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <ov7670_capture+0x20>)
 800114e:	f000 fdb7 	bl	8001cc0 <HAL_DCMI_Start_DMA>

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000007c 	.word	0x2000007c

08001160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_MspInit+0x4c>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x4c>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a78      	ldr	r2, [pc, #480]	; (80013b0 <HAL_DCMI_MspInit+0x200>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	f040 80e9 	bne.w	80013a6 <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 80011da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011dc:	4a75      	ldr	r2, [pc, #468]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6353      	str	r3, [r2, #52]	; 0x34
 80011e4:	4b73      	ldr	r3, [pc, #460]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
 80011ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4a6e      	ldr	r2, [pc, #440]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001200:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	4a67      	ldr	r2, [pc, #412]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6313      	str	r3, [r2, #48]	; 0x30
 800121c:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a60      	ldr	r2, [pc, #384]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
 8001238:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a59      	ldr	r2, [pc, #356]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 800126a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <HAL_DCMI_MspInit+0x204>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800127c:	2370      	movs	r3, #112	; 0x70
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800128c:	230d      	movs	r3, #13
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4848      	ldr	r0, [pc, #288]	; (80013b8 <HAL_DCMI_MspInit+0x208>)
 8001298:	f002 fd64 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800129c:	2350      	movs	r3, #80	; 0x50
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ac:	230d      	movs	r3, #13
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4841      	ldr	r0, [pc, #260]	; (80013bc <HAL_DCMI_MspInit+0x20c>)
 80012b8:	f002 fd54 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ce:	230d      	movs	r3, #13
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	4839      	ldr	r0, [pc, #228]	; (80013c0 <HAL_DCMI_MspInit+0x210>)
 80012da:	f002 fd43 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012de:	2308      	movs	r3, #8
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ee:	230d      	movs	r3, #13
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4832      	ldr	r0, [pc, #200]	; (80013c4 <HAL_DCMI_MspInit+0x214>)
 80012fa:	f002 fd33 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001310:	230d      	movs	r3, #13
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	482b      	ldr	r0, [pc, #172]	; (80013c8 <HAL_DCMI_MspInit+0x218>)
 800131c:	f002 fd22 	bl	8003d64 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001322:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <HAL_DCMI_MspInit+0x220>)
 8001324:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800132c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001348:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 800134c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001350:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001358:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 800135c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001360:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001364:	2204      	movs	r2, #4
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 800136a:	2203      	movs	r2, #3
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001376:	2200      	movs	r2, #0
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800137a:	4814      	ldr	r0, [pc, #80]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 800137c:	f000 ff68 	bl	8002250 <HAL_DMA_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8001386:	f7ff fc15 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 800138e:	649a      	str	r2, [r3, #72]	; 0x48
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_DCMI_MspInit+0x21c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	204e      	movs	r0, #78	; 0x4e
 800139c:	f000 fc59 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80013a0:	204e      	movs	r0, #78	; 0x4e
 80013a2:	f000 fc72 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3738      	adds	r7, #56	; 0x38
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	50050000 	.word	0x50050000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021800 	.word	0x40021800
 80013cc:	200000cc 	.word	0x200000cc
 80013d0:	40026428 	.word	0x40026428

080013d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_I2C_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_I2C_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_I2C_MspInit+0x88>)
 8001400:	f043 0320 	orr.w	r3, r3, #32
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_I2C_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001412:	2303      	movs	r3, #3
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001416:	2312      	movs	r3, #18
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001422:	2304      	movs	r3, #4
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <HAL_I2C_MspInit+0x8c>)
 800142e:	f002 fc99 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_I2C_MspInit+0x88>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_I2C_MspInit+0x88>)
 800143c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_I2C_MspInit+0x88>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40005800 	.word	0x40005800
 800145c:	40023800 	.word	0x40023800
 8001460:	40021400 	.word	0x40021400

08001464 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10d      	bne.n	8001492 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_TIM_PWM_MspInit+0x40>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_TIM_PWM_MspInit+0x40>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_TIM_PWM_MspInit+0x40>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_TIM_Base_MspInit+0x48>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d115      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_TIM_Base_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_TIM_Base_MspInit+0x4c>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_TIM_Base_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2036      	movs	r0, #54	; 0x36
 80014dc:	f000 fbb9 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014e0:	2036      	movs	r0, #54	; 0x36
 80014e2:	f000 fbd2 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40001000 	.word	0x40001000
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <HAL_TIM_MspPostInit+0x68>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d11e      	bne.n	8001558 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_TIM_MspPostInit+0x6c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_TIM_MspPostInit+0x6c>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_TIM_MspPostInit+0x6c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_TIM_MspPostInit+0x70>)
 8001554:	f002 fc06 	bl	8003d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40010000 	.word	0x40010000
 8001564:	40023800 	.word	0x40023800
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a39      	ldr	r2, [pc, #228]	; (8001670 <HAL_UART_MspInit+0x104>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d16b      	bne.n	8001666 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <HAL_UART_MspInit+0x108>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a37      	ldr	r2, [pc, #220]	; (8001674 <HAL_UART_MspInit+0x108>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <HAL_UART_MspInit+0x108>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_UART_MspInit+0x108>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <HAL_UART_MspInit+0x108>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <HAL_UART_MspInit+0x108>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d8:	2307      	movs	r3, #7
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4825      	ldr	r0, [pc, #148]	; (8001678 <HAL_UART_MspInit+0x10c>)
 80015e4:	f002 fbbe 	bl	8003d64 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_UART_MspInit+0x110>)
 80015ea:	4a25      	ldr	r2, [pc, #148]	; (8001680 <HAL_UART_MspInit+0x114>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_UART_MspInit+0x110>)
 80015f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_UART_MspInit+0x110>)
 80015f8:	2240      	movs	r2, #64	; 0x40
 80015fa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_UART_MspInit+0x110>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_UART_MspInit+0x110>)
 8001604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001608:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_UART_MspInit+0x110>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_UART_MspInit+0x110>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_UART_MspInit+0x110>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_UART_MspInit+0x110>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_UART_MspInit+0x110>)
 8001624:	2204      	movs	r2, #4
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_UART_MspInit+0x110>)
 800162a:	2203      	movs	r2, #3
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_UART_MspInit+0x110>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0x110>)
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800163a:	4810      	ldr	r0, [pc, #64]	; (800167c <HAL_UART_MspInit+0x110>)
 800163c:	f000 fe08 	bl	8002250 <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001646:	f7ff fab5 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_UART_MspInit+0x110>)
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_UART_MspInit+0x110>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2027      	movs	r0, #39	; 0x27
 800165c:	f000 faf9 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001660:	2027      	movs	r0, #39	; 0x27
 8001662:	f000 fb12 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40004800 	.word	0x40004800
 8001674:	40023800 	.word	0x40023800
 8001678:	40020c00 	.word	0x40020c00
 800167c:	20000254 	.word	0x20000254
 8001680:	40026058 	.word	0x40026058

08001684 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0a0      	sub	sp, #128	; 0x80
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	225c      	movs	r2, #92	; 0x5c
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f007 fb27 	bl	8008cf8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b2:	d14e      	bne.n	8001752 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80016ba:	2300      	movs	r3, #0
 80016bc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 f8c2 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80016ce:	f7ff fa71 	bl	8000bb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_PCD_MspInit+0xd8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a20      	ldr	r2, [pc, #128]	; (800175c <HAL_PCD_MspInit+0xd8>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_PCD_MspInit+0xd8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001700:	230a      	movs	r3, #10
 8001702:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001708:	4619      	mov	r1, r3
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <HAL_PCD_MspInit+0xdc>)
 800170c:	f002 fb2a 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001714:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001722:	4619      	mov	r1, r3
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <HAL_PCD_MspInit+0xdc>)
 8001726:	f002 fb1d 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_PCD_MspInit+0xd8>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_PCD_MspInit+0xd8>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	6353      	str	r3, [r2, #52]	; 0x34
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_PCD_MspInit+0xd8>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_PCD_MspInit+0xd8>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_PCD_MspInit+0xd8>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3780      	adds	r7, #128	; 0x80
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>
	...

0800176c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001774:	4801      	ldr	r0, [pc, #4]	; (800177c <HardFault_Handler+0x10>)
 8001776:	f002 fca2 	bl	80040be <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0xe>
 800177c:	40020400 	.word	0x40020400

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c0:	f000 f928 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <DMA1_Stream3_IRQHandler+0x10>)
 80017ce:	f000 fed7 	bl	8002580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000254 	.word	0x20000254

080017dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USART3_IRQHandler+0x10>)
 80017e2:	f005 ffb1 	bl	8007748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000210 	.word	0x20000210

080017f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint32_t thisTime = HAL_GetTick();
 80017f6:	f000 f921 	bl	8001a3c <HAL_GetTick>
 80017fa:	6078      	str	r0, [r7, #4]
		if (thisTime-lastTime >= interval) {
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <EXTI15_10_IRQHandler+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	1ad2      	subs	r2, r2, r3
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <EXTI15_10_IRQHandler+0x44>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d302      	bcc.n	8001812 <EXTI15_10_IRQHandler+0x22>
			button_flag = 1;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <EXTI15_10_IRQHandler+0x48>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001812:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001816:	f002 fc6d 	bl	80040f4 <HAL_GPIO_EXTI_IRQHandler>
		lastTime = thisTime;
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <EXTI15_10_IRQHandler+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001824:	f002 fc66 	bl	80040f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20018f58 	.word	0x20018f58
 8001834:	20000000 	.word	0x20000000
 8001838:	20018f55 	.word	0x20018f55

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f005 f961 	bl	8006b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200001c8 	.word	0x200001c8

08001850 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	HAL_DCMI_Stop(&hdcmi);
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <DMA2_Stream1_IRQHandler+0x1c>)
 8001856:	f000 fad3 	bl	8001e00 <HAL_DCMI_Stop>
	dma_flag = 1;
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <DMA2_Stream1_IRQHandler+0x20>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <DMA2_Stream1_IRQHandler+0x24>)
 8001862:	f000 fe8d 	bl	8002580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000007c 	.word	0x2000007c
 8001870:	20018f54 	.word	0x20018f54
 8001874:	200000cc 	.word	0x200000cc

08001878 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DCMI_IRQHandler+0x10>)
 800187e:	f000 fb1b 	bl	8001eb8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000007c 	.word	0x2000007c

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f007 fa24 	bl	8008d08 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20020000 	.word	0x20020000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20018f5c 	.word	0x20018f5c
 80018f4:	200190b0 	.word	0x200190b0

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001922:	490e      	ldr	r1, [pc, #56]	; (800195c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001938:	4c0b      	ldr	r4, [pc, #44]	; (8001968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001946:	f7ff ffd7 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194a:	f007 f9e3 	bl	8008d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7ff f93b 	bl	8000bc8 <main>
  bx  lr    
 8001952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001960:	0800991c 	.word	0x0800991c
  ldr r2, =_sbss
 8001964:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001968:	200190ac 	.word	0x200190ac

0800196c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_Init+0x40>)
 800197a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_Init+0x40>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_Init+0x40>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f000 f94f 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f808 	bl	80019b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff fbdc 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x54>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x58>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f967 	bl	8001ca6 <HAL_SYSTICK_Config>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00e      	b.n	8001a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d80a      	bhi.n	80019fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f0:	f000 f92f 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_InitTick+0x5c>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	20018f60 	.word	0x20018f60

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20018f60 	.word	0x20018f60

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_Delay+0x44>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000000c 	.word	0x2000000c

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff3e 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff31 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa2 	bl	8001bf8 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DCMI_Start_DMA+0x20>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e086      	b.n	8001dee <HAL_DCMI_Start_DMA+0x12e>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0202 	bic.w	r2, r2, #2
 8001d0e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d24:	4a34      	ldr	r2, [pc, #208]	; (8001df8 <HAL_DCMI_Start_DMA+0x138>)
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2c:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <HAL_DCMI_Start_DMA+0x13c>)
 8001d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	2200      	movs	r2, #0
 8001d36:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40

  if(Length <= 0xFFFFU)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d20a      	bcs.n	8001d62 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	4619      	mov	r1, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	f000 fb26 	bl	80023ac <HAL_DMA_Start_IT>
 8001d60:	e038      	b.n	8001dd4 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d66:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_DCMI_Start_DMA+0x138>)
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001d7c:	e009      	b.n	8001d92 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	085a      	lsrs	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	005a      	lsls	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9a:	d2f0      	bcs.n	8001d7e <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	1e9a      	subs	r2, r3, #2
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3328      	adds	r3, #40	; 0x28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	f000 fe40 	bl	8002a54 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08002005 	.word	0x08002005
 8001dfc:	0800212f 	.word	0x0800212f

08001e00 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_DCMI_Stop+0xb0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	4a29      	ldr	r2, [pc, #164]	; (8001eb4 <HAL_DCMI_Stop+0xb4>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_DCMI_Stop+0x2a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e03e      	b.n	8001ea8 <HAL_DCMI_Stop+0xa8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	60ba      	str	r2, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d108      	bne.n	8001e66 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e006      	b.n	8001e74 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ea      	bne.n	8001e4a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e82:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fae7 	bl	800245c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	92492493 	.word	0x92492493

08001eb8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f043 0202 	orr.w	r2, r3, #2
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <HAL_DCMI_IRQHandler+0xf8>)
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fb1e 	bl	800253c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2204      	movs	r2, #4
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <HAL_DCMI_IRQHandler+0xf8>)
 8001f2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fb02 	bl	800253c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2210      	movs	r2, #16
 8001f48:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f83c 	bl	8001fc8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2208      	movs	r2, #8
 8001f60:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f83a 	bl	8001fdc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d019      	beq.n	8001fa6 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d107      	bne.n	8001f90 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 021e 	bic.w	r2, r2, #30
 8001f8e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f825 	bl	8001ff0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	0800212f 	.word	0x0800212f

08001fb4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	2b00      	cmp	r3, #0
 800201c:	d043      	beq.n	80020a6 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202a:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d118      	bne.n	800206a <DCMI_DMAXferCplt+0x66>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	00da      	lsls	r2, r3, #3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	f001 fe43 	bl	8003ce4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
 8002068:	e044      	b.n	80020f4 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d13c      	bne.n	80020f4 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	00da      	lsls	r2, r3, #3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	2201      	movs	r2, #1
 8002094:	4619      	mov	r1, r3
 8002096:	f001 fe25 	bl	8003ce4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	1e5a      	subs	r2, r3, #1
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
 80020a4:	e026      	b.n	80020f4 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	e017      	b.n	80020f4 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10f      	bne.n	80020f4 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	440a      	add	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d112      	bne.n	8002126 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d103      	bne.n	8002126 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f7ff ff30 	bl	8001fb4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e069      	b.n	8002242 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff f814 	bl	80011b0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff f811 	bl	80011b0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2202      	movs	r2, #2
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_DCMI_Init+0xf0>)
 80021a2:	400b      	ands	r3, r1
 80021a4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80021ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80021c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80021d2:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 80021de:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80021ea:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d112      	bne.n	8002222 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7f1b      	ldrb	r3, [r3, #28]
 8002200:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7f5b      	ldrb	r3, [r3, #29]
 8002206:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002208:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7f9b      	ldrb	r3, [r3, #30]
 800220e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002210:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7fdb      	ldrb	r3, [r3, #31]
 8002218:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800221e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002220:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 021e 	orr.w	r2, r2, #30
 8002230:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	ffe0f007 	.word	0xffe0f007

08002250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff fbee 	bl	8001a3c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e099      	b.n	80023a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228c:	e00f      	b.n	80022ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800228e:	f7ff fbd5 	bl	8001a3c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b05      	cmp	r3, #5
 800229a:	d908      	bls.n	80022ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e078      	b.n	80023a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e8      	bne.n	800228e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_DMA_Init+0x158>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b04      	cmp	r3, #4
 8002306:	d107      	bne.n	8002318 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4313      	orrs	r3, r2
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f023 0307 	bic.w	r3, r3, #7
 800232e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b04      	cmp	r3, #4
 8002340:	d117      	bne.n	8002372 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00e      	beq.n	8002372 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fb01 	bl	800295c <DMA_CheckFifoParam>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800236e:	2301      	movs	r3, #1
 8002370:	e016      	b.n	80023a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fab8 	bl	80028f0 <DMA_CalcBaseAndBitshift>
 8002380:	4603      	mov	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	223f      	movs	r2, #63	; 0x3f
 800238a:	409a      	lsls	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	f010803f 	.word	0xf010803f

080023ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_DMA_Start_IT+0x26>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e040      	b.n	8002454 <HAL_DMA_Start_IT+0xa8>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d12f      	bne.n	8002446 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fa4a 	bl	8002894 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	223f      	movs	r2, #63	; 0x3f
 8002406:	409a      	lsls	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0216 	orr.w	r2, r2, #22
 800241a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0208 	orr.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e005      	b.n	8002452 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800244e:	2302      	movs	r3, #2
 8002450:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800246a:	f7ff fae7 	bl	8001a3c <HAL_GetTick>
 800246e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d008      	beq.n	800248e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e052      	b.n	8002534 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0216 	bic.w	r2, r2, #22
 800249c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <HAL_DMA_Abort+0x62>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0208 	bic.w	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024de:	e013      	b.n	8002508 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e0:	f7ff faac 	bl	8001a3c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d90c      	bls.n	8002508 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e015      	b.n	8002534 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e4      	bne.n	80024e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	223f      	movs	r2, #63	; 0x3f
 800251c:	409a      	lsls	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d004      	beq.n	800255a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00c      	b.n	8002574 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2205      	movs	r2, #5
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800258c:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <HAL_DMA_IRQHandler+0x248>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a8e      	ldr	r2, [pc, #568]	; (80027cc <HAL_DMA_IRQHandler+0x24c>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2208      	movs	r2, #8
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01a      	beq.n	80025ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0204 	bic.w	r2, r2, #4
 80025d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	2208      	movs	r2, #8
 80025da:	409a      	lsls	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2201      	movs	r2, #1
 80025f2:	409a      	lsls	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2201      	movs	r2, #1
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2204      	movs	r2, #4
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2204      	movs	r2, #4
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2210      	movs	r2, #16
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d043      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03c      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2210      	movs	r2, #16
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d024      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e01f      	b.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
 80026c0:	e016      	b.n	80026f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0208 	bic.w	r2, r2, #8
 80026de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2220      	movs	r2, #32
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 808f 	beq.w	8002820 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8087 	beq.w	8002820 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2220      	movs	r2, #32
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b05      	cmp	r3, #5
 8002728:	d136      	bne.n	8002798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0216 	bic.w	r2, r2, #22
 8002738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d103      	bne.n	800275a <HAL_DMA_IRQHandler+0x1da>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0208 	bic.w	r2, r2, #8
 8002768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	223f      	movs	r2, #63	; 0x3f
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278a:	2b00      	cmp	r3, #0
 800278c:	d07e      	beq.n	800288c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
        }
        return;
 8002796:	e079      	b.n	800288c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01d      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d031      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
 80027c4:	e02c      	b.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
 80027c6:	bf00      	nop
 80027c8:	20000004 	.word	0x20000004
 80027cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d023      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e01e      	b.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0210 	bic.w	r2, r2, #16
 80027fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d032      	beq.n	800288e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d022      	beq.n	800287a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2205      	movs	r2, #5
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d307      	bcc.n	8002868 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f2      	bne.n	800284c <HAL_DMA_IRQHandler+0x2cc>
 8002866:	e000      	b.n	800286a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002868:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
 800288a:	e000      	b.n	800288e <HAL_DMA_IRQHandler+0x30e>
        return;
 800288c:	bf00      	nop
    }
  }
}
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d108      	bne.n	80028d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028d2:	e007      	b.n	80028e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3b10      	subs	r3, #16
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <DMA_CalcBaseAndBitshift+0x64>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <DMA_CalcBaseAndBitshift+0x68>)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d909      	bls.n	8002932 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	659a      	str	r2, [r3, #88]	; 0x58
 8002930:	e007      	b.n	8002942 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	aaaaaaab 	.word	0xaaaaaaab
 8002958:	080098d0 	.word	0x080098d0

0800295c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11f      	bne.n	80029b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d856      	bhi.n	8002a2a <DMA_CheckFifoParam+0xce>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <DMA_CheckFifoParam+0x28>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	08002995 	.word	0x08002995
 8002988:	080029a7 	.word	0x080029a7
 800298c:	08002995 	.word	0x08002995
 8002990:	08002a2b 	.word	0x08002a2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d046      	beq.n	8002a2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a4:	e043      	b.n	8002a2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ae:	d140      	bne.n	8002a32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b4:	e03d      	b.n	8002a32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029be:	d121      	bne.n	8002a04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d837      	bhi.n	8002a36 <DMA_CheckFifoParam+0xda>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <DMA_CheckFifoParam+0x70>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029e3 	.word	0x080029e3
 80029d4:	080029dd 	.word	0x080029dd
 80029d8:	080029f5 	.word	0x080029f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      break;
 80029e0:	e030      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d025      	beq.n	8002a3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f2:	e022      	b.n	8002a3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029fc:	d11f      	bne.n	8002a3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a02:	e01c      	b.n	8002a3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d903      	bls.n	8002a12 <DMA_CheckFifoParam+0xb6>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d003      	beq.n	8002a18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a10:	e018      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      break;
 8002a16:	e015      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      break;
 8002a28:	e00b      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e00a      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e008      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e006      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e004      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a42:	bf00      	nop
    }
  } 
  
  return status; 
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d106      	bne.n	8002a7c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f001 b911 	b.w	8003c9e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f001 b8ff 	b.w	8003c9e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f001 b8f7 	b.w	8003c9e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f041 80e5 	bne.w	8003c90 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ae2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f001 f910 	bl	8003d18 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b8d      	ldr	r3, [pc, #564]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d960      	bls.n	8002bc6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8b      	ldr	r2, [pc, #556]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d057      	beq.n	8002bbe <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a8a      	ldr	r2, [pc, #552]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d050      	beq.n	8002bba <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a88      	ldr	r2, [pc, #544]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d049      	beq.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d042      	beq.n	8002bb2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a85      	ldr	r2, [pc, #532]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d03a      	beq.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a84      	ldr	r2, [pc, #528]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d032      	beq.n	8002ba6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a82      	ldr	r2, [pc, #520]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d02a      	beq.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a81      	ldr	r2, [pc, #516]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a7f      	ldr	r2, [pc, #508]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a7e      	ldr	r2, [pc, #504]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d012      	beq.n	8002b8e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a7c      	ldr	r2, [pc, #496]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00a      	beq.n	8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7b      	ldr	r2, [pc, #492]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d102      	bne.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b80:	e01e      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b86:	e01b      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b8c:	e018      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b92:	e015      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b98:	e012      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b9e:	e00f      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ba4:	e00c      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002baa:	e009      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bb0:	e006      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e004      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e002      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e000      	b.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002bc2:	60d3      	str	r3, [r2, #12]
 8002bc4:	e14f      	b.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d960      	bls.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d057      	beq.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d050      	beq.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d049      	beq.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a53      	ldr	r2, [pc, #332]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d042      	beq.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d03a      	beq.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d032      	beq.n	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d02a      	beq.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a4d      	ldr	r2, [pc, #308]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d022      	beq.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a4c      	ldr	r2, [pc, #304]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d01a      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4a      	ldr	r2, [pc, #296]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d012      	beq.n	8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00a      	beq.n	8002c56 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d102      	bne.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002c4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c4e:	e01e      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c54:	e01b      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c5a:	e018      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c60:	e015      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c66:	e012      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c6c:	e00f      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c72:	e00c      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c78:	e009      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c7e:	e006      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c80:	2320      	movs	r3, #32
 8002c82:	e004      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c84:	2320      	movs	r3, #32
 8002c86:	e002      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e000      	b.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	4a36      	ldr	r2, [pc, #216]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002c90:	6093      	str	r3, [r2, #8]
 8002c92:	e0e8      	b.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f240 8082 	bls.w	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d078      	beq.n	8002d9e <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d071      	beq.n	8002d9a <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a21      	ldr	r2, [pc, #132]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d06a      	beq.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d063      	beq.n	8002d92 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d05b      	beq.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d053      	beq.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04b      	beq.n	8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d043      	beq.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03b      	beq.n	8002d74 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d012      	beq.n	8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00a      	beq.n	8002d26 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d102      	bne.n	8002d20 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002d1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d1e:	e03f      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d24:	e03c      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d2a:	e039      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d30:	e036      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d32:	bf00      	nop
 8002d34:	40026458 	.word	0x40026458
 8002d38:	40026010 	.word	0x40026010
 8002d3c:	40026410 	.word	0x40026410
 8002d40:	40026070 	.word	0x40026070
 8002d44:	40026470 	.word	0x40026470
 8002d48:	40026028 	.word	0x40026028
 8002d4c:	40026428 	.word	0x40026428
 8002d50:	40026088 	.word	0x40026088
 8002d54:	40026488 	.word	0x40026488
 8002d58:	40026040 	.word	0x40026040
 8002d5c:	40026440 	.word	0x40026440
 8002d60:	400260a0 	.word	0x400260a0
 8002d64:	400264a0 	.word	0x400264a0
 8002d68:	40026400 	.word	0x40026400
 8002d6c:	400260b8 	.word	0x400260b8
 8002d70:	40026058 	.word	0x40026058
 8002d74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d78:	e012      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7e:	e00f      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d84:	e00c      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8a:	e009      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d90:	e006      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d92:	2320      	movs	r3, #32
 8002d94:	e004      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d96:	2320      	movs	r3, #32
 8002d98:	e002      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e000      	b.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002d9e:	2320      	movs	r3, #32
 8002da0:	4a8c      	ldr	r2, [pc, #560]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002da2:	60d3      	str	r3, [r2, #12]
 8002da4:	e05f      	b.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8b      	ldr	r2, [pc, #556]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d057      	beq.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a89      	ldr	r2, [pc, #548]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d050      	beq.n	8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a88      	ldr	r2, [pc, #544]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d049      	beq.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a86      	ldr	r2, [pc, #536]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d042      	beq.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a85      	ldr	r2, [pc, #532]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d03a      	beq.n	8002e4e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a83      	ldr	r2, [pc, #524]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d032      	beq.n	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a82      	ldr	r2, [pc, #520]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d02a      	beq.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a80      	ldr	r2, [pc, #512]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d022      	beq.n	8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7f      	ldr	r2, [pc, #508]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d01a      	beq.n	8002e36 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7d      	ldr	r2, [pc, #500]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d012      	beq.n	8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00a      	beq.n	8002e2a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a7a      	ldr	r2, [pc, #488]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d102      	bne.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002e1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e22:	e01e      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e28:	e01b      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e2e:	e018      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e34:	e015      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e3a:	e012      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e40:	e00f      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e46:	e00c      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e4c:	e009      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e52:	e006      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e54:	2320      	movs	r3, #32
 8002e56:	e004      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e002      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e000      	b.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e60:	2320      	movs	r3, #32
 8002e62:	4a5c      	ldr	r2, [pc, #368]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002e64:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b66      	ldr	r3, [pc, #408]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d960      	bls.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d057      	beq.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a56      	ldr	r2, [pc, #344]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d050      	beq.n	8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a55      	ldr	r2, [pc, #340]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d049      	beq.n	8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a53      	ldr	r2, [pc, #332]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d042      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d03a      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d032      	beq.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a4f      	ldr	r2, [pc, #316]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d02a      	beq.n	8002f0e <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4d      	ldr	r2, [pc, #308]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d022      	beq.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4c      	ldr	r2, [pc, #304]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01a      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a4a      	ldr	r2, [pc, #296]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d012      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a49      	ldr	r2, [pc, #292]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00a      	beq.n	8002ef6 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a47      	ldr	r2, [pc, #284]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d102      	bne.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002eea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eee:	e01e      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ef0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ef4:	e01b      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ef6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002efa:	e018      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002efc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f00:	e015      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f06:	e012      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0c:	e00f      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f12:	e00c      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f18:	e009      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f1e:	e006      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f20:	2310      	movs	r3, #16
 8002f22:	e004      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f24:	2310      	movs	r3, #16
 8002f26:	e002      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	e000      	b.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	4a37      	ldr	r2, [pc, #220]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002f30:	60d3      	str	r3, [r2, #12]
 8002f32:	e14f      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b35      	ldr	r3, [pc, #212]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f240 8082 	bls.w	8003046 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d078      	beq.n	800303e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d071      	beq.n	800303a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d06a      	beq.n	8003036 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d063      	beq.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d05b      	beq.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d053      	beq.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04b      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d043      	beq.n	800301a <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d03b      	beq.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d012      	beq.n	8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a15      	ldr	r2, [pc, #84]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00a      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d102      	bne.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002fba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fbe:	e03f      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002fc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fc4:	e03c      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002fc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fca:	e039      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002fcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fd0:	e036      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002fd2:	bf00      	nop
 8002fd4:	40026000 	.word	0x40026000
 8002fd8:	40026010 	.word	0x40026010
 8002fdc:	40026410 	.word	0x40026410
 8002fe0:	40026070 	.word	0x40026070
 8002fe4:	40026470 	.word	0x40026470
 8002fe8:	40026028 	.word	0x40026028
 8002fec:	40026428 	.word	0x40026428
 8002ff0:	40026088 	.word	0x40026088
 8002ff4:	40026488 	.word	0x40026488
 8002ff8:	40026040 	.word	0x40026040
 8002ffc:	40026440 	.word	0x40026440
 8003000:	400260a0 	.word	0x400260a0
 8003004:	400264a0 	.word	0x400264a0
 8003008:	40026458 	.word	0x40026458
 800300c:	40026400 	.word	0x40026400
 8003010:	400260b8 	.word	0x400260b8
 8003014:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003018:	e012      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800301a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301e:	e00f      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003024:	e00c      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302a:	e009      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800302c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003030:	e006      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003032:	2310      	movs	r3, #16
 8003034:	e004      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003036:	2310      	movs	r3, #16
 8003038:	e002      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800303a:	2310      	movs	r3, #16
 800303c:	e000      	b.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800303e:	2310      	movs	r3, #16
 8003040:	4a8c      	ldr	r2, [pc, #560]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003042:	6093      	str	r3, [r2, #8]
 8003044:	e0c6      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b8a      	ldr	r3, [pc, #552]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800304e:	429a      	cmp	r2, r3
 8003050:	d960      	bls.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a89      	ldr	r2, [pc, #548]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d057      	beq.n	800310c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a87      	ldr	r2, [pc, #540]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d050      	beq.n	8003108 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a86      	ldr	r2, [pc, #536]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d049      	beq.n	8003104 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a84      	ldr	r2, [pc, #528]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d042      	beq.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a83      	ldr	r2, [pc, #524]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d03a      	beq.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a81      	ldr	r2, [pc, #516]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d032      	beq.n	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a80      	ldr	r2, [pc, #512]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d02a      	beq.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a7e      	ldr	r2, [pc, #504]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7d      	ldr	r2, [pc, #500]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01a      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a7b      	ldr	r2, [pc, #492]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d012      	beq.n	80030dc <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a7a      	ldr	r2, [pc, #488]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00a      	beq.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a78      	ldr	r2, [pc, #480]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d102      	bne.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80030ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030ce:	e01e      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030d4:	e01b      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030da:	e018      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030e0:	e015      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030e6:	e012      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ec:	e00f      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f2:	e00c      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f8:	e009      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80030fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fe:	e006      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003100:	2310      	movs	r3, #16
 8003102:	e004      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003104:	2310      	movs	r3, #16
 8003106:	e002      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003108:	2310      	movs	r3, #16
 800310a:	e000      	b.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800310c:	2310      	movs	r3, #16
 800310e:	4a67      	ldr	r2, [pc, #412]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003110:	60d3      	str	r3, [r2, #12]
 8003112:	e05f      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d057      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a57      	ldr	r2, [pc, #348]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d050      	beq.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a55      	ldr	r2, [pc, #340]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d049      	beq.n	80031c6 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a54      	ldr	r2, [pc, #336]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d042      	beq.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d03a      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a51      	ldr	r2, [pc, #324]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d032      	beq.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4f      	ldr	r2, [pc, #316]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02a      	beq.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a4e      	ldr	r2, [pc, #312]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d022      	beq.n	80031aa <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a4c      	ldr	r2, [pc, #304]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01a      	beq.n	80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d012      	beq.n	800319e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a49      	ldr	r2, [pc, #292]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00a      	beq.n	8003198 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a48      	ldr	r2, [pc, #288]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d102      	bne.n	8003192 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 800318c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003190:	e01e      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003196:	e01b      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003198:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319c:	e018      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800319e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031a2:	e015      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031a8:	e012      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ae:	e00f      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b4:	e00c      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ba:	e009      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c0:	e006      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031c2:	2310      	movs	r3, #16
 80031c4:	e004      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031c6:	2310      	movs	r3, #16
 80031c8:	e002      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031ca:	2310      	movs	r3, #16
 80031cc:	e000      	b.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031ce:	2310      	movs	r3, #16
 80031d0:	4a36      	ldr	r2, [pc, #216]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80031d2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80031dc:	429a      	cmp	r2, r3
 80031de:	f240 8082 	bls.w	80032e6 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d078      	beq.n	80032de <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d071      	beq.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d06a      	beq.n	80032d6 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a20      	ldr	r2, [pc, #128]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d063      	beq.n	80032d2 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1f      	ldr	r2, [pc, #124]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d05b      	beq.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d053      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d04b      	beq.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1a      	ldr	r2, [pc, #104]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d043      	beq.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a19      	ldr	r2, [pc, #100]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d03b      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d012      	beq.n	800326c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00a      	beq.n	8003266 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d102      	bne.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800325a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800325e:	e03f      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003264:	e03c      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003266:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800326a:	e039      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800326c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003270:	e036      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003272:	bf00      	nop
 8003274:	40026400 	.word	0x40026400
 8003278:	40026058 	.word	0x40026058
 800327c:	40026010 	.word	0x40026010
 8003280:	40026410 	.word	0x40026410
 8003284:	40026070 	.word	0x40026070
 8003288:	40026470 	.word	0x40026470
 800328c:	40026028 	.word	0x40026028
 8003290:	40026428 	.word	0x40026428
 8003294:	40026088 	.word	0x40026088
 8003298:	40026488 	.word	0x40026488
 800329c:	40026040 	.word	0x40026040
 80032a0:	40026440 	.word	0x40026440
 80032a4:	400260a0 	.word	0x400260a0
 80032a8:	400264a0 	.word	0x400264a0
 80032ac:	40026000 	.word	0x40026000
 80032b0:	40026458 	.word	0x40026458
 80032b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032b8:	e012      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032be:	e00f      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c4:	e00c      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ca:	e009      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d0:	e006      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e004      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032d6:	2308      	movs	r3, #8
 80032d8:	e002      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032da:	2308      	movs	r3, #8
 80032dc:	e000      	b.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80032de:	2308      	movs	r3, #8
 80032e0:	4a8c      	ldr	r2, [pc, #560]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80032e2:	60d3      	str	r3, [r2, #12]
 80032e4:	e14e      	b.n	8003584 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d960      	bls.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a89      	ldr	r2, [pc, #548]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d057      	beq.n	80033ac <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a87      	ldr	r2, [pc, #540]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d050      	beq.n	80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a86      	ldr	r2, [pc, #536]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d049      	beq.n	80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a84      	ldr	r2, [pc, #528]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d042      	beq.n	80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a83      	ldr	r2, [pc, #524]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d03a      	beq.n	800339a <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a81      	ldr	r2, [pc, #516]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d032      	beq.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a80      	ldr	r2, [pc, #512]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02a      	beq.n	800338e <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7e      	ldr	r2, [pc, #504]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7d      	ldr	r2, [pc, #500]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d01a      	beq.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7b      	ldr	r2, [pc, #492]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d012      	beq.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00a      	beq.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a78      	ldr	r2, [pc, #480]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d102      	bne.n	8003370 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800336a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800336e:	e01e      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003374:	e01b      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003376:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800337a:	e018      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800337c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003380:	e015      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003382:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003386:	e012      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338c:	e00f      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800338e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003392:	e00c      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003398:	e009      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800339a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339e:	e006      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80033a0:	2308      	movs	r3, #8
 80033a2:	e004      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80033a4:	2308      	movs	r3, #8
 80033a6:	e002      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80033a8:	2308      	movs	r3, #8
 80033aa:	e000      	b.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80033ac:	2308      	movs	r3, #8
 80033ae:	4a59      	ldr	r2, [pc, #356]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80033b0:	6093      	str	r3, [r2, #8]
 80033b2:	e0e7      	b.n	8003584 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b64      	ldr	r3, [pc, #400]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80033bc:	429a      	cmp	r2, r3
 80033be:	d960      	bls.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a55      	ldr	r2, [pc, #340]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d057      	beq.n	800347a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a54      	ldr	r2, [pc, #336]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d050      	beq.n	8003476 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a52      	ldr	r2, [pc, #328]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d049      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a51      	ldr	r2, [pc, #324]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d042      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a4f      	ldr	r2, [pc, #316]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03a      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a4e      	ldr	r2, [pc, #312]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d032      	beq.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02a      	beq.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a4b      	ldr	r2, [pc, #300]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a49      	ldr	r2, [pc, #292]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01a      	beq.n	8003450 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a48      	ldr	r2, [pc, #288]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d012      	beq.n	800344a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a46      	ldr	r2, [pc, #280]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00a      	beq.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a45      	ldr	r2, [pc, #276]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d102      	bne.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003438:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800343c:	e01e      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800343e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003442:	e01b      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003444:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003448:	e018      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800344a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800344e:	e015      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003450:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003454:	e012      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800345a:	e00f      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800345c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003460:	e00c      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003466:	e009      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800346c:	e006      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800346e:	2308      	movs	r3, #8
 8003470:	e004      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003472:	2308      	movs	r3, #8
 8003474:	e002      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003476:	2308      	movs	r3, #8
 8003478:	e000      	b.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800347a:	2308      	movs	r3, #8
 800347c:	4a34      	ldr	r2, [pc, #208]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800347e:	60d3      	str	r3, [r2, #12]
 8003480:	e080      	b.n	8003584 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a25      	ldr	r2, [pc, #148]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d078      	beq.n	800357e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d071      	beq.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a22      	ldr	r2, [pc, #136]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d06a      	beq.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a20      	ldr	r2, [pc, #128]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d063      	beq.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d05b      	beq.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d053      	beq.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d04b      	beq.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d043      	beq.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d03b      	beq.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d012      	beq.n	800350c <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00a      	beq.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d102      	bne.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80034fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034fe:	e03f      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003504:	e03c      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003506:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800350a:	e039      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800350c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003510:	e036      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003512:	bf00      	nop
 8003514:	40026400 	.word	0x40026400
 8003518:	400260b8 	.word	0x400260b8
 800351c:	40026010 	.word	0x40026010
 8003520:	40026410 	.word	0x40026410
 8003524:	40026070 	.word	0x40026070
 8003528:	40026470 	.word	0x40026470
 800352c:	40026028 	.word	0x40026028
 8003530:	40026428 	.word	0x40026428
 8003534:	40026088 	.word	0x40026088
 8003538:	40026488 	.word	0x40026488
 800353c:	40026040 	.word	0x40026040
 8003540:	40026440 	.word	0x40026440
 8003544:	400260a0 	.word	0x400260a0
 8003548:	400264a0 	.word	0x400264a0
 800354c:	40026058 	.word	0x40026058
 8003550:	40026000 	.word	0x40026000
 8003554:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003558:	e012      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800355a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800355e:	e00f      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003564:	e00c      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356a:	e009      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800356c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003570:	e006      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003572:	2308      	movs	r3, #8
 8003574:	e004      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003576:	2308      	movs	r3, #8
 8003578:	e002      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800357a:	2308      	movs	r3, #8
 800357c:	e000      	b.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800357e:	2308      	movs	r3, #8
 8003580:	4a8a      	ldr	r2, [pc, #552]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003582:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	4b89      	ldr	r3, [pc, #548]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d960      	bls.n	8003652 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a87      	ldr	r2, [pc, #540]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d057      	beq.n	800364a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a86      	ldr	r2, [pc, #536]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d050      	beq.n	8003646 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a84      	ldr	r2, [pc, #528]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d049      	beq.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a83      	ldr	r2, [pc, #524]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d042      	beq.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a81      	ldr	r2, [pc, #516]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d03a      	beq.n	8003638 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a80      	ldr	r2, [pc, #512]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d032      	beq.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a7e      	ldr	r2, [pc, #504]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02a      	beq.n	800362c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7d      	ldr	r2, [pc, #500]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7b      	ldr	r2, [pc, #492]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01a      	beq.n	8003620 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7a      	ldr	r2, [pc, #488]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d012      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a78      	ldr	r2, [pc, #480]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00a      	beq.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d102      	bne.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003608:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800360c:	e01e      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800360e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003612:	e01b      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003614:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003618:	e018      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800361a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800361e:	e015      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003620:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003624:	e012      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800362a:	e00f      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800362c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003630:	e00c      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003636:	e009      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800363c:	e006      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800363e:	2304      	movs	r3, #4
 8003640:	e004      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003642:	2304      	movs	r3, #4
 8003644:	e002      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003646:	2304      	movs	r3, #4
 8003648:	e000      	b.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800364a:	2304      	movs	r3, #4
 800364c:	4a65      	ldr	r2, [pc, #404]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800364e:	60d3      	str	r3, [r2, #12]
 8003650:	e150      	b.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800365a:	429a      	cmp	r2, r3
 800365c:	d960      	bls.n	8003720 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d057      	beq.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d050      	beq.n	8003714 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a51      	ldr	r2, [pc, #324]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d049      	beq.n	8003710 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a4f      	ldr	r2, [pc, #316]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d042      	beq.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a4e      	ldr	r2, [pc, #312]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03a      	beq.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a4c      	ldr	r2, [pc, #304]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d032      	beq.n	8003700 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a4b      	ldr	r2, [pc, #300]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02a      	beq.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a49      	ldr	r2, [pc, #292]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a48      	ldr	r2, [pc, #288]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01a      	beq.n	80036ee <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a46      	ldr	r2, [pc, #280]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d012      	beq.n	80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a45      	ldr	r2, [pc, #276]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00a      	beq.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d102      	bne.n	80036dc <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80036d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036da:	e01e      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80036dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e0:	e01b      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80036e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036e6:	e018      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80036e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036ec:	e015      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80036ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036f2:	e012      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80036f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f8:	e00f      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80036fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fe:	e00c      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003704:	e009      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800370a:	e006      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800370c:	2304      	movs	r3, #4
 800370e:	e004      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003710:	2304      	movs	r3, #4
 8003712:	e002      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003714:	2304      	movs	r3, #4
 8003716:	e000      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003718:	2304      	movs	r3, #4
 800371a:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	e0e9      	b.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b31      	ldr	r3, [pc, #196]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003728:	429a      	cmp	r2, r3
 800372a:	f240 8083 	bls.w	8003834 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d079      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d072      	beq.n	8003828 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d06b      	beq.n	8003824 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d064      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d05c      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d054      	beq.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d04c      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d044      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d03c      	beq.n	8003802 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d034      	beq.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a11      	ldr	r2, [pc, #68]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d02c      	beq.n	80037f6 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d124      	bne.n	80037f0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80037a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037aa:	e040      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80037ac:	40026000 	.word	0x40026000
 80037b0:	40026458 	.word	0x40026458
 80037b4:	40026010 	.word	0x40026010
 80037b8:	40026410 	.word	0x40026410
 80037bc:	40026070 	.word	0x40026070
 80037c0:	40026470 	.word	0x40026470
 80037c4:	40026028 	.word	0x40026028
 80037c8:	40026428 	.word	0x40026428
 80037cc:	40026088 	.word	0x40026088
 80037d0:	40026488 	.word	0x40026488
 80037d4:	40026040 	.word	0x40026040
 80037d8:	40026440 	.word	0x40026440
 80037dc:	400260a0 	.word	0x400260a0
 80037e0:	400264a0 	.word	0x400264a0
 80037e4:	40026400 	.word	0x40026400
 80037e8:	400260b8 	.word	0x400260b8
 80037ec:	40026058 	.word	0x40026058
 80037f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f4:	e01b      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80037f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037fa:	e018      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80037fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003800:	e015      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003802:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003806:	e012      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800380c:	e00f      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800380e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003812:	e00c      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003818:	e009      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800381a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800381e:	e006      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003820:	2304      	movs	r3, #4
 8003822:	e004      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003824:	2304      	movs	r3, #4
 8003826:	e002      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003828:	2304      	movs	r3, #4
 800382a:	e000      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800382c:	2304      	movs	r3, #4
 800382e:	4a8b      	ldr	r2, [pc, #556]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003830:	60d3      	str	r3, [r2, #12]
 8003832:	e05f      	b.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a89      	ldr	r2, [pc, #548]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d057      	beq.n	80038ee <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a88      	ldr	r2, [pc, #544]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d050      	beq.n	80038ea <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a86      	ldr	r2, [pc, #536]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d049      	beq.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a85      	ldr	r2, [pc, #532]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d042      	beq.n	80038e2 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a83      	ldr	r2, [pc, #524]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d03a      	beq.n	80038dc <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a82      	ldr	r2, [pc, #520]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d032      	beq.n	80038d6 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a80      	ldr	r2, [pc, #512]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02a      	beq.n	80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7f      	ldr	r2, [pc, #508]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d022      	beq.n	80038ca <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7d      	ldr	r2, [pc, #500]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01a      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7c      	ldr	r2, [pc, #496]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d012      	beq.n	80038be <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7a      	ldr	r2, [pc, #488]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00a      	beq.n	80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a79      	ldr	r2, [pc, #484]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d102      	bne.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80038ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038b0:	e01e      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b6:	e01b      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038bc:	e018      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038c2:	e015      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038c8:	e012      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ce:	e00f      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d4:	e00c      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038da:	e009      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038e0:	e006      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e004      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e002      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038ea:	2304      	movs	r3, #4
 80038ec:	e000      	b.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80038ee:	2304      	movs	r3, #4
 80038f0:	4a5a      	ldr	r2, [pc, #360]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80038f2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d95c      	bls.n	80039ba <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a56      	ldr	r2, [pc, #344]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d053      	beq.n	80039b2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a55      	ldr	r2, [pc, #340]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d04c      	beq.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a53      	ldr	r2, [pc, #332]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d045      	beq.n	80039aa <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a52      	ldr	r2, [pc, #328]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d03e      	beq.n	80039a6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a50      	ldr	r2, [pc, #320]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d037      	beq.n	80039a2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a4f      	ldr	r2, [pc, #316]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d030      	beq.n	800399e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a4d      	ldr	r2, [pc, #308]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d029      	beq.n	800399a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a4c      	ldr	r2, [pc, #304]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4a      	ldr	r2, [pc, #296]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01a      	beq.n	8003990 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a49      	ldr	r2, [pc, #292]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d012      	beq.n	800398a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a47      	ldr	r2, [pc, #284]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00a      	beq.n	8003984 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a46      	ldr	r2, [pc, #280]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397c:	e01a      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800397e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003982:	e017      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003988:	e014      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800398a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800398e:	e011      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003994:	e00e      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	e00c      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800399a:	2340      	movs	r3, #64	; 0x40
 800399c:	e00a      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800399e:	2340      	movs	r3, #64	; 0x40
 80039a0:	e008      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80039a2:	2340      	movs	r3, #64	; 0x40
 80039a4:	e006      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e004      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e002      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80039b2:	2301      	movs	r3, #1
 80039b4:	4a37      	ldr	r2, [pc, #220]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80039b6:	60d3      	str	r3, [r2, #12]
 80039b8:	e141      	b.n	8003c3e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d97c      	bls.n	8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d073      	beq.n	8003ab8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d06c      	beq.n	8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d065      	beq.n	8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a20      	ldr	r2, [pc, #128]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d05e      	beq.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d057      	beq.n	8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d050      	beq.n	8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d049      	beq.n	8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1a      	ldr	r2, [pc, #104]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d042      	beq.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d01a      	beq.n	8003a56 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d012      	beq.n	8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00a      	beq.n	8003a4a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d102      	bne.n	8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a42:	e03a      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003a44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a48:	e037      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a4e:	e034      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a54:	e031      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a5a:	e02e      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003a5c:	40026000 	.word	0x40026000
 8003a60:	40026010 	.word	0x40026010
 8003a64:	40026410 	.word	0x40026410
 8003a68:	40026070 	.word	0x40026070
 8003a6c:	40026470 	.word	0x40026470
 8003a70:	40026028 	.word	0x40026028
 8003a74:	40026428 	.word	0x40026428
 8003a78:	40026088 	.word	0x40026088
 8003a7c:	40026488 	.word	0x40026488
 8003a80:	40026040 	.word	0x40026040
 8003a84:	40026440 	.word	0x40026440
 8003a88:	400260a0 	.word	0x400260a0
 8003a8c:	400264a0 	.word	0x400264a0
 8003a90:	40026458 	.word	0x40026458
 8003a94:	40026400 	.word	0x40026400
 8003a98:	400260b8 	.word	0x400260b8
 8003a9c:	2340      	movs	r3, #64	; 0x40
 8003a9e:	e00c      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003aa0:	2340      	movs	r3, #64	; 0x40
 8003aa2:	e00a      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003aa4:	2340      	movs	r3, #64	; 0x40
 8003aa6:	e008      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003aa8:	2340      	movs	r3, #64	; 0x40
 8003aaa:	e006      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e004      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e002      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4a7b      	ldr	r2, [pc, #492]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003abc:	6093      	str	r3, [r2, #8]
 8003abe:	e0be      	b.n	8003c3e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b79      	ldr	r3, [pc, #484]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d95c      	bls.n	8003b86 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a77      	ldr	r2, [pc, #476]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d053      	beq.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a76      	ldr	r2, [pc, #472]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04c      	beq.n	8003b7a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a74      	ldr	r2, [pc, #464]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d045      	beq.n	8003b76 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a73      	ldr	r2, [pc, #460]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d03e      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a71      	ldr	r2, [pc, #452]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d037      	beq.n	8003b6e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a70      	ldr	r2, [pc, #448]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d030      	beq.n	8003b6a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6e      	ldr	r2, [pc, #440]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d029      	beq.n	8003b66 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6d      	ldr	r2, [pc, #436]	; (8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6b      	ldr	r2, [pc, #428]	; (8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01a      	beq.n	8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d012      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a68      	ldr	r2, [pc, #416]	; (8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00a      	beq.n	8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a67      	ldr	r2, [pc, #412]	; (8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d102      	bne.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b48:	e01a      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b4e:	e017      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b54:	e014      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b5a:	e011      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b60:	e00e      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	e00c      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	e00a      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	e008      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b6e:	2340      	movs	r3, #64	; 0x40
 8003b70:	e006      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e004      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e002      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e05b      	b.n	8003c3e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a49      	ldr	r2, [pc, #292]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d053      	beq.n	8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d04c      	beq.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d045      	beq.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a44      	ldr	r2, [pc, #272]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03e      	beq.n	8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a43      	ldr	r2, [pc, #268]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d037      	beq.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d030      	beq.n	8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a40      	ldr	r2, [pc, #256]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d029      	beq.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3e      	ldr	r2, [pc, #248]	; (8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01a      	beq.n	8003c16 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d012      	beq.n	8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3a      	ldr	r2, [pc, #232]	; (8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00a      	beq.n	8003c0a <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d102      	bne.n	8003c04 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c02:	e01a      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c08:	e017      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c0e:	e014      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c14:	e011      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c1a:	e00e      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	e00c      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c20:	2340      	movs	r3, #64	; 0x40
 8003c22:	e00a      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c24:	2340      	movs	r3, #64	; 0x40
 8003c26:	e008      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c28:	2340      	movs	r3, #64	; 0x40
 8003c2a:	e006      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e004      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e002      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003c3c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0216 	orr.w	r2, r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0208 	orr.w	r2, r2, #8
 8003c7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e005      	b.n	8003c9c <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40026400 	.word	0x40026400
 8003cac:	40026058 	.word	0x40026058
 8003cb0:	40026010 	.word	0x40026010
 8003cb4:	40026410 	.word	0x40026410
 8003cb8:	40026070 	.word	0x40026070
 8003cbc:	40026470 	.word	0x40026470
 8003cc0:	40026028 	.word	0x40026028
 8003cc4:	40026428 	.word	0x40026428
 8003cc8:	40026088 	.word	0x40026088
 8003ccc:	40026488 	.word	0x40026488
 8003cd0:	40026040 	.word	0x40026040
 8003cd4:	40026440 	.word	0x40026440
 8003cd8:	400260a0 	.word	0x400260a0
 8003cdc:	400264a0 	.word	0x400264a0
 8003ce0:	40026000 	.word	0x40026000

08003ce4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	e003      	b.n	8003d0a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d108      	bne.n	8003d48 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d46:	e007      	b.n	8003d58 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e165      	b.n	800404c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	f040 8154 	bne.w	8004046 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d005      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d130      	bne.n	8003e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dec:	2201      	movs	r2, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 0201 	and.w	r2, r3, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d017      	beq.n	8003e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d123      	bne.n	8003ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	08da      	lsrs	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3208      	adds	r2, #8
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	220f      	movs	r2, #15
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	08da      	lsrs	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3208      	adds	r2, #8
 8003ea2:	69b9      	ldr	r1, [r7, #24]
 8003ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0203 	and.w	r2, r3, #3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80ae 	beq.w	8004046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <HAL_GPIO_Init+0x300>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	4a5c      	ldr	r2, [pc, #368]	; (8004064 <HAL_GPIO_Init+0x300>)
 8003ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8003efa:	4b5a      	ldr	r3, [pc, #360]	; (8004064 <HAL_GPIO_Init+0x300>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f06:	4a58      	ldr	r2, [pc, #352]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a4f      	ldr	r2, [pc, #316]	; (800406c <HAL_GPIO_Init+0x308>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d025      	beq.n	8003f7e <HAL_GPIO_Init+0x21a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a4e      	ldr	r2, [pc, #312]	; (8004070 <HAL_GPIO_Init+0x30c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <HAL_GPIO_Init+0x216>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a4d      	ldr	r2, [pc, #308]	; (8004074 <HAL_GPIO_Init+0x310>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d019      	beq.n	8003f76 <HAL_GPIO_Init+0x212>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4c      	ldr	r2, [pc, #304]	; (8004078 <HAL_GPIO_Init+0x314>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_GPIO_Init+0x20e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	; (800407c <HAL_GPIO_Init+0x318>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00d      	beq.n	8003f6e <HAL_GPIO_Init+0x20a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a4a      	ldr	r2, [pc, #296]	; (8004080 <HAL_GPIO_Init+0x31c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a49      	ldr	r2, [pc, #292]	; (8004084 <HAL_GPIO_Init+0x320>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_GPIO_Init+0x202>
 8003f62:	2306      	movs	r3, #6
 8003f64:	e00c      	b.n	8003f80 <HAL_GPIO_Init+0x21c>
 8003f66:	2307      	movs	r3, #7
 8003f68:	e00a      	b.n	8003f80 <HAL_GPIO_Init+0x21c>
 8003f6a:	2305      	movs	r3, #5
 8003f6c:	e008      	b.n	8003f80 <HAL_GPIO_Init+0x21c>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	e006      	b.n	8003f80 <HAL_GPIO_Init+0x21c>
 8003f72:	2303      	movs	r3, #3
 8003f74:	e004      	b.n	8003f80 <HAL_GPIO_Init+0x21c>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e002      	b.n	8003f80 <HAL_GPIO_Init+0x21c>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_GPIO_Init+0x21c>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	f002 0203 	and.w	r2, r2, #3
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	4093      	lsls	r3, r2
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f90:	4935      	ldr	r1, [pc, #212]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <HAL_GPIO_Init+0x324>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc2:	4a31      	ldr	r2, [pc, #196]	; (8004088 <HAL_GPIO_Init+0x324>)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_GPIO_Init+0x324>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fec:	4a26      	ldr	r2, [pc, #152]	; (8004088 <HAL_GPIO_Init+0x324>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ff2:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_GPIO_Init+0x324>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <HAL_GPIO_Init+0x324>)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_GPIO_Init+0x324>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004040:	4a11      	ldr	r2, [pc, #68]	; (8004088 <HAL_GPIO_Init+0x324>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3301      	adds	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	f67f ae96 	bls.w	8003d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	40013800 	.word	0x40013800
 800406c:	40020000 	.word	0x40020000
 8004070:	40020400 	.word	0x40020400
 8004074:	40020800 	.word	0x40020800
 8004078:	40020c00 	.word	0x40020c00
 800407c:	40021000 	.word	0x40021000
 8004080:	40021400 	.word	0x40021400
 8004084:	40021800 	.word	0x40021800
 8004088:	40013c00 	.word	0x40013c00

0800408c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
 8004098:	4613      	mov	r3, r2
 800409a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040a8:	e003      	b.n	80040b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	041a      	lsls	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040d0:	887a      	ldrh	r2, [r7, #2]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4013      	ands	r3, r2
 80040d6:	041a      	lsls	r2, r3, #16
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	43d9      	mvns	r1, r3
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	400b      	ands	r3, r1
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	619a      	str	r2, [r3, #24]
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800410a:	4a05      	ldr	r2, [pc, #20]	; (8004120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f806 	bl	8004124 <HAL_GPIO_EXTI_Callback>
  }
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40013c00 	.word	0x40013c00

08004124 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e12b      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd f936 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800419e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041a0:	f001 fb2c 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 80041a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a81      	ldr	r2, [pc, #516]	; (80043b0 <HAL_I2C_Init+0x274>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d807      	bhi.n	80041c0 <HAL_I2C_Init+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a80      	ldr	r2, [pc, #512]	; (80043b4 <HAL_I2C_Init+0x278>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bf94      	ite	ls
 80041b8:	2301      	movls	r3, #1
 80041ba:	2300      	movhi	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e006      	b.n	80041ce <HAL_I2C_Init+0x92>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a7d      	ldr	r2, [pc, #500]	; (80043b8 <HAL_I2C_Init+0x27c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bf94      	ite	ls
 80041c8:	2301      	movls	r3, #1
 80041ca:	2300      	movhi	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0e7      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a78      	ldr	r2, [pc, #480]	; (80043bc <HAL_I2C_Init+0x280>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a6a      	ldr	r2, [pc, #424]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d802      	bhi.n	8004210 <HAL_I2C_Init+0xd4>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	e009      	b.n	8004224 <HAL_I2C_Init+0xe8>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	4a69      	ldr	r2, [pc, #420]	; (80043c0 <HAL_I2C_Init+0x284>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	3301      	adds	r3, #1
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	495c      	ldr	r1, [pc, #368]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d819      	bhi.n	8004278 <HAL_I2C_Init+0x13c>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e59      	subs	r1, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004258:	400b      	ands	r3, r1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_I2C_Init+0x138>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1e59      	subs	r1, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fbb1 f3f3 	udiv	r3, r1, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004272:	e051      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004274:	2304      	movs	r3, #4
 8004276:	e04f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d111      	bne.n	80042a4 <HAL_I2C_Init+0x168>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	440b      	add	r3, r1
 800428e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e012      	b.n	80042ca <HAL_I2C_Init+0x18e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Init+0x196>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e022      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_I2C_Init+0x1bc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e58      	subs	r0, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	440b      	add	r3, r1
 80042e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	0099      	lsls	r1, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	6809      	ldr	r1, [r1, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6911      	ldr	r1, [r2, #16]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	4311      	orrs	r1, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	000186a0 	.word	0x000186a0
 80043b4:	001e847f 	.word	0x001e847f
 80043b8:	003d08ff 	.word	0x003d08ff
 80043bc:	431bde83 	.word	0x431bde83
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	461a      	mov	r2, r3
 80043d0:	460b      	mov	r3, r1
 80043d2:	817b      	strh	r3, [r7, #10]
 80043d4:	4613      	mov	r3, r2
 80043d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043d8:	f7fd fb30 	bl	8001a3c <HAL_GetTick>
 80043dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	f040 80e0 	bne.w	80045ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2319      	movs	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	4970      	ldr	r1, [pc, #448]	; (80045b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fde8 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
 8004404:	e0d3      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_I2C_Master_Transmit+0x50>
 8004410:	2302      	movs	r3, #2
 8004412:	e0cc      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d007      	beq.n	800443a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004448:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2221      	movs	r2, #33	; 0x21
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2210      	movs	r2, #16
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	893a      	ldrh	r2, [r7, #8]
 800446a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a50      	ldr	r2, [pc, #320]	; (80045bc <HAL_I2C_Master_Transmit+0x1f8>)
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800447c:	8979      	ldrh	r1, [r7, #10]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6a3a      	ldr	r2, [r7, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fbbc 	bl	8004c00 <I2C_MasterRequestWrite>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e08d      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044a8:	e066      	b.n	8004578 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	6a39      	ldr	r1, [r7, #32]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fe62 	bl	8005178 <I2C_WaitOnTXEFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00d      	beq.n	80044d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d107      	bne.n	80044d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e06b      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	781a      	ldrb	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d11b      	bne.n	800454c <HAL_I2C_Master_Transmit+0x188>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6a39      	ldr	r1, [r7, #32]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fe52 	bl	80051fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b04      	cmp	r3, #4
 8004562:	d107      	bne.n	8004574 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01a      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457c:	2b00      	cmp	r3, #0
 800457e:	d194      	bne.n	80044aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	00100002 	.word	0x00100002
 80045bc:	ffff0000 	.word	0xffff0000

080045c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	461a      	mov	r2, r3
 80045cc:	460b      	mov	r3, r1
 80045ce:	817b      	strh	r3, [r7, #10]
 80045d0:	4613      	mov	r3, r2
 80045d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045d4:	f7fd fa32 	bl	8001a3c <HAL_GetTick>
 80045d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	f040 820b 	bne.w	80049fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2319      	movs	r3, #25
 80045ee:	2201      	movs	r2, #1
 80045f0:	497c      	ldr	r1, [pc, #496]	; (80047e4 <HAL_I2C_Master_Receive+0x224>)
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fcea 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
 8004600:	e1fe      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_I2C_Master_Receive+0x50>
 800460c:	2302      	movs	r3, #2
 800460e:	e1f7      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d007      	beq.n	8004636 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004644:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2222      	movs	r2, #34	; 0x22
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2210      	movs	r2, #16
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	893a      	ldrh	r2, [r7, #8]
 8004666:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a5c      	ldr	r2, [pc, #368]	; (80047e8 <HAL_I2C_Master_Receive+0x228>)
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004678:	8979      	ldrh	r1, [r7, #10]
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fb40 	bl	8004d04 <I2C_MasterRequestRead>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e1b8      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	2b00      	cmp	r3, #0
 8004694:	d113      	bne.n	80046be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e18c      	b.n	80049d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d11b      	bne.n	80046fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e16c      	b.n	80049d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b02      	cmp	r3, #2
 8004704:	d11b      	bne.n	800473e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	e14c      	b.n	80049d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800474c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004764:	e138      	b.n	80049d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476a:	2b03      	cmp	r3, #3
 800476c:	f200 80f1 	bhi.w	8004952 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	2b01      	cmp	r3, #1
 8004776:	d123      	bne.n	80047c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fd7d 	bl	800527c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e139      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047be:	e10b      	b.n	80049d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d14e      	bne.n	8004866 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	2200      	movs	r2, #0
 80047d0:	4906      	ldr	r1, [pc, #24]	; (80047ec <HAL_I2C_Master_Receive+0x22c>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fbfa 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e10e      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
 80047e2:	bf00      	nop
 80047e4:	00100002 	.word	0x00100002
 80047e8:	ffff0000 	.word	0xffff0000
 80047ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004864:	e0b8      	b.n	80049d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	2200      	movs	r2, #0
 800486e:	4966      	ldr	r1, [pc, #408]	; (8004a08 <HAL_I2C_Master_Receive+0x448>)
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fbab 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0bf      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	2200      	movs	r2, #0
 80048ca:	494f      	ldr	r1, [pc, #316]	; (8004a08 <HAL_I2C_Master_Receive+0x448>)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fb7d 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e091      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004950:	e042      	b.n	80049d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fc90 	bl	800527c <I2C_WaitOnRXNEFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e04c      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d118      	bne.n	80049d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f aec2 	bne.w	8004766 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3728      	adds	r7, #40	; 0x28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	00010004 	.word	0x00010004

08004a0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	817b      	strh	r3, [r7, #10]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	813b      	strh	r3, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a26:	f7fd f809 	bl	8001a3c <HAL_GetTick>
 8004a2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	f040 80d9 	bne.w	8004bec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	2319      	movs	r3, #25
 8004a40:	2201      	movs	r2, #1
 8004a42:	496d      	ldr	r1, [pc, #436]	; (8004bf8 <HAL_I2C_Mem_Write+0x1ec>)
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fac1 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0cc      	b.n	8004bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_I2C_Mem_Write+0x56>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e0c5      	b.n	8004bee <HAL_I2C_Mem_Write+0x1e2>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d007      	beq.n	8004a88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2221      	movs	r2, #33	; 0x21
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2240      	movs	r2, #64	; 0x40
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a3a      	ldr	r2, [r7, #32]
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a4d      	ldr	r2, [pc, #308]	; (8004bfc <HAL_I2C_Mem_Write+0x1f0>)
 8004ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aca:	88f8      	ldrh	r0, [r7, #6]
 8004acc:	893a      	ldrh	r2, [r7, #8]
 8004ace:	8979      	ldrh	r1, [r7, #10]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4603      	mov	r3, r0
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f9e0 	bl	8004ea0 <I2C_RequestMemoryWrite>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d052      	beq.n	8004b8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e081      	b.n	8004bee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fb42 	bl	8005178 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d107      	bne.n	8004b12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e06b      	b.n	8004bee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d11b      	bne.n	8004b8c <HAL_I2C_Mem_Write+0x180>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d017      	beq.n	8004b8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1aa      	bne.n	8004aea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fb2e 	bl	80051fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00d      	beq.n	8004bc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d107      	bne.n	8004bbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e016      	b.n	8004bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	00100002 	.word	0x00100002
 8004bfc:	ffff0000 	.word	0xffff0000

08004c00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d006      	beq.n	8004c2a <I2C_MasterRequestWrite+0x2a>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d003      	beq.n	8004c2a <I2C_MasterRequestWrite+0x2a>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c28:	d108      	bne.n	8004c3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e00b      	b.n	8004c54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	2b12      	cmp	r3, #18
 8004c42:	d107      	bne.n	8004c54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f9b3 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d103      	bne.n	8004c84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e035      	b.n	8004cf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c90:	d108      	bne.n	8004ca4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca0:	611a      	str	r2, [r3, #16]
 8004ca2:	e01b      	b.n	8004cdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ca4:	897b      	ldrh	r3, [r7, #10]
 8004ca6:	11db      	asrs	r3, r3, #7
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 0306 	and.w	r3, r3, #6
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f063 030f 	orn	r3, r3, #15
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	490e      	ldr	r1, [pc, #56]	; (8004cfc <I2C_MasterRequestWrite+0xfc>)
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f9d9 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e010      	b.n	8004cf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cd2:	897b      	ldrh	r3, [r7, #10]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4907      	ldr	r1, [pc, #28]	; (8004d00 <I2C_MasterRequestWrite+0x100>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f9c9 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	00010008 	.word	0x00010008
 8004d00:	00010002 	.word	0x00010002

08004d04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	460b      	mov	r3, r1
 8004d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d006      	beq.n	8004d3e <I2C_MasterRequestRead+0x3a>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d003      	beq.n	8004d3e <I2C_MasterRequestRead+0x3a>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3c:	d108      	bne.n	8004d50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e00b      	b.n	8004d68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	2b11      	cmp	r3, #17
 8004d56:	d107      	bne.n	8004d68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f929 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00d      	beq.n	8004d9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8e:	d103      	bne.n	8004d98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e079      	b.n	8004e90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da4:	d108      	bne.n	8004db8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	611a      	str	r2, [r3, #16]
 8004db6:	e05f      	b.n	8004e78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	11db      	asrs	r3, r3, #7
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 0306 	and.w	r3, r3, #6
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f063 030f 	orn	r3, r3, #15
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4930      	ldr	r1, [pc, #192]	; (8004e98 <I2C_MasterRequestRead+0x194>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f94f 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e054      	b.n	8004e90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004de6:	897b      	ldrh	r3, [r7, #10]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4929      	ldr	r1, [pc, #164]	; (8004e9c <I2C_MasterRequestRead+0x198>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f93f 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e044      	b.n	8004e90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f8c7 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e52:	d103      	bne.n	8004e5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e017      	b.n	8004e90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e60:	897b      	ldrh	r3, [r7, #10]
 8004e62:	11db      	asrs	r3, r3, #7
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f063 030e 	orn	r3, r3, #14
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4907      	ldr	r1, [pc, #28]	; (8004e9c <I2C_MasterRequestRead+0x198>)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f8fb 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	00010008 	.word	0x00010008
 8004e9c:	00010002 	.word	0x00010002

08004ea0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	4611      	mov	r1, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	817b      	strh	r3, [r7, #10]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	813b      	strh	r3, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f878 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef0:	d103      	bne.n	8004efa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e05f      	b.n	8004fbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	492d      	ldr	r1, [pc, #180]	; (8004fc8 <I2C_RequestMemoryWrite+0x128>)
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f8b0 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e04c      	b.n	8004fbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3c:	6a39      	ldr	r1, [r7, #32]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f91a 	bl	8005178 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00d      	beq.n	8004f66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d107      	bne.n	8004f62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e02b      	b.n	8004fbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d105      	bne.n	8004f78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f6c:	893b      	ldrh	r3, [r7, #8]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	611a      	str	r2, [r3, #16]
 8004f76:	e021      	b.n	8004fbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f78:	893b      	ldrh	r3, [r7, #8]
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	6a39      	ldr	r1, [r7, #32]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f8f4 	bl	8005178 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00d      	beq.n	8004fb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d107      	bne.n	8004fae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e005      	b.n	8004fbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	00010002 	.word	0x00010002

08004fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fdc:	e025      	b.n	800502a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe4:	d021      	beq.n	800502a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe6:	f7fc fd29 	bl	8001a3c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d116      	bne.n	800502a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e023      	b.n	8005072 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10d      	bne.n	8005050 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	43da      	mvns	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf0c      	ite	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	2300      	movne	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	e00c      	b.n	800506a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d0b6      	beq.n	8004fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005088:	e051      	b.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d123      	bne.n	80050e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0204 	orr.w	r2, r3, #4
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e046      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e8:	d021      	beq.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ea:	f7fc fca7 	bl	8001a3c <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d116      	bne.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e020      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10c      	bne.n	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4013      	ands	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e00b      	b.n	800516a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	43da      	mvns	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d18d      	bne.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005184:	e02d      	b.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f8ce 	bl	8005328 <I2C_IsAcknowledgeFailed>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e02d      	b.n	80051f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519c:	d021      	beq.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fc fc4d 	bl	8001a3c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e007      	b.n	80051f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b80      	cmp	r3, #128	; 0x80
 80051ee:	d1ca      	bne.n	8005186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005206:	e02d      	b.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f88d 	bl	8005328 <I2C_IsAcknowledgeFailed>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e02d      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800521e:	d021      	beq.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005220:	f7fc fc0c 	bl	8001a3c <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d116      	bne.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e007      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d1ca      	bne.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005288:	e042      	b.n	8005310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b10      	cmp	r3, #16
 8005296:	d119      	bne.n	80052cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0210 	mvn.w	r2, #16
 80052a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e029      	b.n	8005320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052cc:	f7fc fbb6 	bl	8001a3c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d302      	bcc.n	80052e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e007      	b.n	8005320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d1b5      	bne.n	800528a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d11b      	bne.n	8005378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f043 0204 	orr.w	r2, r3, #4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005388:	b08f      	sub	sp, #60	; 0x3c
 800538a:	af0a      	add	r7, sp, #40	; 0x28
 800538c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e116      	b.n	80055c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc f966 	bl	8001684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2203      	movs	r2, #3
 80053bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f003 f9d3 	bl	8008782 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	687e      	ldr	r6, [r7, #4]
 80053e4:	466d      	mov	r5, sp
 80053e6:	f106 0410 	add.w	r4, r6, #16
 80053ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80053fa:	1d33      	adds	r3, r6, #4
 80053fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053fe:	6838      	ldr	r0, [r7, #0]
 8005400:	f003 f95e 	bl	80086c0 <USB_CoreInit>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e0d7      	b.n	80055c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f003 f9c1 	bl	80087a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	e04a      	b.n	80054be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005428:	7bfa      	ldrb	r2, [r7, #15]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	333d      	adds	r3, #61	; 0x3d
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	333c      	adds	r3, #60	; 0x3c
 800544c:	7bfa      	ldrb	r2, [r7, #15]
 800544e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005450:	7bfa      	ldrb	r2, [r7, #15]
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	b298      	uxth	r0, r3
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	3344      	adds	r3, #68	; 0x44
 8005464:	4602      	mov	r2, r0
 8005466:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	3340      	adds	r3, #64	; 0x40
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800547c:	7bfa      	ldrb	r2, [r7, #15]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3348      	adds	r3, #72	; 0x48
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005490:	7bfa      	ldrb	r2, [r7, #15]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	334c      	adds	r3, #76	; 0x4c
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	3354      	adds	r3, #84	; 0x54
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	3301      	adds	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	7bfa      	ldrb	r2, [r7, #15]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3af      	bcc.n	8005428 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
 80054cc:	e044      	b.n	8005558 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054e4:	7bfa      	ldrb	r2, [r7, #15]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054fa:	7bfa      	ldrb	r2, [r7, #15]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005510:	7bfa      	ldrb	r2, [r7, #15]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800553c:	7bfa      	ldrb	r2, [r7, #15]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	3301      	adds	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d3b5      	bcc.n	80054ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	687e      	ldr	r6, [r7, #4]
 800556a:	466d      	mov	r5, sp
 800556c:	f106 0410 	add.w	r4, r6, #16
 8005570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005578:	e894 0003 	ldmia.w	r4, {r0, r1}
 800557c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005580:	1d33      	adds	r3, r6, #4
 8005582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005584:	6838      	ldr	r0, [r7, #0]
 8005586:	f003 f959 	bl	800883c <USB_DevInit>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e014      	b.n	80055c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f80a 	bl	80055ce <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f003 fb17 	bl	8008bf2 <USB_DevDisconnect>

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005600:	f043 0303 	orr.w	r3, r3, #3
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0cc      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800562c:	4b68      	ldr	r3, [pc, #416]	; (80057d0 <HAL_RCC_ClockConfig+0x1b8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d90c      	bls.n	8005654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b65      	ldr	r3, [pc, #404]	; (80057d0 <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b63      	ldr	r3, [pc, #396]	; (80057d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0b8      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d020      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800566c:	4b59      	ldr	r3, [pc, #356]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a58      	ldr	r2, [pc, #352]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005684:	4b53      	ldr	r3, [pc, #332]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a52      	ldr	r2, [pc, #328]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800568e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005690:	4b50      	ldr	r3, [pc, #320]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	494d      	ldr	r1, [pc, #308]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d044      	beq.n	8005738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d107      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b6:	4b47      	ldr	r3, [pc, #284]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d119      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e07f      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d003      	beq.n	80056d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d107      	bne.n	80056e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d6:	4b3f      	ldr	r3, [pc, #252]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e06f      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e6:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e067      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056f6:	4b37      	ldr	r3, [pc, #220]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f023 0203 	bic.w	r2, r3, #3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4934      	ldr	r1, [pc, #208]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005704:	4313      	orrs	r3, r2
 8005706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005708:	f7fc f998 	bl	8001a3c <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	e00a      	b.n	8005726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005710:	f7fc f994 	bl	8001a3c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f241 3288 	movw	r2, #5000	; 0x1388
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e04f      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005726:	4b2b      	ldr	r3, [pc, #172]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 020c 	and.w	r2, r3, #12
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	429a      	cmp	r2, r3
 8005736:	d1eb      	bne.n	8005710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005738:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <HAL_RCC_ClockConfig+0x1b8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d20c      	bcs.n	8005760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005746:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e032      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800576c:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4916      	ldr	r1, [pc, #88]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	490e      	ldr	r1, [pc, #56]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800579e:	f000 fb7f 	bl	8005ea0 <HAL_RCC_GetSysClockFreq>
 80057a2:	4602      	mov	r2, r0
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	490a      	ldr	r1, [pc, #40]	; (80057d8 <HAL_RCC_ClockConfig+0x1c0>)
 80057b0:	5ccb      	ldrb	r3, [r1, r3]
 80057b2:	fa22 f303 	lsr.w	r3, r2, r3
 80057b6:	4a09      	ldr	r2, [pc, #36]	; (80057dc <HAL_RCC_ClockConfig+0x1c4>)
 80057b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057ba:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <HAL_RCC_ClockConfig+0x1c8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fc f8f8 	bl	80019b4 <HAL_InitTick>

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40023c00 	.word	0x40023c00
 80057d4:	40023800 	.word	0x40023800
 80057d8:	080098b8 	.word	0x080098b8
 80057dc:	20000004 	.word	0x20000004
 80057e0:	20000008 	.word	0x20000008

080057e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ea:	681b      	ldr	r3, [r3, #0]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000004 	.word	0x20000004

080057fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005800:	f7ff fff0 	bl	80057e4 <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	0a9b      	lsrs	r3, r3, #10
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40023800 	.word	0x40023800
 8005820:	080098c8 	.word	0x080098c8

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005828:	f7ff ffdc 	bl	80057e4 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	0b5b      	lsrs	r3, r3, #13
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4903      	ldr	r1, [pc, #12]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40023800 	.word	0x40023800
 8005848:	080098c8 	.word	0x080098c8

0800584c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	; 0x30
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005884:	4b6f      	ldr	r3, [pc, #444]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	496c      	ldr	r1, [pc, #432]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80058a2:	2301      	movs	r3, #1
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80058b2:	4b64      	ldr	r3, [pc, #400]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	4960      	ldr	r1, [pc, #384]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80058d0:	2301      	movs	r3, #1
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058e0:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4955      	ldr	r1, [pc, #340]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fe:	d101      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005900:	2301      	movs	r3, #1
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800590c:	2301      	movs	r3, #1
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d017      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800591c:	4b49      	ldr	r3, [pc, #292]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005922:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	4946      	ldr	r1, [pc, #280]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593a:	d101      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800593c:	2301      	movs	r3, #1
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005948:	2301      	movs	r3, #1
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 808a 	beq.w	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	4b39      	ldr	r3, [pc, #228]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	4a38      	ldr	r2, [pc, #224]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005968:	6413      	str	r3, [r2, #64]	; 0x40
 800596a:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005976:	4b34      	ldr	r3, [pc, #208]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a33      	ldr	r2, [pc, #204]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800597c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005980:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005982:	f7fc f85b 	bl	8001a3c <HAL_GetTick>
 8005986:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005988:	e008      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800598a:	f7fc f857 	bl	8001a3c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e278      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800599c:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059a8:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d02f      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d028      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059d0:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059e2:	4b18      	ldr	r3, [pc, #96]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d114      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059ee:	f7fc f825 	bl	8001a3c <HAL_GetTick>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fc f821 	bl	8001a3c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e240      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ee      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a24:	d114      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3a:	4902      	ldr	r1, [pc, #8]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]
 8005a40:	e00c      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40007000 	.word	0x40007000
 8005a4c:	42470e40 	.word	0x42470e40
 8005a50:	4b4a      	ldr	r3, [pc, #296]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a49      	ldr	r2, [pc, #292]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a5a:	6093      	str	r3, [r2, #8]
 8005a5c:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a68:	4944      	ldr	r1, [pc, #272]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005a80:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005a82:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005a90:	4b3a      	ldr	r3, [pc, #232]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	4937      	ldr	r1, [pc, #220]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ab2:	4b32      	ldr	r3, [pc, #200]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac0:	492e      	ldr	r1, [pc, #184]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d011      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ada:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	4926      	ldr	r1, [pc, #152]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af2:	d101      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005af4:	2301      	movs	r3, #1
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005b04:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	491a      	ldr	r1, [pc, #104]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d011      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b34:	4911      	ldr	r1, [pc, #68]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b44:	d101      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005b46:	2301      	movs	r3, #1
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d005      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b58:	f040 80ff 	bne.w	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b62:	f7fb ff6b 	bl	8001a3c <HAL_GetTick>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b68:	e00e      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b6a:	f7fb ff67 	bl	8001a3c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d907      	bls.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e188      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	424711e0 	.word	0x424711e0
 8005b84:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b88:	4b7e      	ldr	r3, [pc, #504]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ea      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d028      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d124      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005bbc:	4b71      	ldr	r3, [pc, #452]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc2:	0c1b      	lsrs	r3, r3, #16
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bce:	4b6d      	ldr	r3, [pc, #436]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	019b      	lsls	r3, r3, #6
 8005be6:	431a      	orrs	r2, r3
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	3b01      	subs	r3, #1
 8005bee:	041b      	lsls	r3, r3, #16
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	061b      	lsls	r3, r3, #24
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	071b      	lsls	r3, r3, #28
 8005bfe:	4961      	ldr	r1, [pc, #388]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d035      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c30:	d130      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005c32:	4b54      	ldr	r3, [pc, #336]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c44:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4a:	0f1b      	lsrs	r3, r3, #28
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	019b      	lsls	r3, r3, #6
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	3b01      	subs	r3, #1
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	071b      	lsls	r3, r3, #28
 8005c74:	4943      	ldr	r1, [pc, #268]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c7c:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c82:	f023 021f 	bic.w	r2, r3, #31
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	493d      	ldr	r1, [pc, #244]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d029      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca8:	d124      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005caa:	4b36      	ldr	r3, [pc, #216]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc2:	0f1b      	lsrs	r3, r3, #28
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	061b      	lsls	r3, r3, #24
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	071b      	lsls	r3, r3, #28
 8005cec:	4925      	ldr	r1, [pc, #148]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d016      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	3b01      	subs	r3, #1
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	071b      	lsls	r3, r3, #28
 8005d26:	4917      	ldr	r1, [pc, #92]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d2e:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d34:	f7fb fe82 	bl	8001a3c <HAL_GetTick>
 8005d38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d3c:	f7fb fe7e 	bl	8001a3c <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e09f      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	f040 8095 	bne.w	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d68:	f7fb fe68 	bl	8001a3c <HAL_GetTick>
 8005d6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d6e:	e00f      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d70:	f7fb fe64 	bl	8001a3c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d908      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e085      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800
 8005d88:	42470068 	.word	0x42470068
 8005d8c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d90:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d9c:	d0e8      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d02b      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d127      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005dc6:	4b34      	ldr	r3, [pc, #208]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	019b      	lsls	r3, r3, #6
 8005de2:	431a      	orrs	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	3b01      	subs	r3, #1
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	061b      	lsls	r3, r3, #24
 8005df4:	4928      	ldr	r1, [pc, #160]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005dfc:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	4922      	ldr	r1, [pc, #136]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01d      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e2a:	d118      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	0e1b      	lsrs	r3, r3, #24
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	019b      	lsls	r3, r3, #6
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	041b      	lsls	r3, r3, #16
 8005e50:	431a      	orrs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	4910      	ldr	r1, [pc, #64]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e64:	f7fb fdea 	bl	8001a3c <HAL_GetTick>
 8005e68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e6c:	f7fb fde6 	bl	8001a3c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e007      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8a:	d1ef      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3730      	adds	r7, #48	; 0x30
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	42470070 	.word	0x42470070

08005ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea4:	b0ae      	sub	sp, #184	; 0xb8
 8005ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec6:	4bcb      	ldr	r3, [pc, #812]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	f200 8206 	bhi.w	80062e0 <HAL_RCC_GetSysClockFreq+0x440>
 8005ed4:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <HAL_RCC_GetSysClockFreq+0x3c>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005f11 	.word	0x08005f11
 8005ee0:	080062e1 	.word	0x080062e1
 8005ee4:	080062e1 	.word	0x080062e1
 8005ee8:	080062e1 	.word	0x080062e1
 8005eec:	08005f19 	.word	0x08005f19
 8005ef0:	080062e1 	.word	0x080062e1
 8005ef4:	080062e1 	.word	0x080062e1
 8005ef8:	080062e1 	.word	0x080062e1
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	080062e1 	.word	0x080062e1
 8005f04:	080062e1 	.word	0x080062e1
 8005f08:	080062e1 	.word	0x080062e1
 8005f0c:	08006111 	.word	0x08006111
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f10:	4bb9      	ldr	r3, [pc, #740]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005f16:	e1e7      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f18:	4bb8      	ldr	r3, [pc, #736]	; (80061fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f1e:	e1e3      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f20:	4bb4      	ldr	r3, [pc, #720]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f2c:	4bb1      	ldr	r3, [pc, #708]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d071      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f38:	4bae      	ldr	r3, [pc, #696]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	099b      	lsrs	r3, r3, #6
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f5e:	4622      	mov	r2, r4
 8005f60:	462b      	mov	r3, r5
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	0159      	lsls	r1, r3, #5
 8005f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f70:	0150      	lsls	r0, r2, #5
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4621      	mov	r1, r4
 8005f78:	1a51      	subs	r1, r2, r1
 8005f7a:	6439      	str	r1, [r7, #64]	; 0x40
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f82:	647b      	str	r3, [r7, #68]	; 0x44
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005f90:	4649      	mov	r1, r9
 8005f92:	018b      	lsls	r3, r1, #6
 8005f94:	4641      	mov	r1, r8
 8005f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	018a      	lsls	r2, r1, #6
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	1a51      	subs	r1, r2, r1
 8005fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005fb8:	4649      	mov	r1, r9
 8005fba:	00cb      	lsls	r3, r1, #3
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	00ca      	lsls	r2, r1, #3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4622      	mov	r2, r4
 8005fce:	189b      	adds	r3, r3, r2
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	460a      	mov	r2, r1
 8005fd6:	eb42 0303 	adc.w	r3, r2, r3
 8005fda:	637b      	str	r3, [r7, #52]	; 0x34
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fe8:	4629      	mov	r1, r5
 8005fea:	024b      	lsls	r3, r1, #9
 8005fec:	4621      	mov	r1, r4
 8005fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	024a      	lsls	r2, r1, #9
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006004:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006008:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800600c:	f7fa f958 	bl	80002c0 <__aeabi_uldivmod>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4613      	mov	r3, r2
 8006016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800601a:	e067      	b.n	80060ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800601c:	4b75      	ldr	r3, [pc, #468]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006028:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800602c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006034:	67bb      	str	r3, [r7, #120]	; 0x78
 8006036:	2300      	movs	r3, #0
 8006038:	67fb      	str	r3, [r7, #124]	; 0x7c
 800603a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	0159      	lsls	r1, r3, #5
 800604c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006050:	0150      	lsls	r0, r2, #5
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4621      	mov	r1, r4
 8006058:	1a51      	subs	r1, r2, r1
 800605a:	62b9      	str	r1, [r7, #40]	; 0x28
 800605c:	4629      	mov	r1, r5
 800605e:	eb63 0301 	sbc.w	r3, r3, r1
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006070:	4649      	mov	r1, r9
 8006072:	018b      	lsls	r3, r1, #6
 8006074:	4641      	mov	r1, r8
 8006076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800607a:	4641      	mov	r1, r8
 800607c:	018a      	lsls	r2, r1, #6
 800607e:	4641      	mov	r1, r8
 8006080:	ebb2 0a01 	subs.w	sl, r2, r1
 8006084:	4649      	mov	r1, r9
 8006086:	eb63 0b01 	sbc.w	fp, r3, r1
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006096:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800609a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800609e:	4692      	mov	sl, r2
 80060a0:	469b      	mov	fp, r3
 80060a2:	4623      	mov	r3, r4
 80060a4:	eb1a 0303 	adds.w	r3, sl, r3
 80060a8:	623b      	str	r3, [r7, #32]
 80060aa:	462b      	mov	r3, r5
 80060ac:	eb4b 0303 	adc.w	r3, fp, r3
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060be:	4629      	mov	r1, r5
 80060c0:	028b      	lsls	r3, r1, #10
 80060c2:	4621      	mov	r1, r4
 80060c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c8:	4621      	mov	r1, r4
 80060ca:	028a      	lsls	r2, r1, #10
 80060cc:	4610      	mov	r0, r2
 80060ce:	4619      	mov	r1, r3
 80060d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060d4:	2200      	movs	r2, #0
 80060d6:	673b      	str	r3, [r7, #112]	; 0x70
 80060d8:	677a      	str	r2, [r7, #116]	; 0x74
 80060da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80060de:	f7fa f8ef 	bl	80002c0 <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4613      	mov	r3, r2
 80060e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060ec:	4b41      	ldr	r3, [pc, #260]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	3301      	adds	r3, #1
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80060fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800610e:	e0eb      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006110:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800611c:	4b35      	ldr	r3, [pc, #212]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d06b      	beq.n	8006200 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006128:	4b32      	ldr	r3, [pc, #200]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	099b      	lsrs	r3, r3, #6
 800612e:	2200      	movs	r2, #0
 8006130:	66bb      	str	r3, [r7, #104]	; 0x68
 8006132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	663b      	str	r3, [r7, #96]	; 0x60
 800613c:	2300      	movs	r3, #0
 800613e:	667b      	str	r3, [r7, #100]	; 0x64
 8006140:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006144:	4622      	mov	r2, r4
 8006146:	462b      	mov	r3, r5
 8006148:	f04f 0000 	mov.w	r0, #0
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	0159      	lsls	r1, r3, #5
 8006152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006156:	0150      	lsls	r0, r2, #5
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4621      	mov	r1, r4
 800615e:	1a51      	subs	r1, r2, r1
 8006160:	61b9      	str	r1, [r7, #24]
 8006162:	4629      	mov	r1, r5
 8006164:	eb63 0301 	sbc.w	r3, r3, r1
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006176:	4659      	mov	r1, fp
 8006178:	018b      	lsls	r3, r1, #6
 800617a:	4651      	mov	r1, sl
 800617c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006180:	4651      	mov	r1, sl
 8006182:	018a      	lsls	r2, r1, #6
 8006184:	4651      	mov	r1, sl
 8006186:	ebb2 0801 	subs.w	r8, r2, r1
 800618a:	4659      	mov	r1, fp
 800618c:	eb63 0901 	sbc.w	r9, r3, r1
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800619c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061a4:	4690      	mov	r8, r2
 80061a6:	4699      	mov	r9, r3
 80061a8:	4623      	mov	r3, r4
 80061aa:	eb18 0303 	adds.w	r3, r8, r3
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	462b      	mov	r3, r5
 80061b2:	eb49 0303 	adc.w	r3, r9, r3
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061c4:	4629      	mov	r1, r5
 80061c6:	024b      	lsls	r3, r1, #9
 80061c8:	4621      	mov	r1, r4
 80061ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061ce:	4621      	mov	r1, r4
 80061d0:	024a      	lsls	r2, r1, #9
 80061d2:	4610      	mov	r0, r2
 80061d4:	4619      	mov	r1, r3
 80061d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061da:	2200      	movs	r2, #0
 80061dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80061de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80061e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061e4:	f7fa f86c 	bl	80002c0 <__aeabi_uldivmod>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4613      	mov	r3, r2
 80061ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f2:	e065      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x420>
 80061f4:	40023800 	.word	0x40023800
 80061f8:	00f42400 	.word	0x00f42400
 80061fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006200:	4b3d      	ldr	r3, [pc, #244]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	099b      	lsrs	r3, r3, #6
 8006206:	2200      	movs	r2, #0
 8006208:	4618      	mov	r0, r3
 800620a:	4611      	mov	r1, r2
 800620c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006210:	653b      	str	r3, [r7, #80]	; 0x50
 8006212:	2300      	movs	r3, #0
 8006214:	657b      	str	r3, [r7, #84]	; 0x54
 8006216:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800621a:	4642      	mov	r2, r8
 800621c:	464b      	mov	r3, r9
 800621e:	f04f 0000 	mov.w	r0, #0
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	0159      	lsls	r1, r3, #5
 8006228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800622c:	0150      	lsls	r0, r2, #5
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4641      	mov	r1, r8
 8006234:	1a51      	subs	r1, r2, r1
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	4649      	mov	r1, r9
 800623a:	eb63 0301 	sbc.w	r3, r3, r1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800624c:	4659      	mov	r1, fp
 800624e:	018b      	lsls	r3, r1, #6
 8006250:	4651      	mov	r1, sl
 8006252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006256:	4651      	mov	r1, sl
 8006258:	018a      	lsls	r2, r1, #6
 800625a:	4651      	mov	r1, sl
 800625c:	1a54      	subs	r4, r2, r1
 800625e:	4659      	mov	r1, fp
 8006260:	eb63 0501 	sbc.w	r5, r3, r1
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	00eb      	lsls	r3, r5, #3
 800626e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006272:	00e2      	lsls	r2, r4, #3
 8006274:	4614      	mov	r4, r2
 8006276:	461d      	mov	r5, r3
 8006278:	4643      	mov	r3, r8
 800627a:	18e3      	adds	r3, r4, r3
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	464b      	mov	r3, r9
 8006280:	eb45 0303 	adc.w	r3, r5, r3
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006292:	4629      	mov	r1, r5
 8006294:	028b      	lsls	r3, r1, #10
 8006296:	4621      	mov	r1, r4
 8006298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800629c:	4621      	mov	r1, r4
 800629e:	028a      	lsls	r2, r1, #10
 80062a0:	4610      	mov	r0, r2
 80062a2:	4619      	mov	r1, r3
 80062a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062a8:	2200      	movs	r2, #0
 80062aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80062ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062b2:	f7fa f805 	bl	80002c0 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4613      	mov	r3, r2
 80062bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	0f1b      	lsrs	r3, r3, #28
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80062ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80062de:	e003      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062e0:	4b06      	ldr	r3, [pc, #24]	; (80062fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80062e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80062e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	37b8      	adds	r7, #184	; 0xb8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800
 80062fc:	00f42400 	.word	0x00f42400

08006300 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e28d      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8083 	beq.w	8006426 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006320:	4b94      	ldr	r3, [pc, #592]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	2b04      	cmp	r3, #4
 800632a:	d019      	beq.n	8006360 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800632c:	4b91      	ldr	r3, [pc, #580]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006334:	2b08      	cmp	r3, #8
 8006336:	d106      	bne.n	8006346 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006338:	4b8e      	ldr	r3, [pc, #568]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006344:	d00c      	beq.n	8006360 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006346:	4b8b      	ldr	r3, [pc, #556]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800634e:	2b0c      	cmp	r3, #12
 8006350:	d112      	bne.n	8006378 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006352:	4b88      	ldr	r3, [pc, #544]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800635e:	d10b      	bne.n	8006378 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006360:	4b84      	ldr	r3, [pc, #528]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d05b      	beq.n	8006424 <HAL_RCC_OscConfig+0x124>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d157      	bne.n	8006424 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e25a      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d106      	bne.n	8006390 <HAL_RCC_OscConfig+0x90>
 8006382:	4b7c      	ldr	r3, [pc, #496]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7b      	ldr	r2, [pc, #492]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e01d      	b.n	80063cc <HAL_RCC_OscConfig+0xcc>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006398:	d10c      	bne.n	80063b4 <HAL_RCC_OscConfig+0xb4>
 800639a:	4b76      	ldr	r3, [pc, #472]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	4b73      	ldr	r3, [pc, #460]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a72      	ldr	r2, [pc, #456]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e00b      	b.n	80063cc <HAL_RCC_OscConfig+0xcc>
 80063b4:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a6e      	ldr	r2, [pc, #440]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4b6c      	ldr	r3, [pc, #432]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a6b      	ldr	r2, [pc, #428]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d013      	beq.n	80063fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fb fb32 	bl	8001a3c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fb fb2e 	bl	8001a3c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	; 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e21f      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	4b61      	ldr	r3, [pc, #388]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0xdc>
 80063fa:	e014      	b.n	8006426 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fb fb1e 	bl	8001a3c <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006404:	f7fb fb1a 	bl	8001a3c <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b64      	cmp	r3, #100	; 0x64
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e20b      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006416:	4b57      	ldr	r3, [pc, #348]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0x104>
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d06f      	beq.n	8006512 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006432:	4b50      	ldr	r3, [pc, #320]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	2b00      	cmp	r3, #0
 800643c:	d017      	beq.n	800646e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800643e:	4b4d      	ldr	r3, [pc, #308]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006446:	2b08      	cmp	r3, #8
 8006448:	d105      	bne.n	8006456 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800644a:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006456:	4b47      	ldr	r3, [pc, #284]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800645e:	2b0c      	cmp	r3, #12
 8006460:	d11c      	bne.n	800649c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006462:	4b44      	ldr	r3, [pc, #272]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d116      	bne.n	800649c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646e:	4b41      	ldr	r3, [pc, #260]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_RCC_OscConfig+0x186>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d001      	beq.n	8006486 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e1d3      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006486:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4937      	ldr	r1, [pc, #220]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649a:	e03a      	b.n	8006512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d020      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a4:	4b34      	ldr	r3, [pc, #208]	; (8006578 <HAL_RCC_OscConfig+0x278>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064aa:	f7fb fac7 	bl	8001a3c <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064b2:	f7fb fac3 	bl	8001a3c <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1b4      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c4:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4925      	ldr	r1, [pc, #148]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]
 80064e4:	e015      	b.n	8006512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <HAL_RCC_OscConfig+0x278>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fb faa6 	bl	8001a3c <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f4:	f7fb faa2 	bl	8001a3c <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e193      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d036      	beq.n	800658c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006526:	4b15      	ldr	r3, [pc, #84]	; (800657c <HAL_RCC_OscConfig+0x27c>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fb fa86 	bl	8001a3c <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006534:	f7fb fa82 	bl	8001a3c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e173      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x234>
 8006552:	e01b      	b.n	800658c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_RCC_OscConfig+0x27c>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655a:	f7fb fa6f 	bl	8001a3c <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006560:	e00e      	b.n	8006580 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006562:	f7fb fa6b 	bl	8001a3c <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d907      	bls.n	8006580 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e15c      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
 8006574:	40023800 	.word	0x40023800
 8006578:	42470000 	.word	0x42470000
 800657c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006580:	4b8a      	ldr	r3, [pc, #552]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ea      	bne.n	8006562 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8097 	beq.w	80066c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800659e:	4b83      	ldr	r3, [pc, #524]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	4b7f      	ldr	r3, [pc, #508]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	4a7e      	ldr	r2, [pc, #504]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ba:	4b7c      	ldr	r3, [pc, #496]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ca:	4b79      	ldr	r3, [pc, #484]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d118      	bne.n	8006608 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065d6:	4b76      	ldr	r3, [pc, #472]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a75      	ldr	r2, [pc, #468]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e2:	f7fb fa2b 	bl	8001a3c <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ea:	f7fb fa27 	bl	8001a3c <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e118      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b6c      	ldr	r3, [pc, #432]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x31e>
 8006610:	4b66      	ldr	r3, [pc, #408]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a65      	ldr	r2, [pc, #404]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
 800661c:	e01c      	b.n	8006658 <HAL_RCC_OscConfig+0x358>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b05      	cmp	r3, #5
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x340>
 8006626:	4b61      	ldr	r3, [pc, #388]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4a60      	ldr	r2, [pc, #384]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 800662c:	f043 0304 	orr.w	r3, r3, #4
 8006630:	6713      	str	r3, [r2, #112]	; 0x70
 8006632:	4b5e      	ldr	r3, [pc, #376]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a5d      	ldr	r2, [pc, #372]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
 800663e:	e00b      	b.n	8006658 <HAL_RCC_OscConfig+0x358>
 8006640:	4b5a      	ldr	r3, [pc, #360]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006644:	4a59      	ldr	r2, [pc, #356]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6713      	str	r3, [r2, #112]	; 0x70
 800664c:	4b57      	ldr	r3, [pc, #348]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	4a56      	ldr	r2, [pc, #344]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006652:	f023 0304 	bic.w	r3, r3, #4
 8006656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fb f9ec 	bl	8001a3c <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	e00a      	b.n	800667e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fb f9e8 	bl	8001a3c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	; 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e0d7      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	4b4b      	ldr	r3, [pc, #300]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0ee      	beq.n	8006668 <HAL_RCC_OscConfig+0x368>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668c:	f7fb f9d6 	bl	8001a3c <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006692:	e00a      	b.n	80066aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006694:	f7fb f9d2 	bl	8001a3c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e0c1      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066aa:	4b40      	ldr	r3, [pc, #256]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ee      	bne.n	8006694 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066bc:	4b3b      	ldr	r3, [pc, #236]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	4a3a      	ldr	r2, [pc, #232]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80ad 	beq.w	800682c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066d2:	4b36      	ldr	r3, [pc, #216]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d060      	beq.n	80067a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d145      	bne.n	8006772 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e6:	4b33      	ldr	r3, [pc, #204]	; (80067b4 <HAL_RCC_OscConfig+0x4b4>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ec:	f7fb f9a6 	bl	8001a3c <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f4:	f7fb f9a2 	bl	8001a3c <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e093      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f0      	bne.n	80066f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69da      	ldr	r2, [r3, #28]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	019b      	lsls	r3, r3, #6
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	3b01      	subs	r3, #1
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	061b      	lsls	r3, r3, #24
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	071b      	lsls	r3, r3, #28
 800673e:	491b      	ldr	r1, [pc, #108]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006740:	4313      	orrs	r3, r2
 8006742:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <HAL_RCC_OscConfig+0x4b4>)
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fb f977 	bl	8001a3c <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006752:	f7fb f973 	bl	8001a3c <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e064      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006764:	4b11      	ldr	r3, [pc, #68]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <HAL_RCC_OscConfig+0x452>
 8006770:	e05c      	b.n	800682c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <HAL_RCC_OscConfig+0x4b4>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fb f960 	bl	8001a3c <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006780:	f7fb f95c 	bl	8001a3c <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e04d      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x480>
 800679e:	e045      	b.n	800682c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e040      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
 80067ac:	40023800 	.word	0x40023800
 80067b0:	40007000 	.word	0x40007000
 80067b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067b8:	4b1f      	ldr	r3, [pc, #124]	; (8006838 <HAL_RCC_OscConfig+0x538>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d030      	beq.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d129      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d122      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067e8:	4013      	ands	r3, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d119      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	3b01      	subs	r3, #1
 8006802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d10f      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006814:	429a      	cmp	r2, r3
 8006816:	d107      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800

0800683c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e041      	b.n	80068d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fa fe20 	bl	80014a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f000 fb40 	bl	8006f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e041      	b.n	8006970 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fa fdaf 	bl	8001464 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f000 faf1 	bl	8006f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_TIM_PWM_Start+0x24>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e022      	b.n	80069e2 <HAL_TIM_PWM_Start+0x6a>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d109      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x3e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e015      	b.n	80069e2 <HAL_TIM_PWM_Start+0x6a>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_PWM_Start+0x58>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e008      	b.n	80069e2 <HAL_TIM_PWM_Start+0x6a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e07c      	b.n	8006ae4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Start+0x82>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f8:	e013      	b.n	8006a22 <HAL_TIM_PWM_Start+0xaa>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Start+0x92>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a08:	e00b      	b.n	8006a22 <HAL_TIM_PWM_Start+0xaa>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_PWM_Start+0xa2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a18:	e003      	b.n	8006a22 <HAL_TIM_PWM_Start+0xaa>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2201      	movs	r2, #1
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fcb8 	bl	80073a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2d      	ldr	r2, [pc, #180]	; (8006aec <HAL_TIM_PWM_Start+0x174>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_PWM_Start+0xcc>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2c      	ldr	r2, [pc, #176]	; (8006af0 <HAL_TIM_PWM_Start+0x178>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_TIM_PWM_Start+0xd0>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_TIM_PWM_Start+0xd2>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a22      	ldr	r2, [pc, #136]	; (8006aec <HAL_TIM_PWM_Start+0x174>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d01d      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <HAL_TIM_PWM_Start+0x17c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <HAL_TIM_PWM_Start+0x180>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <HAL_TIM_PWM_Start+0x184>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <HAL_TIM_PWM_Start+0x178>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_TIM_PWM_Start+0x188>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIM_PWM_Start+0x18c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d111      	bne.n	8006ad2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d010      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad0:	e007      	b.n	8006ae2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40010000 	.word	0x40010000
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40000c00 	.word	0x40000c00
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40001800 	.word	0x40001800

08006b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d122      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d11b      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0202 	mvn.w	r2, #2
 8006b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f9ba 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 8006b50:	e005      	b.n	8006b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f9ac 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f9bd 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d122      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d11b      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f06f 0204 	mvn.w	r2, #4
 8006b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f990 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 8006ba4:	e005      	b.n	8006bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f982 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f993 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d122      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d11b      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0208 	mvn.w	r2, #8
 8006bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2204      	movs	r2, #4
 8006be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f966 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 8006bf8:	e005      	b.n	8006c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f958 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f969 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d122      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d11b      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0210 	mvn.w	r2, #16
 8006c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2208      	movs	r2, #8
 8006c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f93c 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 8006c4c:	e005      	b.n	8006c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f92e 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f93f 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10e      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d107      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0201 	mvn.w	r2, #1
 8006c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f908 	bl	8006e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	d10e      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d107      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fc72 	bl	800759c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d10e      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d107      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f904 	bl	8006eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d10e      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d107      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0220 	mvn.w	r2, #32
 8006d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc3c 	bl	8007588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e0ae      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	f200 809f 	bhi.w	8006e84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d81 	.word	0x08006d81
 8006d50:	08006e85 	.word	0x08006e85
 8006d54:	08006e85 	.word	0x08006e85
 8006d58:	08006e85 	.word	0x08006e85
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006e85 	.word	0x08006e85
 8006d64:	08006e85 	.word	0x08006e85
 8006d68:	08006e85 	.word	0x08006e85
 8006d6c:	08006e03 	.word	0x08006e03
 8006d70:	08006e85 	.word	0x08006e85
 8006d74:	08006e85 	.word	0x08006e85
 8006d78:	08006e85 	.word	0x08006e85
 8006d7c:	08006e43 	.word	0x08006e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f95a 	bl	8007040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0204 	bic.w	r2, r2, #4
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	619a      	str	r2, [r3, #24]
      break;
 8006dbe:	e064      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f9aa 	bl	8007120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6999      	ldr	r1, [r3, #24]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	619a      	str	r2, [r3, #24]
      break;
 8006e00:	e043      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f9ff 	bl	800720c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0208 	orr.w	r2, r2, #8
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0204 	bic.w	r2, r2, #4
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	61da      	str	r2, [r3, #28]
      break;
 8006e40:	e023      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fa53 	bl	80072f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69d9      	ldr	r1, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	021a      	lsls	r2, r3, #8
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	61da      	str	r2, [r3, #28]
      break;
 8006e82:	e002      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a40      	ldr	r2, [pc, #256]	; (8007014 <TIM_Base_SetConfig+0x114>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d013      	beq.n	8006f40 <TIM_Base_SetConfig+0x40>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1e:	d00f      	beq.n	8006f40 <TIM_Base_SetConfig+0x40>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a3d      	ldr	r2, [pc, #244]	; (8007018 <TIM_Base_SetConfig+0x118>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00b      	beq.n	8006f40 <TIM_Base_SetConfig+0x40>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a3c      	ldr	r2, [pc, #240]	; (800701c <TIM_Base_SetConfig+0x11c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d007      	beq.n	8006f40 <TIM_Base_SetConfig+0x40>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a3b      	ldr	r2, [pc, #236]	; (8007020 <TIM_Base_SetConfig+0x120>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_Base_SetConfig+0x40>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a3a      	ldr	r2, [pc, #232]	; (8007024 <TIM_Base_SetConfig+0x124>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d108      	bne.n	8006f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a2f      	ldr	r2, [pc, #188]	; (8007014 <TIM_Base_SetConfig+0x114>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d02b      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f60:	d027      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a2c      	ldr	r2, [pc, #176]	; (8007018 <TIM_Base_SetConfig+0x118>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d023      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a2b      	ldr	r2, [pc, #172]	; (800701c <TIM_Base_SetConfig+0x11c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01f      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a2a      	ldr	r2, [pc, #168]	; (8007020 <TIM_Base_SetConfig+0x120>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d01b      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a29      	ldr	r2, [pc, #164]	; (8007024 <TIM_Base_SetConfig+0x124>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d017      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a28      	ldr	r2, [pc, #160]	; (8007028 <TIM_Base_SetConfig+0x128>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a27      	ldr	r2, [pc, #156]	; (800702c <TIM_Base_SetConfig+0x12c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00f      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a26      	ldr	r2, [pc, #152]	; (8007030 <TIM_Base_SetConfig+0x130>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00b      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a25      	ldr	r2, [pc, #148]	; (8007034 <TIM_Base_SetConfig+0x134>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d007      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a24      	ldr	r2, [pc, #144]	; (8007038 <TIM_Base_SetConfig+0x138>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d003      	beq.n	8006fb2 <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a23      	ldr	r2, [pc, #140]	; (800703c <TIM_Base_SetConfig+0x13c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d108      	bne.n	8006fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <TIM_Base_SetConfig+0x114>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_Base_SetConfig+0xf8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a0c      	ldr	r2, [pc, #48]	; (8007024 <TIM_Base_SetConfig+0x124>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d103      	bne.n	8007000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	615a      	str	r2, [r3, #20]
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40010000 	.word	0x40010000
 8007018:	40000400 	.word	0x40000400
 800701c:	40000800 	.word	0x40000800
 8007020:	40000c00 	.word	0x40000c00
 8007024:	40010400 	.word	0x40010400
 8007028:	40014000 	.word	0x40014000
 800702c:	40014400 	.word	0x40014400
 8007030:	40014800 	.word	0x40014800
 8007034:	40001800 	.word	0x40001800
 8007038:	40001c00 	.word	0x40001c00
 800703c:	40002000 	.word	0x40002000

08007040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0201 	bic.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 0302 	bic.w	r3, r3, #2
 8007088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a20      	ldr	r2, [pc, #128]	; (8007118 <TIM_OC1_SetConfig+0xd8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d003      	beq.n	80070a4 <TIM_OC1_SetConfig+0x64>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a1f      	ldr	r2, [pc, #124]	; (800711c <TIM_OC1_SetConfig+0xdc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d10c      	bne.n	80070be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f023 0308 	bic.w	r3, r3, #8
 80070aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 0304 	bic.w	r3, r3, #4
 80070bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a15      	ldr	r2, [pc, #84]	; (8007118 <TIM_OC1_SetConfig+0xd8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_OC1_SetConfig+0x8e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a14      	ldr	r2, [pc, #80]	; (800711c <TIM_OC1_SetConfig+0xdc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d111      	bne.n	80070f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	621a      	str	r2, [r3, #32]
}
 800710c:	bf00      	nop
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400

08007120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0210 	bic.w	r2, r3, #16
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f023 0320 	bic.w	r3, r3, #32
 800716a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a22      	ldr	r2, [pc, #136]	; (8007204 <TIM_OC2_SetConfig+0xe4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC2_SetConfig+0x68>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a21      	ldr	r2, [pc, #132]	; (8007208 <TIM_OC2_SetConfig+0xe8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d10d      	bne.n	80071a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <TIM_OC2_SetConfig+0xe4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC2_SetConfig+0x94>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a16      	ldr	r2, [pc, #88]	; (8007208 <TIM_OC2_SetConfig+0xe8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d113      	bne.n	80071dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40010000 	.word	0x40010000
 8007208:	40010400 	.word	0x40010400

0800720c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0303 	bic.w	r3, r3, #3
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a21      	ldr	r2, [pc, #132]	; (80072ec <TIM_OC3_SetConfig+0xe0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC3_SetConfig+0x66>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a20      	ldr	r2, [pc, #128]	; (80072f0 <TIM_OC3_SetConfig+0xe4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d10d      	bne.n	800728e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800728c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a16      	ldr	r2, [pc, #88]	; (80072ec <TIM_OC3_SetConfig+0xe0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d003      	beq.n	800729e <TIM_OC3_SetConfig+0x92>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <TIM_OC3_SetConfig+0xe4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d113      	bne.n	80072c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40010400 	.word	0x40010400

080072f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800733e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	031b      	lsls	r3, r3, #12
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a12      	ldr	r2, [pc, #72]	; (8007398 <TIM_OC4_SetConfig+0xa4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_OC4_SetConfig+0x68>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a11      	ldr	r2, [pc, #68]	; (800739c <TIM_OC4_SetConfig+0xa8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d109      	bne.n	8007370 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	019b      	lsls	r3, r3, #6
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	2201      	movs	r2, #1
 80073b4:	fa02 f303 	lsl.w	r3, r2, r3
 80073b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	401a      	ands	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1a      	ldr	r2, [r3, #32]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	fa01 f303 	lsl.w	r3, r1, r3
 80073d8:	431a      	orrs	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
}
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007400:	2302      	movs	r3, #2
 8007402:	e05a      	b.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d022      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007450:	d01d      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d018      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d013      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00e      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d009      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a17      	ldr	r2, [pc, #92]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d10c      	bne.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4313      	orrs	r3, r2
 800749e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40010000 	.word	0x40010000
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40010400 	.word	0x40010400
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40001800 	.word	0x40001800

080074e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e03d      	b.n	800757c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e03f      	b.n	8007642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7f9 ffc8 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2224      	movs	r2, #36	; 0x24
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fdef 	bl	80081d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08c      	sub	sp, #48	; 0x30
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b20      	cmp	r3, #32
 8007664:	d165      	bne.n	8007732 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_UART_Transmit_DMA+0x26>
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e05e      	b.n	8007734 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_UART_Transmit_DMA+0x38>
 8007680:	2302      	movs	r3, #2
 8007682:	e057      	b.n	8007734 <HAL_UART_Transmit_DMA+0xe8>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	88fa      	ldrh	r2, [r7, #6]
 800769c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2221      	movs	r2, #33	; 0x21
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <HAL_UART_Transmit_DMA+0xf0>)
 80076b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b8:	4a21      	ldr	r2, [pc, #132]	; (8007740 <HAL_UART_Transmit_DMA+0xf4>)
 80076ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c0:	4a20      	ldr	r2, [pc, #128]	; (8007744 <HAL_UART_Transmit_DMA+0xf8>)
 80076c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	2200      	movs	r2, #0
 80076ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80076cc:	f107 0308 	add.w	r3, r7, #8
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	6819      	ldr	r1, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3304      	adds	r3, #4
 80076e0:	461a      	mov	r2, r3
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	f7fa fe62 	bl	80023ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	617b      	str	r3, [r7, #20]
   return(result);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3314      	adds	r3, #20
 8007718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771a:	627a      	str	r2, [r7, #36]	; 0x24
 800771c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6a39      	ldr	r1, [r7, #32]
 8007720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	61fb      	str	r3, [r7, #28]
   return(result);
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	e000      	b.n	8007734 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007732:	2302      	movs	r3, #2
  }
}
 8007734:	4618      	mov	r0, r3
 8007736:	3730      	adds	r7, #48	; 0x30
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	08007d09 	.word	0x08007d09
 8007740:	08007da3 	.word	0x08007da3
 8007744:	08007dbf 	.word	0x08007dbf

08007748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0ba      	sub	sp, #232	; 0xe8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800776e:	2300      	movs	r3, #0
 8007770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007774:	2300      	movs	r3, #0
 8007776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10f      	bne.n	80077ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <HAL_UART_IRQHandler+0x66>
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fc5a 	bl	8008060 <UART_Receive_IT>
      return;
 80077ac:	e256      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80de 	beq.w	8007974 <HAL_UART_IRQHandler+0x22c>
 80077b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d106      	bne.n	80077d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80d1 	beq.w	8007974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <HAL_UART_IRQHandler+0xae>
 80077de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f043 0201 	orr.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <HAL_UART_IRQHandler+0xd2>
 8007802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0202 	orr.w	r2, r3, #2
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <HAL_UART_IRQHandler+0xf6>
 8007826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f043 0204 	orr.w	r2, r3, #4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d011      	beq.n	800786e <HAL_UART_IRQHandler+0x126>
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d105      	bne.n	8007862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	f043 0208 	orr.w	r2, r3, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 81ed 	beq.w	8007c52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_UART_IRQHandler+0x14e>
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fbe5 	bl	8008060 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <HAL_UART_IRQHandler+0x17a>
 80078ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d04f      	beq.n	8007962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 faed 	bl	8007ea2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d141      	bne.n	800795a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3314      	adds	r3, #20
 80078dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3314      	adds	r3, #20
 80078fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800790e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800791a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1d9      	bne.n	80078d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	4a7d      	ldr	r2, [pc, #500]	; (8007b24 <HAL_UART_IRQHandler+0x3dc>)
 8007930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	4618      	mov	r0, r3
 8007938:	f7fa fe00 	bl	800253c <HAL_DMA_Abort_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d016      	beq.n	8007970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	e00e      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f9a4 	bl	8007ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e00a      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f9a0 	bl	8007ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e006      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f99c 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800796e:	e170      	b.n	8007c52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	bf00      	nop
    return;
 8007972:	e16e      	b.n	8007c52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	2b01      	cmp	r3, #1
 800797a:	f040 814a 	bne.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800797e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8143 	beq.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 813c 	beq.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b40      	cmp	r3, #64	; 0x40
 80079bc:	f040 80b4 	bne.w	8007b28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8140 	beq.w	8007c56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079de:	429a      	cmp	r2, r3
 80079e0:	f080 8139 	bcs.w	8007c56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	f000 8088 	beq.w	8007b0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	330c      	adds	r3, #12
 8007a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1d9      	bne.n	80079fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3314      	adds	r3, #20
 8007a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3314      	adds	r3, #20
 8007a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e1      	bne.n	8007a46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3314      	adds	r3, #20
 8007a88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3314      	adds	r3, #20
 8007aa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e3      	bne.n	8007a82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ada:	f023 0310 	bic.w	r3, r3, #16
 8007ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007aec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e3      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fa fca9 	bl	800245c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f8ca 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b20:	e099      	b.n	8007c56 <HAL_UART_IRQHandler+0x50e>
 8007b22:	bf00      	nop
 8007b24:	08007f69 	.word	0x08007f69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 808b 	beq.w	8007c5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8086 	beq.w	8007c5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b72:	647a      	str	r2, [r7, #68]	; 0x44
 8007b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e3      	bne.n	8007b4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	623b      	str	r3, [r7, #32]
   return(result);
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007baa:	633a      	str	r2, [r7, #48]	; 0x30
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e3      	bne.n	8007b86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0310 	bic.w	r3, r3, #16
 8007be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bf0:	61fa      	str	r2, [r7, #28]
 8007bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	69b9      	ldr	r1, [r7, #24]
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e3      	bne.n	8007bcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f852 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c10:	e023      	b.n	8007c5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <HAL_UART_IRQHandler+0x4ea>
 8007c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9b0 	bl	8007f90 <UART_Transmit_IT>
    return;
 8007c30:	e014      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <HAL_UART_IRQHandler+0x514>
 8007c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f9f0 	bl	8008030 <UART_EndTransmit_IT>
    return;
 8007c50:	e004      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
    return;
 8007c52:	bf00      	nop
 8007c54:	e002      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
      return;
 8007c56:	bf00      	nop
 8007c58:	e000      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
      return;
 8007c5a:	bf00      	nop
  }
}
 8007c5c:	37e8      	adds	r7, #232	; 0xe8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b2db      	uxtb	r3, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b090      	sub	sp, #64	; 0x40
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d137      	bne.n	8007d94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d26:	2200      	movs	r2, #0
 8007d28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3314      	adds	r3, #20
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	623b      	str	r3, [r7, #32]
   return(result);
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3314      	adds	r3, #20
 8007d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e5      	bne.n	8007d2a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	330c      	adds	r3, #12
 8007d64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d7e:	61fa      	str	r2, [r7, #28]
 8007d80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	69b9      	ldr	r1, [r7, #24]
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1e5      	bne.n	8007d5e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d92:	e002      	b.n	8007d9a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d96:	f7ff ff65 	bl	8007c64 <HAL_UART_TxCpltCallback>
}
 8007d9a:	bf00      	nop
 8007d9c:	3740      	adds	r7, #64	; 0x40
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff ff61 	bl	8007c78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dda:	2b80      	cmp	r3, #128	; 0x80
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b21      	cmp	r3, #33	; 0x21
 8007df0:	d108      	bne.n	8007e04 <UART_DMAError+0x46>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007dfe:	68b8      	ldr	r0, [r7, #8]
 8007e00:	f000 f827 	bl	8007e52 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	bf0c      	ite	eq
 8007e12:	2301      	moveq	r3, #1
 8007e14:	2300      	movne	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b22      	cmp	r3, #34	; 0x22
 8007e24:	d108      	bne.n	8007e38 <UART_DMAError+0x7a>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007e32:	68b8      	ldr	r0, [r7, #8]
 8007e34:	f000 f835 	bl	8007ea2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	f043 0210 	orr.w	r2, r3, #16
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e44:	68b8      	ldr	r0, [r7, #8]
 8007e46:	f7ff ff2b 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b089      	sub	sp, #36	; 0x24
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	61ba      	str	r2, [r7, #24]
 8007e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6979      	ldr	r1, [r7, #20]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	613b      	str	r3, [r7, #16]
   return(result);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e5      	bne.n	8007e5a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007e96:	bf00      	nop
 8007e98:	3724      	adds	r7, #36	; 0x24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b095      	sub	sp, #84	; 0x54
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eca:	643a      	str	r2, [r7, #64]	; 0x40
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ed0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e5      	bne.n	8007eaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3314      	adds	r3, #20
 8007ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	f023 0301 	bic.w	r3, r3, #1
 8007ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e5      	bne.n	8007ede <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d119      	bne.n	8007f4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	330c      	adds	r3, #12
 8007f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f023 0310 	bic.w	r3, r3, #16
 8007f30:	647b      	str	r3, [r7, #68]	; 0x44
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f3a:	61ba      	str	r2, [r7, #24]
 8007f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6979      	ldr	r1, [r7, #20]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	613b      	str	r3, [r7, #16]
   return(result);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e5      	bne.n	8007f1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f5c:	bf00      	nop
 8007f5e:	3754      	adds	r7, #84	; 0x54
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fe8c 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b21      	cmp	r3, #33	; 0x21
 8007fa2:	d13e      	bne.n	8008022 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fac:	d114      	bne.n	8007fd8 <UART_Transmit_IT+0x48>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d110      	bne.n	8007fd8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	1c9a      	adds	r2, r3, #2
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	621a      	str	r2, [r3, #32]
 8007fd6:	e008      	b.n	8007fea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	1c59      	adds	r1, r3, #1
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6211      	str	r1, [r2, #32]
 8007fe2:	781a      	ldrb	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10f      	bne.n	800801e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800800c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800801c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	e000      	b.n	8008024 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008022:	2302      	movs	r3, #2
  }
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008046:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fe07 	bl	8007c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b22      	cmp	r3, #34	; 0x22
 8008072:	f040 80ab 	bne.w	80081cc <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	d117      	bne.n	80080b0 <UART_Receive_IT+0x50>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d113      	bne.n	80080b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	1c9a      	adds	r2, r3, #2
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	629a      	str	r2, [r3, #40]	; 0x28
 80080ae:	e026      	b.n	80080fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c2:	d007      	beq.n	80080d4 <UART_Receive_IT+0x74>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <UART_Receive_IT+0x82>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	701a      	strb	r2, [r3, #0]
 80080e0:	e008      	b.n	80080f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29b      	uxth	r3, r3
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4619      	mov	r1, r3
 800810c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800810e:	2b00      	cmp	r3, #0
 8008110:	d15a      	bne.n	80081c8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0220 	bic.w	r2, r2, #32
 8008120:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008130:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	695a      	ldr	r2, [r3, #20]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0201 	bic.w	r2, r2, #1
 8008140:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	2b01      	cmp	r3, #1
 8008150:	d135      	bne.n	80081be <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	330c      	adds	r3, #12
 800815e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f023 0310 	bic.w	r3, r3, #16
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008178:	623a      	str	r2, [r7, #32]
 800817a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	61bb      	str	r3, [r7, #24]
   return(result);
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b10      	cmp	r3, #16
 8008198:	d10a      	bne.n	80081b0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fd7c 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
 80081bc:	e002      	b.n	80081c4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fd64 	bl	8007c8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e002      	b.n	80081ce <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e000      	b.n	80081ce <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081cc:	2302      	movs	r3, #2
  }
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3730      	adds	r7, #48	; 0x30
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081dc:	b0c0      	sub	sp, #256	; 0x100
 80081de:	af00      	add	r7, sp, #0
 80081e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	68d9      	ldr	r1, [r3, #12]
 80081f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	ea40 0301 	orr.w	r3, r0, r1
 8008200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	431a      	orrs	r2, r3
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	431a      	orrs	r2, r3
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	4313      	orrs	r3, r2
 8008220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008230:	f021 010c 	bic.w	r1, r1, #12
 8008234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800823e:	430b      	orrs	r3, r1
 8008240:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008252:	6999      	ldr	r1, [r3, #24]
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	ea40 0301 	orr.w	r3, r0, r1
 800825e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4b8f      	ldr	r3, [pc, #572]	; (80084a4 <UART_SetConfig+0x2cc>)
 8008268:	429a      	cmp	r2, r3
 800826a:	d005      	beq.n	8008278 <UART_SetConfig+0xa0>
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b8d      	ldr	r3, [pc, #564]	; (80084a8 <UART_SetConfig+0x2d0>)
 8008274:	429a      	cmp	r2, r3
 8008276:	d104      	bne.n	8008282 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008278:	f7fd fad4 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 800827c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008280:	e003      	b.n	800828a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008282:	f7fd fabb 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 8008286:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008294:	f040 810c 	bne.w	80084b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800829c:	2200      	movs	r2, #0
 800829e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082aa:	4622      	mov	r2, r4
 80082ac:	462b      	mov	r3, r5
 80082ae:	1891      	adds	r1, r2, r2
 80082b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80082b2:	415b      	adcs	r3, r3
 80082b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082ba:	4621      	mov	r1, r4
 80082bc:	eb12 0801 	adds.w	r8, r2, r1
 80082c0:	4629      	mov	r1, r5
 80082c2:	eb43 0901 	adc.w	r9, r3, r1
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082da:	4690      	mov	r8, r2
 80082dc:	4699      	mov	r9, r3
 80082de:	4623      	mov	r3, r4
 80082e0:	eb18 0303 	adds.w	r3, r8, r3
 80082e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082e8:	462b      	mov	r3, r5
 80082ea:	eb49 0303 	adc.w	r3, r9, r3
 80082ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008306:	460b      	mov	r3, r1
 8008308:	18db      	adds	r3, r3, r3
 800830a:	653b      	str	r3, [r7, #80]	; 0x50
 800830c:	4613      	mov	r3, r2
 800830e:	eb42 0303 	adc.w	r3, r2, r3
 8008312:	657b      	str	r3, [r7, #84]	; 0x54
 8008314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800831c:	f7f7 ffd0 	bl	80002c0 <__aeabi_uldivmod>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4b61      	ldr	r3, [pc, #388]	; (80084ac <UART_SetConfig+0x2d4>)
 8008326:	fba3 2302 	umull	r2, r3, r3, r2
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	011c      	lsls	r4, r3, #4
 800832e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008332:	2200      	movs	r2, #0
 8008334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008338:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800833c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008340:	4642      	mov	r2, r8
 8008342:	464b      	mov	r3, r9
 8008344:	1891      	adds	r1, r2, r2
 8008346:	64b9      	str	r1, [r7, #72]	; 0x48
 8008348:	415b      	adcs	r3, r3
 800834a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800834c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008350:	4641      	mov	r1, r8
 8008352:	eb12 0a01 	adds.w	sl, r2, r1
 8008356:	4649      	mov	r1, r9
 8008358:	eb43 0b01 	adc.w	fp, r3, r1
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008368:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800836c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008370:	4692      	mov	sl, r2
 8008372:	469b      	mov	fp, r3
 8008374:	4643      	mov	r3, r8
 8008376:	eb1a 0303 	adds.w	r3, sl, r3
 800837a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800837e:	464b      	mov	r3, r9
 8008380:	eb4b 0303 	adc.w	r3, fp, r3
 8008384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008394:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008398:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800839c:	460b      	mov	r3, r1
 800839e:	18db      	adds	r3, r3, r3
 80083a0:	643b      	str	r3, [r7, #64]	; 0x40
 80083a2:	4613      	mov	r3, r2
 80083a4:	eb42 0303 	adc.w	r3, r2, r3
 80083a8:	647b      	str	r3, [r7, #68]	; 0x44
 80083aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083b2:	f7f7 ff85 	bl	80002c0 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4611      	mov	r1, r2
 80083bc:	4b3b      	ldr	r3, [pc, #236]	; (80084ac <UART_SetConfig+0x2d4>)
 80083be:	fba3 2301 	umull	r2, r3, r3, r1
 80083c2:	095b      	lsrs	r3, r3, #5
 80083c4:	2264      	movs	r2, #100	; 0x64
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
 80083ca:	1acb      	subs	r3, r1, r3
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083d2:	4b36      	ldr	r3, [pc, #216]	; (80084ac <UART_SetConfig+0x2d4>)
 80083d4:	fba3 2302 	umull	r2, r3, r3, r2
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083e0:	441c      	add	r4, r3
 80083e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083f4:	4642      	mov	r2, r8
 80083f6:	464b      	mov	r3, r9
 80083f8:	1891      	adds	r1, r2, r2
 80083fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80083fc:	415b      	adcs	r3, r3
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008404:	4641      	mov	r1, r8
 8008406:	1851      	adds	r1, r2, r1
 8008408:	6339      	str	r1, [r7, #48]	; 0x30
 800840a:	4649      	mov	r1, r9
 800840c:	414b      	adcs	r3, r1
 800840e:	637b      	str	r3, [r7, #52]	; 0x34
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800841c:	4659      	mov	r1, fp
 800841e:	00cb      	lsls	r3, r1, #3
 8008420:	4651      	mov	r1, sl
 8008422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008426:	4651      	mov	r1, sl
 8008428:	00ca      	lsls	r2, r1, #3
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	4603      	mov	r3, r0
 8008430:	4642      	mov	r2, r8
 8008432:	189b      	adds	r3, r3, r2
 8008434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008438:	464b      	mov	r3, r9
 800843a:	460a      	mov	r2, r1
 800843c:	eb42 0303 	adc.w	r3, r2, r3
 8008440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008450:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008458:	460b      	mov	r3, r1
 800845a:	18db      	adds	r3, r3, r3
 800845c:	62bb      	str	r3, [r7, #40]	; 0x28
 800845e:	4613      	mov	r3, r2
 8008460:	eb42 0303 	adc.w	r3, r2, r3
 8008464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800846a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800846e:	f7f7 ff27 	bl	80002c0 <__aeabi_uldivmod>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <UART_SetConfig+0x2d4>)
 8008478:	fba3 1302 	umull	r1, r3, r3, r2
 800847c:	095b      	lsrs	r3, r3, #5
 800847e:	2164      	movs	r1, #100	; 0x64
 8008480:	fb01 f303 	mul.w	r3, r1, r3
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	3332      	adds	r3, #50	; 0x32
 800848a:	4a08      	ldr	r2, [pc, #32]	; (80084ac <UART_SetConfig+0x2d4>)
 800848c:	fba2 2303 	umull	r2, r3, r2, r3
 8008490:	095b      	lsrs	r3, r3, #5
 8008492:	f003 0207 	and.w	r2, r3, #7
 8008496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4422      	add	r2, r4
 800849e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084a0:	e106      	b.n	80086b0 <UART_SetConfig+0x4d8>
 80084a2:	bf00      	nop
 80084a4:	40011000 	.word	0x40011000
 80084a8:	40011400 	.word	0x40011400
 80084ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084c2:	4642      	mov	r2, r8
 80084c4:	464b      	mov	r3, r9
 80084c6:	1891      	adds	r1, r2, r2
 80084c8:	6239      	str	r1, [r7, #32]
 80084ca:	415b      	adcs	r3, r3
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
 80084ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084d2:	4641      	mov	r1, r8
 80084d4:	1854      	adds	r4, r2, r1
 80084d6:	4649      	mov	r1, r9
 80084d8:	eb43 0501 	adc.w	r5, r3, r1
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	00eb      	lsls	r3, r5, #3
 80084e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ea:	00e2      	lsls	r2, r4, #3
 80084ec:	4614      	mov	r4, r2
 80084ee:	461d      	mov	r5, r3
 80084f0:	4643      	mov	r3, r8
 80084f2:	18e3      	adds	r3, r4, r3
 80084f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084f8:	464b      	mov	r3, r9
 80084fa:	eb45 0303 	adc.w	r3, r5, r3
 80084fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800850e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800851e:	4629      	mov	r1, r5
 8008520:	008b      	lsls	r3, r1, #2
 8008522:	4621      	mov	r1, r4
 8008524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008528:	4621      	mov	r1, r4
 800852a:	008a      	lsls	r2, r1, #2
 800852c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008530:	f7f7 fec6 	bl	80002c0 <__aeabi_uldivmod>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4b60      	ldr	r3, [pc, #384]	; (80086bc <UART_SetConfig+0x4e4>)
 800853a:	fba3 2302 	umull	r2, r3, r3, r2
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	011c      	lsls	r4, r3, #4
 8008542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008546:	2200      	movs	r2, #0
 8008548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800854c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008550:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008554:	4642      	mov	r2, r8
 8008556:	464b      	mov	r3, r9
 8008558:	1891      	adds	r1, r2, r2
 800855a:	61b9      	str	r1, [r7, #24]
 800855c:	415b      	adcs	r3, r3
 800855e:	61fb      	str	r3, [r7, #28]
 8008560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008564:	4641      	mov	r1, r8
 8008566:	1851      	adds	r1, r2, r1
 8008568:	6139      	str	r1, [r7, #16]
 800856a:	4649      	mov	r1, r9
 800856c:	414b      	adcs	r3, r1
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800857c:	4659      	mov	r1, fp
 800857e:	00cb      	lsls	r3, r1, #3
 8008580:	4651      	mov	r1, sl
 8008582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008586:	4651      	mov	r1, sl
 8008588:	00ca      	lsls	r2, r1, #3
 800858a:	4610      	mov	r0, r2
 800858c:	4619      	mov	r1, r3
 800858e:	4603      	mov	r3, r0
 8008590:	4642      	mov	r2, r8
 8008592:	189b      	adds	r3, r3, r2
 8008594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008598:	464b      	mov	r3, r9
 800859a:	460a      	mov	r2, r1
 800859c:	eb42 0303 	adc.w	r3, r2, r3
 80085a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80085ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085bc:	4649      	mov	r1, r9
 80085be:	008b      	lsls	r3, r1, #2
 80085c0:	4641      	mov	r1, r8
 80085c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085c6:	4641      	mov	r1, r8
 80085c8:	008a      	lsls	r2, r1, #2
 80085ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085ce:	f7f7 fe77 	bl	80002c0 <__aeabi_uldivmod>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	4b38      	ldr	r3, [pc, #224]	; (80086bc <UART_SetConfig+0x4e4>)
 80085da:	fba3 2301 	umull	r2, r3, r3, r1
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	2264      	movs	r2, #100	; 0x64
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
 80085e6:	1acb      	subs	r3, r1, r3
 80085e8:	011b      	lsls	r3, r3, #4
 80085ea:	3332      	adds	r3, #50	; 0x32
 80085ec:	4a33      	ldr	r2, [pc, #204]	; (80086bc <UART_SetConfig+0x4e4>)
 80085ee:	fba2 2303 	umull	r2, r3, r2, r3
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085f8:	441c      	add	r4, r3
 80085fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085fe:	2200      	movs	r2, #0
 8008600:	673b      	str	r3, [r7, #112]	; 0x70
 8008602:	677a      	str	r2, [r7, #116]	; 0x74
 8008604:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	1891      	adds	r1, r2, r2
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	415b      	adcs	r3, r3
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008618:	4641      	mov	r1, r8
 800861a:	1851      	adds	r1, r2, r1
 800861c:	6039      	str	r1, [r7, #0]
 800861e:	4649      	mov	r1, r9
 8008620:	414b      	adcs	r3, r1
 8008622:	607b      	str	r3, [r7, #4]
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008630:	4659      	mov	r1, fp
 8008632:	00cb      	lsls	r3, r1, #3
 8008634:	4651      	mov	r1, sl
 8008636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800863a:	4651      	mov	r1, sl
 800863c:	00ca      	lsls	r2, r1, #3
 800863e:	4610      	mov	r0, r2
 8008640:	4619      	mov	r1, r3
 8008642:	4603      	mov	r3, r0
 8008644:	4642      	mov	r2, r8
 8008646:	189b      	adds	r3, r3, r2
 8008648:	66bb      	str	r3, [r7, #104]	; 0x68
 800864a:	464b      	mov	r3, r9
 800864c:	460a      	mov	r2, r1
 800864e:	eb42 0303 	adc.w	r3, r2, r3
 8008652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	663b      	str	r3, [r7, #96]	; 0x60
 800865e:	667a      	str	r2, [r7, #100]	; 0x64
 8008660:	f04f 0200 	mov.w	r2, #0
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800866c:	4649      	mov	r1, r9
 800866e:	008b      	lsls	r3, r1, #2
 8008670:	4641      	mov	r1, r8
 8008672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008676:	4641      	mov	r1, r8
 8008678:	008a      	lsls	r2, r1, #2
 800867a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800867e:	f7f7 fe1f 	bl	80002c0 <__aeabi_uldivmod>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <UART_SetConfig+0x4e4>)
 8008688:	fba3 1302 	umull	r1, r3, r3, r2
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	2164      	movs	r1, #100	; 0x64
 8008690:	fb01 f303 	mul.w	r3, r1, r3
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	3332      	adds	r3, #50	; 0x32
 800869a:	4a08      	ldr	r2, [pc, #32]	; (80086bc <UART_SetConfig+0x4e4>)
 800869c:	fba2 2303 	umull	r2, r3, r2, r3
 80086a0:	095b      	lsrs	r3, r3, #5
 80086a2:	f003 020f 	and.w	r2, r3, #15
 80086a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4422      	add	r2, r4
 80086ae:	609a      	str	r2, [r3, #8]
}
 80086b0:	bf00      	nop
 80086b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086b6:	46bd      	mov	sp, r7
 80086b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086bc:	51eb851f 	.word	0x51eb851f

080086c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086c0:	b084      	sub	sp, #16
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	f107 001c 	add.w	r0, r7, #28
 80086ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d122      	bne.n	800871e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d105      	bne.n	8008712 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa9c 	bl	8008c50 <USB_CoreReset>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	e01a      	b.n	8008754 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa90 	bl	8008c50 <USB_CoreReset>
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d106      	bne.n	8008748 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	639a      	str	r2, [r3, #56]	; 0x38
 8008746:	e005      	b.n	8008754 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	2b01      	cmp	r3, #1
 8008758:	d10b      	bne.n	8008772 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f043 0206 	orr.w	r2, r3, #6
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800877e:	b004      	add	sp, #16
 8008780:	4770      	bx	lr

08008782 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f023 0201 	bic.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d115      	bne.n	80087f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087d2:	2001      	movs	r0, #1
 80087d4:	f7f9 f93e 	bl	8001a54 <HAL_Delay>
      ms++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa28 	bl	8008c34 <USB_GetMode>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d01e      	beq.n	8008828 <USB_SetCurrentMode+0x84>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b31      	cmp	r3, #49	; 0x31
 80087ee:	d9f0      	bls.n	80087d2 <USB_SetCurrentMode+0x2e>
 80087f0:	e01a      	b.n	8008828 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d115      	bne.n	8008824 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008804:	2001      	movs	r0, #1
 8008806:	f7f9 f925 	bl	8001a54 <HAL_Delay>
      ms++;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3301      	adds	r3, #1
 800880e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa0f 	bl	8008c34 <USB_GetMode>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d005      	beq.n	8008828 <USB_SetCurrentMode+0x84>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b31      	cmp	r3, #49	; 0x31
 8008820:	d9f0      	bls.n	8008804 <USB_SetCurrentMode+0x60>
 8008822:	e001      	b.n	8008828 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e005      	b.n	8008834 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b32      	cmp	r3, #50	; 0x32
 800882c:	d101      	bne.n	8008832 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800883c:	b084      	sub	sp, #16
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800884a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008856:	2300      	movs	r3, #0
 8008858:	613b      	str	r3, [r7, #16]
 800885a:	e009      	b.n	8008870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3340      	adds	r3, #64	; 0x40
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	2200      	movs	r2, #0
 8008868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3301      	adds	r3, #1
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b0e      	cmp	r3, #14
 8008874:	d9f2      	bls.n	800885c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11c      	bne.n	80088b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800888a:	f043 0302 	orr.w	r3, r3, #2
 800888e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	e005      	b.n	80088c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088c8:	461a      	mov	r2, r3
 80088ca:	2300      	movs	r3, #0
 80088cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d4:	4619      	mov	r1, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088dc:	461a      	mov	r2, r3
 80088de:	680b      	ldr	r3, [r1, #0]
 80088e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d10c      	bne.n	8008902 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d104      	bne.n	80088f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088ee:	2100      	movs	r1, #0
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f965 	bl	8008bc0 <USB_SetDevSpeed>
 80088f6:	e008      	b.n	800890a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088f8:	2101      	movs	r1, #1
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f960 	bl	8008bc0 <USB_SetDevSpeed>
 8008900:	e003      	b.n	800890a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008902:	2103      	movs	r1, #3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f95b 	bl	8008bc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800890a:	2110      	movs	r1, #16
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8f3 	bl	8008af8 <USB_FlushTxFifo>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f91f 	bl	8008b60 <USB_FlushRxFifo>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008932:	461a      	mov	r2, r3
 8008934:	2300      	movs	r3, #0
 8008936:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893e:	461a      	mov	r2, r3
 8008940:	2300      	movs	r3, #0
 8008942:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894a:	461a      	mov	r2, r3
 800894c:	2300      	movs	r3, #0
 800894e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008950:	2300      	movs	r3, #0
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	e043      	b.n	80089de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800896c:	d118      	bne.n	80089a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10a      	bne.n	800898a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008980:	461a      	mov	r2, r3
 8008982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	e013      	b.n	80089b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008996:	461a      	mov	r2, r3
 8008998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e008      	b.n	80089b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	461a      	mov	r2, r3
 80089ae:	2300      	movs	r3, #0
 80089b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089be:	461a      	mov	r2, r3
 80089c0:	2300      	movs	r3, #0
 80089c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d0:	461a      	mov	r2, r3
 80089d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	3301      	adds	r3, #1
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d3b7      	bcc.n	8008956 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	e043      	b.n	8008a74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a02:	d118      	bne.n	8008a36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a16:	461a      	mov	r2, r3
 8008a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	e013      	b.n	8008a48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	e008      	b.n	8008a48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a42:	461a      	mov	r2, r3
 8008a44:	2300      	movs	r3, #0
 8008a46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a54:	461a      	mov	r2, r3
 8008a56:	2300      	movs	r3, #0
 8008a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	461a      	mov	r2, r3
 8008a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	3301      	adds	r3, #1
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d3b7      	bcc.n	80089ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d105      	bne.n	8008ab0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	f043 0210 	orr.w	r2, r3, #16
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699a      	ldr	r2, [r3, #24]
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <USB_DevInit+0x2b8>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f043 0208 	orr.w	r2, r3, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d107      	bne.n	8008ae4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008adc:	f043 0304 	orr.w	r3, r3, #4
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008af0:	b004      	add	sp, #16
 8008af2:	4770      	bx	lr
 8008af4:	803c3800 	.word	0x803c3800

08008af8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4a13      	ldr	r2, [pc, #76]	; (8008b5c <USB_FlushTxFifo+0x64>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d901      	bls.n	8008b18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e01b      	b.n	8008b50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	daf2      	bge.n	8008b06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	019b      	lsls	r3, r3, #6
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3301      	adds	r3, #1
 8008b34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	4a08      	ldr	r2, [pc, #32]	; (8008b5c <USB_FlushTxFifo+0x64>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d901      	bls.n	8008b42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e006      	b.n	8008b50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d0f0      	beq.n	8008b30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	00030d40 	.word	0x00030d40

08008b60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4a11      	ldr	r2, [pc, #68]	; (8008bbc <USB_FlushRxFifo+0x5c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d901      	bls.n	8008b7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e018      	b.n	8008bb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	daf2      	bge.n	8008b6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4a08      	ldr	r2, [pc, #32]	; (8008bbc <USB_FlushRxFifo+0x5c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d901      	bls.n	8008ba2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e006      	b.n	8008bb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b10      	cmp	r3, #16
 8008bac:	d0f0      	beq.n	8008b90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	00030d40 	.word	0x00030d40

08008bc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008be0:	4313      	orrs	r3, r2
 8008be2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c0c:	f023 0303 	bic.w	r3, r3, #3
 8008c10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c20:	f043 0302 	orr.w	r3, r3, #2
 8008c24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	f003 0301 	and.w	r3, r3, #1
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <USB_CoreReset+0x64>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d901      	bls.n	8008c6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e01b      	b.n	8008ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	daf2      	bge.n	8008c5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f043 0201 	orr.w	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <USB_CoreReset+0x64>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d901      	bls.n	8008c98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e006      	b.n	8008ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d0f0      	beq.n	8008c86 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	00030d40 	.word	0x00030d40

08008cb8 <siprintf>:
 8008cb8:	b40e      	push	{r1, r2, r3}
 8008cba:	b500      	push	{lr}
 8008cbc:	b09c      	sub	sp, #112	; 0x70
 8008cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008cc0:	9002      	str	r0, [sp, #8]
 8008cc2:	9006      	str	r0, [sp, #24]
 8008cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cc8:	4809      	ldr	r0, [pc, #36]	; (8008cf0 <siprintf+0x38>)
 8008cca:	9107      	str	r1, [sp, #28]
 8008ccc:	9104      	str	r1, [sp, #16]
 8008cce:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <siprintf+0x3c>)
 8008cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd4:	9105      	str	r1, [sp, #20]
 8008cd6:	6800      	ldr	r0, [r0, #0]
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	a902      	add	r1, sp, #8
 8008cdc:	f000 f89a 	bl	8008e14 <_svfiprintf_r>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	b01c      	add	sp, #112	; 0x70
 8008ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cec:	b003      	add	sp, #12
 8008cee:	4770      	bx	lr
 8008cf0:	2000005c 	.word	0x2000005c
 8008cf4:	ffff0208 	.word	0xffff0208

08008cf8 <memset>:
 8008cf8:	4402      	add	r2, r0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d100      	bne.n	8008d02 <memset+0xa>
 8008d00:	4770      	bx	lr
 8008d02:	f803 1b01 	strb.w	r1, [r3], #1
 8008d06:	e7f9      	b.n	8008cfc <memset+0x4>

08008d08 <__errno>:
 8008d08:	4b01      	ldr	r3, [pc, #4]	; (8008d10 <__errno+0x8>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	2000005c 	.word	0x2000005c

08008d14 <__libc_init_array>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	4d0d      	ldr	r5, [pc, #52]	; (8008d4c <__libc_init_array+0x38>)
 8008d18:	4c0d      	ldr	r4, [pc, #52]	; (8008d50 <__libc_init_array+0x3c>)
 8008d1a:	1b64      	subs	r4, r4, r5
 8008d1c:	10a4      	asrs	r4, r4, #2
 8008d1e:	2600      	movs	r6, #0
 8008d20:	42a6      	cmp	r6, r4
 8008d22:	d109      	bne.n	8008d38 <__libc_init_array+0x24>
 8008d24:	4d0b      	ldr	r5, [pc, #44]	; (8008d54 <__libc_init_array+0x40>)
 8008d26:	4c0c      	ldr	r4, [pc, #48]	; (8008d58 <__libc_init_array+0x44>)
 8008d28:	f000 fc6a 	bl	8009600 <_init>
 8008d2c:	1b64      	subs	r4, r4, r5
 8008d2e:	10a4      	asrs	r4, r4, #2
 8008d30:	2600      	movs	r6, #0
 8008d32:	42a6      	cmp	r6, r4
 8008d34:	d105      	bne.n	8008d42 <__libc_init_array+0x2e>
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d3c:	4798      	blx	r3
 8008d3e:	3601      	adds	r6, #1
 8008d40:	e7ee      	b.n	8008d20 <__libc_init_array+0xc>
 8008d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d46:	4798      	blx	r3
 8008d48:	3601      	adds	r6, #1
 8008d4a:	e7f2      	b.n	8008d32 <__libc_init_array+0x1e>
 8008d4c:	08009914 	.word	0x08009914
 8008d50:	08009914 	.word	0x08009914
 8008d54:	08009914 	.word	0x08009914
 8008d58:	08009918 	.word	0x08009918

08008d5c <__retarget_lock_acquire_recursive>:
 8008d5c:	4770      	bx	lr

08008d5e <__retarget_lock_release_recursive>:
 8008d5e:	4770      	bx	lr

08008d60 <__ssputs_r>:
 8008d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	688e      	ldr	r6, [r1, #8]
 8008d66:	461f      	mov	r7, r3
 8008d68:	42be      	cmp	r6, r7
 8008d6a:	680b      	ldr	r3, [r1, #0]
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	4690      	mov	r8, r2
 8008d72:	d82c      	bhi.n	8008dce <__ssputs_r+0x6e>
 8008d74:	898a      	ldrh	r2, [r1, #12]
 8008d76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d7a:	d026      	beq.n	8008dca <__ssputs_r+0x6a>
 8008d7c:	6965      	ldr	r5, [r4, #20]
 8008d7e:	6909      	ldr	r1, [r1, #16]
 8008d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d84:	eba3 0901 	sub.w	r9, r3, r1
 8008d88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d8c:	1c7b      	adds	r3, r7, #1
 8008d8e:	444b      	add	r3, r9
 8008d90:	106d      	asrs	r5, r5, #1
 8008d92:	429d      	cmp	r5, r3
 8008d94:	bf38      	it	cc
 8008d96:	461d      	movcc	r5, r3
 8008d98:	0553      	lsls	r3, r2, #21
 8008d9a:	d527      	bpl.n	8008dec <__ssputs_r+0x8c>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f000 f957 	bl	8009050 <_malloc_r>
 8008da2:	4606      	mov	r6, r0
 8008da4:	b360      	cbz	r0, 8008e00 <__ssputs_r+0xa0>
 8008da6:	6921      	ldr	r1, [r4, #16]
 8008da8:	464a      	mov	r2, r9
 8008daa:	f000 fbc7 	bl	800953c <memcpy>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	6126      	str	r6, [r4, #16]
 8008dbc:	6165      	str	r5, [r4, #20]
 8008dbe:	444e      	add	r6, r9
 8008dc0:	eba5 0509 	sub.w	r5, r5, r9
 8008dc4:	6026      	str	r6, [r4, #0]
 8008dc6:	60a5      	str	r5, [r4, #8]
 8008dc8:	463e      	mov	r6, r7
 8008dca:	42be      	cmp	r6, r7
 8008dcc:	d900      	bls.n	8008dd0 <__ssputs_r+0x70>
 8008dce:	463e      	mov	r6, r7
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	4632      	mov	r2, r6
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	f000 fb86 	bl	80094e6 <memmove>
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	1b9b      	subs	r3, r3, r6
 8008dde:	60a3      	str	r3, [r4, #8]
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	4433      	add	r3, r6
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	2000      	movs	r0, #0
 8008de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dec:	462a      	mov	r2, r5
 8008dee:	f000 fb4b 	bl	8009488 <_realloc_r>
 8008df2:	4606      	mov	r6, r0
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d1e0      	bne.n	8008dba <__ssputs_r+0x5a>
 8008df8:	6921      	ldr	r1, [r4, #16]
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	f000 fbac 	bl	8009558 <_free_r>
 8008e00:	230c      	movs	r3, #12
 8008e02:	f8ca 3000 	str.w	r3, [sl]
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e12:	e7e9      	b.n	8008de8 <__ssputs_r+0x88>

08008e14 <_svfiprintf_r>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	4698      	mov	r8, r3
 8008e1a:	898b      	ldrh	r3, [r1, #12]
 8008e1c:	061b      	lsls	r3, r3, #24
 8008e1e:	b09d      	sub	sp, #116	; 0x74
 8008e20:	4607      	mov	r7, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	4614      	mov	r4, r2
 8008e26:	d50e      	bpl.n	8008e46 <_svfiprintf_r+0x32>
 8008e28:	690b      	ldr	r3, [r1, #16]
 8008e2a:	b963      	cbnz	r3, 8008e46 <_svfiprintf_r+0x32>
 8008e2c:	2140      	movs	r1, #64	; 0x40
 8008e2e:	f000 f90f 	bl	8009050 <_malloc_r>
 8008e32:	6028      	str	r0, [r5, #0]
 8008e34:	6128      	str	r0, [r5, #16]
 8008e36:	b920      	cbnz	r0, 8008e42 <_svfiprintf_r+0x2e>
 8008e38:	230c      	movs	r3, #12
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e40:	e0d0      	b.n	8008fe4 <_svfiprintf_r+0x1d0>
 8008e42:	2340      	movs	r3, #64	; 0x40
 8008e44:	616b      	str	r3, [r5, #20]
 8008e46:	2300      	movs	r3, #0
 8008e48:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4a:	2320      	movs	r3, #32
 8008e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e54:	2330      	movs	r3, #48	; 0x30
 8008e56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ffc <_svfiprintf_r+0x1e8>
 8008e5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e5e:	f04f 0901 	mov.w	r9, #1
 8008e62:	4623      	mov	r3, r4
 8008e64:	469a      	mov	sl, r3
 8008e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e6a:	b10a      	cbz	r2, 8008e70 <_svfiprintf_r+0x5c>
 8008e6c:	2a25      	cmp	r2, #37	; 0x25
 8008e6e:	d1f9      	bne.n	8008e64 <_svfiprintf_r+0x50>
 8008e70:	ebba 0b04 	subs.w	fp, sl, r4
 8008e74:	d00b      	beq.n	8008e8e <_svfiprintf_r+0x7a>
 8008e76:	465b      	mov	r3, fp
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f7ff ff6f 	bl	8008d60 <__ssputs_r>
 8008e82:	3001      	adds	r0, #1
 8008e84:	f000 80a9 	beq.w	8008fda <_svfiprintf_r+0x1c6>
 8008e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e8a:	445a      	add	r2, fp
 8008e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80a1 	beq.w	8008fda <_svfiprintf_r+0x1c6>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ea2:	f10a 0a01 	add.w	sl, sl, #1
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	9307      	str	r3, [sp, #28]
 8008eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eae:	931a      	str	r3, [sp, #104]	; 0x68
 8008eb0:	4654      	mov	r4, sl
 8008eb2:	2205      	movs	r2, #5
 8008eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb8:	4850      	ldr	r0, [pc, #320]	; (8008ffc <_svfiprintf_r+0x1e8>)
 8008eba:	f7f7 f9b1 	bl	8000220 <memchr>
 8008ebe:	9a04      	ldr	r2, [sp, #16]
 8008ec0:	b9d8      	cbnz	r0, 8008efa <_svfiprintf_r+0xe6>
 8008ec2:	06d0      	lsls	r0, r2, #27
 8008ec4:	bf44      	itt	mi
 8008ec6:	2320      	movmi	r3, #32
 8008ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ecc:	0711      	lsls	r1, r2, #28
 8008ece:	bf44      	itt	mi
 8008ed0:	232b      	movmi	r3, #43	; 0x2b
 8008ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eda:	2b2a      	cmp	r3, #42	; 0x2a
 8008edc:	d015      	beq.n	8008f0a <_svfiprintf_r+0xf6>
 8008ede:	9a07      	ldr	r2, [sp, #28]
 8008ee0:	4654      	mov	r4, sl
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	f04f 0c0a 	mov.w	ip, #10
 8008ee8:	4621      	mov	r1, r4
 8008eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eee:	3b30      	subs	r3, #48	; 0x30
 8008ef0:	2b09      	cmp	r3, #9
 8008ef2:	d94d      	bls.n	8008f90 <_svfiprintf_r+0x17c>
 8008ef4:	b1b0      	cbz	r0, 8008f24 <_svfiprintf_r+0x110>
 8008ef6:	9207      	str	r2, [sp, #28]
 8008ef8:	e014      	b.n	8008f24 <_svfiprintf_r+0x110>
 8008efa:	eba0 0308 	sub.w	r3, r0, r8
 8008efe:	fa09 f303 	lsl.w	r3, r9, r3
 8008f02:	4313      	orrs	r3, r2
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	46a2      	mov	sl, r4
 8008f08:	e7d2      	b.n	8008eb0 <_svfiprintf_r+0x9c>
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	1d19      	adds	r1, r3, #4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	9103      	str	r1, [sp, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	bfbb      	ittet	lt
 8008f16:	425b      	neglt	r3, r3
 8008f18:	f042 0202 	orrlt.w	r2, r2, #2
 8008f1c:	9307      	strge	r3, [sp, #28]
 8008f1e:	9307      	strlt	r3, [sp, #28]
 8008f20:	bfb8      	it	lt
 8008f22:	9204      	strlt	r2, [sp, #16]
 8008f24:	7823      	ldrb	r3, [r4, #0]
 8008f26:	2b2e      	cmp	r3, #46	; 0x2e
 8008f28:	d10c      	bne.n	8008f44 <_svfiprintf_r+0x130>
 8008f2a:	7863      	ldrb	r3, [r4, #1]
 8008f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f2e:	d134      	bne.n	8008f9a <_svfiprintf_r+0x186>
 8008f30:	9b03      	ldr	r3, [sp, #12]
 8008f32:	1d1a      	adds	r2, r3, #4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	9203      	str	r2, [sp, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	bfb8      	it	lt
 8008f3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f40:	3402      	adds	r4, #2
 8008f42:	9305      	str	r3, [sp, #20]
 8008f44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800900c <_svfiprintf_r+0x1f8>
 8008f48:	7821      	ldrb	r1, [r4, #0]
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	f7f7 f967 	bl	8000220 <memchr>
 8008f52:	b138      	cbz	r0, 8008f64 <_svfiprintf_r+0x150>
 8008f54:	9b04      	ldr	r3, [sp, #16]
 8008f56:	eba0 000a 	sub.w	r0, r0, sl
 8008f5a:	2240      	movs	r2, #64	; 0x40
 8008f5c:	4082      	lsls	r2, r0
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	3401      	adds	r4, #1
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f68:	4825      	ldr	r0, [pc, #148]	; (8009000 <_svfiprintf_r+0x1ec>)
 8008f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f6e:	2206      	movs	r2, #6
 8008f70:	f7f7 f956 	bl	8000220 <memchr>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d038      	beq.n	8008fea <_svfiprintf_r+0x1d6>
 8008f78:	4b22      	ldr	r3, [pc, #136]	; (8009004 <_svfiprintf_r+0x1f0>)
 8008f7a:	bb1b      	cbnz	r3, 8008fc4 <_svfiprintf_r+0x1b0>
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	3307      	adds	r3, #7
 8008f80:	f023 0307 	bic.w	r3, r3, #7
 8008f84:	3308      	adds	r3, #8
 8008f86:	9303      	str	r3, [sp, #12]
 8008f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8a:	4433      	add	r3, r6
 8008f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8e:	e768      	b.n	8008e62 <_svfiprintf_r+0x4e>
 8008f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f94:	460c      	mov	r4, r1
 8008f96:	2001      	movs	r0, #1
 8008f98:	e7a6      	b.n	8008ee8 <_svfiprintf_r+0xd4>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	3401      	adds	r4, #1
 8008f9e:	9305      	str	r3, [sp, #20]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f04f 0c0a 	mov.w	ip, #10
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fac:	3a30      	subs	r2, #48	; 0x30
 8008fae:	2a09      	cmp	r2, #9
 8008fb0:	d903      	bls.n	8008fba <_svfiprintf_r+0x1a6>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0c6      	beq.n	8008f44 <_svfiprintf_r+0x130>
 8008fb6:	9105      	str	r1, [sp, #20]
 8008fb8:	e7c4      	b.n	8008f44 <_svfiprintf_r+0x130>
 8008fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e7f0      	b.n	8008fa6 <_svfiprintf_r+0x192>
 8008fc4:	ab03      	add	r3, sp, #12
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	462a      	mov	r2, r5
 8008fca:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <_svfiprintf_r+0x1f4>)
 8008fcc:	a904      	add	r1, sp, #16
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f3af 8000 	nop.w
 8008fd4:	1c42      	adds	r2, r0, #1
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	d1d6      	bne.n	8008f88 <_svfiprintf_r+0x174>
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	065b      	lsls	r3, r3, #25
 8008fde:	f53f af2d 	bmi.w	8008e3c <_svfiprintf_r+0x28>
 8008fe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe4:	b01d      	add	sp, #116	; 0x74
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	ab03      	add	r3, sp, #12
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <_svfiprintf_r+0x1f4>)
 8008ff2:	a904      	add	r1, sp, #16
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f000 f919 	bl	800922c <_printf_i>
 8008ffa:	e7eb      	b.n	8008fd4 <_svfiprintf_r+0x1c0>
 8008ffc:	080098d8 	.word	0x080098d8
 8009000:	080098e2 	.word	0x080098e2
 8009004:	00000000 	.word	0x00000000
 8009008:	08008d61 	.word	0x08008d61
 800900c:	080098de 	.word	0x080098de

08009010 <sbrk_aligned>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4e0e      	ldr	r6, [pc, #56]	; (800904c <sbrk_aligned+0x3c>)
 8009014:	460c      	mov	r4, r1
 8009016:	6831      	ldr	r1, [r6, #0]
 8009018:	4605      	mov	r5, r0
 800901a:	b911      	cbnz	r1, 8009022 <sbrk_aligned+0x12>
 800901c:	f000 fa7e 	bl	800951c <_sbrk_r>
 8009020:	6030      	str	r0, [r6, #0]
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	f000 fa79 	bl	800951c <_sbrk_r>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d00a      	beq.n	8009044 <sbrk_aligned+0x34>
 800902e:	1cc4      	adds	r4, r0, #3
 8009030:	f024 0403 	bic.w	r4, r4, #3
 8009034:	42a0      	cmp	r0, r4
 8009036:	d007      	beq.n	8009048 <sbrk_aligned+0x38>
 8009038:	1a21      	subs	r1, r4, r0
 800903a:	4628      	mov	r0, r5
 800903c:	f000 fa6e 	bl	800951c <_sbrk_r>
 8009040:	3001      	adds	r0, #1
 8009042:	d101      	bne.n	8009048 <sbrk_aligned+0x38>
 8009044:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009048:	4620      	mov	r0, r4
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	200190a4 	.word	0x200190a4

08009050 <_malloc_r>:
 8009050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009054:	1ccd      	adds	r5, r1, #3
 8009056:	f025 0503 	bic.w	r5, r5, #3
 800905a:	3508      	adds	r5, #8
 800905c:	2d0c      	cmp	r5, #12
 800905e:	bf38      	it	cc
 8009060:	250c      	movcc	r5, #12
 8009062:	2d00      	cmp	r5, #0
 8009064:	4607      	mov	r7, r0
 8009066:	db01      	blt.n	800906c <_malloc_r+0x1c>
 8009068:	42a9      	cmp	r1, r5
 800906a:	d905      	bls.n	8009078 <_malloc_r+0x28>
 800906c:	230c      	movs	r3, #12
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	2600      	movs	r6, #0
 8009072:	4630      	mov	r0, r6
 8009074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009078:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800914c <_malloc_r+0xfc>
 800907c:	f000 f9f8 	bl	8009470 <__malloc_lock>
 8009080:	f8d8 3000 	ldr.w	r3, [r8]
 8009084:	461c      	mov	r4, r3
 8009086:	bb5c      	cbnz	r4, 80090e0 <_malloc_r+0x90>
 8009088:	4629      	mov	r1, r5
 800908a:	4638      	mov	r0, r7
 800908c:	f7ff ffc0 	bl	8009010 <sbrk_aligned>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	4604      	mov	r4, r0
 8009094:	d155      	bne.n	8009142 <_malloc_r+0xf2>
 8009096:	f8d8 4000 	ldr.w	r4, [r8]
 800909a:	4626      	mov	r6, r4
 800909c:	2e00      	cmp	r6, #0
 800909e:	d145      	bne.n	800912c <_malloc_r+0xdc>
 80090a0:	2c00      	cmp	r4, #0
 80090a2:	d048      	beq.n	8009136 <_malloc_r+0xe6>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	4631      	mov	r1, r6
 80090a8:	4638      	mov	r0, r7
 80090aa:	eb04 0903 	add.w	r9, r4, r3
 80090ae:	f000 fa35 	bl	800951c <_sbrk_r>
 80090b2:	4581      	cmp	r9, r0
 80090b4:	d13f      	bne.n	8009136 <_malloc_r+0xe6>
 80090b6:	6821      	ldr	r1, [r4, #0]
 80090b8:	1a6d      	subs	r5, r5, r1
 80090ba:	4629      	mov	r1, r5
 80090bc:	4638      	mov	r0, r7
 80090be:	f7ff ffa7 	bl	8009010 <sbrk_aligned>
 80090c2:	3001      	adds	r0, #1
 80090c4:	d037      	beq.n	8009136 <_malloc_r+0xe6>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	442b      	add	r3, r5
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d038      	beq.n	8009146 <_malloc_r+0xf6>
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	42a2      	cmp	r2, r4
 80090d8:	d12b      	bne.n	8009132 <_malloc_r+0xe2>
 80090da:	2200      	movs	r2, #0
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	e00f      	b.n	8009100 <_malloc_r+0xb0>
 80090e0:	6822      	ldr	r2, [r4, #0]
 80090e2:	1b52      	subs	r2, r2, r5
 80090e4:	d41f      	bmi.n	8009126 <_malloc_r+0xd6>
 80090e6:	2a0b      	cmp	r2, #11
 80090e8:	d917      	bls.n	800911a <_malloc_r+0xca>
 80090ea:	1961      	adds	r1, r4, r5
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	6025      	str	r5, [r4, #0]
 80090f0:	bf18      	it	ne
 80090f2:	6059      	strne	r1, [r3, #4]
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	bf08      	it	eq
 80090f8:	f8c8 1000 	streq.w	r1, [r8]
 80090fc:	5162      	str	r2, [r4, r5]
 80090fe:	604b      	str	r3, [r1, #4]
 8009100:	4638      	mov	r0, r7
 8009102:	f104 060b 	add.w	r6, r4, #11
 8009106:	f000 f9b9 	bl	800947c <__malloc_unlock>
 800910a:	f026 0607 	bic.w	r6, r6, #7
 800910e:	1d23      	adds	r3, r4, #4
 8009110:	1af2      	subs	r2, r6, r3
 8009112:	d0ae      	beq.n	8009072 <_malloc_r+0x22>
 8009114:	1b9b      	subs	r3, r3, r6
 8009116:	50a3      	str	r3, [r4, r2]
 8009118:	e7ab      	b.n	8009072 <_malloc_r+0x22>
 800911a:	42a3      	cmp	r3, r4
 800911c:	6862      	ldr	r2, [r4, #4]
 800911e:	d1dd      	bne.n	80090dc <_malloc_r+0x8c>
 8009120:	f8c8 2000 	str.w	r2, [r8]
 8009124:	e7ec      	b.n	8009100 <_malloc_r+0xb0>
 8009126:	4623      	mov	r3, r4
 8009128:	6864      	ldr	r4, [r4, #4]
 800912a:	e7ac      	b.n	8009086 <_malloc_r+0x36>
 800912c:	4634      	mov	r4, r6
 800912e:	6876      	ldr	r6, [r6, #4]
 8009130:	e7b4      	b.n	800909c <_malloc_r+0x4c>
 8009132:	4613      	mov	r3, r2
 8009134:	e7cc      	b.n	80090d0 <_malloc_r+0x80>
 8009136:	230c      	movs	r3, #12
 8009138:	603b      	str	r3, [r7, #0]
 800913a:	4638      	mov	r0, r7
 800913c:	f000 f99e 	bl	800947c <__malloc_unlock>
 8009140:	e797      	b.n	8009072 <_malloc_r+0x22>
 8009142:	6025      	str	r5, [r4, #0]
 8009144:	e7dc      	b.n	8009100 <_malloc_r+0xb0>
 8009146:	605b      	str	r3, [r3, #4]
 8009148:	deff      	udf	#255	; 0xff
 800914a:	bf00      	nop
 800914c:	200190a0 	.word	0x200190a0

08009150 <_printf_common>:
 8009150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009154:	4616      	mov	r6, r2
 8009156:	4699      	mov	r9, r3
 8009158:	688a      	ldr	r2, [r1, #8]
 800915a:	690b      	ldr	r3, [r1, #16]
 800915c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009160:	4293      	cmp	r3, r2
 8009162:	bfb8      	it	lt
 8009164:	4613      	movlt	r3, r2
 8009166:	6033      	str	r3, [r6, #0]
 8009168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800916c:	4607      	mov	r7, r0
 800916e:	460c      	mov	r4, r1
 8009170:	b10a      	cbz	r2, 8009176 <_printf_common+0x26>
 8009172:	3301      	adds	r3, #1
 8009174:	6033      	str	r3, [r6, #0]
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	0699      	lsls	r1, r3, #26
 800917a:	bf42      	ittt	mi
 800917c:	6833      	ldrmi	r3, [r6, #0]
 800917e:	3302      	addmi	r3, #2
 8009180:	6033      	strmi	r3, [r6, #0]
 8009182:	6825      	ldr	r5, [r4, #0]
 8009184:	f015 0506 	ands.w	r5, r5, #6
 8009188:	d106      	bne.n	8009198 <_printf_common+0x48>
 800918a:	f104 0a19 	add.w	sl, r4, #25
 800918e:	68e3      	ldr	r3, [r4, #12]
 8009190:	6832      	ldr	r2, [r6, #0]
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	42ab      	cmp	r3, r5
 8009196:	dc26      	bgt.n	80091e6 <_printf_common+0x96>
 8009198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800919c:	1e13      	subs	r3, r2, #0
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	bf18      	it	ne
 80091a2:	2301      	movne	r3, #1
 80091a4:	0692      	lsls	r2, r2, #26
 80091a6:	d42b      	bmi.n	8009200 <_printf_common+0xb0>
 80091a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091ac:	4649      	mov	r1, r9
 80091ae:	4638      	mov	r0, r7
 80091b0:	47c0      	blx	r8
 80091b2:	3001      	adds	r0, #1
 80091b4:	d01e      	beq.n	80091f4 <_printf_common+0xa4>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	6922      	ldr	r2, [r4, #16]
 80091ba:	f003 0306 	and.w	r3, r3, #6
 80091be:	2b04      	cmp	r3, #4
 80091c0:	bf02      	ittt	eq
 80091c2:	68e5      	ldreq	r5, [r4, #12]
 80091c4:	6833      	ldreq	r3, [r6, #0]
 80091c6:	1aed      	subeq	r5, r5, r3
 80091c8:	68a3      	ldr	r3, [r4, #8]
 80091ca:	bf0c      	ite	eq
 80091cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091d0:	2500      	movne	r5, #0
 80091d2:	4293      	cmp	r3, r2
 80091d4:	bfc4      	itt	gt
 80091d6:	1a9b      	subgt	r3, r3, r2
 80091d8:	18ed      	addgt	r5, r5, r3
 80091da:	2600      	movs	r6, #0
 80091dc:	341a      	adds	r4, #26
 80091de:	42b5      	cmp	r5, r6
 80091e0:	d11a      	bne.n	8009218 <_printf_common+0xc8>
 80091e2:	2000      	movs	r0, #0
 80091e4:	e008      	b.n	80091f8 <_printf_common+0xa8>
 80091e6:	2301      	movs	r3, #1
 80091e8:	4652      	mov	r2, sl
 80091ea:	4649      	mov	r1, r9
 80091ec:	4638      	mov	r0, r7
 80091ee:	47c0      	blx	r8
 80091f0:	3001      	adds	r0, #1
 80091f2:	d103      	bne.n	80091fc <_printf_common+0xac>
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fc:	3501      	adds	r5, #1
 80091fe:	e7c6      	b.n	800918e <_printf_common+0x3e>
 8009200:	18e1      	adds	r1, r4, r3
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	2030      	movs	r0, #48	; 0x30
 8009206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800920a:	4422      	add	r2, r4
 800920c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009214:	3302      	adds	r3, #2
 8009216:	e7c7      	b.n	80091a8 <_printf_common+0x58>
 8009218:	2301      	movs	r3, #1
 800921a:	4622      	mov	r2, r4
 800921c:	4649      	mov	r1, r9
 800921e:	4638      	mov	r0, r7
 8009220:	47c0      	blx	r8
 8009222:	3001      	adds	r0, #1
 8009224:	d0e6      	beq.n	80091f4 <_printf_common+0xa4>
 8009226:	3601      	adds	r6, #1
 8009228:	e7d9      	b.n	80091de <_printf_common+0x8e>
	...

0800922c <_printf_i>:
 800922c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	7e0f      	ldrb	r7, [r1, #24]
 8009232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009234:	2f78      	cmp	r7, #120	; 0x78
 8009236:	4691      	mov	r9, r2
 8009238:	4680      	mov	r8, r0
 800923a:	460c      	mov	r4, r1
 800923c:	469a      	mov	sl, r3
 800923e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009242:	d807      	bhi.n	8009254 <_printf_i+0x28>
 8009244:	2f62      	cmp	r7, #98	; 0x62
 8009246:	d80a      	bhi.n	800925e <_printf_i+0x32>
 8009248:	2f00      	cmp	r7, #0
 800924a:	f000 80d4 	beq.w	80093f6 <_printf_i+0x1ca>
 800924e:	2f58      	cmp	r7, #88	; 0x58
 8009250:	f000 80c0 	beq.w	80093d4 <_printf_i+0x1a8>
 8009254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800925c:	e03a      	b.n	80092d4 <_printf_i+0xa8>
 800925e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009262:	2b15      	cmp	r3, #21
 8009264:	d8f6      	bhi.n	8009254 <_printf_i+0x28>
 8009266:	a101      	add	r1, pc, #4	; (adr r1, 800926c <_printf_i+0x40>)
 8009268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800926c:	080092c5 	.word	0x080092c5
 8009270:	080092d9 	.word	0x080092d9
 8009274:	08009255 	.word	0x08009255
 8009278:	08009255 	.word	0x08009255
 800927c:	08009255 	.word	0x08009255
 8009280:	08009255 	.word	0x08009255
 8009284:	080092d9 	.word	0x080092d9
 8009288:	08009255 	.word	0x08009255
 800928c:	08009255 	.word	0x08009255
 8009290:	08009255 	.word	0x08009255
 8009294:	08009255 	.word	0x08009255
 8009298:	080093dd 	.word	0x080093dd
 800929c:	08009305 	.word	0x08009305
 80092a0:	08009397 	.word	0x08009397
 80092a4:	08009255 	.word	0x08009255
 80092a8:	08009255 	.word	0x08009255
 80092ac:	080093ff 	.word	0x080093ff
 80092b0:	08009255 	.word	0x08009255
 80092b4:	08009305 	.word	0x08009305
 80092b8:	08009255 	.word	0x08009255
 80092bc:	08009255 	.word	0x08009255
 80092c0:	0800939f 	.word	0x0800939f
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	1d1a      	adds	r2, r3, #4
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	602a      	str	r2, [r5, #0]
 80092cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092d4:	2301      	movs	r3, #1
 80092d6:	e09f      	b.n	8009418 <_printf_i+0x1ec>
 80092d8:	6820      	ldr	r0, [r4, #0]
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	0607      	lsls	r7, r0, #24
 80092de:	f103 0104 	add.w	r1, r3, #4
 80092e2:	6029      	str	r1, [r5, #0]
 80092e4:	d501      	bpl.n	80092ea <_printf_i+0xbe>
 80092e6:	681e      	ldr	r6, [r3, #0]
 80092e8:	e003      	b.n	80092f2 <_printf_i+0xc6>
 80092ea:	0646      	lsls	r6, r0, #25
 80092ec:	d5fb      	bpl.n	80092e6 <_printf_i+0xba>
 80092ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	da03      	bge.n	80092fe <_printf_i+0xd2>
 80092f6:	232d      	movs	r3, #45	; 0x2d
 80092f8:	4276      	negs	r6, r6
 80092fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092fe:	485a      	ldr	r0, [pc, #360]	; (8009468 <_printf_i+0x23c>)
 8009300:	230a      	movs	r3, #10
 8009302:	e012      	b.n	800932a <_printf_i+0xfe>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	6820      	ldr	r0, [r4, #0]
 8009308:	1d19      	adds	r1, r3, #4
 800930a:	6029      	str	r1, [r5, #0]
 800930c:	0605      	lsls	r5, r0, #24
 800930e:	d501      	bpl.n	8009314 <_printf_i+0xe8>
 8009310:	681e      	ldr	r6, [r3, #0]
 8009312:	e002      	b.n	800931a <_printf_i+0xee>
 8009314:	0641      	lsls	r1, r0, #25
 8009316:	d5fb      	bpl.n	8009310 <_printf_i+0xe4>
 8009318:	881e      	ldrh	r6, [r3, #0]
 800931a:	4853      	ldr	r0, [pc, #332]	; (8009468 <_printf_i+0x23c>)
 800931c:	2f6f      	cmp	r7, #111	; 0x6f
 800931e:	bf0c      	ite	eq
 8009320:	2308      	moveq	r3, #8
 8009322:	230a      	movne	r3, #10
 8009324:	2100      	movs	r1, #0
 8009326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800932a:	6865      	ldr	r5, [r4, #4]
 800932c:	60a5      	str	r5, [r4, #8]
 800932e:	2d00      	cmp	r5, #0
 8009330:	bfa2      	ittt	ge
 8009332:	6821      	ldrge	r1, [r4, #0]
 8009334:	f021 0104 	bicge.w	r1, r1, #4
 8009338:	6021      	strge	r1, [r4, #0]
 800933a:	b90e      	cbnz	r6, 8009340 <_printf_i+0x114>
 800933c:	2d00      	cmp	r5, #0
 800933e:	d04b      	beq.n	80093d8 <_printf_i+0x1ac>
 8009340:	4615      	mov	r5, r2
 8009342:	fbb6 f1f3 	udiv	r1, r6, r3
 8009346:	fb03 6711 	mls	r7, r3, r1, r6
 800934a:	5dc7      	ldrb	r7, [r0, r7]
 800934c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009350:	4637      	mov	r7, r6
 8009352:	42bb      	cmp	r3, r7
 8009354:	460e      	mov	r6, r1
 8009356:	d9f4      	bls.n	8009342 <_printf_i+0x116>
 8009358:	2b08      	cmp	r3, #8
 800935a:	d10b      	bne.n	8009374 <_printf_i+0x148>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	07de      	lsls	r6, r3, #31
 8009360:	d508      	bpl.n	8009374 <_printf_i+0x148>
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	6861      	ldr	r1, [r4, #4]
 8009366:	4299      	cmp	r1, r3
 8009368:	bfde      	ittt	le
 800936a:	2330      	movle	r3, #48	; 0x30
 800936c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009370:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009374:	1b52      	subs	r2, r2, r5
 8009376:	6122      	str	r2, [r4, #16]
 8009378:	f8cd a000 	str.w	sl, [sp]
 800937c:	464b      	mov	r3, r9
 800937e:	aa03      	add	r2, sp, #12
 8009380:	4621      	mov	r1, r4
 8009382:	4640      	mov	r0, r8
 8009384:	f7ff fee4 	bl	8009150 <_printf_common>
 8009388:	3001      	adds	r0, #1
 800938a:	d14a      	bne.n	8009422 <_printf_i+0x1f6>
 800938c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009390:	b004      	add	sp, #16
 8009392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	f043 0320 	orr.w	r3, r3, #32
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	4833      	ldr	r0, [pc, #204]	; (800946c <_printf_i+0x240>)
 80093a0:	2778      	movs	r7, #120	; 0x78
 80093a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	6829      	ldr	r1, [r5, #0]
 80093aa:	061f      	lsls	r7, r3, #24
 80093ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80093b0:	d402      	bmi.n	80093b8 <_printf_i+0x18c>
 80093b2:	065f      	lsls	r7, r3, #25
 80093b4:	bf48      	it	mi
 80093b6:	b2b6      	uxthmi	r6, r6
 80093b8:	07df      	lsls	r7, r3, #31
 80093ba:	bf48      	it	mi
 80093bc:	f043 0320 	orrmi.w	r3, r3, #32
 80093c0:	6029      	str	r1, [r5, #0]
 80093c2:	bf48      	it	mi
 80093c4:	6023      	strmi	r3, [r4, #0]
 80093c6:	b91e      	cbnz	r6, 80093d0 <_printf_i+0x1a4>
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	f023 0320 	bic.w	r3, r3, #32
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	2310      	movs	r3, #16
 80093d2:	e7a7      	b.n	8009324 <_printf_i+0xf8>
 80093d4:	4824      	ldr	r0, [pc, #144]	; (8009468 <_printf_i+0x23c>)
 80093d6:	e7e4      	b.n	80093a2 <_printf_i+0x176>
 80093d8:	4615      	mov	r5, r2
 80093da:	e7bd      	b.n	8009358 <_printf_i+0x12c>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	6826      	ldr	r6, [r4, #0]
 80093e0:	6961      	ldr	r1, [r4, #20]
 80093e2:	1d18      	adds	r0, r3, #4
 80093e4:	6028      	str	r0, [r5, #0]
 80093e6:	0635      	lsls	r5, r6, #24
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	d501      	bpl.n	80093f0 <_printf_i+0x1c4>
 80093ec:	6019      	str	r1, [r3, #0]
 80093ee:	e002      	b.n	80093f6 <_printf_i+0x1ca>
 80093f0:	0670      	lsls	r0, r6, #25
 80093f2:	d5fb      	bpl.n	80093ec <_printf_i+0x1c0>
 80093f4:	8019      	strh	r1, [r3, #0]
 80093f6:	2300      	movs	r3, #0
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	4615      	mov	r5, r2
 80093fc:	e7bc      	b.n	8009378 <_printf_i+0x14c>
 80093fe:	682b      	ldr	r3, [r5, #0]
 8009400:	1d1a      	adds	r2, r3, #4
 8009402:	602a      	str	r2, [r5, #0]
 8009404:	681d      	ldr	r5, [r3, #0]
 8009406:	6862      	ldr	r2, [r4, #4]
 8009408:	2100      	movs	r1, #0
 800940a:	4628      	mov	r0, r5
 800940c:	f7f6 ff08 	bl	8000220 <memchr>
 8009410:	b108      	cbz	r0, 8009416 <_printf_i+0x1ea>
 8009412:	1b40      	subs	r0, r0, r5
 8009414:	6060      	str	r0, [r4, #4]
 8009416:	6863      	ldr	r3, [r4, #4]
 8009418:	6123      	str	r3, [r4, #16]
 800941a:	2300      	movs	r3, #0
 800941c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009420:	e7aa      	b.n	8009378 <_printf_i+0x14c>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	462a      	mov	r2, r5
 8009426:	4649      	mov	r1, r9
 8009428:	4640      	mov	r0, r8
 800942a:	47d0      	blx	sl
 800942c:	3001      	adds	r0, #1
 800942e:	d0ad      	beq.n	800938c <_printf_i+0x160>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	079b      	lsls	r3, r3, #30
 8009434:	d413      	bmi.n	800945e <_printf_i+0x232>
 8009436:	68e0      	ldr	r0, [r4, #12]
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	4298      	cmp	r0, r3
 800943c:	bfb8      	it	lt
 800943e:	4618      	movlt	r0, r3
 8009440:	e7a6      	b.n	8009390 <_printf_i+0x164>
 8009442:	2301      	movs	r3, #1
 8009444:	4632      	mov	r2, r6
 8009446:	4649      	mov	r1, r9
 8009448:	4640      	mov	r0, r8
 800944a:	47d0      	blx	sl
 800944c:	3001      	adds	r0, #1
 800944e:	d09d      	beq.n	800938c <_printf_i+0x160>
 8009450:	3501      	adds	r5, #1
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	9903      	ldr	r1, [sp, #12]
 8009456:	1a5b      	subs	r3, r3, r1
 8009458:	42ab      	cmp	r3, r5
 800945a:	dcf2      	bgt.n	8009442 <_printf_i+0x216>
 800945c:	e7eb      	b.n	8009436 <_printf_i+0x20a>
 800945e:	2500      	movs	r5, #0
 8009460:	f104 0619 	add.w	r6, r4, #25
 8009464:	e7f5      	b.n	8009452 <_printf_i+0x226>
 8009466:	bf00      	nop
 8009468:	080098e9 	.word	0x080098e9
 800946c:	080098fa 	.word	0x080098fa

08009470 <__malloc_lock>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__malloc_lock+0x8>)
 8009472:	f7ff bc73 	b.w	8008d5c <__retarget_lock_acquire_recursive>
 8009476:	bf00      	nop
 8009478:	2001909c 	.word	0x2001909c

0800947c <__malloc_unlock>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__malloc_unlock+0x8>)
 800947e:	f7ff bc6e 	b.w	8008d5e <__retarget_lock_release_recursive>
 8009482:	bf00      	nop
 8009484:	2001909c 	.word	0x2001909c

08009488 <_realloc_r>:
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	4680      	mov	r8, r0
 800948e:	4614      	mov	r4, r2
 8009490:	460e      	mov	r6, r1
 8009492:	b921      	cbnz	r1, 800949e <_realloc_r+0x16>
 8009494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009498:	4611      	mov	r1, r2
 800949a:	f7ff bdd9 	b.w	8009050 <_malloc_r>
 800949e:	b92a      	cbnz	r2, 80094ac <_realloc_r+0x24>
 80094a0:	f000 f85a 	bl	8009558 <_free_r>
 80094a4:	4625      	mov	r5, r4
 80094a6:	4628      	mov	r0, r5
 80094a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ac:	f000 f8a0 	bl	80095f0 <_malloc_usable_size_r>
 80094b0:	4284      	cmp	r4, r0
 80094b2:	4607      	mov	r7, r0
 80094b4:	d802      	bhi.n	80094bc <_realloc_r+0x34>
 80094b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ba:	d812      	bhi.n	80094e2 <_realloc_r+0x5a>
 80094bc:	4621      	mov	r1, r4
 80094be:	4640      	mov	r0, r8
 80094c0:	f7ff fdc6 	bl	8009050 <_malloc_r>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0ed      	beq.n	80094a6 <_realloc_r+0x1e>
 80094ca:	42bc      	cmp	r4, r7
 80094cc:	4622      	mov	r2, r4
 80094ce:	4631      	mov	r1, r6
 80094d0:	bf28      	it	cs
 80094d2:	463a      	movcs	r2, r7
 80094d4:	f000 f832 	bl	800953c <memcpy>
 80094d8:	4631      	mov	r1, r6
 80094da:	4640      	mov	r0, r8
 80094dc:	f000 f83c 	bl	8009558 <_free_r>
 80094e0:	e7e1      	b.n	80094a6 <_realloc_r+0x1e>
 80094e2:	4635      	mov	r5, r6
 80094e4:	e7df      	b.n	80094a6 <_realloc_r+0x1e>

080094e6 <memmove>:
 80094e6:	4288      	cmp	r0, r1
 80094e8:	b510      	push	{r4, lr}
 80094ea:	eb01 0402 	add.w	r4, r1, r2
 80094ee:	d902      	bls.n	80094f6 <memmove+0x10>
 80094f0:	4284      	cmp	r4, r0
 80094f2:	4623      	mov	r3, r4
 80094f4:	d807      	bhi.n	8009506 <memmove+0x20>
 80094f6:	1e43      	subs	r3, r0, #1
 80094f8:	42a1      	cmp	r1, r4
 80094fa:	d008      	beq.n	800950e <memmove+0x28>
 80094fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009500:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009504:	e7f8      	b.n	80094f8 <memmove+0x12>
 8009506:	4402      	add	r2, r0
 8009508:	4601      	mov	r1, r0
 800950a:	428a      	cmp	r2, r1
 800950c:	d100      	bne.n	8009510 <memmove+0x2a>
 800950e:	bd10      	pop	{r4, pc}
 8009510:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009514:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009518:	e7f7      	b.n	800950a <memmove+0x24>
	...

0800951c <_sbrk_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4d06      	ldr	r5, [pc, #24]	; (8009538 <_sbrk_r+0x1c>)
 8009520:	2300      	movs	r3, #0
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	f7f8 f9b0 	bl	800188c <_sbrk>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_sbrk_r+0x1a>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_sbrk_r+0x1a>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	200190a8 	.word	0x200190a8

0800953c <memcpy>:
 800953c:	440a      	add	r2, r1
 800953e:	4291      	cmp	r1, r2
 8009540:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009544:	d100      	bne.n	8009548 <memcpy+0xc>
 8009546:	4770      	bx	lr
 8009548:	b510      	push	{r4, lr}
 800954a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800954e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009552:	4291      	cmp	r1, r2
 8009554:	d1f9      	bne.n	800954a <memcpy+0xe>
 8009556:	bd10      	pop	{r4, pc}

08009558 <_free_r>:
 8009558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800955a:	2900      	cmp	r1, #0
 800955c:	d044      	beq.n	80095e8 <_free_r+0x90>
 800955e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009562:	9001      	str	r0, [sp, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	f1a1 0404 	sub.w	r4, r1, #4
 800956a:	bfb8      	it	lt
 800956c:	18e4      	addlt	r4, r4, r3
 800956e:	f7ff ff7f 	bl	8009470 <__malloc_lock>
 8009572:	4a1e      	ldr	r2, [pc, #120]	; (80095ec <_free_r+0x94>)
 8009574:	9801      	ldr	r0, [sp, #4]
 8009576:	6813      	ldr	r3, [r2, #0]
 8009578:	b933      	cbnz	r3, 8009588 <_free_r+0x30>
 800957a:	6063      	str	r3, [r4, #4]
 800957c:	6014      	str	r4, [r2, #0]
 800957e:	b003      	add	sp, #12
 8009580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009584:	f7ff bf7a 	b.w	800947c <__malloc_unlock>
 8009588:	42a3      	cmp	r3, r4
 800958a:	d908      	bls.n	800959e <_free_r+0x46>
 800958c:	6825      	ldr	r5, [r4, #0]
 800958e:	1961      	adds	r1, r4, r5
 8009590:	428b      	cmp	r3, r1
 8009592:	bf01      	itttt	eq
 8009594:	6819      	ldreq	r1, [r3, #0]
 8009596:	685b      	ldreq	r3, [r3, #4]
 8009598:	1949      	addeq	r1, r1, r5
 800959a:	6021      	streq	r1, [r4, #0]
 800959c:	e7ed      	b.n	800957a <_free_r+0x22>
 800959e:	461a      	mov	r2, r3
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	b10b      	cbz	r3, 80095a8 <_free_r+0x50>
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	d9fa      	bls.n	800959e <_free_r+0x46>
 80095a8:	6811      	ldr	r1, [r2, #0]
 80095aa:	1855      	adds	r5, r2, r1
 80095ac:	42a5      	cmp	r5, r4
 80095ae:	d10b      	bne.n	80095c8 <_free_r+0x70>
 80095b0:	6824      	ldr	r4, [r4, #0]
 80095b2:	4421      	add	r1, r4
 80095b4:	1854      	adds	r4, r2, r1
 80095b6:	42a3      	cmp	r3, r4
 80095b8:	6011      	str	r1, [r2, #0]
 80095ba:	d1e0      	bne.n	800957e <_free_r+0x26>
 80095bc:	681c      	ldr	r4, [r3, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	6053      	str	r3, [r2, #4]
 80095c2:	440c      	add	r4, r1
 80095c4:	6014      	str	r4, [r2, #0]
 80095c6:	e7da      	b.n	800957e <_free_r+0x26>
 80095c8:	d902      	bls.n	80095d0 <_free_r+0x78>
 80095ca:	230c      	movs	r3, #12
 80095cc:	6003      	str	r3, [r0, #0]
 80095ce:	e7d6      	b.n	800957e <_free_r+0x26>
 80095d0:	6825      	ldr	r5, [r4, #0]
 80095d2:	1961      	adds	r1, r4, r5
 80095d4:	428b      	cmp	r3, r1
 80095d6:	bf04      	itt	eq
 80095d8:	6819      	ldreq	r1, [r3, #0]
 80095da:	685b      	ldreq	r3, [r3, #4]
 80095dc:	6063      	str	r3, [r4, #4]
 80095de:	bf04      	itt	eq
 80095e0:	1949      	addeq	r1, r1, r5
 80095e2:	6021      	streq	r1, [r4, #0]
 80095e4:	6054      	str	r4, [r2, #4]
 80095e6:	e7ca      	b.n	800957e <_free_r+0x26>
 80095e8:	b003      	add	sp, #12
 80095ea:	bd30      	pop	{r4, r5, pc}
 80095ec:	200190a0 	.word	0x200190a0

080095f0 <_malloc_usable_size_r>:
 80095f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f4:	1f18      	subs	r0, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bfbc      	itt	lt
 80095fa:	580b      	ldrlt	r3, [r1, r0]
 80095fc:	18c0      	addlt	r0, r0, r3
 80095fe:	4770      	bx	lr

08009600 <_init>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr

0800960c <_fini>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	bf00      	nop
 8009610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009612:	bc08      	pop	{r3}
 8009614:	469e      	mov	lr, r3
 8009616:	4770      	bx	lr
