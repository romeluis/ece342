
bonus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004048  08004048  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004050  08004050  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  2000000c  08004064  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08004064  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138ef  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261d  00000000  00000000  0003396e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00035f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e23  00000000  00000000  00037168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220c0  00000000  00000000  00037f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001575b  00000000  00000000  0005a04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d18b0  00000000  00000000  0006f7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dbc  00000000  00000000  00141058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00145e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004018 	.word	0x08004018

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004018 	.word	0x08004018

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fd66 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f928 	bl	800075c <SystemClock_Config>
  //HAL_GPIO_TogglePin(GPIOG, A_YELLOW_Pin);
  //HAL_GPIO_TogglePin(A_RED_GPIO_Port, A_RED_Pin);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa4e 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000510:	f000 f990 	bl	8000834 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f9f2 	bl	80008fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 fa1a 	bl	8000950 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 800051c:	f000 f9b8 	bl	8000890 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //Set Up States
  A_Green_State.mode = 'G';
 8000520:	4b7b      	ldr	r3, [pc, #492]	; (8000710 <main+0x210>)
 8000522:	2247      	movs	r2, #71	; 0x47
 8000524:	701a      	strb	r2, [r3, #0]
  A_Green_State.maxTick = 10;
 8000526:	4b7a      	ldr	r3, [pc, #488]	; (8000710 <main+0x210>)
 8000528:	220a      	movs	r2, #10
 800052a:	605a      	str	r2, [r3, #4]
  A_Green_State.currentTick = 0;
 800052c:	4b78      	ldr	r3, [pc, #480]	; (8000710 <main+0x210>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  A_Green_State.nextState = &A_Yellow_State;
 8000532:	4b77      	ldr	r3, [pc, #476]	; (8000710 <main+0x210>)
 8000534:	4a77      	ldr	r2, [pc, #476]	; (8000714 <main+0x214>)
 8000536:	60da      	str	r2, [r3, #12]

  A_Yellow_State.mode = 'Y';
 8000538:	4b76      	ldr	r3, [pc, #472]	; (8000714 <main+0x214>)
 800053a:	2259      	movs	r2, #89	; 0x59
 800053c:	701a      	strb	r2, [r3, #0]
  A_Yellow_State.maxTick = 2;
 800053e:	4b75      	ldr	r3, [pc, #468]	; (8000714 <main+0x214>)
 8000540:	2202      	movs	r2, #2
 8000542:	605a      	str	r2, [r3, #4]
  A_Yellow_State.currentTick = 0;
 8000544:	4b73      	ldr	r3, [pc, #460]	; (8000714 <main+0x214>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  A_Yellow_State.nextState = &A_Red_State;
 800054a:	4b72      	ldr	r3, [pc, #456]	; (8000714 <main+0x214>)
 800054c:	4a72      	ldr	r2, [pc, #456]	; (8000718 <main+0x218>)
 800054e:	60da      	str	r2, [r3, #12]

  A_Red_State.mode = 'R';
 8000550:	4b71      	ldr	r3, [pc, #452]	; (8000718 <main+0x218>)
 8000552:	2252      	movs	r2, #82	; 0x52
 8000554:	701a      	strb	r2, [r3, #0]
  A_Red_State.maxTick = 12;
 8000556:	4b70      	ldr	r3, [pc, #448]	; (8000718 <main+0x218>)
 8000558:	220c      	movs	r2, #12
 800055a:	605a      	str	r2, [r3, #4]
  A_Red_State.currentTick = 0;
 800055c:	4b6e      	ldr	r3, [pc, #440]	; (8000718 <main+0x218>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  A_Red_State.nextState = &A_Green_State;
 8000562:	4b6d      	ldr	r3, [pc, #436]	; (8000718 <main+0x218>)
 8000564:	4a6a      	ldr	r2, [pc, #424]	; (8000710 <main+0x210>)
 8000566:	60da      	str	r2, [r3, #12]

  	B_Green_State.mode = 'G';
 8000568:	4b6c      	ldr	r3, [pc, #432]	; (800071c <main+0x21c>)
 800056a:	2247      	movs	r2, #71	; 0x47
 800056c:	701a      	strb	r2, [r3, #0]
	B_Green_State.maxTick = 10;
 800056e:	4b6b      	ldr	r3, [pc, #428]	; (800071c <main+0x21c>)
 8000570:	220a      	movs	r2, #10
 8000572:	605a      	str	r2, [r3, #4]
	B_Green_State.currentTick = 0;
 8000574:	4b69      	ldr	r3, [pc, #420]	; (800071c <main+0x21c>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
	B_Green_State.nextState = &B_Yellow_State;
 800057a:	4b68      	ldr	r3, [pc, #416]	; (800071c <main+0x21c>)
 800057c:	4a68      	ldr	r2, [pc, #416]	; (8000720 <main+0x220>)
 800057e:	60da      	str	r2, [r3, #12]

	B_Yellow_State.mode = 'Y';
 8000580:	4b67      	ldr	r3, [pc, #412]	; (8000720 <main+0x220>)
 8000582:	2259      	movs	r2, #89	; 0x59
 8000584:	701a      	strb	r2, [r3, #0]
	B_Yellow_State.maxTick = 2;
 8000586:	4b66      	ldr	r3, [pc, #408]	; (8000720 <main+0x220>)
 8000588:	2202      	movs	r2, #2
 800058a:	605a      	str	r2, [r3, #4]
	B_Yellow_State.currentTick = 0;
 800058c:	4b64      	ldr	r3, [pc, #400]	; (8000720 <main+0x220>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
	B_Yellow_State.nextState = &B_Red_State;
 8000592:	4b63      	ldr	r3, [pc, #396]	; (8000720 <main+0x220>)
 8000594:	4a63      	ldr	r2, [pc, #396]	; (8000724 <main+0x224>)
 8000596:	60da      	str	r2, [r3, #12]

	B_Red_State.mode = 'R';
 8000598:	4b62      	ldr	r3, [pc, #392]	; (8000724 <main+0x224>)
 800059a:	2252      	movs	r2, #82	; 0x52
 800059c:	701a      	strb	r2, [r3, #0]
	B_Red_State.maxTick = 12;
 800059e:	4b61      	ldr	r3, [pc, #388]	; (8000724 <main+0x224>)
 80005a0:	220c      	movs	r2, #12
 80005a2:	605a      	str	r2, [r3, #4]
	B_Red_State.currentTick = 0;
 80005a4:	4b5f      	ldr	r3, [pc, #380]	; (8000724 <main+0x224>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
	B_Red_State.nextState = &B_Green_State;
 80005aa:	4b5e      	ldr	r3, [pc, #376]	; (8000724 <main+0x224>)
 80005ac:	4a5b      	ldr	r2, [pc, #364]	; (800071c <main+0x21c>)
 80005ae:	60da      	str	r2, [r3, #12]

  A_Road_Current_State = &A_Green_State;
 80005b0:	4b5d      	ldr	r3, [pc, #372]	; (8000728 <main+0x228>)
 80005b2:	4a57      	ldr	r2, [pc, #348]	; (8000710 <main+0x210>)
 80005b4:	601a      	str	r2, [r3, #0]
  A_Green = 1;
 80005b6:	4b5d      	ldr	r3, [pc, #372]	; (800072c <main+0x22c>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOG, A_GREEN_Pin);
 80005bc:	2104      	movs	r1, #4
 80005be:	485c      	ldr	r0, [pc, #368]	; (8000730 <main+0x230>)
 80005c0:	f001 f85d 	bl	800167e <HAL_GPIO_TogglePin>

  B_Road_Current_State = &B_Red_State;
 80005c4:	4b5b      	ldr	r3, [pc, #364]	; (8000734 <main+0x234>)
 80005c6:	4a57      	ldr	r2, [pc, #348]	; (8000724 <main+0x224>)
 80005c8:	601a      	str	r2, [r3, #0]
  B_Red = 1;
 80005ca:	4b5b      	ldr	r3, [pc, #364]	; (8000738 <main+0x238>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOF, B_RED_Pin);
 80005d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d4:	4859      	ldr	r0, [pc, #356]	; (800073c <main+0x23c>)
 80005d6:	f001 f852 	bl	800167e <HAL_GPIO_TogglePin>

  //Start Clock
  HAL_TIM_Base_Start_IT(&htim6);
 80005da:	4859      	ldr	r0, [pc, #356]	; (8000740 <main+0x240>)
 80005dc:	f002 fc58 	bl	8002e90 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Update A
	  if (A_Road_Current_State->mode == 'G') {
 80005e0:	4b51      	ldr	r3, [pc, #324]	; (8000728 <main+0x228>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b47      	cmp	r3, #71	; 0x47
 80005e8:	d112      	bne.n	8000610 <main+0x110>
	  		  if (A_Green != 1) {
 80005ea:	4b50      	ldr	r3, [pc, #320]	; (800072c <main+0x22c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d03d      	beq.n	800066e <main+0x16e>
	  			  HAL_GPIO_TogglePin(GPIOG, A_GREEN_Pin);
 80005f2:	2104      	movs	r1, #4
 80005f4:	484e      	ldr	r0, [pc, #312]	; (8000730 <main+0x230>)
 80005f6:	f001 f842 	bl	800167e <HAL_GPIO_TogglePin>
	  			  HAL_GPIO_TogglePin(A_RED_GPIO_Port, A_RED_Pin);
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	4851      	ldr	r0, [pc, #324]	; (8000744 <main+0x244>)
 80005fe:	f001 f83e 	bl	800167e <HAL_GPIO_TogglePin>
	  			  A_Red = 0;
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <main+0x248>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	  			  A_Green = 1;
 8000608:	4b48      	ldr	r3, [pc, #288]	; (800072c <main+0x22c>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	e02e      	b.n	800066e <main+0x16e>
	  		  }
	  	  } else if (A_Road_Current_State->mode == 'Y') {
 8000610:	4b45      	ldr	r3, [pc, #276]	; (8000728 <main+0x228>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b59      	cmp	r3, #89	; 0x59
 8000618:	d112      	bne.n	8000640 <main+0x140>
	  		  if (A_Yellow != 1) {
 800061a:	4b4c      	ldr	r3, [pc, #304]	; (800074c <main+0x24c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d025      	beq.n	800066e <main+0x16e>
	  			  HAL_GPIO_TogglePin(GPIOG, A_YELLOW_Pin);
 8000622:	2108      	movs	r1, #8
 8000624:	4842      	ldr	r0, [pc, #264]	; (8000730 <main+0x230>)
 8000626:	f001 f82a 	bl	800167e <HAL_GPIO_TogglePin>
	  			  HAL_GPIO_TogglePin(GPIOG, A_GREEN_Pin);
 800062a:	2104      	movs	r1, #4
 800062c:	4840      	ldr	r0, [pc, #256]	; (8000730 <main+0x230>)
 800062e:	f001 f826 	bl	800167e <HAL_GPIO_TogglePin>
	  			  A_Green = 0;
 8000632:	4b3e      	ldr	r3, [pc, #248]	; (800072c <main+0x22c>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	  			  A_Yellow = 1;
 8000638:	4b44      	ldr	r3, [pc, #272]	; (800074c <main+0x24c>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	e016      	b.n	800066e <main+0x16e>
	  		  }
	  	  } else if (A_Road_Current_State->mode == 'R') {
 8000640:	4b39      	ldr	r3, [pc, #228]	; (8000728 <main+0x228>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b52      	cmp	r3, #82	; 0x52
 8000648:	d111      	bne.n	800066e <main+0x16e>
	  		  if (A_Red != 1) {
 800064a:	4b3f      	ldr	r3, [pc, #252]	; (8000748 <main+0x248>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d00d      	beq.n	800066e <main+0x16e>
	  			  HAL_GPIO_TogglePin(A_RED_GPIO_Port, A_RED_Pin);
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	483b      	ldr	r0, [pc, #236]	; (8000744 <main+0x244>)
 8000656:	f001 f812 	bl	800167e <HAL_GPIO_TogglePin>
	  			  HAL_GPIO_TogglePin(GPIOG, A_YELLOW_Pin);
 800065a:	2108      	movs	r1, #8
 800065c:	4834      	ldr	r0, [pc, #208]	; (8000730 <main+0x230>)
 800065e:	f001 f80e 	bl	800167e <HAL_GPIO_TogglePin>
	  			  A_Yellow = 0;
 8000662:	4b3a      	ldr	r3, [pc, #232]	; (800074c <main+0x24c>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
	  			  A_Red = 1;
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <main+0x248>)
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
	  		  }
	  	  }

	  	  //Update B
	  	  if (B_Road_Current_State->mode == 'G') {
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <main+0x234>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b47      	cmp	r3, #71	; 0x47
 8000676:	d114      	bne.n	80006a2 <main+0x1a2>
	  	  		  if (B_Green != 1) {
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <main+0x250>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d043      	beq.n	8000708 <main+0x208>
	  	  			  HAL_GPIO_TogglePin(B_GREEN_GPIO_Port, B_GREEN_Pin);
 8000680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000684:	4833      	ldr	r0, [pc, #204]	; (8000754 <main+0x254>)
 8000686:	f000 fffa 	bl	800167e <HAL_GPIO_TogglePin>
	  	  			  HAL_GPIO_TogglePin(GPIOF, B_RED_Pin);
 800068a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068e:	482b      	ldr	r0, [pc, #172]	; (800073c <main+0x23c>)
 8000690:	f000 fff5 	bl	800167e <HAL_GPIO_TogglePin>
	  	  			  B_Red = 0;
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <main+0x238>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
	  	  			  B_Green = 1;
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <main+0x250>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e032      	b.n	8000708 <main+0x208>
	  	  		  }
	  	  	  } else if (B_Road_Current_State->mode == 'Y') {
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <main+0x234>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b59      	cmp	r3, #89	; 0x59
 80006aa:	d114      	bne.n	80006d6 <main+0x1d6>
	  	  		  if (B_Yellow != 1) {
 80006ac:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <main+0x258>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d029      	beq.n	8000708 <main+0x208>
	  	  			  HAL_GPIO_TogglePin(GPIOF, B_YELLOW_Pin);
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	4820      	ldr	r0, [pc, #128]	; (800073c <main+0x23c>)
 80006ba:	f000 ffe0 	bl	800167e <HAL_GPIO_TogglePin>
	  	  			  HAL_GPIO_TogglePin(B_GREEN_GPIO_Port, B_GREEN_Pin);
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4824      	ldr	r0, [pc, #144]	; (8000754 <main+0x254>)
 80006c4:	f000 ffdb 	bl	800167e <HAL_GPIO_TogglePin>
	  	  			  B_Green = 0;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <main+0x250>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
	  	  			  B_Yellow = 1;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <main+0x258>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	e018      	b.n	8000708 <main+0x208>
	  	  		  }
	  	  	  } else if (B_Road_Current_State->mode == 'R') {
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <main+0x234>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b52      	cmp	r3, #82	; 0x52
 80006de:	d113      	bne.n	8000708 <main+0x208>
	  	  		  if (B_Red != 1) {
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <main+0x238>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d00f      	beq.n	8000708 <main+0x208>
	  	  			  HAL_GPIO_TogglePin(GPIOF, B_RED_Pin);
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	4813      	ldr	r0, [pc, #76]	; (800073c <main+0x23c>)
 80006ee:	f000 ffc6 	bl	800167e <HAL_GPIO_TogglePin>
	  	  			  HAL_GPIO_TogglePin(GPIOF, B_YELLOW_Pin);
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <main+0x23c>)
 80006f8:	f000 ffc1 	bl	800167e <HAL_GPIO_TogglePin>
	  	  			  B_Yellow = 0;
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <main+0x258>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	  	  			  B_Red = 1;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <main+0x238>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
	  	  		  }
	  	  	  }

	  	  //WAIT
	  	  HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fcd5 	bl	80010b8 <HAL_Delay>
	  if (A_Road_Current_State->mode == 'G') {
 800070e:	e767      	b.n	80005e0 <main+0xe0>
 8000710:	2000061c 	.word	0x2000061c
 8000714:	2000062c 	.word	0x2000062c
 8000718:	2000063c 	.word	0x2000063c
 800071c:	2000064c 	.word	0x2000064c
 8000720:	2000065c 	.word	0x2000065c
 8000724:	2000066c 	.word	0x2000066c
 8000728:	20000614 	.word	0x20000614
 800072c:	20000684 	.word	0x20000684
 8000730:	40021800 	.word	0x40021800
 8000734:	20000618 	.word	0x20000618
 8000738:	20000688 	.word	0x20000688
 800073c:	40021400 	.word	0x40021400
 8000740:	2000007c 	.word	0x2000007c
 8000744:	40020c00 	.word	0x40020c00
 8000748:	2000067c 	.word	0x2000067c
 800074c:	20000680 	.word	0x20000680
 8000750:	20000690 	.word	0x20000690
 8000754:	40021000 	.word	0x40021000
 8000758:	2000068c 	.word	0x2000068c

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2234      	movs	r2, #52	; 0x34
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fc28 	bl	8003fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <SystemClock_Config+0xd0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a28      	ldr	r2, [pc, #160]	; (800082c <SystemClock_Config+0xd0>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <SystemClock_Config+0xd4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a22      	ldr	r2, [pc, #136]	; (8000830 <SystemClock_Config+0xd4>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d0:	23a8      	movs	r3, #168	; 0xa8
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d8:	2307      	movs	r3, #7
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 f865 	bl	80028b4 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f0:	f000 f9f6 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f9da 	bl	8001bcc <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081e:	f000 f9df 	bl	8000be0 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C1_Init+0x50>)
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_I2C1_Init+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2C1_Init+0x50>)
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_I2C1_Init+0x58>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_I2C1_Init+0x50>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_I2C1_Init+0x50>)
 8000872:	f000 ff1f 	bl	80016b4 <HAL_I2C_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800087c:	f000 f9b0 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000028 	.word	0x20000028
 8000888:	40005400 	.word	0x40005400
 800088c:	000186a0 	.word	0x000186a0

08000890 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008a0:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_TIM6_Init+0x68>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008a6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80008aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5250-1;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008b4:	f241 4281 	movw	r2, #5249	; 0x1481
 80008b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008c2:	f002 fa95 	bl	8002df0 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008cc:	f000 f988 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008de:	f002 fd21 	bl	8003324 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f97a 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000007c 	.word	0x2000007c
 80008f8:	40001000 	.word	0x40001000

080008fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART3_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000908:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800090c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000934:	f002 fd86 	bl	8003444 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f94f 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000c4 	.word	0x200000c4
 800094c:	40004800 	.word	0x40004800

08000950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800095a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2206      	movs	r2, #6
 8000960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2202      	movs	r2, #2
 8000972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2201      	movs	r2, #1
 8000978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2201      	movs	r2, #1
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	f000 ffd2 	bl	800193c <HAL_PCD_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f91f 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000108 	.word	0x20000108

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	4b7f      	ldr	r3, [pc, #508]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a7e      	ldr	r2, [pc, #504]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b7c      	ldr	r3, [pc, #496]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
 80009e2:	4b78      	ldr	r3, [pc, #480]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a77      	ldr	r2, [pc, #476]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b75      	ldr	r3, [pc, #468]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	4b71      	ldr	r3, [pc, #452]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a70      	ldr	r2, [pc, #448]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b6e      	ldr	r3, [pc, #440]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a69      	ldr	r2, [pc, #420]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a62      	ldr	r2, [pc, #392]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b60      	ldr	r3, [pc, #384]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a5b      	ldr	r2, [pc, #364]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	4b55      	ldr	r3, [pc, #340]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a54      	ldr	r2, [pc, #336]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a4d      	ldr	r2, [pc, #308]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa8:	4847      	ldr	r0, [pc, #284]	; (8000bc8 <MX_GPIO_Init+0x21c>)
 8000aaa:	f000 fdcf 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, B_RED_Pin|B_YELLOW_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ab4:	4845      	ldr	r0, [pc, #276]	; (8000bcc <MX_GPIO_Init+0x220>)
 8000ab6:	f000 fdc9 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_GREEN_GPIO_Port, B_GREEN_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	4843      	ldr	r0, [pc, #268]	; (8000bd0 <MX_GPIO_Init+0x224>)
 8000ac2:	f000 fdc3 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, A_GREEN_Pin|A_YELLOW_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	214c      	movs	r1, #76	; 0x4c
 8000aca:	4842      	ldr	r0, [pc, #264]	; (8000bd4 <MX_GPIO_Init+0x228>)
 8000acc:	f000 fdbe 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_RED_GPIO_Port, A_RED_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	4840      	ldr	r0, [pc, #256]	; (8000bd8 <MX_GPIO_Init+0x22c>)
 8000ad6:	f000 fdb9 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	483a      	ldr	r0, [pc, #232]	; (8000bdc <MX_GPIO_Init+0x230>)
 8000af2:	f000 fc17 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000af6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	482e      	ldr	r0, [pc, #184]	; (8000bc8 <MX_GPIO_Init+0x21c>)
 8000b10:	f000 fc08 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_RED_Pin B_YELLOW_Pin */
  GPIO_InitStruct.Pin = B_RED_Pin|B_YELLOW_Pin;
 8000b14:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4827      	ldr	r0, [pc, #156]	; (8000bcc <MX_GPIO_Init+0x220>)
 8000b2e:	f000 fbf9 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_GREEN_Pin */
  GPIO_InitStruct.Pin = B_GREEN_Pin;
 8000b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(B_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <MX_GPIO_Init+0x224>)
 8000b4c:	f000 fbea 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_GREEN_Pin A_YELLOW_Pin */
  GPIO_InitStruct.Pin = A_GREEN_Pin|A_YELLOW_Pin;
 8000b50:	230c      	movs	r3, #12
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0x228>)
 8000b68:	f000 fbdc 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <MX_GPIO_Init+0x228>)
 8000b84:	f000 fbce 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <MX_GPIO_Init+0x228>)
 8000b9c:	f000 fbc2 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_RED_Pin */
  GPIO_InitStruct.Pin = A_RED_Pin;
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(A_RED_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0x22c>)
 8000bb8:	f000 fbb4 	bl	8001324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	; 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40021800 	.word	0x40021800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40020800 	.word	0x40020800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_I2C_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12c      	bne.n	8000cb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	2312      	movs	r3, #18
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <HAL_I2C_MspInit+0x8c>)
 8000c98:	f000 fb44 	bl	8001324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d115      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2036      	movs	r0, #54	; 0x36
 8000d00:	f000 fad9 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d04:	2036      	movs	r0, #54	; 0x36
 8000d06:	f000 faf2 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40001000 	.word	0x40001000
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12c      	bne.n	8000d98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_UART_MspInit+0x8c>)
 8000d94:	f000 fac6 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40004800 	.word	0x40004800
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020c00 	.word	0x40020c00

08000dac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0a0      	sub	sp, #128	; 0x80
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	225c      	movs	r2, #92	; 0x5c
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 f8f7 	bl	8003fc0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dda:	d14e      	bne.n	8000e7a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000de2:	2300      	movs	r3, #0
 8000de4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 f808 	bl	8001e00 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000df6:	f7ff fef3 	bl	8000be0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e28:	230a      	movs	r3, #10
 8000e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <HAL_PCD_MspInit+0xdc>)
 8000e34:	f000 fa76 	bl	8001324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480e      	ldr	r0, [pc, #56]	; (8000e88 <HAL_PCD_MspInit+0xdc>)
 8000e4e:	f000 fa69 	bl	8001324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_PCD_MspInit+0xd8>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3780      	adds	r7, #128	; 0x80
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f8ce 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	A_Road_Current_State->currentTick += 1;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <TIM6_DAC_IRQHandler+0x70>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <TIM6_DAC_IRQHandler+0x70>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3201      	adds	r2, #1
 8000ef0:	609a      	str	r2, [r3, #8]
	B_Road_Current_State->currentTick += 1;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <TIM6_DAC_IRQHandler+0x74>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <TIM6_DAC_IRQHandler+0x74>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3201      	adds	r2, #1
 8000efe:	609a      	str	r2, [r3, #8]

	if (A_Road_Current_State->currentTick == A_Road_Current_State->maxTick) {
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <TIM6_DAC_IRQHandler+0x70>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <TIM6_DAC_IRQHandler+0x70>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d108      	bne.n	8000f22 <TIM6_DAC_IRQHandler+0x42>
		A_Road_Current_State->currentTick = 0;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <TIM6_DAC_IRQHandler+0x70>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
		A_Road_Current_State = A_Road_Current_State->nextState;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <TIM6_DAC_IRQHandler+0x70>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <TIM6_DAC_IRQHandler+0x70>)
 8000f20:	6013      	str	r3, [r2, #0]
	}

	if (B_Road_Current_State->currentTick == B_Road_Current_State->maxTick) {
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <TIM6_DAC_IRQHandler+0x74>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <TIM6_DAC_IRQHandler+0x74>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d108      	bne.n	8000f44 <TIM6_DAC_IRQHandler+0x64>
		B_Road_Current_State->currentTick = 0;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <TIM6_DAC_IRQHandler+0x74>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
		B_Road_Current_State = B_Road_Current_State->nextState;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <TIM6_DAC_IRQHandler+0x74>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <TIM6_DAC_IRQHandler+0x74>)
 8000f42:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <TIM6_DAC_IRQHandler+0x78>)
 8000f46:	f002 f813 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000614 	.word	0x20000614
 8000f54:	20000618 	.word	0x20000618
 8000f58:	2000007c 	.word	0x2000007c

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f9c:	4c0b      	ldr	r4, [pc, #44]	; (8000fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000faa:	f7ff ffd7 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f003 f80f 	bl	8003fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff faa5 	bl	8000500 <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fc4:	08004058 	.word	0x08004058
  ldr r2, =_sbss
 8000fc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fcc:	20000698 	.word	0x20000698

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f94f 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fdf0 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f967 	bl	800130a <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001054:	f000 f92f 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	20000694 	.word	0x20000694

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000694 	.word	0x20000694

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff29 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff3e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff31 	bl	8001164 <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e165      	b.n	800160c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8154 	bne.w	8001606 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	2b02      	cmp	r3, #2
 8001374:	d130      	bne.n	80013d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d017      	beq.n	8001414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80ae 	beq.w	8001606 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b5d      	ldr	r3, [pc, #372]	; (8001624 <HAL_GPIO_Init+0x300>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a5c      	ldr	r2, [pc, #368]	; (8001624 <HAL_GPIO_Init+0x300>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b5a      	ldr	r3, [pc, #360]	; (8001624 <HAL_GPIO_Init+0x300>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a58      	ldr	r2, [pc, #352]	; (8001628 <HAL_GPIO_Init+0x304>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4f      	ldr	r2, [pc, #316]	; (800162c <HAL_GPIO_Init+0x308>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x21a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_GPIO_Init+0x30c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x216>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <HAL_GPIO_Init+0x310>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x212>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x314>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x20e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_GPIO_Init+0x318>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x20a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <HAL_GPIO_Init+0x31c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x206>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_GPIO_Init+0x320>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x202>
 8001522:	2306      	movs	r3, #6
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x21c>
 8001526:	2307      	movs	r3, #7
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x21c>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x21c>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x21c>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x21c>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x21c>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x21c>
 800153e:	2300      	movs	r3, #0
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_GPIO_Init+0x324>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001582:	4a31      	ldr	r2, [pc, #196]	; (8001648 <HAL_GPIO_Init+0x324>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x324>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ac:	4a26      	ldr	r2, [pc, #152]	; (8001648 <HAL_GPIO_Init+0x324>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_GPIO_Init+0x324>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_GPIO_Init+0x324>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_GPIO_Init+0x324>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_GPIO_Init+0x324>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3301      	adds	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b0f      	cmp	r3, #15
 8001610:	f67f ae96 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40013800 	.word	0x40013800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40021400 	.word	0x40021400
 8001644:	40021800 	.word	0x40021800
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001690:	887a      	ldrh	r2, [r7, #2]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	041a      	lsls	r2, r3, #16
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43d9      	mvns	r1, r3
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	400b      	ands	r3, r1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e12b      	b.n	800191e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff faae 	bl	8000c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	; 0x24
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001718:	f000 fb4a 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a81      	ldr	r2, [pc, #516]	; (8001928 <HAL_I2C_Init+0x274>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d807      	bhi.n	8001738 <HAL_I2C_Init+0x84>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a80      	ldr	r2, [pc, #512]	; (800192c <HAL_I2C_Init+0x278>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	e006      	b.n	8001746 <HAL_I2C_Init+0x92>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a7d      	ldr	r2, [pc, #500]	; (8001930 <HAL_I2C_Init+0x27c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	bf94      	ite	ls
 8001740:	2301      	movls	r3, #1
 8001742:	2300      	movhi	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0e7      	b.n	800191e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a78      	ldr	r2, [pc, #480]	; (8001934 <HAL_I2C_Init+0x280>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <HAL_I2C_Init+0x274>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d802      	bhi.n	8001788 <HAL_I2C_Init+0xd4>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	e009      	b.n	800179c <HAL_I2C_Init+0xe8>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	4a69      	ldr	r2, [pc, #420]	; (8001938 <HAL_I2C_Init+0x284>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	3301      	adds	r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	495c      	ldr	r1, [pc, #368]	; (8001928 <HAL_I2C_Init+0x274>)
 80017b8:	428b      	cmp	r3, r1
 80017ba:	d819      	bhi.n	80017f0 <HAL_I2C_Init+0x13c>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e59      	subs	r1, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017d0:	400b      	ands	r3, r1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <HAL_I2C_Init+0x138>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e59      	subs	r1, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	e051      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017ec:	2304      	movs	r3, #4
 80017ee:	e04f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_I2C_Init+0x168>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e58      	subs	r0, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e012      	b.n	8001842 <HAL_I2C_Init+0x18e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	0099      	lsls	r1, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x196>
 8001846:	2301      	movs	r3, #1
 8001848:	e022      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <HAL_I2C_Init+0x1bc>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e58      	subs	r0, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	fbb0 f3f3 	udiv	r3, r0, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	4313      	orrs	r3, r2
 8001896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6911      	ldr	r1, [r2, #16]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68d2      	ldr	r2, [r2, #12]
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	000186a0 	.word	0x000186a0
 800192c:	001e847f 	.word	0x001e847f
 8001930:	003d08ff 	.word	0x003d08ff
 8001934:	431bde83 	.word	0x431bde83
 8001938:	10624dd3 	.word	0x10624dd3

0800193c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	b08f      	sub	sp, #60	; 0x3c
 8001940:	af0a      	add	r7, sp, #40	; 0x28
 8001942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e116      	b.n	8001b7c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d106      	bne.n	800196e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fa1f 	bl	8000dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 f87c 	bl	8003a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	687e      	ldr	r6, [r7, #4]
 800199a:	466d      	mov	r5, sp
 800199c:	f106 0410 	add.w	r4, r6, #16
 80019a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b0:	1d33      	adds	r3, r6, #4
 80019b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f002 f807 	bl	80039c8 <USB_CoreInit>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0d7      	b.n	8001b7c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 f86a 	bl	8003aac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e04a      	b.n	8001a74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	333d      	adds	r3, #61	; 0x3d
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	333c      	adds	r3, #60	; 0x3c
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	b298      	uxth	r0, r3
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	3344      	adds	r3, #68	; 0x44
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3340      	adds	r3, #64	; 0x40
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3348      	adds	r3, #72	; 0x48
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	334c      	adds	r3, #76	; 0x4c
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	3354      	adds	r3, #84	; 0x54
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	3301      	adds	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3af      	bcc.n	80019de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e044      	b.n	8001b0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d3b5      	bcc.n	8001a84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	687e      	ldr	r6, [r7, #4]
 8001b20:	466d      	mov	r5, sp
 8001b22:	f106 0410 	add.w	r4, r6, #16
 8001b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b36:	1d33      	adds	r3, r6, #4
 8001b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3a:	6838      	ldr	r0, [r7, #0]
 8001b3c:	f002 f802 	bl	8003b44 <USB_DevInit>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e014      	b.n	8001b7c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f80a 	bl	8001b84 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 f9c0 	bl	8003efa <USB_DevDisconnect>

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	f043 0303 	orr.w	r3, r3, #3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0cc      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCC_ClockConfig+0x1b8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d90c      	bls.n	8001c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b65      	ldr	r3, [pc, #404]	; (8001d84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0b8      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	494d      	ldr	r1, [pc, #308]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d044      	beq.n	8001cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d119      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e07f      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e06f      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e067      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f023 0203 	bic.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4934      	ldr	r1, [pc, #208]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f9f0 	bl	80010a0 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc4:	f7ff f9ec 	bl	80010a0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e04f      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 020c 	and.w	r2, r3, #12
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d1eb      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d20c      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e032      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4916      	ldr	r1, [pc, #88]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	490e      	ldr	r1, [pc, #56]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d52:	f000 fb7f 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	490a      	ldr	r1, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	5ccb      	ldrb	r3, [r1, r3]
 8001d66:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6a:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f950 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023c00 	.word	0x40023c00
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08004030 	.word	0x08004030
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0a9b      	lsrs	r3, r3, #10
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08004040 	.word	0x08004040

08001dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ddc:	f7ff ffdc 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0b5b      	lsrs	r3, r3, #13
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4903      	ldr	r1, [pc, #12]	; (8001dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08004040 	.word	0x08004040

08001e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e3e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	496c      	ldr	r1, [pc, #432]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001e56:	2301      	movs	r3, #1
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d010      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e6c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	4960      	ldr	r1, [pc, #384]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d017      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4955      	ldr	r1, [pc, #340]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d017      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ed0:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ede:	4946      	ldr	r1, [pc, #280]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 808a 	beq.w	8002022 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a38      	ldr	r2, [pc, #224]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f36:	f7ff f8b3 	bl	80010a0 <HAL_GetTick>
 8001f3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff f8af 	bl	80010a0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e278      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f64:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d02f      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f74:	6a3a      	ldr	r2, [r7, #32]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d028      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f82:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d114      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f87d 	bl	80010a0 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff f879 	bl	80010a0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e240      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fd8:	d114      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fee:	4902      	ldr	r1, [pc, #8]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
 8001ff4:	e00c      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42470e40 	.word	0x42470e40
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a49      	ldr	r2, [pc, #292]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800200a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800200e:	6093      	str	r3, [r2, #8]
 8002010:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	4944      	ldr	r1, [pc, #272]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800201e:	4313      	orrs	r3, r2
 8002020:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002036:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	492e      	ldr	r1, [pc, #184]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d011      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800208a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	4926      	ldr	r1, [pc, #152]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020a6:	d101      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80020a8:	2301      	movs	r3, #1
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	491a      	ldr	r1, [pc, #104]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d011      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e8:	4911      	ldr	r1, [pc, #68]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80020fa:	2301      	movs	r3, #1
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d005      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210c:	f040 80ff 	bne.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002116:	f7fe ffc3 	bl	80010a0 <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800211c:	e00e      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800211e:	f7fe ffbf 	bl	80010a0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d907      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e188      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002130:	40023800 	.word	0x40023800
 8002134:	424711e0 	.word	0x424711e0
 8002138:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800213c:	4b7e      	ldr	r3, [pc, #504]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ea      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002164:	2b00      	cmp	r3, #0
 8002166:	d028      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d124      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002170:	4b71      	ldr	r3, [pc, #452]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	3301      	adds	r3, #1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002182:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002188:	0e1b      	lsrs	r3, r3, #24
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	431a      	orrs	r2, r3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	071b      	lsls	r3, r3, #28
 80021b2:	4961      	ldr	r1, [pc, #388]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d035      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e4:	d130      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fe:	0f1b      	lsrs	r3, r3, #28
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	019b      	lsls	r3, r3, #6
 8002210:	431a      	orrs	r2, r3
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	431a      	orrs	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	071b      	lsls	r3, r3, #28
 8002228:	4943      	ldr	r1, [pc, #268]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002230:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002236:	f023 021f 	bic.w	r2, r3, #31
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	3b01      	subs	r3, #1
 8002240:	493d      	ldr	r1, [pc, #244]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d029      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800225c:	d124      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	3301      	adds	r3, #1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002276:	0f1b      	lsrs	r3, r3, #28
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	019b      	lsls	r3, r3, #6
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	431a      	orrs	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	071b      	lsls	r3, r3, #28
 80022a0:	4925      	ldr	r1, [pc, #148]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d016      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	3b01      	subs	r3, #1
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	071b      	lsls	r3, r3, #28
 80022da:	4917      	ldr	r1, [pc, #92]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe feda 	bl	80010a0 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022f0:	f7fe fed6 	bl	80010a0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e09f      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 8095 	bne.w	8002440 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fec0 	bl	80010a0 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002322:	e00f      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002324:	f7fe febc 	bl	80010a0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d908      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e085      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	42470068 	.word	0x42470068
 8002340:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800234c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002350:	d0e8      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800236e:	2b00      	cmp	r3, #0
 8002370:	d02b      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	2b00      	cmp	r3, #0
 8002378:	d127      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	3301      	adds	r3, #1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	431a      	orrs	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	061b      	lsls	r3, r3, #24
 80023a8:	4928      	ldr	r1, [pc, #160]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023b0:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	3b01      	subs	r3, #1
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	4922      	ldr	r1, [pc, #136]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01d      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023de:	d118      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	0e1b      	lsrs	r3, r3, #24
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	019b      	lsls	r3, r3, #6
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	041b      	lsls	r3, r3, #16
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	4910      	ldr	r1, [pc, #64]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002418:	f7fe fe42 	bl	80010a0 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002420:	f7fe fe3e 	bl	80010a0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e007      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800243a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243e:	d1ef      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3730      	adds	r7, #48	; 0x30
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	42470070 	.word	0x42470070

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002458:	b0ae      	sub	sp, #184	; 0xb8
 800245a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800247a:	4bcb      	ldr	r3, [pc, #812]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b0c      	cmp	r3, #12
 8002484:	f200 8206 	bhi.w	8002894 <HAL_RCC_GetSysClockFreq+0x440>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_RCC_GetSysClockFreq+0x3c>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024c5 	.word	0x080024c5
 8002494:	08002895 	.word	0x08002895
 8002498:	08002895 	.word	0x08002895
 800249c:	08002895 	.word	0x08002895
 80024a0:	080024cd 	.word	0x080024cd
 80024a4:	08002895 	.word	0x08002895
 80024a8:	08002895 	.word	0x08002895
 80024ac:	08002895 	.word	0x08002895
 80024b0:	080024d5 	.word	0x080024d5
 80024b4:	08002895 	.word	0x08002895
 80024b8:	08002895 	.word	0x08002895
 80024bc:	08002895 	.word	0x08002895
 80024c0:	080026c5 	.word	0x080026c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024c4:	4bb9      	ldr	r3, [pc, #740]	; (80027ac <HAL_RCC_GetSysClockFreq+0x358>)
 80024c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80024ca:	e1e7      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024cc:	4bb8      	ldr	r3, [pc, #736]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80024ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024d2:	e1e3      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	4bb4      	ldr	r3, [pc, #720]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e0:	4bb1      	ldr	r3, [pc, #708]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d071      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ec:	4bae      	ldr	r3, [pc, #696]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800250e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002512:	4622      	mov	r2, r4
 8002514:	462b      	mov	r3, r5
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002524:	0150      	lsls	r0, r2, #5
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4621      	mov	r1, r4
 800252c:	1a51      	subs	r1, r2, r1
 800252e:	6439      	str	r1, [r7, #64]	; 0x40
 8002530:	4629      	mov	r1, r5
 8002532:	eb63 0301 	sbc.w	r3, r3, r1
 8002536:	647b      	str	r3, [r7, #68]	; 0x44
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002544:	4649      	mov	r1, r9
 8002546:	018b      	lsls	r3, r1, #6
 8002548:	4641      	mov	r1, r8
 800254a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254e:	4641      	mov	r1, r8
 8002550:	018a      	lsls	r2, r1, #6
 8002552:	4641      	mov	r1, r8
 8002554:	1a51      	subs	r1, r2, r1
 8002556:	63b9      	str	r1, [r7, #56]	; 0x38
 8002558:	4649      	mov	r1, r9
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800256c:	4649      	mov	r1, r9
 800256e:	00cb      	lsls	r3, r1, #3
 8002570:	4641      	mov	r1, r8
 8002572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002576:	4641      	mov	r1, r8
 8002578:	00ca      	lsls	r2, r1, #3
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	4603      	mov	r3, r0
 8002580:	4622      	mov	r2, r4
 8002582:	189b      	adds	r3, r3, r2
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
 8002586:	462b      	mov	r3, r5
 8002588:	460a      	mov	r2, r1
 800258a:	eb42 0303 	adc.w	r3, r2, r3
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800259c:	4629      	mov	r1, r5
 800259e:	024b      	lsls	r3, r1, #9
 80025a0:	4621      	mov	r1, r4
 80025a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025a6:	4621      	mov	r1, r4
 80025a8:	024a      	lsls	r2, r1, #9
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80025c0:	f7fd fe20 	bl	8000204 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4613      	mov	r3, r2
 80025ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ce:	e067      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d0:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80025e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ea:	2300      	movs	r3, #0
 80025ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002604:	0150      	lsls	r0, r2, #5
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4621      	mov	r1, r4
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002610:	4629      	mov	r1, r5
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002624:	4649      	mov	r1, r9
 8002626:	018b      	lsls	r3, r1, #6
 8002628:	4641      	mov	r1, r8
 800262a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262e:	4641      	mov	r1, r8
 8002630:	018a      	lsls	r2, r1, #6
 8002632:	4641      	mov	r1, r8
 8002634:	ebb2 0a01 	subs.w	sl, r2, r1
 8002638:	4649      	mov	r1, r9
 800263a:	eb63 0b01 	sbc.w	fp, r3, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800264a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800264e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002652:	4692      	mov	sl, r2
 8002654:	469b      	mov	fp, r3
 8002656:	4623      	mov	r3, r4
 8002658:	eb1a 0303 	adds.w	r3, sl, r3
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	462b      	mov	r3, r5
 8002660:	eb4b 0303 	adc.w	r3, fp, r3
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002688:	2200      	movs	r2, #0
 800268a:	673b      	str	r3, [r7, #112]	; 0x70
 800268c:	677a      	str	r2, [r7, #116]	; 0x74
 800268e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002692:	f7fd fdb7 	bl	8000204 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4613      	mov	r3, r2
 800269c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a0:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80026b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026c2:	e0eb      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d0:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d06b      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026dc:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	2200      	movs	r2, #0
 80026e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80026e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ee:	663b      	str	r3, [r7, #96]	; 0x60
 80026f0:	2300      	movs	r3, #0
 80026f2:	667b      	str	r3, [r7, #100]	; 0x64
 80026f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026f8:	4622      	mov	r2, r4
 80026fa:	462b      	mov	r3, r5
 80026fc:	f04f 0000 	mov.w	r0, #0
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	0159      	lsls	r1, r3, #5
 8002706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270a:	0150      	lsls	r0, r2, #5
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4621      	mov	r1, r4
 8002712:	1a51      	subs	r1, r2, r1
 8002714:	61b9      	str	r1, [r7, #24]
 8002716:	4629      	mov	r1, r5
 8002718:	eb63 0301 	sbc.w	r3, r3, r1
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800272a:	4659      	mov	r1, fp
 800272c:	018b      	lsls	r3, r1, #6
 800272e:	4651      	mov	r1, sl
 8002730:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002734:	4651      	mov	r1, sl
 8002736:	018a      	lsls	r2, r1, #6
 8002738:	4651      	mov	r1, sl
 800273a:	ebb2 0801 	subs.w	r8, r2, r1
 800273e:	4659      	mov	r1, fp
 8002740:	eb63 0901 	sbc.w	r9, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002750:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002754:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002758:	4690      	mov	r8, r2
 800275a:	4699      	mov	r9, r3
 800275c:	4623      	mov	r3, r4
 800275e:	eb18 0303 	adds.w	r3, r8, r3
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	462b      	mov	r3, r5
 8002766:	eb49 0303 	adc.w	r3, r9, r3
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002778:	4629      	mov	r1, r5
 800277a:	024b      	lsls	r3, r1, #9
 800277c:	4621      	mov	r1, r4
 800277e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002782:	4621      	mov	r1, r4
 8002784:	024a      	lsls	r2, r1, #9
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800278e:	2200      	movs	r2, #0
 8002790:	65bb      	str	r3, [r7, #88]	; 0x58
 8002792:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002794:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002798:	f7fd fd34 	bl	8000204 <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4613      	mov	r3, r2
 80027a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027a6:	e065      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x420>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_GetSysClockFreq+0x458>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	2200      	movs	r2, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	4611      	mov	r1, r2
 80027c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027c4:	653b      	str	r3, [r7, #80]	; 0x50
 80027c6:	2300      	movs	r3, #0
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80027ce:	4642      	mov	r2, r8
 80027d0:	464b      	mov	r3, r9
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	0159      	lsls	r1, r3, #5
 80027dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027e0:	0150      	lsls	r0, r2, #5
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4641      	mov	r1, r8
 80027e8:	1a51      	subs	r1, r2, r1
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	4649      	mov	r1, r9
 80027ee:	eb63 0301 	sbc.w	r3, r3, r1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002800:	4659      	mov	r1, fp
 8002802:	018b      	lsls	r3, r1, #6
 8002804:	4651      	mov	r1, sl
 8002806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800280a:	4651      	mov	r1, sl
 800280c:	018a      	lsls	r2, r1, #6
 800280e:	4651      	mov	r1, sl
 8002810:	1a54      	subs	r4, r2, r1
 8002812:	4659      	mov	r1, fp
 8002814:	eb63 0501 	sbc.w	r5, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002826:	00e2      	lsls	r2, r4, #3
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	4643      	mov	r3, r8
 800282e:	18e3      	adds	r3, r4, r3
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	464b      	mov	r3, r9
 8002834:	eb45 0303 	adc.w	r3, r5, r3
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002846:	4629      	mov	r1, r5
 8002848:	028b      	lsls	r3, r1, #10
 800284a:	4621      	mov	r1, r4
 800284c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002850:	4621      	mov	r1, r4
 8002852:	028a      	lsls	r2, r1, #10
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800285c:	2200      	movs	r2, #0
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002860:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002862:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002866:	f7fd fccd 	bl	8000204 <__aeabi_uldivmod>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4613      	mov	r3, r2
 8002870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_RCC_GetSysClockFreq+0x458>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	0f1b      	lsrs	r3, r3, #28
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002892:	e003      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800289a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	37b8      	adds	r7, #184	; 0xb8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	00f42400 	.word	0x00f42400

080028b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e28d      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8083 	beq.w	80029da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028d4:	4b94      	ldr	r3, [pc, #592]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d019      	beq.n	8002914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028e0:	4b91      	ldr	r3, [pc, #580]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028ec:	4b8e      	ldr	r3, [pc, #568]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f8:	d00c      	beq.n	8002914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fa:	4b8b      	ldr	r3, [pc, #556]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d112      	bne.n	800292c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002906:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002912:	d10b      	bne.n	800292c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	4b84      	ldr	r3, [pc, #528]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d05b      	beq.n	80029d8 <HAL_RCC_OscConfig+0x124>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d157      	bne.n	80029d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e25a      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d106      	bne.n	8002944 <HAL_RCC_OscConfig+0x90>
 8002936:	4b7c      	ldr	r3, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7b      	ldr	r2, [pc, #492]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e01d      	b.n	8002980 <HAL_RCC_OscConfig+0xcc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0xb4>
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a75      	ldr	r2, [pc, #468]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a72      	ldr	r2, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0xcc>
 8002968:	4b6f      	ldr	r3, [pc, #444]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6e      	ldr	r2, [pc, #440]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 800296e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a6b      	ldr	r2, [pc, #428]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 800297a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fb8a 	bl	80010a0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fb86 	bl	80010a0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e21f      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0xdc>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fb76 	bl	80010a0 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe fb72 	bl	80010a0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e20b      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x104>
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06f      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029e6:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d017      	beq.n	8002a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029f2:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029fe:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d11c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x186>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1d3      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4937      	ldr	r1, [pc, #220]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	e03a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCC_OscConfig+0x278>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fb1f 	bl	80010a0 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fb1b 	bl	80010a0 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1b4      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4925      	ldr	r1, [pc, #148]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_OscConfig+0x278>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fafe 	bl	80010a0 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fafa 	bl	80010a0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e193      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d036      	beq.n	8002b40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_RCC_OscConfig+0x27c>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fade 	bl	80010a0 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fada 	bl	80010a0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e173      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x234>
 8002b06:	e01b      	b.n	8002b40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fac7 	bl	80010a0 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	e00e      	b.n	8002b34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b16:	f7fe fac3 	bl	80010a0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d907      	bls.n	8002b34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e15c      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	42470000 	.word	0x42470000
 8002b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	4b8a      	ldr	r3, [pc, #552]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ea      	bne.n	8002b16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8097 	beq.w	8002c7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b83      	ldr	r3, [pc, #524]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b7f      	ldr	r3, [pc, #508]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a7e      	ldr	r2, [pc, #504]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b7c      	ldr	r3, [pc, #496]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b79      	ldr	r3, [pc, #484]	; (8002d64 <HAL_RCC_OscConfig+0x4b0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d118      	bne.n	8002bbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b76      	ldr	r3, [pc, #472]	; (8002d64 <HAL_RCC_OscConfig+0x4b0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a75      	ldr	r2, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x4b0>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fa83 	bl	80010a0 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9e:	f7fe fa7f 	bl	80010a0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e118      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b6c      	ldr	r3, [pc, #432]	; (8002d64 <HAL_RCC_OscConfig+0x4b0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x31e>
 8002bc4:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	e01c      	b.n	8002c0c <HAL_RCC_OscConfig+0x358>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x340>
 8002bda:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a60      	ldr	r2, [pc, #384]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x358>
 8002bf4:	4b5a      	ldr	r3, [pc, #360]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a59      	ldr	r2, [pc, #356]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a56      	ldr	r2, [pc, #344]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	f023 0304 	bic.w	r3, r3, #4
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe fa44 	bl	80010a0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fa40 	bl	80010a0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0d7      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <HAL_RCC_OscConfig+0x368>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe fa2e 	bl	80010a0 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe fa2a 	bl	80010a0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0c1      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5e:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ee      	bne.n	8002c48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80ad 	beq.w	8002de0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d060      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d145      	bne.n	8002d26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <HAL_RCC_OscConfig+0x4b4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe f9fe 	bl	80010a0 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f9fa 	bl	80010a0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e093      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	071b      	lsls	r3, r3, #28
 8002cf2:	491b      	ldr	r1, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x4b4>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe f9cf 	bl	80010a0 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe f9cb 	bl	80010a0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e064      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x452>
 8002d24:	e05c      	b.n	8002de0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x4b4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f9b8 	bl	80010a0 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f9b4 	bl	80010a0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e04d      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x480>
 8002d52:	e045      	b.n	8002de0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e040      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000
 8002d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCC_OscConfig+0x538>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d030      	beq.n	8002ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d129      	bne.n	8002ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d122      	bne.n	8002ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d119      	bne.n	8002ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d10f      	bne.n	8002ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800

08002df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e041      	b.n	8002e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd ff58 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f000 f9d8 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e04e      	b.n	8002f46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d022      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d01d      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d111      	bne.n	8002f34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d010      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	e007      	b.n	8002f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40001800 	.word	0x40001800

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8f8 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8ea 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8fb 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8ce 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8c0 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8d1 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0208 	mvn.w	r2, #8
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8a4 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f896 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8a7 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f87a 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f86c 	bl	8003194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f87d 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0201 	mvn.w	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f846 	bl	8003180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f988 	bl	8003430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f842 	bl	80031d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0220 	mvn.w	r2, #32
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f952 	bl	800341c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d00f      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <TIM_Base_SetConfig+0x118>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00b      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <TIM_Base_SetConfig+0x11c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <TIM_Base_SetConfig+0x120>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <TIM_Base_SetConfig+0x124>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d108      	bne.n	8003236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2f      	ldr	r2, [pc, #188]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d027      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <TIM_Base_SetConfig+0x118>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d023      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <TIM_Base_SetConfig+0x11c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01f      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2a      	ldr	r2, [pc, #168]	; (8003304 <TIM_Base_SetConfig+0x120>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a29      	ldr	r2, [pc, #164]	; (8003308 <TIM_Base_SetConfig+0x124>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d017      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a28      	ldr	r2, [pc, #160]	; (800330c <TIM_Base_SetConfig+0x128>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <TIM_Base_SetConfig+0x12c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00f      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <TIM_Base_SetConfig+0x130>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <TIM_Base_SetConfig+0x134>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a24      	ldr	r2, [pc, #144]	; (800331c <TIM_Base_SetConfig+0x138>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <TIM_Base_SetConfig+0x13c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0xf8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <TIM_Base_SetConfig+0x124>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40010400 	.word	0x40010400
 800330c:	40014000 	.word	0x40014000
 8003310:	40014400 	.word	0x40014400
 8003314:	40014800 	.word	0x40014800
 8003318:	40001800 	.word	0x40001800
 800331c:	40001c00 	.word	0x40001c00
 8003320:	40002000 	.word	0x40002000

08003324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003338:	2302      	movs	r3, #2
 800333a:	e05a      	b.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003388:	d01d      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1a      	ldr	r2, [pc, #104]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10c      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010000 	.word	0x40010000
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40010400 	.word	0x40010400
 8003414:	40014000 	.word	0x40014000
 8003418:	40001800 	.word	0x40001800

0800341c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03f      	b.n	80034d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fc56 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f829 	bl	80034e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b0c0      	sub	sp, #256	; 0x100
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fc:	68d9      	ldr	r1, [r3, #12]
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	ea40 0301 	orr.w	r3, r0, r1
 8003508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	431a      	orrs	r2, r3
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	431a      	orrs	r2, r3
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003538:	f021 010c 	bic.w	r1, r1, #12
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003546:	430b      	orrs	r3, r1
 8003548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355a:	6999      	ldr	r1, [r3, #24]
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	ea40 0301 	orr.w	r3, r0, r1
 8003566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b8f      	ldr	r3, [pc, #572]	; (80037ac <UART_SetConfig+0x2cc>)
 8003570:	429a      	cmp	r2, r3
 8003572:	d005      	beq.n	8003580 <UART_SetConfig+0xa0>
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b8d      	ldr	r3, [pc, #564]	; (80037b0 <UART_SetConfig+0x2d0>)
 800357c:	429a      	cmp	r2, r3
 800357e:	d104      	bne.n	800358a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7fe fc2a 	bl	8001dd8 <HAL_RCC_GetPCLK2Freq>
 8003584:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003588:	e003      	b.n	8003592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800358a:	f7fe fc11 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 800358e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	f040 810c 	bne.w	80037b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035b2:	4622      	mov	r2, r4
 80035b4:	462b      	mov	r3, r5
 80035b6:	1891      	adds	r1, r2, r2
 80035b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ba:	415b      	adcs	r3, r3
 80035bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035c2:	4621      	mov	r1, r4
 80035c4:	eb12 0801 	adds.w	r8, r2, r1
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb43 0901 	adc.w	r9, r3, r1
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e2:	4690      	mov	r8, r2
 80035e4:	4699      	mov	r9, r3
 80035e6:	4623      	mov	r3, r4
 80035e8:	eb18 0303 	adds.w	r3, r8, r3
 80035ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035f0:	462b      	mov	r3, r5
 80035f2:	eb49 0303 	adc.w	r3, r9, r3
 80035f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003606:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800360a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800360e:	460b      	mov	r3, r1
 8003610:	18db      	adds	r3, r3, r3
 8003612:	653b      	str	r3, [r7, #80]	; 0x50
 8003614:	4613      	mov	r3, r2
 8003616:	eb42 0303 	adc.w	r3, r2, r3
 800361a:	657b      	str	r3, [r7, #84]	; 0x54
 800361c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003624:	f7fc fdee 	bl	8000204 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <UART_SetConfig+0x2d4>)
 800362e:	fba3 2302 	umull	r2, r3, r3, r2
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	011c      	lsls	r4, r3, #4
 8003636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003640:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	1891      	adds	r1, r2, r2
 800364e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003650:	415b      	adcs	r3, r3
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003658:	4641      	mov	r1, r8
 800365a:	eb12 0a01 	adds.w	sl, r2, r1
 800365e:	4649      	mov	r1, r9
 8003660:	eb43 0b01 	adc.w	fp, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003678:	4692      	mov	sl, r2
 800367a:	469b      	mov	fp, r3
 800367c:	4643      	mov	r3, r8
 800367e:	eb1a 0303 	adds.w	r3, sl, r3
 8003682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003686:	464b      	mov	r3, r9
 8003688:	eb4b 0303 	adc.w	r3, fp, r3
 800368c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800369c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036a4:	460b      	mov	r3, r1
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
 80036aa:	4613      	mov	r3, r2
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
 80036b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ba:	f7fc fda3 	bl	8000204 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <UART_SetConfig+0x2d4>)
 80036c6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2264      	movs	r2, #100	; 0x64
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	1acb      	subs	r3, r1, r3
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <UART_SetConfig+0x2d4>)
 80036dc:	fba3 2302 	umull	r2, r3, r3, r2
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e8:	441c      	add	r4, r3
 80036ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036fc:	4642      	mov	r2, r8
 80036fe:	464b      	mov	r3, r9
 8003700:	1891      	adds	r1, r2, r2
 8003702:	63b9      	str	r1, [r7, #56]	; 0x38
 8003704:	415b      	adcs	r3, r3
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800370c:	4641      	mov	r1, r8
 800370e:	1851      	adds	r1, r2, r1
 8003710:	6339      	str	r1, [r7, #48]	; 0x30
 8003712:	4649      	mov	r1, r9
 8003714:	414b      	adcs	r3, r1
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003724:	4659      	mov	r1, fp
 8003726:	00cb      	lsls	r3, r1, #3
 8003728:	4651      	mov	r1, sl
 800372a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372e:	4651      	mov	r1, sl
 8003730:	00ca      	lsls	r2, r1, #3
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	4603      	mov	r3, r0
 8003738:	4642      	mov	r2, r8
 800373a:	189b      	adds	r3, r3, r2
 800373c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003740:	464b      	mov	r3, r9
 8003742:	460a      	mov	r2, r1
 8003744:	eb42 0303 	adc.w	r3, r2, r3
 8003748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003758:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800375c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003760:	460b      	mov	r3, r1
 8003762:	18db      	adds	r3, r3, r3
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	4613      	mov	r3, r2
 8003768:	eb42 0303 	adc.w	r3, r2, r3
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003776:	f7fc fd45 	bl	8000204 <__aeabi_uldivmod>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <UART_SetConfig+0x2d4>)
 8003780:	fba3 1302 	umull	r1, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	2164      	movs	r1, #100	; 0x64
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3332      	adds	r3, #50	; 0x32
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <UART_SetConfig+0x2d4>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	f003 0207 	and.w	r2, r3, #7
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4422      	add	r2, r4
 80037a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037a8:	e106      	b.n	80039b8 <UART_SetConfig+0x4d8>
 80037aa:	bf00      	nop
 80037ac:	40011000 	.word	0x40011000
 80037b0:	40011400 	.word	0x40011400
 80037b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037ca:	4642      	mov	r2, r8
 80037cc:	464b      	mov	r3, r9
 80037ce:	1891      	adds	r1, r2, r2
 80037d0:	6239      	str	r1, [r7, #32]
 80037d2:	415b      	adcs	r3, r3
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037da:	4641      	mov	r1, r8
 80037dc:	1854      	adds	r4, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb43 0501 	adc.w	r5, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	00eb      	lsls	r3, r5, #3
 80037ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	4643      	mov	r3, r8
 80037fa:	18e3      	adds	r3, r4, r3
 80037fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003800:	464b      	mov	r3, r9
 8003802:	eb45 0303 	adc.w	r3, r5, r3
 8003806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003826:	4629      	mov	r1, r5
 8003828:	008b      	lsls	r3, r1, #2
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003830:	4621      	mov	r1, r4
 8003832:	008a      	lsls	r2, r1, #2
 8003834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003838:	f7fc fce4 	bl	8000204 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4b60      	ldr	r3, [pc, #384]	; (80039c4 <UART_SetConfig+0x4e4>)
 8003842:	fba3 2302 	umull	r2, r3, r3, r2
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	011c      	lsls	r4, r3, #4
 800384a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384e:	2200      	movs	r2, #0
 8003850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003854:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	1891      	adds	r1, r2, r2
 8003862:	61b9      	str	r1, [r7, #24]
 8003864:	415b      	adcs	r3, r3
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800386c:	4641      	mov	r1, r8
 800386e:	1851      	adds	r1, r2, r1
 8003870:	6139      	str	r1, [r7, #16]
 8003872:	4649      	mov	r1, r9
 8003874:	414b      	adcs	r3, r1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003884:	4659      	mov	r1, fp
 8003886:	00cb      	lsls	r3, r1, #3
 8003888:	4651      	mov	r1, sl
 800388a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800388e:	4651      	mov	r1, sl
 8003890:	00ca      	lsls	r2, r1, #3
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	4603      	mov	r3, r0
 8003898:	4642      	mov	r2, r8
 800389a:	189b      	adds	r3, r3, r2
 800389c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038a0:	464b      	mov	r3, r9
 80038a2:	460a      	mov	r2, r1
 80038a4:	eb42 0303 	adc.w	r3, r2, r3
 80038a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038c4:	4649      	mov	r1, r9
 80038c6:	008b      	lsls	r3, r1, #2
 80038c8:	4641      	mov	r1, r8
 80038ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ce:	4641      	mov	r1, r8
 80038d0:	008a      	lsls	r2, r1, #2
 80038d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038d6:	f7fc fc95 	bl	8000204 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <UART_SetConfig+0x4e4>)
 80038e2:	fba3 2301 	umull	r2, r3, r3, r1
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2264      	movs	r2, #100	; 0x64
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	1acb      	subs	r3, r1, r3
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	3332      	adds	r3, #50	; 0x32
 80038f4:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <UART_SetConfig+0x4e4>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003900:	441c      	add	r4, r3
 8003902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003906:	2200      	movs	r2, #0
 8003908:	673b      	str	r3, [r7, #112]	; 0x70
 800390a:	677a      	str	r2, [r7, #116]	; 0x74
 800390c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003910:	4642      	mov	r2, r8
 8003912:	464b      	mov	r3, r9
 8003914:	1891      	adds	r1, r2, r2
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	415b      	adcs	r3, r3
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003920:	4641      	mov	r1, r8
 8003922:	1851      	adds	r1, r2, r1
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	4649      	mov	r1, r9
 8003928:	414b      	adcs	r3, r1
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003938:	4659      	mov	r1, fp
 800393a:	00cb      	lsls	r3, r1, #3
 800393c:	4651      	mov	r1, sl
 800393e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003942:	4651      	mov	r1, sl
 8003944:	00ca      	lsls	r2, r1, #3
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	4603      	mov	r3, r0
 800394c:	4642      	mov	r2, r8
 800394e:	189b      	adds	r3, r3, r2
 8003950:	66bb      	str	r3, [r7, #104]	; 0x68
 8003952:	464b      	mov	r3, r9
 8003954:	460a      	mov	r2, r1
 8003956:	eb42 0303 	adc.w	r3, r2, r3
 800395a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	663b      	str	r3, [r7, #96]	; 0x60
 8003966:	667a      	str	r2, [r7, #100]	; 0x64
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003974:	4649      	mov	r1, r9
 8003976:	008b      	lsls	r3, r1, #2
 8003978:	4641      	mov	r1, r8
 800397a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397e:	4641      	mov	r1, r8
 8003980:	008a      	lsls	r2, r1, #2
 8003982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003986:	f7fc fc3d 	bl	8000204 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <UART_SetConfig+0x4e4>)
 8003990:	fba3 1302 	umull	r1, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	2164      	movs	r1, #100	; 0x64
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <UART_SetConfig+0x4e4>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4422      	add	r2, r4
 80039b6:	609a      	str	r2, [r3, #8]
}
 80039b8:	bf00      	nop
 80039ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039be:	46bd      	mov	sp, r7
 80039c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c4:	51eb851f 	.word	0x51eb851f

080039c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039c8:	b084      	sub	sp, #16
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	f107 001c 	add.w	r0, r7, #28
 80039d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d122      	bne.n	8003a26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d105      	bne.n	8003a1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fa9c 	bl	8003f58 <USB_CoreReset>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e01a      	b.n	8003a5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa90 	bl	8003f58 <USB_CoreReset>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a4e:	e005      	b.n	8003a5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10b      	bne.n	8003a7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f043 0206 	orr.w	r2, r3, #6
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a86:	b004      	add	sp, #16
 8003a88:	4770      	bx	lr

08003a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f023 0201 	bic.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d115      	bne.n	8003afa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ada:	2001      	movs	r0, #1
 8003adc:	f7fd faec 	bl	80010b8 <HAL_Delay>
      ms++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa28 	bl	8003f3c <USB_GetMode>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d01e      	beq.n	8003b30 <USB_SetCurrentMode+0x84>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b31      	cmp	r3, #49	; 0x31
 8003af6:	d9f0      	bls.n	8003ada <USB_SetCurrentMode+0x2e>
 8003af8:	e01a      	b.n	8003b30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d115      	bne.n	8003b2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f7fd fad3 	bl	80010b8 <HAL_Delay>
      ms++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa0f 	bl	8003f3c <USB_GetMode>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <USB_SetCurrentMode+0x84>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b31      	cmp	r3, #49	; 0x31
 8003b28:	d9f0      	bls.n	8003b0c <USB_SetCurrentMode+0x60>
 8003b2a:	e001      	b.n	8003b30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e005      	b.n	8003b3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b32      	cmp	r3, #50	; 0x32
 8003b34:	d101      	bne.n	8003b3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b44:	b084      	sub	sp, #16
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e009      	b.n	8003b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3340      	adds	r3, #64	; 0x40
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	2200      	movs	r2, #0
 8003b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3301      	adds	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b0e      	cmp	r3, #14
 8003b7c:	d9f2      	bls.n	8003b64 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11c      	bne.n	8003bbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e005      	b.n	8003bca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bdc:	4619      	mov	r1, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be4:	461a      	mov	r2, r3
 8003be6:	680b      	ldr	r3, [r1, #0]
 8003be8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10c      	bne.n	8003c0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f965 	bl	8003ec8 <USB_SetDevSpeed>
 8003bfe:	e008      	b.n	8003c12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c00:	2101      	movs	r1, #1
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f960 	bl	8003ec8 <USB_SetDevSpeed>
 8003c08:	e003      	b.n	8003c12 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f95b 	bl	8003ec8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c12:	2110      	movs	r1, #16
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f8f3 	bl	8003e00 <USB_FlushTxFifo>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f91f 	bl	8003e68 <USB_FlushRxFifo>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	461a      	mov	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e043      	b.n	8003ce6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c74:	d118      	bne.n	8003ca8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e013      	b.n	8003cba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e008      	b.n	8003cba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d3b7      	bcc.n	8003c5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e043      	b.n	8003d7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d0a:	d118      	bne.n	8003d3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e013      	b.n	8003d50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	461a      	mov	r2, r3
 8003d36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	e008      	b.n	8003d50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2300      	movs	r3, #0
 8003d60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d3b7      	bcc.n	8003cf4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003da4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f043 0210 	orr.w	r2, r3, #16
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <USB_DevInit+0x2b8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f043 0208 	orr.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003df8:	b004      	add	sp, #16
 8003dfa:	4770      	bx	lr
 8003dfc:	803c3800 	.word	0x803c3800

08003e00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3301      	adds	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <USB_FlushTxFifo+0x64>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e01b      	b.n	8003e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	daf2      	bge.n	8003e0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	019b      	lsls	r3, r3, #6
 8003e30:	f043 0220 	orr.w	r2, r3, #32
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <USB_FlushTxFifo+0x64>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e006      	b.n	8003e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d0f0      	beq.n	8003e38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	00030d40 	.word	0x00030d40

08003e68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <USB_FlushRxFifo+0x5c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e018      	b.n	8003eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	daf2      	bge.n	8003e74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2210      	movs	r2, #16
 8003e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <USB_FlushRxFifo+0x5c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e006      	b.n	8003eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d0f0      	beq.n	8003e98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	00030d40 	.word	0x00030d40

08003ec8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f14:	f023 0303 	bic.w	r3, r3, #3
 8003f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f003 0301 	and.w	r3, r3, #1
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3301      	adds	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <USB_CoreReset+0x64>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e01b      	b.n	8003fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	daf2      	bge.n	8003f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3301      	adds	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <USB_CoreReset+0x64>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e006      	b.n	8003fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d0f0      	beq.n	8003f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	00030d40 	.word	0x00030d40

08003fc0 <memset>:
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d100      	bne.n	8003fca <memset+0xa>
 8003fc8:	4770      	bx	lr
 8003fca:	f803 1b01 	strb.w	r1, [r3], #1
 8003fce:	e7f9      	b.n	8003fc4 <memset+0x4>

08003fd0 <__libc_init_array>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	4d0d      	ldr	r5, [pc, #52]	; (8004008 <__libc_init_array+0x38>)
 8003fd4:	4c0d      	ldr	r4, [pc, #52]	; (800400c <__libc_init_array+0x3c>)
 8003fd6:	1b64      	subs	r4, r4, r5
 8003fd8:	10a4      	asrs	r4, r4, #2
 8003fda:	2600      	movs	r6, #0
 8003fdc:	42a6      	cmp	r6, r4
 8003fde:	d109      	bne.n	8003ff4 <__libc_init_array+0x24>
 8003fe0:	4d0b      	ldr	r5, [pc, #44]	; (8004010 <__libc_init_array+0x40>)
 8003fe2:	4c0c      	ldr	r4, [pc, #48]	; (8004014 <__libc_init_array+0x44>)
 8003fe4:	f000 f818 	bl	8004018 <_init>
 8003fe8:	1b64      	subs	r4, r4, r5
 8003fea:	10a4      	asrs	r4, r4, #2
 8003fec:	2600      	movs	r6, #0
 8003fee:	42a6      	cmp	r6, r4
 8003ff0:	d105      	bne.n	8003ffe <__libc_init_array+0x2e>
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff8:	4798      	blx	r3
 8003ffa:	3601      	adds	r6, #1
 8003ffc:	e7ee      	b.n	8003fdc <__libc_init_array+0xc>
 8003ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004002:	4798      	blx	r3
 8004004:	3601      	adds	r6, #1
 8004006:	e7f2      	b.n	8003fee <__libc_init_array+0x1e>
 8004008:	08004050 	.word	0x08004050
 800400c:	08004050 	.word	0x08004050
 8004010:	08004050 	.word	0x08004050
 8004014:	08004054 	.word	0x08004054

08004018 <_init>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr

08004024 <_fini>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr
