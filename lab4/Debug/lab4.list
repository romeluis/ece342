
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a5c  08005a5c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a5c  08005a5c  00015a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a64  08005a64  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  2000005c  08005ac8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08005ac8  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fad6  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c4  00000000  00000000  0002fba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00032070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4e  00000000  00000000  00032db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022529  00000000  00000000  000337fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b40  00000000  00000000  00055d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cce73  00000000  00000000  00067867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ccc  00000000  00000000  001346dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001383a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005814 	.word	0x08005814

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005814 	.word	0x08005814

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fc9e 	bl	8004f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a28      	ldr	r2, [pc, #160]	; (800068c <SystemClock_Config+0xd0>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xd4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xd4>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fae5 	bl	8003c14 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 f970 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fc5a 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800067e:	f000 f959 	bl	8000934 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f001 fb23 	bl	8001d1c <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f92a 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000078 	.word	0x20000078
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART3_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000728:	f003 fd12 	bl	8004150 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f8ff 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000cc 	.word	0x200000cc
 8000740:	40004800 	.word	0x40004800

08000744 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800074e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000752:	2206      	movs	r2, #6
 8000754:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000758:	2202      	movs	r2, #2
 800075a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2202      	movs	r2, #2
 8000766:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2201      	movs	r2, #1
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	f002 fa87 	bl	8002c9a <HAL_PCD_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8cf 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000110 	.word	0x20000110

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
  /* Enable button B1*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f001 f893 	bl	80018d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b0:	2028      	movs	r0, #40	; 0x28
 80007b2:	f001 f8ac 	bl	800190e <HAL_NVIC_EnableIRQ>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <MX_GPIO_Init+0x15c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4b      	ldr	r2, [pc, #300]	; (80008fc <MX_GPIO_Init+0x15c>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b49      	ldr	r3, [pc, #292]	; (80008fc <MX_GPIO_Init+0x15c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <MX_GPIO_Init+0x15c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a44      	ldr	r2, [pc, #272]	; (80008fc <MX_GPIO_Init+0x15c>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b42      	ldr	r3, [pc, #264]	; (80008fc <MX_GPIO_Init+0x15c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a3d      	ldr	r2, [pc, #244]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a36      	ldr	r2, [pc, #216]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b34      	ldr	r3, [pc, #208]	; (80008fc <MX_GPIO_Init+0x15c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_GPIO_Init+0x15c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <MX_GPIO_Init+0x15c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0x15c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0181 	movw	r1, #16513	; 0x4081
 8000874:	4822      	ldr	r0, [pc, #136]	; (8000900 <MX_GPIO_Init+0x160>)
 8000876:	f001 f9f9 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4821      	ldr	r0, [pc, #132]	; (8000904 <MX_GPIO_Init+0x164>)
 8000880:	f001 f9f4 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	481b      	ldr	r0, [pc, #108]	; (8000908 <MX_GPIO_Init+0x168>)
 800089c:	f001 f852 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_GPIO_Init+0x160>)
 80008ba:	f001 f843 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <MX_GPIO_Init+0x164>)
 80008d6:	f001 f835 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0x164>)
 80008ee:	f001 f829 	bl	8001944 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400
 8000904:	40021800 	.word	0x40021800
 8000908:	40020800 	.word	0x40020800

0800090c <print_msg>:

/* USER CODE BEGIN 4 */
void print_msg(char * msg) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fc7b 	bl	8000210 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <print_msg+0x24>)
 8000924:	f003 fc61 	bl	80041ea <HAL_UART_Transmit>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000cc 	.word	0x200000cc

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  print_msg("ERROR!!!!");
 800093c:	4801      	ldr	r0, [pc, #4]	; (8000944 <Error_Handler+0x10>)
 800093e:	f7ff ffe5 	bl	800090c <print_msg>
 8000942:	e7fb      	b.n	800093c <Error_Handler+0x8>
 8000944:	0800582c 	.word	0x0800582c

08000948 <bcd2bin>:

extern I2C_HandleTypeDef hi2c1;

int interruptStatus = 0;

uint8_t bcd2bin(uint8_t data){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
 return ((data >> 4) * 10) + (data & 0x0F);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4413      	add	r3, r2
 800096c:	b2db      	uxtb	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <bin2bcd>:

uint8_t bin2bcd(uint8_t data){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  return ((data / 10) << 4)|(data % 10);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <bin2bcd+0x44>)
 800098a:	fba2 2303 	umull	r2, r3, r2, r3
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	b258      	sxtb	r0, r3
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <bin2bcd+0x44>)
 800099a:	fba3 1302 	umull	r1, r3, r3, r2
 800099e:	08d9      	lsrs	r1, r3, #3
 80009a0:	460b      	mov	r3, r1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	4303      	orrs	r3, r0
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	cccccccd 	.word	0xcccccccd

080009c4 <rtc_read>:

uint8_t rtc_read(uint8_t address)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af04      	add	r7, sp, #16
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data;

  if (HAL_I2C_Mem_Read(&hi2c1,ADDR_DS1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100) != HAL_OK) {
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	9302      	str	r3, [sp, #8]
 80009d6:	2301      	movs	r3, #1
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	f107 030f 	add.w	r3, r7, #15
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2301      	movs	r3, #1
 80009e2:	21d0      	movs	r1, #208	; 0xd0
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <rtc_read+0x3c>)
 80009e6:	f001 fbd7 	bl	8002198 <HAL_I2C_Mem_Read>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <rtc_read+0x30>
    Error_Handler();
 80009f0:	f7ff ffa0 	bl	8000934 <Error_Handler>
  }

  return data;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000078 	.word	0x20000078

08000a04 <rtc_write>:

void rtc_write(uint8_t address,uint8_t data)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	4613      	mov	r3, r2
 8000a12:	71bb      	strb	r3, [r7, #6]
  if (HAL_I2C_Mem_Write(&hi2c1,ADDR_DS1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100) != HAL_OK){
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	21d0      	movs	r1, #208	; 0xd0
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <rtc_write+0x3c>)
 8000a2a:	f001 fabb 	bl	8001fa4 <HAL_I2C_Mem_Write>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <rtc_write+0x34>
    Error_Handler();
 8000a34:	f7ff ff7e 	bl	8000934 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000078 	.word	0x20000078

08000a44 <rtc_init>:

void rtc_init()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  // Initialize Real-Time Clock peripheral
  uint8_t rs=0, sqwe=1, out=0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	71bb      	strb	r3, [r7, #6]
 8000a52:	2300      	movs	r3, #0
 8000a54:	717b      	strb	r3, [r7, #5]
  
  rs&=3;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if (sqwe) rs|=0x10;
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <rtc_init+0x28>
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if (out) rs|=0x80;
 8000a6c:	797b      	ldrb	r3, [r7, #5]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <rtc_init+0x36>
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a78:	71fb      	strb	r3, [r7, #7]

  rtc_write(0x07,rs);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f7ff ffc0 	bl	8000a04 <rtc_write>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  *hour = bcd2bin(rtc_read(2));
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff ff93 	bl	80009c4 <rtc_read>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff51 	bl	8000948 <bcd2bin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	701a      	strb	r2, [r3, #0]
  *min = bcd2bin(rtc_read(1));
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff88 	bl	80009c4 <rtc_read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff46 	bl	8000948 <bcd2bin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	701a      	strb	r2, [r3, #0]
  *sec = bcd2bin(rtc_read(0));
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff ff7d 	bl	80009c4 <rtc_read>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff3b 	bl	8000948 <bcd2bin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	701a      	strb	r2, [r3, #0]
  return;
 8000ada:	bf00      	nop
}
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <rtc_set_time>:

void rtc_set_time(uint8_t hour,uint8_t min,uint8_t sec)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	460b      	mov	r3, r1
 8000aee:	71bb      	strb	r3, [r7, #6]
 8000af0:	4613      	mov	r3, r2
 8000af2:	717b      	strb	r3, [r7, #5]
  rtc_write(2, bin2bcd(hour));
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff40 	bl	800097c <bin2bcd>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4619      	mov	r1, r3
 8000b00:	2002      	movs	r0, #2
 8000b02:	f7ff ff7f 	bl	8000a04 <rtc_write>
  rtc_write(1, bin2bcd(min));
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff37 	bl	800097c <bin2bcd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4619      	mov	r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff76 	bl	8000a04 <rtc_write>
  rtc_write(0, bin2bcd(sec));
 8000b18:	797b      	ldrb	r3, [r7, #5]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff2e 	bl	800097c <bin2bcd>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4619      	mov	r1, r3
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff ff6d 	bl	8000a04 <rtc_write>
  return;
 8000b2a:	bf00      	nop
}
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <rtc_get_date>:

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	603b      	str	r3, [r7, #0]
  *week_day = bcd2bin(rtc_read(3));
 8000b40:	2003      	movs	r0, #3
 8000b42:	f7ff ff3f 	bl	80009c4 <rtc_read>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fefd 	bl	8000948 <bcd2bin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	701a      	strb	r2, [r3, #0]
  *day = bcd2bin(rtc_read(4));
 8000b56:	2004      	movs	r0, #4
 8000b58:	f7ff ff34 	bl	80009c4 <rtc_read>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fef2 	bl	8000948 <bcd2bin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	701a      	strb	r2, [r3, #0]
  *month = bcd2bin(rtc_read(5));
 8000b6c:	2005      	movs	r0, #5
 8000b6e:	f7ff ff29 	bl	80009c4 <rtc_read>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fee7 	bl	8000948 <bcd2bin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	701a      	strb	r2, [r3, #0]
  *year = bcd2bin(rtc_read(6));
 8000b82:	2006      	movs	r0, #6
 8000b84:	f7ff ff1e 	bl	80009c4 <rtc_read>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fedc 	bl	8000948 <bcd2bin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	701a      	strb	r2, [r3, #0]
  return;
 8000b98:	bf00      	nop
}
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <rtc_set_date>:

void rtc_set_date(uint8_t week_day,uint8_t day,uint8_t month,uint8_t year)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	717b      	strb	r3, [r7, #5]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	713b      	strb	r3, [r7, #4]
	rtc_write(3, bin2bcd(week_day));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fedb 	bl	800097c <bin2bcd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f7ff ff1a 	bl	8000a04 <rtc_write>
	rtc_write(4, bin2bcd(day));
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fed2 	bl	800097c <bin2bcd>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2004      	movs	r0, #4
 8000bde:	f7ff ff11 	bl	8000a04 <rtc_write>
	rtc_write(5, bin2bcd(month));
 8000be2:	797b      	ldrb	r3, [r7, #5]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fec9 	bl	800097c <bin2bcd>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4619      	mov	r1, r3
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f7ff ff08 	bl	8000a04 <rtc_write>
	rtc_write(6, bin2bcd(year));
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fec0 	bl	800097c <bin2bcd>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2006      	movs	r0, #6
 8000c02:	f7ff feff 	bl	8000a04 <rtc_write>
	return;
 8000c06:	bf00      	nop
}
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
	...

08000c10 <eeprom_write>:

void eeprom_write(uint16_t address, uint8_t *data, uint16_t size) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af04      	add	r7, sp, #16
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Write(&hi2c1,ADDR_EEPROM,address,I2C_MEMADD_SIZE_16BIT,data,size,100) != HAL_OK){
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	2364      	movs	r3, #100	; 0x64
 8000c24:	9302      	str	r3, [sp, #8]
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2310      	movs	r3, #16
 8000c30:	21a0      	movs	r1, #160	; 0xa0
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <eeprom_write+0x40>)
 8000c34:	f001 f9b6 	bl	8001fa4 <HAL_I2C_Mem_Write>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <eeprom_write+0x32>
	    Error_Handler();
 8000c3e:	f7ff fe79 	bl	8000934 <Error_Handler>
	  }
	HAL_Delay(11);
 8000c42:	200b      	movs	r0, #11
 8000c44:	f000 fd48 	bl	80016d8 <HAL_Delay>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000078 	.word	0x20000078

08000c54 <eeprom_read>:

uint8_t eeprom_read(uint16_t address) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af04      	add	r7, sp, #16
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
	uint8_t data;

	 if (HAL_I2C_Mem_Read(&hi2c1,ADDR_EEPROM,address,I2C_MEMADD_SIZE_16BIT,&data,1,100) != HAL_OK) {
 8000c5e:	88fa      	ldrh	r2, [r7, #6]
 8000c60:	2364      	movs	r3, #100	; 0x64
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	f107 030f 	add.w	r3, r7, #15
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2310      	movs	r3, #16
 8000c70:	21a0      	movs	r1, #160	; 0xa0
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <eeprom_read+0x40>)
 8000c74:	f001 fa90 	bl	8002198 <HAL_I2C_Mem_Read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <eeprom_read+0x2e>
	    Error_Handler();
 8000c7e:	f7ff fe59 	bl	8000934 <Error_Handler>
	  }
	 HAL_Delay(11);
 8000c82:	200b      	movs	r0, #11
 8000c84:	f000 fd28 	bl	80016d8 <HAL_Delay>

	 return data;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000078 	.word	0x20000078

08000c98 <main>:
#include <string.h>

uint8_t alarmStatus;

int main(void)
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b0ab      	sub	sp, #172	; 0xac
 8000c9c:	af06      	add	r7, sp, #24
  /* Reset of all peripherals. */
  HAL_Init();
 8000c9e:	f000 fca9 	bl	80015f4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f7ff fc8b 	bl	80005bc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f7ff fd7b 	bl	80007a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000caa:	f7ff fcf3 	bl	8000694 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cae:	f7ff fd1f 	bl	80006f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();  
 8000cb2:	f7ff fd47 	bl	8000744 <MX_USB_OTG_FS_PCD_Init>
  rtc_init();
 8000cb6:	f7ff fec5 	bl	8000a44 <rtc_init>

  char msg[100];

  //Get time & print
  uint8_t hour = 10;
 8000cba:	230a      	movs	r3, #10
 8000cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t minute = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t second = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t weekday = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t day = 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t month = 7;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t year = 24;
 8000cde:	2318      	movs	r3, #24
 8000ce0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  rtc_set_date(weekday, day, month, year);
 8000ce4:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8000ce8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8000cec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000cf0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cf4:	f7ff ff54 	bl	8000ba0 <rtc_set_date>
  rtc_set_time(hour, minute, second);
 8000cf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cfc:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8000d00:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff feec 	bl	8000ae2 <rtc_set_time>

  second = eeprom_read(0);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff ffa2 	bl	8000c54 <eeprom_read>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  minute = eeprom_read(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff ff9c 	bl	8000c54 <eeprom_read>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  hour = eeprom_read(2);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff ff96 	bl	8000c54 <eeprom_read>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  weekday = eeprom_read(3);
 8000d2e:	2003      	movs	r0, #3
 8000d30:	f7ff ff90 	bl	8000c54 <eeprom_read>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  day = eeprom_read(4);
 8000d3a:	2004      	movs	r0, #4
 8000d3c:	f7ff ff8a 	bl	8000c54 <eeprom_read>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  month = eeprom_read(5);
 8000d46:	2005      	movs	r0, #5
 8000d48:	f7ff ff84 	bl	8000c54 <eeprom_read>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  year = eeprom_read(6);
 8000d52:	2006      	movs	r0, #6
 8000d54:	f7ff ff7e 	bl	8000c54 <eeprom_read>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  alarmStatus = eeprom_read(7);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f7ff ff78 	bl	8000c54 <eeprom_read>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	4ba3      	ldr	r3, [pc, #652]	; (8000ff8 <main+0x360>)
 8000d6a:	701a      	strb	r2, [r3, #0]

  sprintf(msg, "The saved date is: weekday %d, day %d, month %d, year 20%d, at %d:%d:%d\r\n", weekday, day, month, year, hour, minute, second);
 8000d6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d70:	461e      	mov	r6, r3
 8000d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d76:	469c      	mov	ip, r3
 8000d78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d7c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000d80:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000d84:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8000d88:	4604      	mov	r4, r0
 8000d8a:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8000d8e:	4605      	mov	r5, r0
 8000d90:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000d94:	9504      	str	r5, [sp, #16]
 8000d96:	9403      	str	r4, [sp, #12]
 8000d98:	9102      	str	r1, [sp, #8]
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	4663      	mov	r3, ip
 8000da0:	4632      	mov	r2, r6
 8000da2:	4996      	ldr	r1, [pc, #600]	; (8000ffc <main+0x364>)
 8000da4:	f004 f892 	bl	8004ecc <siprintf>
  print_msg(msg);
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fdad 	bl	800090c <print_msg>

  hour = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  minute = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  second = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  weekday = 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  day = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  month = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  year = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  rtc_get_date(&weekday, &day, &month, &year);
 8000ddc:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000de0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000de4:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000de8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000dec:	f7ff fea1 	bl	8000b32 <rtc_get_date>
  rtc_get_time(&hour, &minute, &second);
 8000df0:	f107 0229 	add.w	r2, r7, #41	; 0x29
 8000df4:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8000df8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe45 	bl	8000a8c <rtc_get_time>

  sprintf(msg, "It is: weekday %d, day %d, month %d, year 20%d, at %d:%d:%d\r\n", weekday, day, month, year, hour, minute, second);
 8000e02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e06:	461e      	mov	r6, r3
 8000e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e12:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000e16:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000e1a:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8000e1e:	4604      	mov	r4, r0
 8000e20:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8000e24:	4605      	mov	r5, r0
 8000e26:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000e2a:	9504      	str	r5, [sp, #16]
 8000e2c:	9403      	str	r4, [sp, #12]
 8000e2e:	9102      	str	r1, [sp, #8]
 8000e30:	9201      	str	r2, [sp, #4]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4663      	mov	r3, ip
 8000e36:	4632      	mov	r2, r6
 8000e38:	4971      	ldr	r1, [pc, #452]	; (8001000 <main+0x368>)
 8000e3a:	f004 f847 	bl	8004ecc <siprintf>
  print_msg(msg);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fd62 	bl	800090c <print_msg>

  while (1)
  {
	  rtc_get_date(&weekday, &day, &month, &year);
 8000e48:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000e4c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000e50:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000e54:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e58:	f7ff fe6b 	bl	8000b32 <rtc_get_date>
	  rtc_get_time(&hour, &minute, &second);
 8000e5c:	f107 0229 	add.w	r2, r7, #41	; 0x29
 8000e60:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8000e64:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe0f 	bl	8000a8c <rtc_get_time>

	  char dayS[10];
	  if (weekday == 1) {
 8000e6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d106      	bne.n	8000e84 <main+0x1ec>
		  sprintf(dayS, "Sunday");
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	4962      	ldr	r1, [pc, #392]	; (8001004 <main+0x36c>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 f825 	bl	8004ecc <siprintf>
 8000e82:	e040      	b.n	8000f06 <main+0x26e>
	  } else if (weekday == 2) {
 8000e84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d106      	bne.n	8000e9a <main+0x202>
		  sprintf(dayS, "Monday");
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	495d      	ldr	r1, [pc, #372]	; (8001008 <main+0x370>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 f81a 	bl	8004ecc <siprintf>
 8000e98:	e035      	b.n	8000f06 <main+0x26e>
	  } else if (weekday == 3) {
 8000e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d106      	bne.n	8000eb0 <main+0x218>
		  sprintf(dayS, "Tuesday");
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	4959      	ldr	r1, [pc, #356]	; (800100c <main+0x374>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 f80f 	bl	8004ecc <siprintf>
 8000eae:	e02a      	b.n	8000f06 <main+0x26e>
	  } else if (weekday == 4) {
 8000eb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d106      	bne.n	8000ec6 <main+0x22e>
		  sprintf(dayS, "Wednesday");
 8000eb8:	f107 0318 	add.w	r3, r7, #24
 8000ebc:	4954      	ldr	r1, [pc, #336]	; (8001010 <main+0x378>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 f804 	bl	8004ecc <siprintf>
 8000ec4:	e01f      	b.n	8000f06 <main+0x26e>
	  } else if (weekday == 5) {
 8000ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d106      	bne.n	8000edc <main+0x244>
		  sprintf(dayS, "Thursday");
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4950      	ldr	r1, [pc, #320]	; (8001014 <main+0x37c>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fff9 	bl	8004ecc <siprintf>
 8000eda:	e014      	b.n	8000f06 <main+0x26e>
	  } else if (weekday == 6) {
 8000edc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d106      	bne.n	8000ef2 <main+0x25a>
		  sprintf(dayS, "Friday");
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	494b      	ldr	r1, [pc, #300]	; (8001018 <main+0x380>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 ffee 	bl	8004ecc <siprintf>
 8000ef0:	e009      	b.n	8000f06 <main+0x26e>
	  } else if (weekday == 7) {
 8000ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	d105      	bne.n	8000f06 <main+0x26e>
		  sprintf(dayS, "Saturday");
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	4947      	ldr	r1, [pc, #284]	; (800101c <main+0x384>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 ffe3 	bl	8004ecc <siprintf>
	  }

	  char monthS[10];
	  if (month == 1) {
 8000f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d106      	bne.n	8000f1c <main+0x284>
		  sprintf(monthS, "January");
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4943      	ldr	r1, [pc, #268]	; (8001020 <main+0x388>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 ffd9 	bl	8004ecc <siprintf>
 8000f1a:	e0a1      	b.n	8001060 <main+0x3c8>
	  } else if (month == 2) {
 8000f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d106      	bne.n	8000f32 <main+0x29a>
		  sprintf(monthS, "February");
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	493e      	ldr	r1, [pc, #248]	; (8001024 <main+0x38c>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 ffce 	bl	8004ecc <siprintf>
 8000f30:	e096      	b.n	8001060 <main+0x3c8>
	  } else if (month == 3) {
 8000f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d106      	bne.n	8000f48 <main+0x2b0>
		  sprintf(monthS, "March");
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	493a      	ldr	r1, [pc, #232]	; (8001028 <main+0x390>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 ffc3 	bl	8004ecc <siprintf>
 8000f46:	e08b      	b.n	8001060 <main+0x3c8>
	  } else if (month == 4) {
 8000f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d106      	bne.n	8000f5e <main+0x2c6>
		  sprintf(monthS, "April");
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4935      	ldr	r1, [pc, #212]	; (800102c <main+0x394>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 ffb8 	bl	8004ecc <siprintf>
 8000f5c:	e080      	b.n	8001060 <main+0x3c8>
	  } else if (month == 5) {
 8000f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d106      	bne.n	8000f74 <main+0x2dc>
		  sprintf(monthS, "May");
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4931      	ldr	r1, [pc, #196]	; (8001030 <main+0x398>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 ffad 	bl	8004ecc <siprintf>
 8000f72:	e075      	b.n	8001060 <main+0x3c8>
	  } else if (month == 6) {
 8000f74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f78:	2b06      	cmp	r3, #6
 8000f7a:	d106      	bne.n	8000f8a <main+0x2f2>
		  sprintf(monthS, "June");
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	492c      	ldr	r1, [pc, #176]	; (8001034 <main+0x39c>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 ffa2 	bl	8004ecc <siprintf>
 8000f88:	e06a      	b.n	8001060 <main+0x3c8>
	  } else if (month == 7) {
 8000f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d106      	bne.n	8000fa0 <main+0x308>
		  sprintf(monthS, "July");
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4928      	ldr	r1, [pc, #160]	; (8001038 <main+0x3a0>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 ff97 	bl	8004ecc <siprintf>
 8000f9e:	e05f      	b.n	8001060 <main+0x3c8>
	  } else if (month == 8) {
 8000fa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d106      	bne.n	8000fb6 <main+0x31e>
		  sprintf(monthS, "August");
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4923      	ldr	r1, [pc, #140]	; (800103c <main+0x3a4>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 ff8c 	bl	8004ecc <siprintf>
 8000fb4:	e054      	b.n	8001060 <main+0x3c8>
	  } else if (month == 9) {
 8000fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	d106      	bne.n	8000fcc <main+0x334>
		  sprintf(monthS, "September");
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	491f      	ldr	r1, [pc, #124]	; (8001040 <main+0x3a8>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 ff81 	bl	8004ecc <siprintf>
 8000fca:	e049      	b.n	8001060 <main+0x3c8>
	  } else if (month == 10) {
 8000fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fd0:	2b0a      	cmp	r3, #10
 8000fd2:	d106      	bne.n	8000fe2 <main+0x34a>
		  sprintf(monthS, "October");
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	491a      	ldr	r1, [pc, #104]	; (8001044 <main+0x3ac>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 ff76 	bl	8004ecc <siprintf>
 8000fe0:	e03e      	b.n	8001060 <main+0x3c8>
	  } else if (month == 11) {
 8000fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fe6:	2b0b      	cmp	r3, #11
 8000fe8:	d130      	bne.n	800104c <main+0x3b4>
		  sprintf(monthS, "November");
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4916      	ldr	r1, [pc, #88]	; (8001048 <main+0x3b0>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 ff6b 	bl	8004ecc <siprintf>
 8000ff6:	e033      	b.n	8001060 <main+0x3c8>
 8000ff8:	20000620 	.word	0x20000620
 8000ffc:	08005838 	.word	0x08005838
 8001000:	08005884 	.word	0x08005884
 8001004:	080058c4 	.word	0x080058c4
 8001008:	080058cc 	.word	0x080058cc
 800100c:	080058d4 	.word	0x080058d4
 8001010:	080058dc 	.word	0x080058dc
 8001014:	080058e8 	.word	0x080058e8
 8001018:	080058f4 	.word	0x080058f4
 800101c:	080058fc 	.word	0x080058fc
 8001020:	08005908 	.word	0x08005908
 8001024:	08005910 	.word	0x08005910
 8001028:	0800591c 	.word	0x0800591c
 800102c:	08005924 	.word	0x08005924
 8001030:	0800592c 	.word	0x0800592c
 8001034:	08005930 	.word	0x08005930
 8001038:	08005938 	.word	0x08005938
 800103c:	08005940 	.word	0x08005940
 8001040:	08005948 	.word	0x08005948
 8001044:	08005954 	.word	0x08005954
 8001048:	0800595c 	.word	0x0800595c
	  } else if (month == 12) {
 800104c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001050:	2b0c      	cmp	r3, #12
 8001052:	d105      	bne.n	8001060 <main+0x3c8>
		  sprintf(monthS, "December");
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	493f      	ldr	r1, [pc, #252]	; (8001158 <main+0x4c0>)
 800105a:	4618      	mov	r0, r3
 800105c:	f003 ff36 	bl	8004ecc <siprintf>
	  }

	  sprintf(msg, "%s %s %dst, 20%d at %d:%d:%d. Alarm Status: %d\r\n", dayS, monthS, day, year, hour, minute, second, alarmStatus);
 8001060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001064:	4619      	mov	r1, r3
 8001066:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800106a:	461c      	mov	r4, r3
 800106c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001070:	461d      	mov	r5, r3
 8001072:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001076:	461e      	mov	r6, r3
 8001078:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <main+0x4c4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	f107 0c18 	add.w	ip, r7, #24
 800108c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001090:	9205      	str	r2, [sp, #20]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	9204      	str	r2, [sp, #16]
 8001096:	9603      	str	r6, [sp, #12]
 8001098:	9502      	str	r5, [sp, #8]
 800109a:	9401      	str	r4, [sp, #4]
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	4662      	mov	r2, ip
 80010a0:	492f      	ldr	r1, [pc, #188]	; (8001160 <main+0x4c8>)
 80010a2:	f003 ff13 	bl	8004ecc <siprintf>
	  print_msg(msg);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fc2e 	bl	800090c <print_msg>

	  if(interruptStatus) {
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <main+0x4cc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d024      	beq.n	8001102 <main+0x46a>
		  if (!alarmStatus) {
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <main+0x4c4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d110      	bne.n	80010e2 <main+0x44a>
			  print_msg("Time reset. Previous time saved. Alarm active.\r\n");
 80010c0:	4829      	ldr	r0, [pc, #164]	; (8001168 <main+0x4d0>)
 80010c2:	f7ff fc23 	bl	800090c <print_msg>
			  reset();
 80010c6:	f000 f855 	bl	8001174 <reset>
			  alarmStatus = 1;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <main+0x4c4>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
			  eeprom_write(7, &alarmStatus, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	4922      	ldr	r1, [pc, #136]	; (800115c <main+0x4c4>)
 80010d4:	2007      	movs	r0, #7
 80010d6:	f7ff fd9b 	bl	8000c10 <eeprom_write>
			  interruptStatus = 0;
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <main+0x4cc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e00f      	b.n	8001102 <main+0x46a>
		  } else {
			  print_msg("Time reset. Previous time saved. Alarm disabled.\r\n");
 80010e2:	4822      	ldr	r0, [pc, #136]	; (800116c <main+0x4d4>)
 80010e4:	f7ff fc12 	bl	800090c <print_msg>
			  reset();
 80010e8:	f000 f844 	bl	8001174 <reset>
			  alarmStatus = 0;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <main+0x4c4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
			  eeprom_write(7, &alarmStatus, 1);
 80010f2:	2201      	movs	r2, #1
 80010f4:	4919      	ldr	r1, [pc, #100]	; (800115c <main+0x4c4>)
 80010f6:	2007      	movs	r0, #7
 80010f8:	f7ff fd8a 	bl	8000c10 <eeprom_write>
			  interruptStatus = 0;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <main+0x4cc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (alarmStatus && hour == 10 && minute == 0 && second == 10) {
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <main+0x4c4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d020      	beq.n	800114c <main+0x4b4>
 800110a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d11c      	bne.n	800114c <main+0x4b4>
 8001112:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001116:	2b00      	cmp	r3, #0
 8001118:	d118      	bne.n	800114c <main+0x4b4>
 800111a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800111e:	2b0a      	cmp	r3, #10
 8001120:	d114      	bne.n	800114c <main+0x4b4>
		  while(!interruptStatus) {
 8001122:	e00f      	b.n	8001144 <main+0x4ac>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001124:	2101      	movs	r1, #1
 8001126:	4812      	ldr	r0, [pc, #72]	; (8001170 <main+0x4d8>)
 8001128:	f000 fdb9 	bl	8001c9e <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <main+0x4d8>)
 8001130:	f000 fdb5 	bl	8001c9e <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <main+0x4d8>)
 800113a:	f000 fdb0 	bl	8001c9e <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f000 faca 	bl	80016d8 <HAL_Delay>
		  while(!interruptStatus) {
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <main+0x4cc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0eb      	beq.n	8001124 <main+0x48c>
		  }
	  }

	  HAL_Delay(1000);
 800114c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001150:	f000 fac2 	bl	80016d8 <HAL_Delay>
  {
 8001154:	e678      	b.n	8000e48 <main+0x1b0>
 8001156:	bf00      	nop
 8001158:	08005968 	.word	0x08005968
 800115c:	20000620 	.word	0x20000620
 8001160:	08005974 	.word	0x08005974
 8001164:	2000061c 	.word	0x2000061c
 8001168:	080059a8 	.word	0x080059a8
 800116c:	080059dc 	.word	0x080059dc
 8001170:	40020400 	.word	0x40020400

08001174 <reset>:
  }
}

void reset() {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	  uint8_t hourI = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
	  uint8_t minuteI = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
	  uint8_t secondI = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	717b      	strb	r3, [r7, #5]
	  uint8_t weekdayI = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	713b      	strb	r3, [r7, #4]
	  uint8_t dayI = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	70fb      	strb	r3, [r7, #3]
	  uint8_t monthI = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	70bb      	strb	r3, [r7, #2]
	  uint8_t yearI = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	707b      	strb	r3, [r7, #1]

	 rtc_get_date(&weekdayI, &dayI, &monthI, &yearI);
 8001196:	1c7b      	adds	r3, r7, #1
 8001198:	1cba      	adds	r2, r7, #2
 800119a:	1cf9      	adds	r1, r7, #3
 800119c:	1d38      	adds	r0, r7, #4
 800119e:	f7ff fcc8 	bl	8000b32 <rtc_get_date>
	 rtc_get_time(&hourI, &minuteI, &secondI);
 80011a2:	1d7a      	adds	r2, r7, #5
 80011a4:	1db9      	adds	r1, r7, #6
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fc6f 	bl	8000a8c <rtc_get_time>

	 eeprom_write(0, &secondI, 1);
 80011ae:	1d7b      	adds	r3, r7, #5
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fd2b 	bl	8000c10 <eeprom_write>
	 eeprom_write(1, &minuteI, 1);
 80011ba:	1dbb      	adds	r3, r7, #6
 80011bc:	2201      	movs	r2, #1
 80011be:	4619      	mov	r1, r3
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fd25 	bl	8000c10 <eeprom_write>
	 eeprom_write(2, &hourI, 1);
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2002      	movs	r0, #2
 80011ce:	f7ff fd1f 	bl	8000c10 <eeprom_write>
	 eeprom_write(3, &weekdayI, 1);
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	2003      	movs	r0, #3
 80011da:	f7ff fd19 	bl	8000c10 <eeprom_write>
	 eeprom_write(4, &dayI, 1);
 80011de:	1cfb      	adds	r3, r7, #3
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	2004      	movs	r0, #4
 80011e6:	f7ff fd13 	bl	8000c10 <eeprom_write>
	 eeprom_write(5, &monthI, 1);
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	2005      	movs	r0, #5
 80011f2:	f7ff fd0d 	bl	8000c10 <eeprom_write>
	 eeprom_write(6, &yearI, 1);
 80011f6:	1c7b      	adds	r3, r7, #1
 80011f8:	2201      	movs	r2, #1
 80011fa:	4619      	mov	r1, r3
 80011fc:	2006      	movs	r0, #6
 80011fe:	f7ff fd07 	bl	8000c10 <eeprom_write>

	//Reset simulation
	 hourI = 10;
 8001202:	230a      	movs	r3, #10
 8001204:	71fb      	strb	r3, [r7, #7]
	 minuteI = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	71bb      	strb	r3, [r7, #6]
	 secondI = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	717b      	strb	r3, [r7, #5]
	 weekdayI = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	713b      	strb	r3, [r7, #4]
	 dayI = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	70fb      	strb	r3, [r7, #3]
	 monthI = 7;
 8001216:	2307      	movs	r3, #7
 8001218:	70bb      	strb	r3, [r7, #2]
	 yearI = 24;
 800121a:	2318      	movs	r3, #24
 800121c:	707b      	strb	r3, [r7, #1]

	rtc_set_date(weekdayI, dayI, monthI, yearI);
 800121e:	7938      	ldrb	r0, [r7, #4]
 8001220:	78f9      	ldrb	r1, [r7, #3]
 8001222:	78ba      	ldrb	r2, [r7, #2]
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	f7ff fcbb 	bl	8000ba0 <rtc_set_date>
	rtc_set_time(hourI, minuteI, secondI);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	79b9      	ldrb	r1, [r7, #6]
 800122e:	797a      	ldrb	r2, [r7, #5]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fc56 	bl	8000ae2 <rtc_set_time>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_MspInit+0x4c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_MspInit+0x4c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_I2C_MspInit+0x84>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12c      	bne.n	800130c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e0:	2304      	movs	r3, #4
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <HAL_I2C_MspInit+0x8c>)
 80012ec:	f000 fb2a 	bl	8001944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_I2C_MspInit+0x88>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005400 	.word	0x40005400
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12c      	bne.n	800139c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_UART_MspInit+0x88>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800137a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800138c:	2307      	movs	r3, #7
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_UART_MspInit+0x8c>)
 8001398:	f000 fad4 	bl	8001944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40004800 	.word	0x40004800
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020c00 	.word	0x40020c00

080013b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0a0      	sub	sp, #128	; 0x80
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	225c      	movs	r2, #92	; 0x5c
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fd9b 	bl	8004f0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013de:	d14e      	bne.n	800147e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80013e6:	2300      	movs	r3, #0
 80013e8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 feb6 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80013fa:	f7ff fa9b 	bl	8000934 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a20      	ldr	r2, [pc, #128]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800141a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800142c:	230a      	movs	r3, #10
 800142e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001434:	4619      	mov	r1, r3
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <HAL_PCD_MspInit+0xdc>)
 8001438:	f000 fa84 	bl	8001944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800144e:	4619      	mov	r1, r3
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <HAL_PCD_MspInit+0xdc>)
 8001452:	f000 fa77 	bl	8001944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 8001458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6353      	str	r3, [r2, #52]	; 0x34
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_PCD_MspInit+0xd8>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3780      	adds	r7, #128	; 0x80
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f8dc 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  if (__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)) {
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <EXTI15_10_IRQHandler+0x24>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <EXTI15_10_IRQHandler+0x16>
	  interruptStatus = 1;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <EXTI15_10_IRQHandler+0x28>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80014fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014fe:	f000 fbe9 	bl	8001cd4 <HAL_GPIO_EXTI_IRQHandler>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40013c00 	.word	0x40013c00
 800150c:	2000061c 	.word	0x2000061c

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f003 fcec 	bl	8004f1c <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20020000 	.word	0x20020000
 8001570:	00000400 	.word	0x00000400
 8001574:	20000624 	.word	0x20000624
 8001578:	20000778 	.word	0x20000778

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015bc:	4c0b      	ldr	r4, [pc, #44]	; (80015ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ca:	f7ff ffd7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f003 fcab 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff fb61 	bl	8000c98 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015e4:	08005a6c 	.word	0x08005a6c
  ldr r2, =_sbss
 80015e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015ec:	20000774 	.word	0x20000774

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_Init+0x40>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_Init+0x40>)
 800160a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_Init+0x40>)
 8001616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f94f 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	2000      	movs	r0, #0
 8001624:	f000 f808 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fe0a 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x54>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x58>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f967 	bl	800192a <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001674:	f000 f92f 	bl	80018d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_InitTick+0x5c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000000 	.word	0x20000000
 8001690:	20000008 	.word	0x20000008
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x20>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x24>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_IncTick+0x24>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000628 	.word	0x20000628

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_GetTick+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000628 	.word	0x20000628

080016d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff ffee 	bl	80016c0 <HAL_GetTick>
 80016e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016f0:	d005      	beq.n	80016fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_Delay+0x44>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016fe:	bf00      	nop
 8001700:	f7ff ffde 	bl	80016c0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8f7      	bhi.n	8001700 <HAL_Delay+0x28>
  {
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <__NVIC_EnableIRQ+0x38>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	; (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	; 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a0:	f7ff ff8e 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff29 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e8:	f7ff ff3e 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff8e 	bl	8001814 <NVIC_EncodePriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff5d 	bl	80017c0 <__NVIC_SetPriority>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff31 	bl	8001784 <__NVIC_EnableIRQ>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffa2 	bl	800187c <SysTick_Config>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e165      	b.n	8001c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8154 	bne.w	8001c26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d005      	beq.n	8001996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	2b02      	cmp	r3, #2
 8001994:	d130      	bne.n	80019f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 0201 	and.w	r2, r3, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d017      	beq.n	8001a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d123      	bne.n	8001a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80ae 	beq.w	8001c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <HAL_GPIO_Init+0x300>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	; (8001c44 <HAL_GPIO_Init+0x300>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b5a      	ldr	r3, [pc, #360]	; (8001c44 <HAL_GPIO_Init+0x300>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae6:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_GPIO_Init+0x304>)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <HAL_GPIO_Init+0x308>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d025      	beq.n	8001b5e <HAL_GPIO_Init+0x21a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4e      	ldr	r2, [pc, #312]	; (8001c50 <HAL_GPIO_Init+0x30c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01f      	beq.n	8001b5a <HAL_GPIO_Init+0x216>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <HAL_GPIO_Init+0x310>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x212>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4c      	ldr	r2, [pc, #304]	; (8001c58 <HAL_GPIO_Init+0x314>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x20e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <HAL_GPIO_Init+0x318>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x20a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4a      	ldr	r2, [pc, #296]	; (8001c60 <HAL_GPIO_Init+0x31c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x206>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <HAL_GPIO_Init+0x320>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x202>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00c      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e00a      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b70:	4935      	ldr	r1, [pc, #212]	; (8001c48 <HAL_GPIO_Init+0x304>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba2:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bcc:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	f67f ae96 	bls.w	8001960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40021800 	.word	0x40021800
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f806 	bl	8001d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e12b      	b.n	8001f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff faa4 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2224      	movs	r2, #36	; 0x24
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d80:	f001 f9c6 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8001d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4a81      	ldr	r2, [pc, #516]	; (8001f90 <HAL_I2C_Init+0x274>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d807      	bhi.n	8001da0 <HAL_I2C_Init+0x84>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4a80      	ldr	r2, [pc, #512]	; (8001f94 <HAL_I2C_Init+0x278>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e006      	b.n	8001dae <HAL_I2C_Init+0x92>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a7d      	ldr	r2, [pc, #500]	; (8001f98 <HAL_I2C_Init+0x27c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	bf94      	ite	ls
 8001da8:	2301      	movls	r3, #1
 8001daa:	2300      	movhi	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0e7      	b.n	8001f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a78      	ldr	r2, [pc, #480]	; (8001f9c <HAL_I2C_Init+0x280>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9b      	lsrs	r3, r3, #18
 8001dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a6a      	ldr	r2, [pc, #424]	; (8001f90 <HAL_I2C_Init+0x274>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d802      	bhi.n	8001df0 <HAL_I2C_Init+0xd4>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3301      	adds	r3, #1
 8001dee:	e009      	b.n	8001e04 <HAL_I2C_Init+0xe8>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	4a69      	ldr	r2, [pc, #420]	; (8001fa0 <HAL_I2C_Init+0x284>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	099b      	lsrs	r3, r3, #6
 8001e02:	3301      	adds	r3, #1
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	495c      	ldr	r1, [pc, #368]	; (8001f90 <HAL_I2C_Init+0x274>)
 8001e20:	428b      	cmp	r3, r1
 8001e22:	d819      	bhi.n	8001e58 <HAL_I2C_Init+0x13c>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e59      	subs	r1, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e32:	1c59      	adds	r1, r3, #1
 8001e34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e38:	400b      	ands	r3, r1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_I2C_Init+0x138>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1e59      	subs	r1, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e52:	e051      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e04f      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d111      	bne.n	8001e84 <HAL_I2C_Init+0x168>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	440b      	add	r3, r1
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e012      	b.n	8001eaa <HAL_I2C_Init+0x18e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	0099      	lsls	r1, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Init+0x196>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e022      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_I2C_Init+0x1bc>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1e58      	subs	r0, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	440b      	add	r3, r1
 8001ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed6:	e00f      	b.n	8001ef8 <HAL_I2C_Init+0x1dc>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1e58      	subs	r0, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	0099      	lsls	r1, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	6809      	ldr	r1, [r1, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6911      	ldr	r1, [r2, #16]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	000186a0 	.word	0x000186a0
 8001f94:	001e847f 	.word	0x001e847f
 8001f98:	003d08ff 	.word	0x003d08ff
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	10624dd3 	.word	0x10624dd3

08001fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	817b      	strh	r3, [r7, #10]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	813b      	strh	r3, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fbe:	f7ff fb7f 	bl	80016c0 <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	f040 80d9 	bne.w	8002184 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2319      	movs	r3, #25
 8001fd8:	2201      	movs	r2, #1
 8001fda:	496d      	ldr	r1, [pc, #436]	; (8002190 <HAL_I2C_Mem_Write+0x1ec>)
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fc7f 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0cc      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Mem_Write+0x56>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0c5      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d007      	beq.n	8002020 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2221      	movs	r2, #33	; 0x21
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a3a      	ldr	r2, [r7, #32]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <HAL_I2C_Mem_Write+0x1f0>)
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002062:	88f8      	ldrh	r0, [r7, #6]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	8979      	ldrh	r1, [r7, #10]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fab6 	bl	80025e4 <I2C_RequestMemoryWrite>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d052      	beq.n	8002124 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e081      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fd00 	bl	8002a8c <I2C_WaitOnTXEFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b04      	cmp	r3, #4
 8002098:	d107      	bne.n	80020aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06b      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11b      	bne.n	8002124 <HAL_I2C_Mem_Write+0x180>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1aa      	bne.n	8002082 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fcec 	bl	8002b0e <I2C_WaitOnBTFFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00d      	beq.n	8002158 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2b04      	cmp	r3, #4
 8002142:	d107      	bne.n	8002154 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e016      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	00100002 	.word	0x00100002
 8002194:	ffff0000 	.word	0xffff0000

08002198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
 80021aa:	460b      	mov	r3, r1
 80021ac:	813b      	strh	r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b2:	f7ff fa85 	bl	80016c0 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 8208 	bne.w	80025d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2319      	movs	r3, #25
 80021cc:	2201      	movs	r2, #1
 80021ce:	497b      	ldr	r1, [pc, #492]	; (80023bc <HAL_I2C_Mem_Read+0x224>)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fb85 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	e1fb      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Mem_Read+0x56>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e1f4      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d007      	beq.n	8002214 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2222      	movs	r2, #34	; 0x22
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	; 0x40
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HAL_I2C_Mem_Read+0x228>)
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002256:	88f8      	ldrh	r0, [r7, #6]
 8002258:	893a      	ldrh	r2, [r7, #8]
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4603      	mov	r3, r0
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fa52 	bl	8002710 <I2C_RequestMemoryRead>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1b0      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d113      	bne.n	80022a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e184      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d11b      	bne.n	80022e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e164      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d11b      	bne.n	8002326 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800230c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	e144      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800233c:	e138      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b03      	cmp	r3, #3
 8002344:	f200 80f1 	bhi.w	800252a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b01      	cmp	r3, #1
 800234e:	d123      	bne.n	8002398 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fc1b 	bl	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e139      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002396:	e10b      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b02      	cmp	r3, #2
 800239e:	d14e      	bne.n	800243e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a6:	2200      	movs	r2, #0
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <HAL_I2C_Mem_Read+0x22c>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fa98 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e10e      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
 80023ba:	bf00      	nop
 80023bc:	00100002 	.word	0x00100002
 80023c0:	ffff0000 	.word	0xffff0000
 80023c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800243c:	e0b8      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	2200      	movs	r2, #0
 8002446:	4966      	ldr	r1, [pc, #408]	; (80025e0 <HAL_I2C_Mem_Read+0x448>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fa49 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0bf      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	2200      	movs	r2, #0
 80024a2:	494f      	ldr	r1, [pc, #316]	; (80025e0 <HAL_I2C_Mem_Read+0x448>)
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fa1b 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e091      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002528:	e042      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fb2e 	bl	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e04c      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b04      	cmp	r3, #4
 800257c:	d118      	bne.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f aec2 	bne.w	800233e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	00010004 	.word	0x00010004

080025e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	2200      	movs	r2, #0
 8002616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f960 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00d      	beq.n	8002642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002634:	d103      	bne.n	800263e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e05f      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	492d      	ldr	r1, [pc, #180]	; (800270c <I2C_RequestMemoryWrite+0x128>)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f998 	bl	800298e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e04c      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa02 	bl	8002a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e02b      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	e021      	b.n	8002700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026bc:	893b      	ldrh	r3, [r7, #8]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f9dc 	bl	8002a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e005      	b.n	8002702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026f6:	893b      	ldrh	r3, [r7, #8]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	00010002 	.word	0x00010002

08002710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	460b      	mov	r3, r1
 8002724:	813b      	strh	r3, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2200      	movs	r2, #0
 8002752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f8c2 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002770:	d103      	bne.n	800277a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0aa      	b.n	80028d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800278c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	4952      	ldr	r1, [pc, #328]	; (80028dc <I2C_RequestMemoryRead+0x1cc>)
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f8fa 	bl	800298e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e097      	b.n	80028d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f964 	bl	8002a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d107      	bne.n	80027e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e076      	b.n	80028d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	e021      	b.n	800283c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f93e 	bl	8002a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e050      	b.n	80028d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002832:	893b      	ldrh	r3, [r7, #8]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	6a39      	ldr	r1, [r7, #32]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f923 	bl	8002a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e035      	b.n	80028d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2200      	movs	r2, #0
 8002880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f82b 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d103      	bne.n	80028a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e013      	b.n	80028d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ac:	897b      	ldrh	r3, [r7, #10]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	4906      	ldr	r1, [pc, #24]	; (80028dc <I2C_RequestMemoryRead+0x1cc>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f863 	bl	800298e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00010002 	.word	0x00010002

080028e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f0:	e025      	b.n	800293e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f8:	d021      	beq.n	800293e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe fee1 	bl	80016c0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e023      	b.n	8002986 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10d      	bne.n	8002964 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	e00c      	b.n	800297e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4013      	ands	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	429a      	cmp	r2, r3
 8002982:	d0b6      	beq.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800299c:	e051      	b.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d123      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f043 0204 	orr.w	r2, r3, #4
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e046      	b.n	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fc:	d021      	beq.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe fe5f 	bl	80016c0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e020      	b.n	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10c      	bne.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bf14      	ite	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	2300      	moveq	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	e00b      	b.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d18d      	bne.n	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a98:	e02d      	b.n	8002af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f8ce 	bl	8002c3c <I2C_IsAcknowledgeFailed>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e02d      	b.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab0:	d021      	beq.n	8002af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe fe05 	bl	80016c0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e007      	b.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d1ca      	bne.n	8002a9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b1a:	e02d      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f88d 	bl	8002c3c <I2C_IsAcknowledgeFailed>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e02d      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b32:	d021      	beq.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b34:	f7fe fdc4 	bl	80016c0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d302      	bcc.n	8002b4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d1ca      	bne.n	8002b1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b9c:	e042      	b.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d119      	bne.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0210 	mvn.w	r2, #16
 8002bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e029      	b.n	8002c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be0:	f7fe fd6e 	bl	80016c0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d302      	bcc.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d116      	bne.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e007      	b.n	8002c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d1b5      	bne.n	8002b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d11b      	bne.n	8002c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9c:	b08f      	sub	sp, #60	; 0x3c
 8002c9e:	af0a      	add	r7, sp, #40	; 0x28
 8002ca0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e116      	b.n	8002eda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fb72 	bl	80013b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fe53 	bl	8004996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	687e      	ldr	r6, [r7, #4]
 8002cf8:	466d      	mov	r5, sp
 8002cfa:	f106 0410 	add.w	r4, r6, #16
 8002cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d0e:	1d33      	adds	r3, r6, #4
 8002d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d12:	6838      	ldr	r0, [r7, #0]
 8002d14:	f001 fdde 	bl	80048d4 <USB_CoreInit>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0d7      	b.n	8002eda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fe41 	bl	80049b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e04a      	b.n	8002dd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	333d      	adds	r3, #61	; 0x3d
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	333c      	adds	r3, #60	; 0x3c
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	b298      	uxth	r0, r3
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3344      	adds	r3, #68	; 0x44
 8002d78:	4602      	mov	r2, r0
 8002d7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3340      	adds	r3, #64	; 0x40
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3348      	adds	r3, #72	; 0x48
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	334c      	adds	r3, #76	; 0x4c
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3354      	adds	r3, #84	; 0x54
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3af      	bcc.n	8002d3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e044      	b.n	8002e6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d3b5      	bcc.n	8002de2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	687e      	ldr	r6, [r7, #4]
 8002e7e:	466d      	mov	r5, sp
 8002e80:	f106 0410 	add.w	r4, r6, #16
 8002e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e94:	1d33      	adds	r3, r6, #4
 8002e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e98:	6838      	ldr	r0, [r7, #0]
 8002e9a:	f001 fdd9 	bl	8004a50 <USB_DevInit>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e014      	b.n	8002eda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f80a 	bl	8002ee2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 ff97 	bl	8004e06 <USB_DevDisconnect>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ee2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f14:	f043 0303 	orr.w	r3, r3, #3
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0cc      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d90c      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0b8      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d044      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e067      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4934      	ldr	r1, [pc, #208]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fe fb50 	bl	80016c0 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fe fb4c 	bl	80016c0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e04f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d20c      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e032      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4916      	ldr	r1, [pc, #88]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b2:	f000 fb7f 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	490a      	ldr	r1, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fab0 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00
 80030e8:	40023800 	.word	0x40023800
 80030ec:	08005a10 	.word	0x08005a10
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff0 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0a9b      	lsrs	r3, r3, #10
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08005a20 	.word	0x08005a20

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffdc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0b5b      	lsrs	r3, r3, #13
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	08005a20 	.word	0x08005a20

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08c      	sub	sp, #48	; 0x30
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d010      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003198:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800319a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	496c      	ldr	r1, [pc, #432]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80031b6:	2301      	movs	r3, #1
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80031c6:	4b64      	ldr	r3, [pc, #400]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031cc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	4960      	ldr	r1, [pc, #384]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80031e4:	2301      	movs	r3, #1
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d017      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f4:	4b58      	ldr	r3, [pc, #352]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4955      	ldr	r1, [pc, #340]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003212:	d101      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003214:	2301      	movs	r3, #1
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003220:	2301      	movs	r3, #1
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d017      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	4946      	ldr	r1, [pc, #280]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324e:	d101      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003250:	2301      	movs	r3, #1
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800325c:	2301      	movs	r3, #1
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 808a 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a38      	ldr	r2, [pc, #224]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800328a:	4b34      	ldr	r3, [pc, #208]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003296:	f7fe fa13 	bl	80016c0 <HAL_GetTick>
 800329a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fe fa0f 	bl	80016c0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e278      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032b0:	4b2a      	ldr	r3, [pc, #168]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032bc:	4b26      	ldr	r3, [pc, #152]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d02f      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d028      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032f0:	4a19      	ldr	r2, [pc, #100]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d114      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe f9dd 	bl	80016c0 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe f9d9 	bl	80016c0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e240      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ee      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003338:	d114      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800334a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334e:	4902      	ldr	r1, [pc, #8]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
 8003354:	e00c      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40007000 	.word	0x40007000
 8003360:	42470e40 	.word	0x42470e40
 8003364:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a49      	ldr	r2, [pc, #292]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800336a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	4944      	ldr	r1, [pc, #272]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800337e:	4313      	orrs	r3, r2
 8003380:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003394:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003396:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	4937      	ldr	r1, [pc, #220]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033c6:	4b32      	ldr	r3, [pc, #200]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d4:	492e      	ldr	r1, [pc, #184]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d011      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	4926      	ldr	r1, [pc, #152]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003406:	d101      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003408:	2301      	movs	r3, #1
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800341a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	491a      	ldr	r1, [pc, #104]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d011      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800343c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003440:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	4911      	ldr	r1, [pc, #68]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003458:	d101      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d005      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346c:	f040 80ff 	bne.w	800366e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003476:	f7fe f923 	bl	80016c0 <HAL_GetTick>
 800347a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800347c:	e00e      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800347e:	f7fe f91f 	bl	80016c0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d907      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e188      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003490:	40023800 	.word	0x40023800
 8003494:	424711e0 	.word	0x424711e0
 8003498:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800349c:	4b7e      	ldr	r3, [pc, #504]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ea      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d028      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d124      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80034d0:	4b71      	ldr	r3, [pc, #452]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	3301      	adds	r3, #1
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034e2:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e8:	0e1b      	lsrs	r3, r3, #24
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	019b      	lsls	r3, r3, #6
 80034fa:	431a      	orrs	r2, r3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	3b01      	subs	r3, #1
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	431a      	orrs	r2, r3
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	061b      	lsls	r3, r3, #24
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	071b      	lsls	r3, r3, #28
 8003512:	4961      	ldr	r1, [pc, #388]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003538:	2b00      	cmp	r3, #0
 800353a:	d035      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003544:	d130      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003546:	4b54      	ldr	r3, [pc, #336]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003558:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355e:	0f1b      	lsrs	r3, r3, #28
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	019b      	lsls	r3, r3, #6
 8003570:	431a      	orrs	r2, r3
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	431a      	orrs	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	071b      	lsls	r3, r3, #28
 8003588:	4943      	ldr	r1, [pc, #268]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003596:	f023 021f 	bic.w	r2, r3, #31
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	493d      	ldr	r1, [pc, #244]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d029      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035bc:	d124      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035be:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	0f1b      	lsrs	r3, r3, #28
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	019b      	lsls	r3, r3, #6
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	431a      	orrs	r2, r3
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	431a      	orrs	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	071b      	lsls	r3, r3, #28
 8003600:	4925      	ldr	r1, [pc, #148]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	071b      	lsls	r3, r3, #28
 800363a:	4917      	ldr	r1, [pc, #92]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003648:	f7fe f83a 	bl	80016c0 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003650:	f7fe f836 	bl	80016c0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e09f      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 8095 	bne.w	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800367c:	f7fe f820 	bl	80016c0 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003682:	e00f      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003684:	f7fe f81c 	bl	80016c0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d908      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e085      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	42470068 	.word	0x42470068
 80036a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036a4:	4b41      	ldr	r3, [pc, #260]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b0:	d0e8      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d127      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	3b01      	subs	r3, #1
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	4928      	ldr	r1, [pc, #160]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003710:	4b26      	ldr	r3, [pc, #152]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003716:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	3b01      	subs	r3, #1
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	4922      	ldr	r1, [pc, #136]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01d      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800373e:	d118      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	0e1b      	lsrs	r3, r3, #24
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	019b      	lsls	r3, r3, #6
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	4910      	ldr	r1, [pc, #64]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003778:	f7fd ffa2 	bl	80016c0 <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003780:	f7fd ff9e 	bl	80016c0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e007      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800379a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800379e:	d1ef      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3730      	adds	r7, #48	; 0x30
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	42470070 	.word	0x42470070

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b8:	b0ae      	sub	sp, #184	; 0xb8
 80037ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037da:	4bcb      	ldr	r3, [pc, #812]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	f200 8206 	bhi.w	8003bf4 <HAL_RCC_GetSysClockFreq+0x440>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003bf5 	.word	0x08003bf5
 80037f8:	08003bf5 	.word	0x08003bf5
 80037fc:	08003bf5 	.word	0x08003bf5
 8003800:	0800382d 	.word	0x0800382d
 8003804:	08003bf5 	.word	0x08003bf5
 8003808:	08003bf5 	.word	0x08003bf5
 800380c:	08003bf5 	.word	0x08003bf5
 8003810:	08003835 	.word	0x08003835
 8003814:	08003bf5 	.word	0x08003bf5
 8003818:	08003bf5 	.word	0x08003bf5
 800381c:	08003bf5 	.word	0x08003bf5
 8003820:	08003a25 	.word	0x08003a25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4bb9      	ldr	r3, [pc, #740]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x358>)
 8003826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800382a:	e1e7      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382c:	4bb8      	ldr	r3, [pc, #736]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x35c>)
 800382e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003832:	e1e3      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003834:	4bb4      	ldr	r3, [pc, #720]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003840:	4bb1      	ldr	r3, [pc, #708]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d071      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384c:	4bae      	ldr	r3, [pc, #696]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003858:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800386e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	0159      	lsls	r1, r3, #5
 8003880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003884:	0150      	lsls	r0, r2, #5
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4621      	mov	r1, r4
 800388c:	1a51      	subs	r1, r2, r1
 800388e:	6439      	str	r1, [r7, #64]	; 0x40
 8003890:	4629      	mov	r1, r5
 8003892:	eb63 0301 	sbc.w	r3, r3, r1
 8003896:	647b      	str	r3, [r7, #68]	; 0x44
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80038a4:	4649      	mov	r1, r9
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	4641      	mov	r1, r8
 80038aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ae:	4641      	mov	r1, r8
 80038b0:	018a      	lsls	r2, r1, #6
 80038b2:	4641      	mov	r1, r8
 80038b4:	1a51      	subs	r1, r2, r1
 80038b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038b8:	4649      	mov	r1, r9
 80038ba:	eb63 0301 	sbc.w	r3, r3, r1
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80038cc:	4649      	mov	r1, r9
 80038ce:	00cb      	lsls	r3, r1, #3
 80038d0:	4641      	mov	r1, r8
 80038d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d6:	4641      	mov	r1, r8
 80038d8:	00ca      	lsls	r2, r1, #3
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	4622      	mov	r2, r4
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
 80038e6:	462b      	mov	r3, r5
 80038e8:	460a      	mov	r2, r1
 80038ea:	eb42 0303 	adc.w	r3, r2, r3
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038fc:	4629      	mov	r1, r5
 80038fe:	024b      	lsls	r3, r1, #9
 8003900:	4621      	mov	r1, r4
 8003902:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003906:	4621      	mov	r1, r4
 8003908:	024a      	lsls	r2, r1, #9
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003912:	2200      	movs	r2, #0
 8003914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800391c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003920:	f7fc fcce 	bl	80002c0 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4613      	mov	r3, r2
 800392a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800392e:	e067      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003930:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800393c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003940:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003948:	67bb      	str	r3, [r7, #120]	; 0x78
 800394a:	2300      	movs	r3, #0
 800394c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800394e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	f04f 0000 	mov.w	r0, #0
 800395a:	f04f 0100 	mov.w	r1, #0
 800395e:	0159      	lsls	r1, r3, #5
 8003960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003964:	0150      	lsls	r0, r2, #5
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4621      	mov	r1, r4
 800396c:	1a51      	subs	r1, r2, r1
 800396e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003970:	4629      	mov	r1, r5
 8003972:	eb63 0301 	sbc.w	r3, r3, r1
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003984:	4649      	mov	r1, r9
 8003986:	018b      	lsls	r3, r1, #6
 8003988:	4641      	mov	r1, r8
 800398a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800398e:	4641      	mov	r1, r8
 8003990:	018a      	lsls	r2, r1, #6
 8003992:	4641      	mov	r1, r8
 8003994:	ebb2 0a01 	subs.w	sl, r2, r1
 8003998:	4649      	mov	r1, r9
 800399a:	eb63 0b01 	sbc.w	fp, r3, r1
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039b2:	4692      	mov	sl, r2
 80039b4:	469b      	mov	fp, r3
 80039b6:	4623      	mov	r3, r4
 80039b8:	eb1a 0303 	adds.w	r3, sl, r3
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	462b      	mov	r3, r5
 80039c0:	eb4b 0303 	adc.w	r3, fp, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039d2:	4629      	mov	r1, r5
 80039d4:	028b      	lsls	r3, r1, #10
 80039d6:	4621      	mov	r1, r4
 80039d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039dc:	4621      	mov	r1, r4
 80039de:	028a      	lsls	r2, r1, #10
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039e8:	2200      	movs	r2, #0
 80039ea:	673b      	str	r3, [r7, #112]	; 0x70
 80039ec:	677a      	str	r2, [r7, #116]	; 0x74
 80039ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80039f2:	f7fc fc65 	bl	80002c0 <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4613      	mov	r3, r2
 80039fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a00:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a22:	e0eb      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a24:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a30:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d06b      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	2200      	movs	r2, #0
 8003a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a50:	2300      	movs	r3, #0
 8003a52:	667b      	str	r3, [r7, #100]	; 0x64
 8003a54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a58:	4622      	mov	r2, r4
 8003a5a:	462b      	mov	r3, r5
 8003a5c:	f04f 0000 	mov.w	r0, #0
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	0159      	lsls	r1, r3, #5
 8003a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6a:	0150      	lsls	r0, r2, #5
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4621      	mov	r1, r4
 8003a72:	1a51      	subs	r1, r2, r1
 8003a74:	61b9      	str	r1, [r7, #24]
 8003a76:	4629      	mov	r1, r5
 8003a78:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a8a:	4659      	mov	r1, fp
 8003a8c:	018b      	lsls	r3, r1, #6
 8003a8e:	4651      	mov	r1, sl
 8003a90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a94:	4651      	mov	r1, sl
 8003a96:	018a      	lsls	r2, r1, #6
 8003a98:	4651      	mov	r1, sl
 8003a9a:	ebb2 0801 	subs.w	r8, r2, r1
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab8:	4690      	mov	r8, r2
 8003aba:	4699      	mov	r9, r3
 8003abc:	4623      	mov	r3, r4
 8003abe:	eb18 0303 	adds.w	r3, r8, r3
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	eb49 0303 	adc.w	r3, r9, r3
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	024b      	lsls	r3, r1, #9
 8003adc:	4621      	mov	r1, r4
 8003ade:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	024a      	lsls	r2, r1, #9
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aee:	2200      	movs	r2, #0
 8003af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003af2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003af4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003af8:	f7fc fbe2 	bl	80002c0 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b06:	e065      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x420>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b14:	4b3d      	ldr	r3, [pc, #244]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	099b      	lsrs	r3, r3, #6
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	4611      	mov	r1, r2
 8003b20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b24:	653b      	str	r3, [r7, #80]	; 0x50
 8003b26:	2300      	movs	r3, #0
 8003b28:	657b      	str	r3, [r7, #84]	; 0x54
 8003b2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b2e:	4642      	mov	r2, r8
 8003b30:	464b      	mov	r3, r9
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	0159      	lsls	r1, r3, #5
 8003b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b40:	0150      	lsls	r0, r2, #5
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4641      	mov	r1, r8
 8003b48:	1a51      	subs	r1, r2, r1
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b60:	4659      	mov	r1, fp
 8003b62:	018b      	lsls	r3, r1, #6
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	018a      	lsls	r2, r1, #6
 8003b6e:	4651      	mov	r1, sl
 8003b70:	1a54      	subs	r4, r2, r1
 8003b72:	4659      	mov	r1, fp
 8003b74:	eb63 0501 	sbc.w	r5, r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	00eb      	lsls	r3, r5, #3
 8003b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b86:	00e2      	lsls	r2, r4, #3
 8003b88:	4614      	mov	r4, r2
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	4643      	mov	r3, r8
 8003b8e:	18e3      	adds	r3, r4, r3
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	464b      	mov	r3, r9
 8003b94:	eb45 0303 	adc.w	r3, r5, r3
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	028b      	lsls	r3, r1, #10
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	028a      	lsls	r2, r1, #10
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bc6:	f7fc fb7b 	bl	80002c0 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4613      	mov	r3, r2
 8003bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x458>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0f1b      	lsrs	r3, r3, #28
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bf2:	e003      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	37b8      	adds	r7, #184	; 0xb8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400

08003c14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e28d      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8083 	beq.w	8003d3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c34:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d019      	beq.n	8003c74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c40:	4b91      	ldr	r3, [pc, #580]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c4c:	4b8e      	ldr	r3, [pc, #568]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b8b      	ldr	r3, [pc, #556]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c66:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	4b84      	ldr	r3, [pc, #528]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x124>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e25a      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x90>
 8003c96:	4b7c      	ldr	r3, [pc, #496]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7b      	ldr	r2, [pc, #492]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xcc>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0xb4>
 8003cae:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a75      	ldr	r2, [pc, #468]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b73      	ldr	r3, [pc, #460]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a72      	ldr	r2, [pc, #456]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xcc>
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6e      	ldr	r2, [pc, #440]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6b      	ldr	r2, [pc, #428]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fcea 	bl	80016c0 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fce6 	bl	80016c0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e21f      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xdc>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd fcd6 	bl	80016c0 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fd fcd2 	bl	80016c0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e20b      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x104>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06f      	beq.n	8003e26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d46:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d017      	beq.n	8003d82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6a:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d11c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b44      	ldr	r3, [pc, #272]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d116      	bne.n	8003db0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_RCC_OscConfig+0x186>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e1d3      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4937      	ldr	r1, [pc, #220]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	e03a      	b.n	8003e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db8:	4b34      	ldr	r3, [pc, #208]	; (8003e8c <HAL_RCC_OscConfig+0x278>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fc7f 	bl	80016c0 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fd fc7b 	bl	80016c0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1b4      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de4:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4925      	ldr	r1, [pc, #148]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
 8003df8:	e015      	b.n	8003e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_RCC_OscConfig+0x278>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fc5e 	bl	80016c0 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fd fc5a 	bl	80016c0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e193      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d036      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fc3e 	bl	80016c0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e48:	f7fd fc3a 	bl	80016c0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e173      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x234>
 8003e66:	e01b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fc27 	bl	80016c0 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	e00e      	b.n	8003e94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e76:	f7fd fc23 	bl	80016c0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d907      	bls.n	8003e94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e15c      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	42470000 	.word	0x42470000
 8003e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b8a      	ldr	r3, [pc, #552]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ea      	bne.n	8003e76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8097 	beq.w	8003fdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b83      	ldr	r3, [pc, #524]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	4b7f      	ldr	r3, [pc, #508]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a7e      	ldr	r2, [pc, #504]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b7c      	ldr	r3, [pc, #496]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b79      	ldr	r3, [pc, #484]	; (80040c4 <HAL_RCC_OscConfig+0x4b0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <HAL_RCC_OscConfig+0x4b0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a75      	ldr	r2, [pc, #468]	; (80040c4 <HAL_RCC_OscConfig+0x4b0>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fbe3 	bl	80016c0 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fd fbdf 	bl	80016c0 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e118      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b6c      	ldr	r3, [pc, #432]	; (80040c4 <HAL_RCC_OscConfig+0x4b0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x31e>
 8003f24:	4b66      	ldr	r3, [pc, #408]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a65      	ldr	r2, [pc, #404]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x358>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x340>
 8003f3a:	4b61      	ldr	r3, [pc, #388]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a60      	ldr	r2, [pc, #384]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
 8003f46:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a5d      	ldr	r2, [pc, #372]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0x358>
 8003f54:	4b5a      	ldr	r3, [pc, #360]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a59      	ldr	r2, [pc, #356]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	4b57      	ldr	r3, [pc, #348]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a56      	ldr	r2, [pc, #344]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f66:	f023 0304 	bic.w	r3, r3, #4
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fd fba4 	bl	80016c0 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fd fba0 	bl	80016c0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0d7      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f92:	4b4b      	ldr	r3, [pc, #300]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ee      	beq.n	8003f7c <HAL_RCC_OscConfig+0x368>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa0:	f7fd fb8e 	bl	80016c0 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd fb8a 	bl	80016c0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0c1      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbe:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ee      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd0:	4b3b      	ldr	r3, [pc, #236]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a3a      	ldr	r2, [pc, #232]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80ad 	beq.w	8004140 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe6:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d060      	beq.n	80040b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d145      	bne.n	8004086 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <HAL_RCC_OscConfig+0x4b4>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fd fb5e 	bl	80016c0 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd fb5a 	bl	80016c0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e093      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	019b      	lsls	r3, r3, #6
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	3b01      	subs	r3, #1
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	071b      	lsls	r3, r3, #28
 8004052:	491b      	ldr	r1, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x4b4>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7fd fb2f 	bl	80016c0 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fd fb2b 	bl	80016c0 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e064      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x452>
 8004084:	e05c      	b.n	8004140 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_RCC_OscConfig+0x4b4>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd fb18 	bl	80016c0 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd fb14 	bl	80016c0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e04d      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x480>
 80040b2:	e045      	b.n	8004140 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e040      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040cc:	4b1f      	ldr	r3, [pc, #124]	; (800414c <HAL_RCC_OscConfig+0x538>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d030      	beq.n	800413c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d129      	bne.n	800413c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d122      	bne.n	800413c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004104:	4293      	cmp	r3, r2
 8004106:	d119      	bne.n	800413c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d10f      	bne.n	800413c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d107      	bne.n	800413c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800

08004150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e03f      	b.n	80041e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd f8d2 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f929 	bl	80043ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b08a      	sub	sp, #40	; 0x28
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	d17c      	bne.n	8004304 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_UART_Transmit+0x2c>
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e075      	b.n	8004306 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_UART_Transmit+0x3e>
 8004224:	2302      	movs	r3, #2
 8004226:	e06e      	b.n	8004306 <HAL_UART_Transmit+0x11c>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2221      	movs	r2, #33	; 0x21
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800423e:	f7fd fa3f 	bl	80016c0 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	88fa      	ldrh	r2, [r7, #6]
 800424e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004258:	d108      	bne.n	800426c <HAL_UART_Transmit+0x82>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e003      	b.n	8004274 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800427c:	e02a      	b.n	80042d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f840 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e036      	b.n	8004306 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	3302      	adds	r3, #2
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e007      	b.n	80042c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1cf      	bne.n	800427e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f810 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b090      	sub	sp, #64	; 0x40
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	4613      	mov	r3, r2
 800431c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431e:	e050      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004326:	d04c      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <UART_WaitOnFlagUntilTimeout+0x30>
 800432e:	f7fd f9c7 	bl	80016c0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800433a:	429a      	cmp	r2, r3
 800433c:	d241      	bcs.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800435e:	637a      	str	r2, [r7, #52]	; 0x34
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e5      	bne.n	800433e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	613b      	str	r3, [r7, #16]
   return(result);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	63bb      	str	r3, [r7, #56]	; 0x38
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004392:	623a      	str	r2, [r7, #32]
 8004394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	69f9      	ldr	r1, [r7, #28]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e5      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e00f      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d09f      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3740      	adds	r7, #64	; 0x40
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b0c0      	sub	sp, #256	; 0x100
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	68d9      	ldr	r1, [r3, #12]
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	ea40 0301 	orr.w	r3, r0, r1
 8004414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	431a      	orrs	r2, r3
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004444:	f021 010c 	bic.w	r1, r1, #12
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004452:	430b      	orrs	r3, r1
 8004454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	6999      	ldr	r1, [r3, #24]
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	ea40 0301 	orr.w	r3, r0, r1
 8004472:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b8f      	ldr	r3, [pc, #572]	; (80046b8 <UART_SetConfig+0x2cc>)
 800447c:	429a      	cmp	r2, r3
 800447e:	d005      	beq.n	800448c <UART_SetConfig+0xa0>
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b8d      	ldr	r3, [pc, #564]	; (80046bc <UART_SetConfig+0x2d0>)
 8004488:	429a      	cmp	r2, r3
 800448a:	d104      	bne.n	8004496 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800448c:	f7fe fe54 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8004490:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004494:	e003      	b.n	800449e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004496:	f7fe fe3b 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 800449a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a8:	f040 810c 	bne.w	80046c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044be:	4622      	mov	r2, r4
 80044c0:	462b      	mov	r3, r5
 80044c2:	1891      	adds	r1, r2, r2
 80044c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80044c6:	415b      	adcs	r3, r3
 80044c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ce:	4621      	mov	r1, r4
 80044d0:	eb12 0801 	adds.w	r8, r2, r1
 80044d4:	4629      	mov	r1, r5
 80044d6:	eb43 0901 	adc.w	r9, r3, r1
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ee:	4690      	mov	r8, r2
 80044f0:	4699      	mov	r9, r3
 80044f2:	4623      	mov	r3, r4
 80044f4:	eb18 0303 	adds.w	r3, r8, r3
 80044f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044fc:	462b      	mov	r3, r5
 80044fe:	eb49 0303 	adc.w	r3, r9, r3
 8004502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004512:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004516:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800451a:	460b      	mov	r3, r1
 800451c:	18db      	adds	r3, r3, r3
 800451e:	653b      	str	r3, [r7, #80]	; 0x50
 8004520:	4613      	mov	r3, r2
 8004522:	eb42 0303 	adc.w	r3, r2, r3
 8004526:	657b      	str	r3, [r7, #84]	; 0x54
 8004528:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800452c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004530:	f7fb fec6 	bl	80002c0 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4b61      	ldr	r3, [pc, #388]	; (80046c0 <UART_SetConfig+0x2d4>)
 800453a:	fba3 2302 	umull	r2, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	011c      	lsls	r4, r3, #4
 8004542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800454c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004550:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	64b9      	str	r1, [r7, #72]	; 0x48
 800455c:	415b      	adcs	r3, r3
 800455e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004564:	4641      	mov	r1, r8
 8004566:	eb12 0a01 	adds.w	sl, r2, r1
 800456a:	4649      	mov	r1, r9
 800456c:	eb43 0b01 	adc.w	fp, r3, r1
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800457c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004584:	4692      	mov	sl, r2
 8004586:	469b      	mov	fp, r3
 8004588:	4643      	mov	r3, r8
 800458a:	eb1a 0303 	adds.w	r3, sl, r3
 800458e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004592:	464b      	mov	r3, r9
 8004594:	eb4b 0303 	adc.w	r3, fp, r3
 8004598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045b0:	460b      	mov	r3, r1
 80045b2:	18db      	adds	r3, r3, r3
 80045b4:	643b      	str	r3, [r7, #64]	; 0x40
 80045b6:	4613      	mov	r3, r2
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	647b      	str	r3, [r7, #68]	; 0x44
 80045be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045c6:	f7fb fe7b 	bl	80002c0 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <UART_SetConfig+0x2d4>)
 80045d2:	fba3 2301 	umull	r2, r3, r3, r1
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	2264      	movs	r2, #100	; 0x64
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	1acb      	subs	r3, r1, r3
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045e6:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <UART_SetConfig+0x2d4>)
 80045e8:	fba3 2302 	umull	r2, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f4:	441c      	add	r4, r3
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004600:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004604:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004610:	415b      	adcs	r3, r3
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004618:	4641      	mov	r1, r8
 800461a:	1851      	adds	r1, r2, r1
 800461c:	6339      	str	r1, [r7, #48]	; 0x30
 800461e:	4649      	mov	r1, r9
 8004620:	414b      	adcs	r3, r1
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004630:	4659      	mov	r1, fp
 8004632:	00cb      	lsls	r3, r1, #3
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463a:	4651      	mov	r1, sl
 800463c:	00ca      	lsls	r2, r1, #3
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	4603      	mov	r3, r0
 8004644:	4642      	mov	r2, r8
 8004646:	189b      	adds	r3, r3, r2
 8004648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800464c:	464b      	mov	r3, r9
 800464e:	460a      	mov	r2, r1
 8004650:	eb42 0303 	adc.w	r3, r2, r3
 8004654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004664:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800466c:	460b      	mov	r3, r1
 800466e:	18db      	adds	r3, r3, r3
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
 8004672:	4613      	mov	r3, r2
 8004674:	eb42 0303 	adc.w	r3, r2, r3
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800467e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004682:	f7fb fe1d 	bl	80002c0 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <UART_SetConfig+0x2d4>)
 800468c:	fba3 1302 	umull	r1, r3, r3, r2
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	2164      	movs	r1, #100	; 0x64
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	3332      	adds	r3, #50	; 0x32
 800469e:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <UART_SetConfig+0x2d4>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	f003 0207 	and.w	r2, r3, #7
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4422      	add	r2, r4
 80046b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046b4:	e106      	b.n	80048c4 <UART_SetConfig+0x4d8>
 80046b6:	bf00      	nop
 80046b8:	40011000 	.word	0x40011000
 80046bc:	40011400 	.word	0x40011400
 80046c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046d6:	4642      	mov	r2, r8
 80046d8:	464b      	mov	r3, r9
 80046da:	1891      	adds	r1, r2, r2
 80046dc:	6239      	str	r1, [r7, #32]
 80046de:	415b      	adcs	r3, r3
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046e6:	4641      	mov	r1, r8
 80046e8:	1854      	adds	r4, r2, r1
 80046ea:	4649      	mov	r1, r9
 80046ec:	eb43 0501 	adc.w	r5, r3, r1
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	00eb      	lsls	r3, r5, #3
 80046fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fe:	00e2      	lsls	r2, r4, #3
 8004700:	4614      	mov	r4, r2
 8004702:	461d      	mov	r5, r3
 8004704:	4643      	mov	r3, r8
 8004706:	18e3      	adds	r3, r4, r3
 8004708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800470c:	464b      	mov	r3, r9
 800470e:	eb45 0303 	adc.w	r3, r5, r3
 8004712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004722:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004732:	4629      	mov	r1, r5
 8004734:	008b      	lsls	r3, r1, #2
 8004736:	4621      	mov	r1, r4
 8004738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800473c:	4621      	mov	r1, r4
 800473e:	008a      	lsls	r2, r1, #2
 8004740:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004744:	f7fb fdbc 	bl	80002c0 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4b60      	ldr	r3, [pc, #384]	; (80048d0 <UART_SetConfig+0x4e4>)
 800474e:	fba3 2302 	umull	r2, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	011c      	lsls	r4, r3, #4
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004760:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004764:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	61b9      	str	r1, [r7, #24]
 8004770:	415b      	adcs	r3, r3
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004778:	4641      	mov	r1, r8
 800477a:	1851      	adds	r1, r2, r1
 800477c:	6139      	str	r1, [r7, #16]
 800477e:	4649      	mov	r1, r9
 8004780:	414b      	adcs	r3, r1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004790:	4659      	mov	r1, fp
 8004792:	00cb      	lsls	r3, r1, #3
 8004794:	4651      	mov	r1, sl
 8004796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479a:	4651      	mov	r1, sl
 800479c:	00ca      	lsls	r2, r1, #3
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4642      	mov	r2, r8
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047ac:	464b      	mov	r3, r9
 80047ae:	460a      	mov	r2, r1
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047d0:	4649      	mov	r1, r9
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	4641      	mov	r1, r8
 80047d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047da:	4641      	mov	r1, r8
 80047dc:	008a      	lsls	r2, r1, #2
 80047de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047e2:	f7fb fd6d 	bl	80002c0 <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4611      	mov	r1, r2
 80047ec:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <UART_SetConfig+0x4e4>)
 80047ee:	fba3 2301 	umull	r2, r3, r3, r1
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2264      	movs	r2, #100	; 0x64
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	1acb      	subs	r3, r1, r3
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	3332      	adds	r3, #50	; 0x32
 8004800:	4a33      	ldr	r2, [pc, #204]	; (80048d0 <UART_SetConfig+0x4e4>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480c:	441c      	add	r4, r3
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004812:	2200      	movs	r2, #0
 8004814:	673b      	str	r3, [r7, #112]	; 0x70
 8004816:	677a      	str	r2, [r7, #116]	; 0x74
 8004818:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	415b      	adcs	r3, r3
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6039      	str	r1, [r7, #0]
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	607b      	str	r3, [r7, #4]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	66bb      	str	r3, [r7, #104]	; 0x68
 800485e:	464b      	mov	r3, r9
 8004860:	460a      	mov	r2, r1
 8004862:	eb42 0303 	adc.w	r3, r2, r3
 8004866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	663b      	str	r3, [r7, #96]	; 0x60
 8004872:	667a      	str	r2, [r7, #100]	; 0x64
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004880:	4649      	mov	r1, r9
 8004882:	008b      	lsls	r3, r1, #2
 8004884:	4641      	mov	r1, r8
 8004886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488a:	4641      	mov	r1, r8
 800488c:	008a      	lsls	r2, r1, #2
 800488e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004892:	f7fb fd15 	bl	80002c0 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <UART_SetConfig+0x4e4>)
 800489c:	fba3 1302 	umull	r1, r3, r3, r2
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	2164      	movs	r1, #100	; 0x64
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	3332      	adds	r3, #50	; 0x32
 80048ae:	4a08      	ldr	r2, [pc, #32]	; (80048d0 <UART_SetConfig+0x4e4>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4422      	add	r2, r4
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	bf00      	nop
 80048c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048ca:	46bd      	mov	sp, r7
 80048cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d0:	51eb851f 	.word	0x51eb851f

080048d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048d4:	b084      	sub	sp, #16
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	f107 001c 	add.w	r0, r7, #28
 80048e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d122      	bne.n	8004932 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d105      	bne.n	8004926 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa9c 	bl	8004e64 <USB_CoreReset>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e01a      	b.n	8004968 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa90 	bl	8004e64 <USB_CoreReset>
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
 800495a:	e005      	b.n	8004968 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	2b01      	cmp	r3, #1
 800496c:	d10b      	bne.n	8004986 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f043 0206 	orr.w	r2, r3, #6
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004992:	b004      	add	sp, #16
 8004994:	4770      	bx	lr

08004996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d115      	bne.n	8004a06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049e6:	2001      	movs	r0, #1
 80049e8:	f7fc fe76 	bl	80016d8 <HAL_Delay>
      ms++;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa28 	bl	8004e48 <USB_GetMode>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d01e      	beq.n	8004a3c <USB_SetCurrentMode+0x84>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b31      	cmp	r3, #49	; 0x31
 8004a02:	d9f0      	bls.n	80049e6 <USB_SetCurrentMode+0x2e>
 8004a04:	e01a      	b.n	8004a3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d115      	bne.n	8004a38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a18:	2001      	movs	r0, #1
 8004a1a:	f7fc fe5d 	bl	80016d8 <HAL_Delay>
      ms++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3301      	adds	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fa0f 	bl	8004e48 <USB_GetMode>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <USB_SetCurrentMode+0x84>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b31      	cmp	r3, #49	; 0x31
 8004a34:	d9f0      	bls.n	8004a18 <USB_SetCurrentMode+0x60>
 8004a36:	e001      	b.n	8004a3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e005      	b.n	8004a48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b32      	cmp	r3, #50	; 0x32
 8004a40:	d101      	bne.n	8004a46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a50:	b084      	sub	sp, #16
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e009      	b.n	8004a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3340      	adds	r3, #64	; 0x40
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0e      	cmp	r3, #14
 8004a88:	d9f2      	bls.n	8004a70 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11c      	bne.n	8004aca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9e:	f043 0302 	orr.w	r3, r3, #2
 8004aa2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e005      	b.n	8004ad6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	461a      	mov	r2, r3
 8004af2:	680b      	ldr	r3, [r1, #0]
 8004af4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10c      	bne.n	8004b16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b02:	2100      	movs	r1, #0
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f965 	bl	8004dd4 <USB_SetDevSpeed>
 8004b0a:	e008      	b.n	8004b1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f960 	bl	8004dd4 <USB_SetDevSpeed>
 8004b14:	e003      	b.n	8004b1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b16:	2103      	movs	r1, #3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f95b 	bl	8004dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b1e:	2110      	movs	r1, #16
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8f3 	bl	8004d0c <USB_FlushTxFifo>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f91f 	bl	8004d74 <USB_FlushRxFifo>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	461a      	mov	r2, r3
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	461a      	mov	r2, r3
 8004b54:	2300      	movs	r3, #0
 8004b56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5e:	461a      	mov	r2, r3
 8004b60:	2300      	movs	r3, #0
 8004b62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	e043      	b.n	8004bf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b80:	d118      	bne.n	8004bb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	461a      	mov	r2, r3
 8004b96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e013      	b.n	8004bc6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	461a      	mov	r2, r3
 8004bac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e008      	b.n	8004bc6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	461a      	mov	r2, r3
 8004be6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d3b7      	bcc.n	8004b6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e043      	b.n	8004c88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c16:	d118      	bne.n	8004c4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e013      	b.n	8004c5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	461a      	mov	r2, r3
 8004c42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	e008      	b.n	8004c5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3301      	adds	r3, #1
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3b7      	bcc.n	8004c00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f043 0210 	orr.w	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <USB_DevInit+0x2b8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f043 0208 	orr.w	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf0:	f043 0304 	orr.w	r3, r3, #4
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d04:	b004      	add	sp, #16
 8004d06:	4770      	bx	lr
 8004d08:	803c3800 	.word	0x803c3800

08004d0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <USB_FlushTxFifo+0x64>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e01b      	b.n	8004d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	daf2      	bge.n	8004d1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	019b      	lsls	r3, r3, #6
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <USB_FlushTxFifo+0x64>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e006      	b.n	8004d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d0f0      	beq.n	8004d44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	00030d40 	.word	0x00030d40

08004d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <USB_FlushRxFifo+0x5c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e018      	b.n	8004dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	daf2      	bge.n	8004d80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2210      	movs	r2, #16
 8004da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a08      	ldr	r2, [pc, #32]	; (8004dd0 <USB_FlushRxFifo+0x5c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e006      	b.n	8004dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d0f0      	beq.n	8004da4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	00030d40 	.word	0x00030d40

08004dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df4:	4313      	orrs	r3, r2
 8004df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e20:	f023 0303 	bic.w	r3, r3, #3
 8004e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e34:	f043 0302 	orr.w	r3, r3, #2
 8004e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f003 0301 	and.w	r3, r3, #1
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <USB_CoreReset+0x64>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e01b      	b.n	8004eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	daf2      	bge.n	8004e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <USB_CoreReset+0x64>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e006      	b.n	8004eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d0f0      	beq.n	8004e9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	00030d40 	.word	0x00030d40

08004ecc <siprintf>:
 8004ecc:	b40e      	push	{r1, r2, r3}
 8004ece:	b500      	push	{lr}
 8004ed0:	b09c      	sub	sp, #112	; 0x70
 8004ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ed4:	9002      	str	r0, [sp, #8]
 8004ed6:	9006      	str	r0, [sp, #24]
 8004ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004edc:	4809      	ldr	r0, [pc, #36]	; (8004f04 <siprintf+0x38>)
 8004ede:	9107      	str	r1, [sp, #28]
 8004ee0:	9104      	str	r1, [sp, #16]
 8004ee2:	4909      	ldr	r1, [pc, #36]	; (8004f08 <siprintf+0x3c>)
 8004ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ee8:	9105      	str	r1, [sp, #20]
 8004eea:	6800      	ldr	r0, [r0, #0]
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	a902      	add	r1, sp, #8
 8004ef0:	f000 f89a 	bl	8005028 <_svfiprintf_r>
 8004ef4:	9b02      	ldr	r3, [sp, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	b01c      	add	sp, #112	; 0x70
 8004efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f00:	b003      	add	sp, #12
 8004f02:	4770      	bx	lr
 8004f04:	20000058 	.word	0x20000058
 8004f08:	ffff0208 	.word	0xffff0208

08004f0c <memset>:
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <memset+0xa>
 8004f14:	4770      	bx	lr
 8004f16:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1a:	e7f9      	b.n	8004f10 <memset+0x4>

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000058 	.word	0x20000058

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	; (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	; (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	; (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f000 fc6a 	bl	8005814 <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08005a64 	.word	0x08005a64
 8004f64:	08005a64 	.word	0x08005a64
 8004f68:	08005a64 	.word	0x08005a64
 8004f6c:	08005a68 	.word	0x08005a68

08004f70 <__retarget_lock_acquire_recursive>:
 8004f70:	4770      	bx	lr

08004f72 <__retarget_lock_release_recursive>:
 8004f72:	4770      	bx	lr

08004f74 <__ssputs_r>:
 8004f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	688e      	ldr	r6, [r1, #8]
 8004f7a:	461f      	mov	r7, r3
 8004f7c:	42be      	cmp	r6, r7
 8004f7e:	680b      	ldr	r3, [r1, #0]
 8004f80:	4682      	mov	sl, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	4690      	mov	r8, r2
 8004f86:	d82c      	bhi.n	8004fe2 <__ssputs_r+0x6e>
 8004f88:	898a      	ldrh	r2, [r1, #12]
 8004f8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f8e:	d026      	beq.n	8004fde <__ssputs_r+0x6a>
 8004f90:	6965      	ldr	r5, [r4, #20]
 8004f92:	6909      	ldr	r1, [r1, #16]
 8004f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f98:	eba3 0901 	sub.w	r9, r3, r1
 8004f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fa0:	1c7b      	adds	r3, r7, #1
 8004fa2:	444b      	add	r3, r9
 8004fa4:	106d      	asrs	r5, r5, #1
 8004fa6:	429d      	cmp	r5, r3
 8004fa8:	bf38      	it	cc
 8004faa:	461d      	movcc	r5, r3
 8004fac:	0553      	lsls	r3, r2, #21
 8004fae:	d527      	bpl.n	8005000 <__ssputs_r+0x8c>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f000 f957 	bl	8005264 <_malloc_r>
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	b360      	cbz	r0, 8005014 <__ssputs_r+0xa0>
 8004fba:	6921      	ldr	r1, [r4, #16]
 8004fbc:	464a      	mov	r2, r9
 8004fbe:	f000 fbc7 	bl	8005750 <memcpy>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	6126      	str	r6, [r4, #16]
 8004fd0:	6165      	str	r5, [r4, #20]
 8004fd2:	444e      	add	r6, r9
 8004fd4:	eba5 0509 	sub.w	r5, r5, r9
 8004fd8:	6026      	str	r6, [r4, #0]
 8004fda:	60a5      	str	r5, [r4, #8]
 8004fdc:	463e      	mov	r6, r7
 8004fde:	42be      	cmp	r6, r7
 8004fe0:	d900      	bls.n	8004fe4 <__ssputs_r+0x70>
 8004fe2:	463e      	mov	r6, r7
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	4632      	mov	r2, r6
 8004fe8:	4641      	mov	r1, r8
 8004fea:	f000 fb86 	bl	80056fa <memmove>
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	1b9b      	subs	r3, r3, r6
 8004ff2:	60a3      	str	r3, [r4, #8]
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	4433      	add	r3, r6
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005000:	462a      	mov	r2, r5
 8005002:	f000 fb4b 	bl	800569c <_realloc_r>
 8005006:	4606      	mov	r6, r0
 8005008:	2800      	cmp	r0, #0
 800500a:	d1e0      	bne.n	8004fce <__ssputs_r+0x5a>
 800500c:	6921      	ldr	r1, [r4, #16]
 800500e:	4650      	mov	r0, sl
 8005010:	f000 fbac 	bl	800576c <_free_r>
 8005014:	230c      	movs	r3, #12
 8005016:	f8ca 3000 	str.w	r3, [sl]
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005026:	e7e9      	b.n	8004ffc <__ssputs_r+0x88>

08005028 <_svfiprintf_r>:
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	4698      	mov	r8, r3
 800502e:	898b      	ldrh	r3, [r1, #12]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	b09d      	sub	sp, #116	; 0x74
 8005034:	4607      	mov	r7, r0
 8005036:	460d      	mov	r5, r1
 8005038:	4614      	mov	r4, r2
 800503a:	d50e      	bpl.n	800505a <_svfiprintf_r+0x32>
 800503c:	690b      	ldr	r3, [r1, #16]
 800503e:	b963      	cbnz	r3, 800505a <_svfiprintf_r+0x32>
 8005040:	2140      	movs	r1, #64	; 0x40
 8005042:	f000 f90f 	bl	8005264 <_malloc_r>
 8005046:	6028      	str	r0, [r5, #0]
 8005048:	6128      	str	r0, [r5, #16]
 800504a:	b920      	cbnz	r0, 8005056 <_svfiprintf_r+0x2e>
 800504c:	230c      	movs	r3, #12
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005054:	e0d0      	b.n	80051f8 <_svfiprintf_r+0x1d0>
 8005056:	2340      	movs	r3, #64	; 0x40
 8005058:	616b      	str	r3, [r5, #20]
 800505a:	2300      	movs	r3, #0
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	2320      	movs	r3, #32
 8005060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005064:	f8cd 800c 	str.w	r8, [sp, #12]
 8005068:	2330      	movs	r3, #48	; 0x30
 800506a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005210 <_svfiprintf_r+0x1e8>
 800506e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005072:	f04f 0901 	mov.w	r9, #1
 8005076:	4623      	mov	r3, r4
 8005078:	469a      	mov	sl, r3
 800507a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800507e:	b10a      	cbz	r2, 8005084 <_svfiprintf_r+0x5c>
 8005080:	2a25      	cmp	r2, #37	; 0x25
 8005082:	d1f9      	bne.n	8005078 <_svfiprintf_r+0x50>
 8005084:	ebba 0b04 	subs.w	fp, sl, r4
 8005088:	d00b      	beq.n	80050a2 <_svfiprintf_r+0x7a>
 800508a:	465b      	mov	r3, fp
 800508c:	4622      	mov	r2, r4
 800508e:	4629      	mov	r1, r5
 8005090:	4638      	mov	r0, r7
 8005092:	f7ff ff6f 	bl	8004f74 <__ssputs_r>
 8005096:	3001      	adds	r0, #1
 8005098:	f000 80a9 	beq.w	80051ee <_svfiprintf_r+0x1c6>
 800509c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800509e:	445a      	add	r2, fp
 80050a0:	9209      	str	r2, [sp, #36]	; 0x24
 80050a2:	f89a 3000 	ldrb.w	r3, [sl]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80a1 	beq.w	80051ee <_svfiprintf_r+0x1c6>
 80050ac:	2300      	movs	r3, #0
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b6:	f10a 0a01 	add.w	sl, sl, #1
 80050ba:	9304      	str	r3, [sp, #16]
 80050bc:	9307      	str	r3, [sp, #28]
 80050be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050c2:	931a      	str	r3, [sp, #104]	; 0x68
 80050c4:	4654      	mov	r4, sl
 80050c6:	2205      	movs	r2, #5
 80050c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050cc:	4850      	ldr	r0, [pc, #320]	; (8005210 <_svfiprintf_r+0x1e8>)
 80050ce:	f7fb f8a7 	bl	8000220 <memchr>
 80050d2:	9a04      	ldr	r2, [sp, #16]
 80050d4:	b9d8      	cbnz	r0, 800510e <_svfiprintf_r+0xe6>
 80050d6:	06d0      	lsls	r0, r2, #27
 80050d8:	bf44      	itt	mi
 80050da:	2320      	movmi	r3, #32
 80050dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e0:	0711      	lsls	r1, r2, #28
 80050e2:	bf44      	itt	mi
 80050e4:	232b      	movmi	r3, #43	; 0x2b
 80050e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ea:	f89a 3000 	ldrb.w	r3, [sl]
 80050ee:	2b2a      	cmp	r3, #42	; 0x2a
 80050f0:	d015      	beq.n	800511e <_svfiprintf_r+0xf6>
 80050f2:	9a07      	ldr	r2, [sp, #28]
 80050f4:	4654      	mov	r4, sl
 80050f6:	2000      	movs	r0, #0
 80050f8:	f04f 0c0a 	mov.w	ip, #10
 80050fc:	4621      	mov	r1, r4
 80050fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005102:	3b30      	subs	r3, #48	; 0x30
 8005104:	2b09      	cmp	r3, #9
 8005106:	d94d      	bls.n	80051a4 <_svfiprintf_r+0x17c>
 8005108:	b1b0      	cbz	r0, 8005138 <_svfiprintf_r+0x110>
 800510a:	9207      	str	r2, [sp, #28]
 800510c:	e014      	b.n	8005138 <_svfiprintf_r+0x110>
 800510e:	eba0 0308 	sub.w	r3, r0, r8
 8005112:	fa09 f303 	lsl.w	r3, r9, r3
 8005116:	4313      	orrs	r3, r2
 8005118:	9304      	str	r3, [sp, #16]
 800511a:	46a2      	mov	sl, r4
 800511c:	e7d2      	b.n	80050c4 <_svfiprintf_r+0x9c>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	1d19      	adds	r1, r3, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	9103      	str	r1, [sp, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfbb      	ittet	lt
 800512a:	425b      	neglt	r3, r3
 800512c:	f042 0202 	orrlt.w	r2, r2, #2
 8005130:	9307      	strge	r3, [sp, #28]
 8005132:	9307      	strlt	r3, [sp, #28]
 8005134:	bfb8      	it	lt
 8005136:	9204      	strlt	r2, [sp, #16]
 8005138:	7823      	ldrb	r3, [r4, #0]
 800513a:	2b2e      	cmp	r3, #46	; 0x2e
 800513c:	d10c      	bne.n	8005158 <_svfiprintf_r+0x130>
 800513e:	7863      	ldrb	r3, [r4, #1]
 8005140:	2b2a      	cmp	r3, #42	; 0x2a
 8005142:	d134      	bne.n	80051ae <_svfiprintf_r+0x186>
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	9203      	str	r2, [sp, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	bfb8      	it	lt
 8005150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005154:	3402      	adds	r4, #2
 8005156:	9305      	str	r3, [sp, #20]
 8005158:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005220 <_svfiprintf_r+0x1f8>
 800515c:	7821      	ldrb	r1, [r4, #0]
 800515e:	2203      	movs	r2, #3
 8005160:	4650      	mov	r0, sl
 8005162:	f7fb f85d 	bl	8000220 <memchr>
 8005166:	b138      	cbz	r0, 8005178 <_svfiprintf_r+0x150>
 8005168:	9b04      	ldr	r3, [sp, #16]
 800516a:	eba0 000a 	sub.w	r0, r0, sl
 800516e:	2240      	movs	r2, #64	; 0x40
 8005170:	4082      	lsls	r2, r0
 8005172:	4313      	orrs	r3, r2
 8005174:	3401      	adds	r4, #1
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517c:	4825      	ldr	r0, [pc, #148]	; (8005214 <_svfiprintf_r+0x1ec>)
 800517e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005182:	2206      	movs	r2, #6
 8005184:	f7fb f84c 	bl	8000220 <memchr>
 8005188:	2800      	cmp	r0, #0
 800518a:	d038      	beq.n	80051fe <_svfiprintf_r+0x1d6>
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <_svfiprintf_r+0x1f0>)
 800518e:	bb1b      	cbnz	r3, 80051d8 <_svfiprintf_r+0x1b0>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	3307      	adds	r3, #7
 8005194:	f023 0307 	bic.w	r3, r3, #7
 8005198:	3308      	adds	r3, #8
 800519a:	9303      	str	r3, [sp, #12]
 800519c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519e:	4433      	add	r3, r6
 80051a0:	9309      	str	r3, [sp, #36]	; 0x24
 80051a2:	e768      	b.n	8005076 <_svfiprintf_r+0x4e>
 80051a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a8:	460c      	mov	r4, r1
 80051aa:	2001      	movs	r0, #1
 80051ac:	e7a6      	b.n	80050fc <_svfiprintf_r+0xd4>
 80051ae:	2300      	movs	r3, #0
 80051b0:	3401      	adds	r4, #1
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	4619      	mov	r1, r3
 80051b6:	f04f 0c0a 	mov.w	ip, #10
 80051ba:	4620      	mov	r0, r4
 80051bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c0:	3a30      	subs	r2, #48	; 0x30
 80051c2:	2a09      	cmp	r2, #9
 80051c4:	d903      	bls.n	80051ce <_svfiprintf_r+0x1a6>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0c6      	beq.n	8005158 <_svfiprintf_r+0x130>
 80051ca:	9105      	str	r1, [sp, #20]
 80051cc:	e7c4      	b.n	8005158 <_svfiprintf_r+0x130>
 80051ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d2:	4604      	mov	r4, r0
 80051d4:	2301      	movs	r3, #1
 80051d6:	e7f0      	b.n	80051ba <_svfiprintf_r+0x192>
 80051d8:	ab03      	add	r3, sp, #12
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	462a      	mov	r2, r5
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <_svfiprintf_r+0x1f4>)
 80051e0:	a904      	add	r1, sp, #16
 80051e2:	4638      	mov	r0, r7
 80051e4:	f3af 8000 	nop.w
 80051e8:	1c42      	adds	r2, r0, #1
 80051ea:	4606      	mov	r6, r0
 80051ec:	d1d6      	bne.n	800519c <_svfiprintf_r+0x174>
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	065b      	lsls	r3, r3, #25
 80051f2:	f53f af2d 	bmi.w	8005050 <_svfiprintf_r+0x28>
 80051f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f8:	b01d      	add	sp, #116	; 0x74
 80051fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fe:	ab03      	add	r3, sp, #12
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	462a      	mov	r2, r5
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <_svfiprintf_r+0x1f4>)
 8005206:	a904      	add	r1, sp, #16
 8005208:	4638      	mov	r0, r7
 800520a:	f000 f919 	bl	8005440 <_printf_i>
 800520e:	e7eb      	b.n	80051e8 <_svfiprintf_r+0x1c0>
 8005210:	08005a28 	.word	0x08005a28
 8005214:	08005a32 	.word	0x08005a32
 8005218:	00000000 	.word	0x00000000
 800521c:	08004f75 	.word	0x08004f75
 8005220:	08005a2e 	.word	0x08005a2e

08005224 <sbrk_aligned>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4e0e      	ldr	r6, [pc, #56]	; (8005260 <sbrk_aligned+0x3c>)
 8005228:	460c      	mov	r4, r1
 800522a:	6831      	ldr	r1, [r6, #0]
 800522c:	4605      	mov	r5, r0
 800522e:	b911      	cbnz	r1, 8005236 <sbrk_aligned+0x12>
 8005230:	f000 fa7e 	bl	8005730 <_sbrk_r>
 8005234:	6030      	str	r0, [r6, #0]
 8005236:	4621      	mov	r1, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fa79 	bl	8005730 <_sbrk_r>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d00a      	beq.n	8005258 <sbrk_aligned+0x34>
 8005242:	1cc4      	adds	r4, r0, #3
 8005244:	f024 0403 	bic.w	r4, r4, #3
 8005248:	42a0      	cmp	r0, r4
 800524a:	d007      	beq.n	800525c <sbrk_aligned+0x38>
 800524c:	1a21      	subs	r1, r4, r0
 800524e:	4628      	mov	r0, r5
 8005250:	f000 fa6e 	bl	8005730 <_sbrk_r>
 8005254:	3001      	adds	r0, #1
 8005256:	d101      	bne.n	800525c <sbrk_aligned+0x38>
 8005258:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800525c:	4620      	mov	r0, r4
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	2000076c 	.word	0x2000076c

08005264 <_malloc_r>:
 8005264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005268:	1ccd      	adds	r5, r1, #3
 800526a:	f025 0503 	bic.w	r5, r5, #3
 800526e:	3508      	adds	r5, #8
 8005270:	2d0c      	cmp	r5, #12
 8005272:	bf38      	it	cc
 8005274:	250c      	movcc	r5, #12
 8005276:	2d00      	cmp	r5, #0
 8005278:	4607      	mov	r7, r0
 800527a:	db01      	blt.n	8005280 <_malloc_r+0x1c>
 800527c:	42a9      	cmp	r1, r5
 800527e:	d905      	bls.n	800528c <_malloc_r+0x28>
 8005280:	230c      	movs	r3, #12
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	2600      	movs	r6, #0
 8005286:	4630      	mov	r0, r6
 8005288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005360 <_malloc_r+0xfc>
 8005290:	f000 f9f8 	bl	8005684 <__malloc_lock>
 8005294:	f8d8 3000 	ldr.w	r3, [r8]
 8005298:	461c      	mov	r4, r3
 800529a:	bb5c      	cbnz	r4, 80052f4 <_malloc_r+0x90>
 800529c:	4629      	mov	r1, r5
 800529e:	4638      	mov	r0, r7
 80052a0:	f7ff ffc0 	bl	8005224 <sbrk_aligned>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	4604      	mov	r4, r0
 80052a8:	d155      	bne.n	8005356 <_malloc_r+0xf2>
 80052aa:	f8d8 4000 	ldr.w	r4, [r8]
 80052ae:	4626      	mov	r6, r4
 80052b0:	2e00      	cmp	r6, #0
 80052b2:	d145      	bne.n	8005340 <_malloc_r+0xdc>
 80052b4:	2c00      	cmp	r4, #0
 80052b6:	d048      	beq.n	800534a <_malloc_r+0xe6>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	4631      	mov	r1, r6
 80052bc:	4638      	mov	r0, r7
 80052be:	eb04 0903 	add.w	r9, r4, r3
 80052c2:	f000 fa35 	bl	8005730 <_sbrk_r>
 80052c6:	4581      	cmp	r9, r0
 80052c8:	d13f      	bne.n	800534a <_malloc_r+0xe6>
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	1a6d      	subs	r5, r5, r1
 80052ce:	4629      	mov	r1, r5
 80052d0:	4638      	mov	r0, r7
 80052d2:	f7ff ffa7 	bl	8005224 <sbrk_aligned>
 80052d6:	3001      	adds	r0, #1
 80052d8:	d037      	beq.n	800534a <_malloc_r+0xe6>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	442b      	add	r3, r5
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	f8d8 3000 	ldr.w	r3, [r8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d038      	beq.n	800535a <_malloc_r+0xf6>
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	42a2      	cmp	r2, r4
 80052ec:	d12b      	bne.n	8005346 <_malloc_r+0xe2>
 80052ee:	2200      	movs	r2, #0
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	e00f      	b.n	8005314 <_malloc_r+0xb0>
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	1b52      	subs	r2, r2, r5
 80052f8:	d41f      	bmi.n	800533a <_malloc_r+0xd6>
 80052fa:	2a0b      	cmp	r2, #11
 80052fc:	d917      	bls.n	800532e <_malloc_r+0xca>
 80052fe:	1961      	adds	r1, r4, r5
 8005300:	42a3      	cmp	r3, r4
 8005302:	6025      	str	r5, [r4, #0]
 8005304:	bf18      	it	ne
 8005306:	6059      	strne	r1, [r3, #4]
 8005308:	6863      	ldr	r3, [r4, #4]
 800530a:	bf08      	it	eq
 800530c:	f8c8 1000 	streq.w	r1, [r8]
 8005310:	5162      	str	r2, [r4, r5]
 8005312:	604b      	str	r3, [r1, #4]
 8005314:	4638      	mov	r0, r7
 8005316:	f104 060b 	add.w	r6, r4, #11
 800531a:	f000 f9b9 	bl	8005690 <__malloc_unlock>
 800531e:	f026 0607 	bic.w	r6, r6, #7
 8005322:	1d23      	adds	r3, r4, #4
 8005324:	1af2      	subs	r2, r6, r3
 8005326:	d0ae      	beq.n	8005286 <_malloc_r+0x22>
 8005328:	1b9b      	subs	r3, r3, r6
 800532a:	50a3      	str	r3, [r4, r2]
 800532c:	e7ab      	b.n	8005286 <_malloc_r+0x22>
 800532e:	42a3      	cmp	r3, r4
 8005330:	6862      	ldr	r2, [r4, #4]
 8005332:	d1dd      	bne.n	80052f0 <_malloc_r+0x8c>
 8005334:	f8c8 2000 	str.w	r2, [r8]
 8005338:	e7ec      	b.n	8005314 <_malloc_r+0xb0>
 800533a:	4623      	mov	r3, r4
 800533c:	6864      	ldr	r4, [r4, #4]
 800533e:	e7ac      	b.n	800529a <_malloc_r+0x36>
 8005340:	4634      	mov	r4, r6
 8005342:	6876      	ldr	r6, [r6, #4]
 8005344:	e7b4      	b.n	80052b0 <_malloc_r+0x4c>
 8005346:	4613      	mov	r3, r2
 8005348:	e7cc      	b.n	80052e4 <_malloc_r+0x80>
 800534a:	230c      	movs	r3, #12
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4638      	mov	r0, r7
 8005350:	f000 f99e 	bl	8005690 <__malloc_unlock>
 8005354:	e797      	b.n	8005286 <_malloc_r+0x22>
 8005356:	6025      	str	r5, [r4, #0]
 8005358:	e7dc      	b.n	8005314 <_malloc_r+0xb0>
 800535a:	605b      	str	r3, [r3, #4]
 800535c:	deff      	udf	#255	; 0xff
 800535e:	bf00      	nop
 8005360:	20000768 	.word	0x20000768

08005364 <_printf_common>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	4616      	mov	r6, r2
 800536a:	4699      	mov	r9, r3
 800536c:	688a      	ldr	r2, [r1, #8]
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005374:	4293      	cmp	r3, r2
 8005376:	bfb8      	it	lt
 8005378:	4613      	movlt	r3, r2
 800537a:	6033      	str	r3, [r6, #0]
 800537c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005380:	4607      	mov	r7, r0
 8005382:	460c      	mov	r4, r1
 8005384:	b10a      	cbz	r2, 800538a <_printf_common+0x26>
 8005386:	3301      	adds	r3, #1
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	0699      	lsls	r1, r3, #26
 800538e:	bf42      	ittt	mi
 8005390:	6833      	ldrmi	r3, [r6, #0]
 8005392:	3302      	addmi	r3, #2
 8005394:	6033      	strmi	r3, [r6, #0]
 8005396:	6825      	ldr	r5, [r4, #0]
 8005398:	f015 0506 	ands.w	r5, r5, #6
 800539c:	d106      	bne.n	80053ac <_printf_common+0x48>
 800539e:	f104 0a19 	add.w	sl, r4, #25
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	6832      	ldr	r2, [r6, #0]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	dc26      	bgt.n	80053fa <_printf_common+0x96>
 80053ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b0:	1e13      	subs	r3, r2, #0
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	bf18      	it	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	0692      	lsls	r2, r2, #26
 80053ba:	d42b      	bmi.n	8005414 <_printf_common+0xb0>
 80053bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c0:	4649      	mov	r1, r9
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d01e      	beq.n	8005408 <_printf_common+0xa4>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	6922      	ldr	r2, [r4, #16]
 80053ce:	f003 0306 	and.w	r3, r3, #6
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	bf02      	ittt	eq
 80053d6:	68e5      	ldreq	r5, [r4, #12]
 80053d8:	6833      	ldreq	r3, [r6, #0]
 80053da:	1aed      	subeq	r5, r5, r3
 80053dc:	68a3      	ldr	r3, [r4, #8]
 80053de:	bf0c      	ite	eq
 80053e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e4:	2500      	movne	r5, #0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bfc4      	itt	gt
 80053ea:	1a9b      	subgt	r3, r3, r2
 80053ec:	18ed      	addgt	r5, r5, r3
 80053ee:	2600      	movs	r6, #0
 80053f0:	341a      	adds	r4, #26
 80053f2:	42b5      	cmp	r5, r6
 80053f4:	d11a      	bne.n	800542c <_printf_common+0xc8>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e008      	b.n	800540c <_printf_common+0xa8>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4649      	mov	r1, r9
 8005400:	4638      	mov	r0, r7
 8005402:	47c0      	blx	r8
 8005404:	3001      	adds	r0, #1
 8005406:	d103      	bne.n	8005410 <_printf_common+0xac>
 8005408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005410:	3501      	adds	r5, #1
 8005412:	e7c6      	b.n	80053a2 <_printf_common+0x3e>
 8005414:	18e1      	adds	r1, r4, r3
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	2030      	movs	r0, #48	; 0x30
 800541a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800541e:	4422      	add	r2, r4
 8005420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005428:	3302      	adds	r3, #2
 800542a:	e7c7      	b.n	80053bc <_printf_common+0x58>
 800542c:	2301      	movs	r3, #1
 800542e:	4622      	mov	r2, r4
 8005430:	4649      	mov	r1, r9
 8005432:	4638      	mov	r0, r7
 8005434:	47c0      	blx	r8
 8005436:	3001      	adds	r0, #1
 8005438:	d0e6      	beq.n	8005408 <_printf_common+0xa4>
 800543a:	3601      	adds	r6, #1
 800543c:	e7d9      	b.n	80053f2 <_printf_common+0x8e>
	...

08005440 <_printf_i>:
 8005440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	7e0f      	ldrb	r7, [r1, #24]
 8005446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005448:	2f78      	cmp	r7, #120	; 0x78
 800544a:	4691      	mov	r9, r2
 800544c:	4680      	mov	r8, r0
 800544e:	460c      	mov	r4, r1
 8005450:	469a      	mov	sl, r3
 8005452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005456:	d807      	bhi.n	8005468 <_printf_i+0x28>
 8005458:	2f62      	cmp	r7, #98	; 0x62
 800545a:	d80a      	bhi.n	8005472 <_printf_i+0x32>
 800545c:	2f00      	cmp	r7, #0
 800545e:	f000 80d4 	beq.w	800560a <_printf_i+0x1ca>
 8005462:	2f58      	cmp	r7, #88	; 0x58
 8005464:	f000 80c0 	beq.w	80055e8 <_printf_i+0x1a8>
 8005468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005470:	e03a      	b.n	80054e8 <_printf_i+0xa8>
 8005472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005476:	2b15      	cmp	r3, #21
 8005478:	d8f6      	bhi.n	8005468 <_printf_i+0x28>
 800547a:	a101      	add	r1, pc, #4	; (adr r1, 8005480 <_printf_i+0x40>)
 800547c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054ed 	.word	0x080054ed
 8005488:	08005469 	.word	0x08005469
 800548c:	08005469 	.word	0x08005469
 8005490:	08005469 	.word	0x08005469
 8005494:	08005469 	.word	0x08005469
 8005498:	080054ed 	.word	0x080054ed
 800549c:	08005469 	.word	0x08005469
 80054a0:	08005469 	.word	0x08005469
 80054a4:	08005469 	.word	0x08005469
 80054a8:	08005469 	.word	0x08005469
 80054ac:	080055f1 	.word	0x080055f1
 80054b0:	08005519 	.word	0x08005519
 80054b4:	080055ab 	.word	0x080055ab
 80054b8:	08005469 	.word	0x08005469
 80054bc:	08005469 	.word	0x08005469
 80054c0:	08005613 	.word	0x08005613
 80054c4:	08005469 	.word	0x08005469
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005469 	.word	0x08005469
 80054d0:	08005469 	.word	0x08005469
 80054d4:	080055b3 	.word	0x080055b3
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	602a      	str	r2, [r5, #0]
 80054e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054e8:	2301      	movs	r3, #1
 80054ea:	e09f      	b.n	800562c <_printf_i+0x1ec>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	0607      	lsls	r7, r0, #24
 80054f2:	f103 0104 	add.w	r1, r3, #4
 80054f6:	6029      	str	r1, [r5, #0]
 80054f8:	d501      	bpl.n	80054fe <_printf_i+0xbe>
 80054fa:	681e      	ldr	r6, [r3, #0]
 80054fc:	e003      	b.n	8005506 <_printf_i+0xc6>
 80054fe:	0646      	lsls	r6, r0, #25
 8005500:	d5fb      	bpl.n	80054fa <_printf_i+0xba>
 8005502:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005506:	2e00      	cmp	r6, #0
 8005508:	da03      	bge.n	8005512 <_printf_i+0xd2>
 800550a:	232d      	movs	r3, #45	; 0x2d
 800550c:	4276      	negs	r6, r6
 800550e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005512:	485a      	ldr	r0, [pc, #360]	; (800567c <_printf_i+0x23c>)
 8005514:	230a      	movs	r3, #10
 8005516:	e012      	b.n	800553e <_printf_i+0xfe>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	1d19      	adds	r1, r3, #4
 800551e:	6029      	str	r1, [r5, #0]
 8005520:	0605      	lsls	r5, r0, #24
 8005522:	d501      	bpl.n	8005528 <_printf_i+0xe8>
 8005524:	681e      	ldr	r6, [r3, #0]
 8005526:	e002      	b.n	800552e <_printf_i+0xee>
 8005528:	0641      	lsls	r1, r0, #25
 800552a:	d5fb      	bpl.n	8005524 <_printf_i+0xe4>
 800552c:	881e      	ldrh	r6, [r3, #0]
 800552e:	4853      	ldr	r0, [pc, #332]	; (800567c <_printf_i+0x23c>)
 8005530:	2f6f      	cmp	r7, #111	; 0x6f
 8005532:	bf0c      	ite	eq
 8005534:	2308      	moveq	r3, #8
 8005536:	230a      	movne	r3, #10
 8005538:	2100      	movs	r1, #0
 800553a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800553e:	6865      	ldr	r5, [r4, #4]
 8005540:	60a5      	str	r5, [r4, #8]
 8005542:	2d00      	cmp	r5, #0
 8005544:	bfa2      	ittt	ge
 8005546:	6821      	ldrge	r1, [r4, #0]
 8005548:	f021 0104 	bicge.w	r1, r1, #4
 800554c:	6021      	strge	r1, [r4, #0]
 800554e:	b90e      	cbnz	r6, 8005554 <_printf_i+0x114>
 8005550:	2d00      	cmp	r5, #0
 8005552:	d04b      	beq.n	80055ec <_printf_i+0x1ac>
 8005554:	4615      	mov	r5, r2
 8005556:	fbb6 f1f3 	udiv	r1, r6, r3
 800555a:	fb03 6711 	mls	r7, r3, r1, r6
 800555e:	5dc7      	ldrb	r7, [r0, r7]
 8005560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005564:	4637      	mov	r7, r6
 8005566:	42bb      	cmp	r3, r7
 8005568:	460e      	mov	r6, r1
 800556a:	d9f4      	bls.n	8005556 <_printf_i+0x116>
 800556c:	2b08      	cmp	r3, #8
 800556e:	d10b      	bne.n	8005588 <_printf_i+0x148>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07de      	lsls	r6, r3, #31
 8005574:	d508      	bpl.n	8005588 <_printf_i+0x148>
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	6861      	ldr	r1, [r4, #4]
 800557a:	4299      	cmp	r1, r3
 800557c:	bfde      	ittt	le
 800557e:	2330      	movle	r3, #48	; 0x30
 8005580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005584:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005588:	1b52      	subs	r2, r2, r5
 800558a:	6122      	str	r2, [r4, #16]
 800558c:	f8cd a000 	str.w	sl, [sp]
 8005590:	464b      	mov	r3, r9
 8005592:	aa03      	add	r2, sp, #12
 8005594:	4621      	mov	r1, r4
 8005596:	4640      	mov	r0, r8
 8005598:	f7ff fee4 	bl	8005364 <_printf_common>
 800559c:	3001      	adds	r0, #1
 800559e:	d14a      	bne.n	8005636 <_printf_i+0x1f6>
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055a4:	b004      	add	sp, #16
 80055a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	f043 0320 	orr.w	r3, r3, #32
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	4833      	ldr	r0, [pc, #204]	; (8005680 <_printf_i+0x240>)
 80055b4:	2778      	movs	r7, #120	; 0x78
 80055b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	6829      	ldr	r1, [r5, #0]
 80055be:	061f      	lsls	r7, r3, #24
 80055c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80055c4:	d402      	bmi.n	80055cc <_printf_i+0x18c>
 80055c6:	065f      	lsls	r7, r3, #25
 80055c8:	bf48      	it	mi
 80055ca:	b2b6      	uxthmi	r6, r6
 80055cc:	07df      	lsls	r7, r3, #31
 80055ce:	bf48      	it	mi
 80055d0:	f043 0320 	orrmi.w	r3, r3, #32
 80055d4:	6029      	str	r1, [r5, #0]
 80055d6:	bf48      	it	mi
 80055d8:	6023      	strmi	r3, [r4, #0]
 80055da:	b91e      	cbnz	r6, 80055e4 <_printf_i+0x1a4>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	f023 0320 	bic.w	r3, r3, #32
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	2310      	movs	r3, #16
 80055e6:	e7a7      	b.n	8005538 <_printf_i+0xf8>
 80055e8:	4824      	ldr	r0, [pc, #144]	; (800567c <_printf_i+0x23c>)
 80055ea:	e7e4      	b.n	80055b6 <_printf_i+0x176>
 80055ec:	4615      	mov	r5, r2
 80055ee:	e7bd      	b.n	800556c <_printf_i+0x12c>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	6826      	ldr	r6, [r4, #0]
 80055f4:	6961      	ldr	r1, [r4, #20]
 80055f6:	1d18      	adds	r0, r3, #4
 80055f8:	6028      	str	r0, [r5, #0]
 80055fa:	0635      	lsls	r5, r6, #24
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	d501      	bpl.n	8005604 <_printf_i+0x1c4>
 8005600:	6019      	str	r1, [r3, #0]
 8005602:	e002      	b.n	800560a <_printf_i+0x1ca>
 8005604:	0670      	lsls	r0, r6, #25
 8005606:	d5fb      	bpl.n	8005600 <_printf_i+0x1c0>
 8005608:	8019      	strh	r1, [r3, #0]
 800560a:	2300      	movs	r3, #0
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	4615      	mov	r5, r2
 8005610:	e7bc      	b.n	800558c <_printf_i+0x14c>
 8005612:	682b      	ldr	r3, [r5, #0]
 8005614:	1d1a      	adds	r2, r3, #4
 8005616:	602a      	str	r2, [r5, #0]
 8005618:	681d      	ldr	r5, [r3, #0]
 800561a:	6862      	ldr	r2, [r4, #4]
 800561c:	2100      	movs	r1, #0
 800561e:	4628      	mov	r0, r5
 8005620:	f7fa fdfe 	bl	8000220 <memchr>
 8005624:	b108      	cbz	r0, 800562a <_printf_i+0x1ea>
 8005626:	1b40      	subs	r0, r0, r5
 8005628:	6060      	str	r0, [r4, #4]
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	6123      	str	r3, [r4, #16]
 800562e:	2300      	movs	r3, #0
 8005630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005634:	e7aa      	b.n	800558c <_printf_i+0x14c>
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	462a      	mov	r2, r5
 800563a:	4649      	mov	r1, r9
 800563c:	4640      	mov	r0, r8
 800563e:	47d0      	blx	sl
 8005640:	3001      	adds	r0, #1
 8005642:	d0ad      	beq.n	80055a0 <_printf_i+0x160>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	079b      	lsls	r3, r3, #30
 8005648:	d413      	bmi.n	8005672 <_printf_i+0x232>
 800564a:	68e0      	ldr	r0, [r4, #12]
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	4298      	cmp	r0, r3
 8005650:	bfb8      	it	lt
 8005652:	4618      	movlt	r0, r3
 8005654:	e7a6      	b.n	80055a4 <_printf_i+0x164>
 8005656:	2301      	movs	r3, #1
 8005658:	4632      	mov	r2, r6
 800565a:	4649      	mov	r1, r9
 800565c:	4640      	mov	r0, r8
 800565e:	47d0      	blx	sl
 8005660:	3001      	adds	r0, #1
 8005662:	d09d      	beq.n	80055a0 <_printf_i+0x160>
 8005664:	3501      	adds	r5, #1
 8005666:	68e3      	ldr	r3, [r4, #12]
 8005668:	9903      	ldr	r1, [sp, #12]
 800566a:	1a5b      	subs	r3, r3, r1
 800566c:	42ab      	cmp	r3, r5
 800566e:	dcf2      	bgt.n	8005656 <_printf_i+0x216>
 8005670:	e7eb      	b.n	800564a <_printf_i+0x20a>
 8005672:	2500      	movs	r5, #0
 8005674:	f104 0619 	add.w	r6, r4, #25
 8005678:	e7f5      	b.n	8005666 <_printf_i+0x226>
 800567a:	bf00      	nop
 800567c:	08005a39 	.word	0x08005a39
 8005680:	08005a4a 	.word	0x08005a4a

08005684 <__malloc_lock>:
 8005684:	4801      	ldr	r0, [pc, #4]	; (800568c <__malloc_lock+0x8>)
 8005686:	f7ff bc73 	b.w	8004f70 <__retarget_lock_acquire_recursive>
 800568a:	bf00      	nop
 800568c:	20000764 	.word	0x20000764

08005690 <__malloc_unlock>:
 8005690:	4801      	ldr	r0, [pc, #4]	; (8005698 <__malloc_unlock+0x8>)
 8005692:	f7ff bc6e 	b.w	8004f72 <__retarget_lock_release_recursive>
 8005696:	bf00      	nop
 8005698:	20000764 	.word	0x20000764

0800569c <_realloc_r>:
 800569c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a0:	4680      	mov	r8, r0
 80056a2:	4614      	mov	r4, r2
 80056a4:	460e      	mov	r6, r1
 80056a6:	b921      	cbnz	r1, 80056b2 <_realloc_r+0x16>
 80056a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ac:	4611      	mov	r1, r2
 80056ae:	f7ff bdd9 	b.w	8005264 <_malloc_r>
 80056b2:	b92a      	cbnz	r2, 80056c0 <_realloc_r+0x24>
 80056b4:	f000 f85a 	bl	800576c <_free_r>
 80056b8:	4625      	mov	r5, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c0:	f000 f8a0 	bl	8005804 <_malloc_usable_size_r>
 80056c4:	4284      	cmp	r4, r0
 80056c6:	4607      	mov	r7, r0
 80056c8:	d802      	bhi.n	80056d0 <_realloc_r+0x34>
 80056ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056ce:	d812      	bhi.n	80056f6 <_realloc_r+0x5a>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4640      	mov	r0, r8
 80056d4:	f7ff fdc6 	bl	8005264 <_malloc_r>
 80056d8:	4605      	mov	r5, r0
 80056da:	2800      	cmp	r0, #0
 80056dc:	d0ed      	beq.n	80056ba <_realloc_r+0x1e>
 80056de:	42bc      	cmp	r4, r7
 80056e0:	4622      	mov	r2, r4
 80056e2:	4631      	mov	r1, r6
 80056e4:	bf28      	it	cs
 80056e6:	463a      	movcs	r2, r7
 80056e8:	f000 f832 	bl	8005750 <memcpy>
 80056ec:	4631      	mov	r1, r6
 80056ee:	4640      	mov	r0, r8
 80056f0:	f000 f83c 	bl	800576c <_free_r>
 80056f4:	e7e1      	b.n	80056ba <_realloc_r+0x1e>
 80056f6:	4635      	mov	r5, r6
 80056f8:	e7df      	b.n	80056ba <_realloc_r+0x1e>

080056fa <memmove>:
 80056fa:	4288      	cmp	r0, r1
 80056fc:	b510      	push	{r4, lr}
 80056fe:	eb01 0402 	add.w	r4, r1, r2
 8005702:	d902      	bls.n	800570a <memmove+0x10>
 8005704:	4284      	cmp	r4, r0
 8005706:	4623      	mov	r3, r4
 8005708:	d807      	bhi.n	800571a <memmove+0x20>
 800570a:	1e43      	subs	r3, r0, #1
 800570c:	42a1      	cmp	r1, r4
 800570e:	d008      	beq.n	8005722 <memmove+0x28>
 8005710:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005714:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005718:	e7f8      	b.n	800570c <memmove+0x12>
 800571a:	4402      	add	r2, r0
 800571c:	4601      	mov	r1, r0
 800571e:	428a      	cmp	r2, r1
 8005720:	d100      	bne.n	8005724 <memmove+0x2a>
 8005722:	bd10      	pop	{r4, pc}
 8005724:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005728:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800572c:	e7f7      	b.n	800571e <memmove+0x24>
	...

08005730 <_sbrk_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d06      	ldr	r5, [pc, #24]	; (800574c <_sbrk_r+0x1c>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	f7fb fee8 	bl	8001510 <_sbrk>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_sbrk_r+0x1a>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_sbrk_r+0x1a>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	20000770 	.word	0x20000770

08005750 <memcpy>:
 8005750:	440a      	add	r2, r1
 8005752:	4291      	cmp	r1, r2
 8005754:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005758:	d100      	bne.n	800575c <memcpy+0xc>
 800575a:	4770      	bx	lr
 800575c:	b510      	push	{r4, lr}
 800575e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005766:	4291      	cmp	r1, r2
 8005768:	d1f9      	bne.n	800575e <memcpy+0xe>
 800576a:	bd10      	pop	{r4, pc}

0800576c <_free_r>:
 800576c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800576e:	2900      	cmp	r1, #0
 8005770:	d044      	beq.n	80057fc <_free_r+0x90>
 8005772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f1a1 0404 	sub.w	r4, r1, #4
 800577e:	bfb8      	it	lt
 8005780:	18e4      	addlt	r4, r4, r3
 8005782:	f7ff ff7f 	bl	8005684 <__malloc_lock>
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <_free_r+0x94>)
 8005788:	9801      	ldr	r0, [sp, #4]
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	b933      	cbnz	r3, 800579c <_free_r+0x30>
 800578e:	6063      	str	r3, [r4, #4]
 8005790:	6014      	str	r4, [r2, #0]
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005798:	f7ff bf7a 	b.w	8005690 <__malloc_unlock>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d908      	bls.n	80057b2 <_free_r+0x46>
 80057a0:	6825      	ldr	r5, [r4, #0]
 80057a2:	1961      	adds	r1, r4, r5
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1949      	addeq	r1, r1, r5
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	e7ed      	b.n	800578e <_free_r+0x22>
 80057b2:	461a      	mov	r2, r3
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b10b      	cbz	r3, 80057bc <_free_r+0x50>
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	d9fa      	bls.n	80057b2 <_free_r+0x46>
 80057bc:	6811      	ldr	r1, [r2, #0]
 80057be:	1855      	adds	r5, r2, r1
 80057c0:	42a5      	cmp	r5, r4
 80057c2:	d10b      	bne.n	80057dc <_free_r+0x70>
 80057c4:	6824      	ldr	r4, [r4, #0]
 80057c6:	4421      	add	r1, r4
 80057c8:	1854      	adds	r4, r2, r1
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	d1e0      	bne.n	8005792 <_free_r+0x26>
 80057d0:	681c      	ldr	r4, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	6053      	str	r3, [r2, #4]
 80057d6:	440c      	add	r4, r1
 80057d8:	6014      	str	r4, [r2, #0]
 80057da:	e7da      	b.n	8005792 <_free_r+0x26>
 80057dc:	d902      	bls.n	80057e4 <_free_r+0x78>
 80057de:	230c      	movs	r3, #12
 80057e0:	6003      	str	r3, [r0, #0]
 80057e2:	e7d6      	b.n	8005792 <_free_r+0x26>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf04      	itt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	bf04      	itt	eq
 80057f4:	1949      	addeq	r1, r1, r5
 80057f6:	6021      	streq	r1, [r4, #0]
 80057f8:	6054      	str	r4, [r2, #4]
 80057fa:	e7ca      	b.n	8005792 <_free_r+0x26>
 80057fc:	b003      	add	sp, #12
 80057fe:	bd30      	pop	{r4, r5, pc}
 8005800:	20000768 	.word	0x20000768

08005804 <_malloc_usable_size_r>:
 8005804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005808:	1f18      	subs	r0, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	bfbc      	itt	lt
 800580e:	580b      	ldrlt	r3, [r1, r0]
 8005810:	18c0      	addlt	r0, r0, r3
 8005812:	4770      	bx	lr

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
