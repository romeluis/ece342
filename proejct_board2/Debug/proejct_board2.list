
proejct_board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b8  0800a0b8  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0c0  0800a0c0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0c0  0800a0c0  0001a0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0c4  0800a0c4  0001a0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800a0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019170  20000064  0800a12c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200191d4  0800a12c  000291d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018884  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ec  00000000  00000000  0003895b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0003be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001081  00000000  00000000  0003d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246d9  00000000  00000000  0003e3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b842  00000000  00000000  00062aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d773c  00000000  00000000  0007e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ee0  00000000  00000000  00155a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009dc0 	.word	0x08009dc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08009dc0 	.word	0x08009dc0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <hc05Init>:
bool exportingData = false;

UART_HandleTypeDef* BT_huart;
UART_HandleTypeDef* USB_huart;

void hc05Init(UART_HandleTypeDef* moduleHuart, UART_HandleTypeDef* sisterHuart) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	BT_huart = moduleHuart;
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <hc05Init+0x24>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6013      	str	r3, [r2, #0]
	USB_huart = sisterHuart;
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <hc05Init+0x28>)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000098 	.word	0x20000098
 80005e4:	2000009c 	.word	0x2000009c

080005e8 <checkConnection>:

bool checkConnection() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin)) {
 80005ec:	2101      	movs	r1, #1
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <checkConnection+0x28>)
 80005f0:	f003 ffc0 	bl	8004574 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <checkConnection+0x1c>
		moduleState = IDLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <checkConnection+0x2c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
		return true;
 8000600:	2301      	movs	r3, #1
 8000602:	e003      	b.n	800060c <checkConnection+0x24>
	} else {
		moduleState = DISCONNECTED;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <checkConnection+0x2c>)
 8000606:	2204      	movs	r2, #4
 8000608:	701a      	strb	r2, [r3, #0]
		return false;
 800060a:	2300      	movs	r3, #0
	}
}
 800060c:	4618      	mov	r0, r3
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021800 	.word	0x40021800
 8000614:	20000000 	.word	0x20000000

08000618 <sendData>:
bool cancelTransfer() {
	HAL_UART_Abort(BT_huart);
	return true;
}

bool sendData(uint8_t* pdata, uint16_t size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
	//Send data size
	sendingSize = true;
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <sendData+0xb8>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	sprintf((char*)sizeBuffer, "%d", size);
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	461a      	mov	r2, r3
 800062e:	4929      	ldr	r1, [pc, #164]	; (80006d4 <sendData+0xbc>)
 8000630:	4829      	ldr	r0, [pc, #164]	; (80006d8 <sendData+0xc0>)
 8000632:	f008 ff21 	bl	8009478 <siprintf>
	HAL_UART_Transmit_DMA(BT_huart, sizeBuffer, SIZE_BUFFER_LENGTH);
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <sendData+0xc4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	220a      	movs	r2, #10
 800063c:	4926      	ldr	r1, [pc, #152]	; (80006d8 <sendData+0xc0>)
 800063e:	4618      	mov	r0, r3
 8000640:	f007 fa90 	bl	8007b64 <HAL_UART_Transmit_DMA>
	while(sendingSize) { //Wait until the DMA transfer completes
 8000644:	e002      	b.n	800064c <sendData+0x34>
		HAL_Delay(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f001 fc78 	bl	8001f3c <HAL_Delay>
	while(sendingSize) { //Wait until the DMA transfer completes
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <sendData+0xb8>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f8      	bne.n	8000646 <sendData+0x2e>
	}

	//Wait for confirmation signal
	waitingForOK = true;
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <sendData+0xc8>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(BT_huart, okBuffer, OK_SIGNAL_LENGTH);
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <sendData+0xc4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2205      	movs	r2, #5
 8000660:	4920      	ldr	r1, [pc, #128]	; (80006e4 <sendData+0xcc>)
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fafc 	bl	8007c60 <HAL_UART_Receive_DMA>
	while(waitingForOK) { //Wait until the DMA transfer completes
 8000668:	e002      	b.n	8000670 <sendData+0x58>
		HAL_Delay(0);
 800066a:	2000      	movs	r0, #0
 800066c:	f001 fc66 	bl	8001f3c <HAL_Delay>
	while(waitingForOK) { //Wait until the DMA transfer completes
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <sendData+0xc8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f8      	bne.n	800066a <sendData+0x52>
	}

	//Check confirmation
	if (okBuffer[0] != 'O' || okBuffer[1] != 'K') {
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <sendData+0xcc>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b4f      	cmp	r3, #79	; 0x4f
 800067e:	d103      	bne.n	8000688 <sendData+0x70>
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <sendData+0xcc>)
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b4b      	cmp	r3, #75	; 0x4b
 8000686:	d006      	beq.n	8000696 <sendData+0x7e>
		while(1) {//Lock
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <sendData+0xd0>)
 8000690:	f003 ff88 	bl	80045a4 <HAL_GPIO_WritePin>
 8000694:	e7f8      	b.n	8000688 <sendData+0x70>
		}
	}
	memset(okBuffer, 0, OK_SIGNAL_LENGTH);
 8000696:	2205      	movs	r2, #5
 8000698:	2100      	movs	r1, #0
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <sendData+0xcc>)
 800069c:	f008 ff0c 	bl	80094b8 <memset>

	//Begin data transfer
	sendingData = true;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <sendData+0xd4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(BT_huart, pdata, size);
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <sendData+0xc4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	887a      	ldrh	r2, [r7, #2]
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fa58 	bl	8007b64 <HAL_UART_Transmit_DMA>
	while(sendingData) { //Wait until the DMA transfer completes
 80006b4:	e002      	b.n	80006bc <sendData+0xa4>
		HAL_Delay(0);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f001 fc40 	bl	8001f3c <HAL_Delay>
	while(sendingData) { //Wait until the DMA transfer completes
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <sendData+0xd4>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1f8      	bne.n	80006b6 <sendData+0x9e>
	}

	return true; //Transfer complete
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000095 	.word	0x20000095
 80006d4:	08009dd8 	.word	0x08009dd8
 80006d8:	20000080 	.word	0x20000080
 80006dc:	20000098 	.word	0x20000098
 80006e0:	20000093 	.word	0x20000093
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	40020400 	.word	0x40020400
 80006ec:	20000094 	.word	0x20000094

080006f0 <waitForNextFrameRequest>:
	while(sendingOK) {
		HAL_Delay(0);
	}
}

void waitForNextFrameRequest() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	//Wait for confirmation signal
	waitingForOK = true;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <waitForNextFrameRequest+0x54>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(BT_huart, okBuffer, OK_SIGNAL_LENGTH);
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <waitForNextFrameRequest+0x58>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2205      	movs	r2, #5
 8000700:	4912      	ldr	r1, [pc, #72]	; (800074c <waitForNextFrameRequest+0x5c>)
 8000702:	4618      	mov	r0, r3
 8000704:	f007 faac 	bl	8007c60 <HAL_UART_Receive_DMA>
	while(waitingForOK) { //Wait until the DMA transfer completes
 8000708:	e002      	b.n	8000710 <waitForNextFrameRequest+0x20>
		HAL_Delay(0);
 800070a:	2000      	movs	r0, #0
 800070c:	f001 fc16 	bl	8001f3c <HAL_Delay>
	while(waitingForOK) { //Wait until the DMA transfer completes
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <waitForNextFrameRequest+0x54>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f8      	bne.n	800070a <waitForNextFrameRequest+0x1a>
	}

	//Check confirmation
	if (okBuffer[0] != 'O' || okBuffer[1] != 'K') {
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <waitForNextFrameRequest+0x5c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b4f      	cmp	r3, #79	; 0x4f
 800071e:	d103      	bne.n	8000728 <waitForNextFrameRequest+0x38>
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <waitForNextFrameRequest+0x5c>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	2b4b      	cmp	r3, #75	; 0x4b
 8000726:	d006      	beq.n	8000736 <waitForNextFrameRequest+0x46>
		while(1) {//Lock
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <waitForNextFrameRequest+0x60>)
 8000730:	f003 ff38 	bl	80045a4 <HAL_GPIO_WritePin>
 8000734:	e7f8      	b.n	8000728 <waitForNextFrameRequest+0x38>
		}
	}
	memset(okBuffer, 0, OK_SIGNAL_LENGTH);
 8000736:	2205      	movs	r2, #5
 8000738:	2100      	movs	r1, #0
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <waitForNextFrameRequest+0x5c>)
 800073c:	f008 febc 	bl	80094b8 <memset>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000093 	.word	0x20000093
 8000748:	20000098 	.word	0x20000098
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40020400 	.word	0x40020400

08000754 <HAL_UART_RxCpltCallback>:
	sizeBuffer[7] = sizeBuffer[8];
	sizeBuffer[8] = sizeBuffer[9];
	sizeBuffer[9] = 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if (huart != BT_huart) {
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <HAL_UART_RxCpltCallback+0x50>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	429a      	cmp	r2, r3
 8000764:	d117      	bne.n	8000796 <HAL_UART_RxCpltCallback+0x42>
		return;
	}

	if (waitingForSize) {
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <HAL_UART_RxCpltCallback+0x54>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d003      	beq.n	8000776 <HAL_UART_RxCpltCallback+0x22>
		waitingForSize = false;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_UART_RxCpltCallback+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
		return;
 8000774:	e010      	b.n	8000798 <HAL_UART_RxCpltCallback+0x44>
	}

	if (waitingForData) {
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <HAL_UART_RxCpltCallback+0x58>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <HAL_UART_RxCpltCallback+0x32>
		waitingForData = false;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_UART_RxCpltCallback+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		return;
 8000784:	e008      	b.n	8000798 <HAL_UART_RxCpltCallback+0x44>
	}

	if (waitingForOK) {
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_UART_RxCpltCallback+0x5c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d004      	beq.n	8000798 <HAL_UART_RxCpltCallback+0x44>
		waitingForOK = false;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_UART_RxCpltCallback+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		return;
 8000794:	e000      	b.n	8000798 <HAL_UART_RxCpltCallback+0x44>
		return;
 8000796:	bf00      	nop
	}
}
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000098 	.word	0x20000098
 80007a8:	20000092 	.word	0x20000092
 80007ac:	20000091 	.word	0x20000091
 80007b0:	20000093 	.word	0x20000093

080007b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	if (huart != BT_huart) {
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_UART_TxCpltCallback+0x60>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d11f      	bne.n	8000806 <HAL_UART_TxCpltCallback+0x52>
		return;
	}

	if (sendingSize) {
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_UART_TxCpltCallback+0x64>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <HAL_UART_TxCpltCallback+0x22>
		sendingSize = false;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_UART_TxCpltCallback+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
		return;
 80007d4:	e018      	b.n	8000808 <HAL_UART_TxCpltCallback+0x54>
	}

	if (sendingData) {
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_UART_TxCpltCallback+0x68>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <HAL_UART_TxCpltCallback+0x32>
		sendingData = false;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_UART_TxCpltCallback+0x68>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
		return;
 80007e4:	e010      	b.n	8000808 <HAL_UART_TxCpltCallback+0x54>
	}

	if (sendingOK) {
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_UART_TxCpltCallback+0x6c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <HAL_UART_TxCpltCallback+0x42>
		sendingOK = false;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_UART_TxCpltCallback+0x6c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		return;
 80007f4:	e008      	b.n	8000808 <HAL_UART_TxCpltCallback+0x54>
	}

	if (exportingData) {
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_UART_TxCpltCallback+0x70>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <HAL_UART_TxCpltCallback+0x54>
		exportingData = false;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_UART_TxCpltCallback+0x70>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
		return;
 8000804:	e000      	b.n	8000808 <HAL_UART_TxCpltCallback+0x54>
		return;
 8000806:	bf00      	nop
	}
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000098 	.word	0x20000098
 8000818:	20000095 	.word	0x20000095
 800081c:	20000094 	.word	0x20000094
 8000820:	20000096 	.word	0x20000096
 8000824:	20000097 	.word	0x20000097

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f001 fb14 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f832 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 fa7e 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000838:	f000 fa36 	bl	8000ca8 <MX_DMA_Init>
  MX_DCMI_Init();
 800083c:	f000 f898 	bl	8000970 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000840:	f000 f9da 	bl	8000bf8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000844:	f000 fa02 	bl	8000c4c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000848:	f000 f8c6 	bl	80009d8 <MX_I2C2_Init>
  MX_TIM1_Init();
 800084c:	f000 f8f2 	bl	8000a34 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000850:	f000 f972 	bl	8000b38 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000854:	f000 f9a6 	bl	8000ba4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000858:	2100      	movs	r1, #0
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <main+0x64>)
 800085c:	f006 fb18 	bl	8006e90 <HAL_TIM_PWM_Start>
  ov7670_init();
 8000860:	f000 fc80 	bl	8001164 <ov7670_init>
  hc05Init(&huart2, &huart3);
 8000864:	490a      	ldr	r1, [pc, #40]	; (8000890 <main+0x68>)
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <main+0x6c>)
 8000868:	f7ff fea8 	bl	80005bc <hc05Init>

  //Establish BT connection
    while(!checkConnection()) {
 800086c:	e002      	b.n	8000874 <main+0x4c>
  	  HAL_Delay(0);
 800086e:	2000      	movs	r0, #0
 8000870:	f001 fb64 	bl	8001f3c <HAL_Delay>
    while(!checkConnection()) {
 8000874:	f7ff feb8 	bl	80005e8 <checkConnection>
 8000878:	4603      	mov	r3, r0
 800087a:	f083 0301 	eor.w	r3, r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1f4      	bne.n	800086e <main+0x46>
    }

  extraTruncatedVideoMode();
 8000884:	f000 fb3c 	bl	8000f00 <extraTruncatedVideoMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x60>
 800088a:	bf00      	nop
 800088c:	200001a4 	.word	0x200001a4
 8000890:	20000278 	.word	0x20000278
 8000894:	20000234 	.word	0x20000234

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2234      	movs	r2, #52	; 0x34
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f008 fe06 	bl	80094b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <SystemClock_Config+0xd0>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a28      	ldr	r2, [pc, #160]	; (8000968 <SystemClock_Config+0xd0>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <SystemClock_Config+0xd0>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <SystemClock_Config+0xd4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a22      	ldr	r2, [pc, #136]	; (800096c <SystemClock_Config+0xd4>)
 80008e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <SystemClock_Config+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800090c:	23a8      	movs	r3, #168	; 0xa8
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000914:	2307      	movs	r3, #7
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4618      	mov	r0, r3
 8000922:	f005 ff79 	bl	8006818 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800092c:	f000 fbfe 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	2105      	movs	r1, #5
 800094e:	4618      	mov	r0, r3
 8000950:	f005 f8ee 	bl	8005b30 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800095a:	f000 fbe7 	bl	800112c <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3750      	adds	r7, #80	; 0x50
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000

08000970 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_DCMI_Init+0x60>)
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_DCMI_Init+0x64>)
 8000978:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_DCMI_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_DCMI_Init+0x60>)
 8000982:	2220      	movs	r2, #32
 8000984:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_DCMI_Init+0x60>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_DCMI_Init+0x60>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_DCMI_Init+0x60>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_DCMI_Init+0x60>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_DCMI_Init+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_DCMI_Init+0x60>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_DCMI_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_DCMI_Init+0x60>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_DCMI_Init+0x60>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_DCMI_Init+0x60>)
 80009be:	f001 fe41 	bl	8002644 <HAL_DCMI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009c8:	f000 fbb0 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000a0 	.word	0x200000a0
 80009d4:	50050000 	.word	0x50050000

080009d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_I2C2_Init+0x50>)
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MX_I2C2_Init+0x54>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_I2C2_Init+0x50>)
 80009e4:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_I2C2_Init+0x58>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_I2C2_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_I2C2_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_I2C2_Init+0x50>)
 80009f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_I2C2_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_I2C2_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_I2C2_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_I2C2_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_I2C2_Init+0x50>)
 8000a16:	f003 fe1d 	bl	8004654 <HAL_I2C_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a20:	f000 fb84 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000150 	.word	0x20000150
 8000a2c:	40005800 	.word	0x40005800
 8000a30:	000186a0 	.word	0x000186a0

08000a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b092      	sub	sp, #72	; 0x48
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f008 fd2a 	bl	80094b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a66:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <MX_TIM1_Init+0x100>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a78:	2214      	movs	r2, #20
 8000a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a8e:	4828      	ldr	r0, [pc, #160]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000a90:	f006 f9af 	bl	8006df2 <HAL_TIM_PWM_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000a9a:	f000 fb47 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4820      	ldr	r0, [pc, #128]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000aae:	f006 ff29 	bl	8007904 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000ab8:	f000 fb38 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000abc:	2360      	movs	r3, #96	; 0x60
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	2200      	movs	r2, #0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000ae2:	f006 fba5 	bl	8007230 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000aec:	f000 fb1e 	bl	800112c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000b14:	f006 ff72 	bl	80079fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000b1e:	f000 fb05 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM1_Init+0xfc>)
 8000b24:	f000 fe80 	bl	8001828 <HAL_TIM_MspPostInit>

}
 8000b28:	bf00      	nop
 8000b2a:	3748      	adds	r7, #72	; 0x48
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200001a4 	.word	0x200001a4
 8000b34:	40010000 	.word	0x40010000

08000b38 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_TIM6_Init+0x68>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b68:	f006 f8f4 	bl	8006d54 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b72:	f000 fadb 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b84:	f006 febe 	bl	8007904 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b8e:	f000 facd 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001ec 	.word	0x200001ec
 8000ba0:	40001000 	.word	0x40001000

08000ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_USART2_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	f006 ff74 	bl	8007ac8 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f000 faa1 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000234 	.word	0x20000234
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART3_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c30:	f006 ff4a 	bl	8007ac8 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 fa77 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000278 	.word	0x20000278
 8000c48:	40004800 	.word	0x40004800

08000c4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c90:	f004 fe05 	bl	800589e <HAL_PCD_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f000 fa47 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200003dc 	.word	0x200003dc

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_DMA_Init+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <MX_DMA_Init+0x88>)
 8000cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_DMA_Init+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_DMA_Init+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <MX_DMA_Init+0x88>)
 8000cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_DMA_Init+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	200e      	movs	r0, #14
 8000cec:	f001 fa25 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cf0:	200e      	movs	r0, #14
 8000cf2:	f001 fa3e 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2010      	movs	r0, #16
 8000cfc:	f001 fa1d 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d00:	2010      	movs	r0, #16
 8000d02:	f001 fa36 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2011      	movs	r0, #17
 8000d0c:	f001 fa15 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d10:	2011      	movs	r0, #17
 8000d12:	f001 fa2e 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2039      	movs	r0, #57	; 0x39
 8000d1c:	f001 fa0d 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d20:	2039      	movs	r0, #57	; 0x39
 8000d22:	f001 fa26 	bl	8002172 <HAL_NVIC_EnableIRQ>

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	; 0x38
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
 8000d4e:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a67      	ldr	r2, [pc, #412]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b65      	ldr	r3, [pc, #404]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	623b      	str	r3, [r7, #32]
 8000d64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a60      	ldr	r2, [pc, #384]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a59      	ldr	r2, [pc, #356]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a52      	ldr	r2, [pc, #328]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a36      	ldr	r2, [pc, #216]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <MX_GPIO_Init+0x1bc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e30:	4830      	ldr	r0, [pc, #192]	; (8000ef4 <MX_GPIO_Init+0x1c0>)
 8000e32:	f003 fbb7 	bl	80045a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <MX_GPIO_Init+0x1c4>)
 8000e3c:	f003 fbb2 	bl	80045a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4829      	ldr	r0, [pc, #164]	; (8000efc <MX_GPIO_Init+0x1c8>)
 8000e58:	f003 f9f8 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e5c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <MX_GPIO_Init+0x1c0>)
 8000e76:	f003 f9e9 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_STATE_Pin */
  GPIO_InitStruct.Pin = BT_STATE_Pin;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481a      	ldr	r0, [pc, #104]	; (8000ef8 <MX_GPIO_Init+0x1c4>)
 8000e90:	f003 f9dc 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <MX_GPIO_Init+0x1c4>)
 8000eac:	f003 f9ce 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <MX_GPIO_Init+0x1c4>)
 8000ec4:	f003 f9c2 	bl	800424c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f001 f934 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ed2:	2006      	movs	r0, #6
 8000ed4:	f001 f94d 	bl	8002172 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2028      	movs	r0, #40	; 0x28
 8000ede:	f001 f92c 	bl	800213a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee2:	2028      	movs	r0, #40	; 0x28
 8000ee4:	f001 f945 	bl	8002172 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee8:	bf00      	nop
 8000eea:	3738      	adds	r7, #56	; 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40021800 	.word	0x40021800
 8000efc:	40020800 	.word	0x40020800

08000f00 <extraTruncatedVideoMode>:

/* USER CODE BEGIN 4 */
void extraTruncatedVideoMode() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
	uint16_t bufferIndex= 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	e00c      	b.n	8000f2a <extraTruncatedVideoMode+0x2a>
		video_buff[bufferIndex++] = PREAMBLE[index];
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	81fa      	strh	r2, [r7, #14]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <extraTruncatedVideoMode+0xa4>)
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <extraTruncatedVideoMode+0xa8>)
 8000f22:	545a      	strb	r2, [r3, r1]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b0b      	cmp	r3, #11
 8000f2e:	d9ef      	bls.n	8000f10 <extraTruncatedVideoMode+0x10>
	}

	//Loop forever
	while(1) {
		//Reset
		HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f36:	481d      	ldr	r0, [pc, #116]	; (8000fac <extraTruncatedVideoMode+0xac>)
 8000f38:	f003 fb34 	bl	80045a4 <HAL_GPIO_WritePin>
		dma_flag = 0;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <extraTruncatedVideoMode+0xb0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]

		ov7670_capture(raw_buff);
 8000f42:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <extraTruncatedVideoMode+0xb4>)
 8000f44:	f000 fa92 	bl	800146c <ov7670_capture>

		//Wait for capture to finish
		while (!dma_flag) {
 8000f48:	e002      	b.n	8000f50 <extraTruncatedVideoMode+0x50>
			HAL_Delay(0);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 fff6 	bl	8001f3c <HAL_Delay>
		while (!dma_flag) {
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <extraTruncatedVideoMode+0xb0>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f8      	beq.n	8000f4a <extraTruncatedVideoMode+0x4a>
		}

		//Extract grey scale
		transferRawBufferToIntermediate();
 8000f58:	f000 f86a 	bl	8001030 <transferRawBufferToIntermediate>

		//RLE and place between pre-amble and suffix
		bufferIndex = rle(sizeof(PREAMBLE));
 8000f5c:	200c      	movs	r0, #12
 8000f5e:	f000 f8a3 	bl	80010a8 <rle>
 8000f62:	4603      	mov	r3, r0
 8000f64:	81fb      	strh	r3, [r7, #14]

		//Append suffix
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	e00c      	b.n	8000f86 <extraTruncatedVideoMode+0x86>
			video_buff[bufferIndex] = SUFFIX[index];
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	4912      	ldr	r1, [pc, #72]	; (8000fb8 <extraTruncatedVideoMode+0xb8>)
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	440a      	add	r2, r1
 8000f74:	7811      	ldrb	r1, [r2, #0]
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <extraTruncatedVideoMode+0xa8>)
 8000f78:	54d1      	strb	r1, [r2, r3]
			bufferIndex++;
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	81fb      	strh	r3, [r7, #14]
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d9ef      	bls.n	8000f6c <extraTruncatedVideoMode+0x6c>
		}

		bufferIndex--;
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	81fb      	strh	r3, [r7, #14]

		sendData(video_buff, bufferIndex);
 8000f92:	89fb      	ldrh	r3, [r7, #14]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <extraTruncatedVideoMode+0xa8>)
 8000f98:	f7ff fb3e 	bl	8000618 <sendData>
		waitForNextFrameRequest();
 8000f9c:	f7ff fba8 	bl	80006f0 <waitForNextFrameRequest>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000fa0:	e7c6      	b.n	8000f30 <extraTruncatedVideoMode+0x30>
 8000fa2:	bf00      	nop
 8000fa4:	08009ddc 	.word	0x08009ddc
 8000fa8:	20012e88 	.word	0x20012e88
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	2001907c 	.word	0x2001907c
 8000fb4:	200008e8 	.word	0x200008e8
 8000fb8:	08009de8 	.word	0x08009de8

08000fbc <findNumberOfRepeatedPixels>:
	}

}

//Returns the number of pixels that are consecutive, beginning search at [startRow, startCol]
uint8_t findNumberOfRepeatedPixels(uint8_t startRow, uint8_t startCol) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	uint8_t count = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	75fb      	strb	r3, [r7, #23]
	uint8_t prevColour = intermediate_buff[startRow][startCol];
 8000fd0:	79fa      	ldrb	r2, [r7, #7]
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	4915      	ldr	r1, [pc, #84]	; (800102c <findNumberOfRepeatedPixels+0x70>)
 8000fd6:	20ae      	movs	r0, #174	; 0xae
 8000fd8:	fb00 f202 	mul.w	r2, r0, r2
 8000fdc:	440a      	add	r2, r1
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	73fb      	strb	r3, [r7, #15]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	e011      	b.n	800100e <findNumberOfRepeatedPixels+0x52>
		if (intermediate_buff[startRow][columnIndex] == prevColour) {
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4a0f      	ldr	r2, [pc, #60]	; (800102c <findNumberOfRepeatedPixels+0x70>)
 8000fee:	21ae      	movs	r1, #174	; 0xae
 8000ff0:	fb01 f303 	mul.w	r3, r1, r3
 8000ff4:	441a      	add	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d10c      	bne.n	800101c <findNumberOfRepeatedPixels+0x60>
			count++;
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	3301      	adds	r3, #1
 8001006:	75fb      	strb	r3, [r7, #23]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	3301      	adds	r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2bad      	cmp	r3, #173	; 0xad
 8001012:	dc04      	bgt.n	800101e <findNumberOfRepeatedPixels+0x62>
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	2b0e      	cmp	r3, #14
 8001018:	d9e7      	bls.n	8000fea <findNumberOfRepeatedPixels+0x2e>
 800101a:	e000      	b.n	800101e <findNumberOfRepeatedPixels+0x62>
		} else {
			break;
 800101c:	bf00      	nop
		}
	}
	return count;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001020:	4618      	mov	r0, r3
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	2000cca8 	.word	0x2000cca8

08001030 <transferRawBufferToIntermediate>:

//Extracts grey-scale data from the raw buffer to the intermediate buffer and formats it in a 2D array
void transferRawBufferToIntermediate() {
 8001030:	b490      	push	{r4, r7}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
	int rowIndex = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
	int colIndex = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 800103e:	2301      	movs	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	e022      	b.n	800108a <transferRawBufferToIntermediate+0x5a>
		if (rawIndex % 2 != 0) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d01a      	beq.n	8001084 <transferRawBufferToIntermediate+0x54>
			intermediate_buff[rowIndex][colIndex++] = raw_buff[rawIndex] & 0xF0;
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <transferRawBufferToIntermediate+0x70>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1c59      	adds	r1, r3, #1
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	f022 020f 	bic.w	r2, r2, #15
 8001060:	b2d4      	uxtb	r4, r2
 8001062:	4910      	ldr	r1, [pc, #64]	; (80010a4 <transferRawBufferToIntermediate+0x74>)
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	20ae      	movs	r0, #174	; 0xae
 8001068:	fb00 f202 	mul.w	r2, r0, r2
 800106c:	440a      	add	r2, r1
 800106e:	4413      	add	r3, r2
 8001070:	4622      	mov	r2, r4
 8001072:	701a      	strb	r2, [r3, #0]
			if (colIndex == IMG_COLS) {
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2bae      	cmp	r3, #174	; 0xae
 8001078:	d104      	bne.n	8001084 <transferRawBufferToIntermediate+0x54>
				rowIndex++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
				colIndex = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f24c 32bf 	movw	r2, #50111	; 0xc3bf
 8001090:	4293      	cmp	r3, r2
 8001092:	ddd7      	ble.n	8001044 <transferRawBufferToIntermediate+0x14>
			}
		}
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bc90      	pop	{r4, r7}
 800109e:	4770      	bx	lr
 80010a0:	200008e8 	.word	0x200008e8
 80010a4:	2000cca8 	.word	0x2000cca8

080010a8 <rle>:

//Compresses contents of intermediate buff using RLE and places data in the output buffer beginning at bufferIndex
int rle(int bufferIndex) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e02d      	b.n	8001112 <rle+0x6a>
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	e024      	b.n	8001106 <rle+0x5e>
			uint8_t repetitions = findNumberOfRepeatedPixels(rowIndex, colIndex);
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff78 	bl	8000fbc <findNumberOfRepeatedPixels>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]

			video_buff[bufferIndex++] = intermediate_buff[rowIndex][colIndex] | (repetitions & 0xF);
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <rle+0x7c>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	21ae      	movs	r1, #174	; 0xae
 80010d6:	fb01 f303 	mul.w	r3, r1, r3
 80010da:	441a      	add	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b259      	sxtb	r1, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	b2c9      	uxtb	r1, r1
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <rle+0x80>)
 80010fc:	54d1      	strb	r1, [r2, r3]

			colIndex += repetitions;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4413      	add	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2bad      	cmp	r3, #173	; 0xad
 800110a:	ddd7      	ble.n	80010bc <rle+0x14>
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b8f      	cmp	r3, #143	; 0x8f
 8001116:	ddce      	ble.n	80010b6 <rle+0xe>
		}
	}
	return bufferIndex;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000cca8 	.word	0x2000cca8
 8001128:	20012e88 	.word	0x20012e88

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <print_msg>:
  { 0x4b, 0x01 },
};

HAL_StatusTypeDef print_msg(char * msg);

HAL_StatusTypeDef print_msg(char * msg) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  // Your code here
  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff f865 	bl	8000210 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29b      	uxth	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <print_msg+0x28>)
 8001150:	f006 fd08 	bl	8007b64 <HAL_UART_Transmit_DMA>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000278 	.word	0x20000278

08001164 <ov7670_init>:

uint8_t ov7670_init(void){
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b0a1      	sub	sp, #132	; 0x84
 8001168:	af02      	add	r7, sp, #8
  uint8_t val;
  char msg[100];

  print_msg("Beginning reading check\r\n");
 800116a:	484d      	ldr	r0, [pc, #308]	; (80012a0 <ov7670_init+0x13c>)
 800116c:	f7ff ffe4 	bl	8001138 <print_msg>
  HAL_Delay(10);
 8001170:	200a      	movs	r0, #10
 8001172:	f000 fee3 	bl	8001f3c <HAL_Delay>
  val = ov7670_read(0x0A);
 8001176:	200a      	movs	r0, #10
 8001178:	f000 f8a4 	bl	80012c4 <ov7670_read>
 800117c:	4603      	mov	r3, r0
 800117e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  if (val != 0x76) {
 8001182:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001186:	2b76      	cmp	r3, #118	; 0x76
 8001188:	d00f      	beq.n	80011aa <ov7670_init+0x46>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 800118a:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4944      	ldr	r1, [pc, #272]	; (80012a4 <ov7670_init+0x140>)
 8001192:	4618      	mov	r0, r3
 8001194:	f008 f970 	bl	8009478 <siprintf>
    print_msg(msg);
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ffcc 	bl	8001138 <print_msg>
    HAL_Delay(10);
 80011a0:	200a      	movs	r0, #10
 80011a2:	f000 fecb 	bl	8001f3c <HAL_Delay>
    return 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e076      	b.n	8001298 <ov7670_init+0x134>
  } else {
	  print_msg("Value correct\r\n");
 80011aa:	483f      	ldr	r0, [pc, #252]	; (80012a8 <ov7670_init+0x144>)
 80011ac:	f7ff ffc4 	bl	8001138 <print_msg>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80011b0:	2101      	movs	r1, #1
 80011b2:	483e      	ldr	r0, [pc, #248]	; (80012ac <ov7670_init+0x148>)
 80011b4:	f003 fa0f 	bl	80045d6 <HAL_GPIO_TogglePin>
  }

  print_msg("Writing to registers...\r\n");
 80011b8:	483d      	ldr	r0, [pc, #244]	; (80012b0 <ov7670_init+0x14c>)
 80011ba:	f7ff ffbd 	bl	8001138 <print_msg>
  HAL_Delay(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 febc 	bl	8001f3c <HAL_Delay>

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	677b      	str	r3, [r7, #116]	; 0x74
 80011c8:	e012      	b.n	80011f0 <ov7670_init+0x8c>
	  ov7670_write(OV7670_reg[index][0], OV7670_reg[index][1]);
 80011ca:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <ov7670_init+0x150>)
 80011cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011ce:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80011d2:	4938      	ldr	r1, [pc, #224]	; (80012b4 <ov7670_init+0x150>)
 80011d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	440b      	add	r3, r1
 80011da:	785b      	ldrb	r3, [r3, #1]
 80011dc:	4619      	mov	r1, r3
 80011de:	4610      	mov	r0, r2
 80011e0:	f000 f8f4 	bl	80013cc <ov7670_write>
	  HAL_Delay(11);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f000 fea9 	bl	8001f3c <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 80011ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011ec:	3301      	adds	r3, #1
 80011ee:	677b      	str	r3, [r7, #116]	; 0x74
 80011f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011f2:	2b79      	cmp	r3, #121	; 0x79
 80011f4:	dde9      	ble.n	80011ca <ov7670_init+0x66>
  }

  print_msg("Beginning sanity check\r\n");
 80011f6:	4830      	ldr	r0, [pc, #192]	; (80012b8 <ov7670_init+0x154>)
 80011f8:	f7ff ff9e 	bl	8001138 <print_msg>
  HAL_Delay(10);
 80011fc:	200a      	movs	r0, #10
 80011fe:	f000 fe9d 	bl	8001f3c <HAL_Delay>

  uint8_t isDataCorrect = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8001208:	2300      	movs	r3, #0
 800120a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800120c:	e032      	b.n	8001274 <ov7670_init+0x110>
	  uint8_t dataRead = ov7670_read(OV7670_reg[index][0]);
 800120e:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <ov7670_init+0x150>)
 8001210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001212:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f854 	bl	80012c4 <ov7670_read>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	  if (dataRead != OV7670_reg[index][1]) {
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <ov7670_init+0x150>)
 8001224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8001230:	429a      	cmp	r2, r3
 8001232:	d01c      	beq.n	800126e <ov7670_init+0x10a>
		  isDataCorrect = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  sprintf(msg, "Register 0x%x contains incorrect data 0x%x (should be 0x%x)\r\n", OV7670_reg[index][0], dataRead, OV7670_reg[index][1]);
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <ov7670_init+0x150>)
 800123c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800123e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001242:	461c      	mov	r4, r3
 8001244:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8001248:	491a      	ldr	r1, [pc, #104]	; (80012b4 <ov7670_init+0x150>)
 800124a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	440b      	add	r3, r1
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	1d38      	adds	r0, r7, #4
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	4622      	mov	r2, r4
 800125a:	4918      	ldr	r1, [pc, #96]	; (80012bc <ov7670_init+0x158>)
 800125c:	f008 f90c 	bl	8009478 <siprintf>
		  print_msg(msg);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff68 	bl	8001138 <print_msg>
		  HAL_Delay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f000 fe67 	bl	8001f3c <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 800126e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001270:	3301      	adds	r3, #1
 8001272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001276:	2b79      	cmp	r3, #121	; 0x79
 8001278:	ddc9      	ble.n	800120e <ov7670_init+0xaa>
	  }
  }

  if (isDataCorrect) {
 800127a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <ov7670_init+0x12a>
	  print_msg("All data OK\r\n");
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <ov7670_init+0x15c>)
 8001284:	f7ff ff58 	bl	8001138 <print_msg>
	  HAL_Delay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f000 fe57 	bl	8001f3c <HAL_Delay>
  }
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <ov7670_init+0x148>)
 8001292:	f003 f9a0 	bl	80045d6 <HAL_GPIO_TogglePin>
  return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	377c      	adds	r7, #124	; 0x7c
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	08009df0 	.word	0x08009df0
 80012a4:	08009e0c 	.word	0x08009e0c
 80012a8:	08009e28 	.word	0x08009e28
 80012ac:	40020400 	.word	0x40020400
 80012b0:	08009e38 	.word	0x08009e38
 80012b4:	08009f70 	.word	0x08009f70
 80012b8:	08009e54 	.word	0x08009e54
 80012bc:	08009e70 	.word	0x08009e70
 80012c0:	08009eb0 	.word	0x08009eb0

080012c4 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0a0      	sub	sp, #128	; 0x80
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	char msg[100];
	uint8_t data = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	72fb      	strb	r3, [r7, #11]
	uint8_t attempts = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 80012d8:	2302      	movs	r3, #2
 80012da:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	uint8_t *regAddress = &reg;
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 80012e2:	e028      	b.n	8001336 <ov7670_read+0x72>
		status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670_READ, regAddress, 1, 100);
 80012e4:	2364      	movs	r3, #100	; 0x64
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80012ec:	2143      	movs	r1, #67	; 0x43
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <ov7670_read+0xfc>)
 80012f0:	f003 faf4 	bl	80048dc <HAL_I2C_Master_Transmit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 80012fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80012fe:	3301      	adds	r3, #1
 8001300:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 8001304:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001308:	2b00      	cmp	r3, #0
 800130a:	d014      	beq.n	8001336 <ov7670_read+0x72>
			sprintf(msg, "Transmit Status: %d on attempt %d with register 0x%x\r\n", status, attempts, *regAddress);
 800130c:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001310:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8001314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	f107 000c 	add.w	r0, r7, #12
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	460b      	mov	r3, r1
 8001320:	4928      	ldr	r1, [pc, #160]	; (80013c4 <ov7670_read+0x100>)
 8001322:	f008 f8a9 	bl	8009478 <siprintf>
			print_msg(msg);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff04 	bl	8001138 <print_msg>
			HAL_Delay(10);
 8001330:	200a      	movs	r0, #10
 8001332:	f000 fe03 	bl	8001f3c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001336:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <ov7670_read+0x82>
 800133e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001342:	2b04      	cmp	r3, #4
 8001344:	d9ce      	bls.n	80012e4 <ov7670_read+0x20>
		}
	}

	status = HAL_BUSY;
 8001346:	2302      	movs	r3, #2
 8001348:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	attempts = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	while (status != HAL_OK && attempts < 5) {
 8001352:	e027      	b.n	80013a4 <ov7670_read+0xe0>
		status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670_READ, &data, 1, 100);
 8001354:	f107 020b 	add.w	r2, r7, #11
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2143      	movs	r1, #67	; 0x43
 8001360:	4817      	ldr	r0, [pc, #92]	; (80013c0 <ov7670_read+0xfc>)
 8001362:	f003 fbb9 	bl	8004ad8 <HAL_I2C_Master_Receive>
 8001366:	4603      	mov	r3, r0
 8001368:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 800136c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001370:	3301      	adds	r3, #1
 8001372:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 8001376:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800137a:	2b00      	cmp	r3, #0
 800137c:	d012      	beq.n	80013a4 <ov7670_read+0xe0>
			sprintf(msg, "Receive Status: %d on attempt %d with current data: 0x%x\r\n", status, attempts, data);
 800137e:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001382:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001386:	7af9      	ldrb	r1, [r7, #11]
 8001388:	f107 000c 	add.w	r0, r7, #12
 800138c:	9100      	str	r1, [sp, #0]
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <ov7670_read+0x104>)
 8001390:	f008 f872 	bl	8009478 <siprintf>
			print_msg(msg);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fecd 	bl	8001138 <print_msg>
			HAL_Delay(10);
 800139e:	200a      	movs	r0, #10
 80013a0:	f000 fdcc 	bl	8001f3c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 80013a4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <ov7670_read+0xf0>
 80013ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d9cf      	bls.n	8001354 <ov7670_read+0x90>
		}
	}


	return data;
 80013b4:	7afb      	ldrb	r3, [r7, #11]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3778      	adds	r7, #120	; 0x78
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000150 	.word	0x20000150
 80013c4:	08009ec0 	.word	0x08009ec0
 80013c8:	08009ef8 	.word	0x08009ef8

080013cc <ov7670_write>:

HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0a2      	sub	sp, #136	; 0x88
 80013d0:	af04      	add	r7, sp, #16
 80013d2:	4603      	mov	r3, r0
 80013d4:	460a      	mov	r2, r1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	71bb      	strb	r3, [r7, #6]
	char msg[100];
	uint8_t attempts = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	//uint8_t *regAddress = &reg;
	uint8_t *data = &val;
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 80013ec:	e02c      	b.n	8001448 <ov7670_write+0x7c>
		status = HAL_I2C_Mem_Write(&hi2c2,ADDR_OV7670_WRITE,reg,I2C_MEMADD_SIZE_8BIT,data,1,100);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2301      	movs	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2142      	movs	r1, #66	; 0x42
 8001402:	4818      	ldr	r0, [pc, #96]	; (8001464 <ov7670_write+0x98>)
 8001404:	f003 fd8e 	bl	8004f24 <HAL_I2C_Mem_Write>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 800140e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001412:	3301      	adds	r3, #1
 8001414:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 8001418:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <ov7670_write+0x7c>
			sprintf(msg, "Memory Write Status: %d on attempt %d with register 0x%x\r\n", status, attempts, reg);
 8001420:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001424:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f107 000c 	add.w	r0, r7, #12
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	460b      	mov	r3, r1
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <ov7670_write+0x9c>)
 8001434:	f008 f820 	bl	8009478 <siprintf>
			print_msg(msg);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe7b 	bl	8001138 <print_msg>
			HAL_Delay(10);
 8001442:	200a      	movs	r0, #10
 8001444:	f000 fd7a 	bl	8001f3c <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 8001448:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <ov7670_write+0x8c>
 8001450:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001454:	2b04      	cmp	r3, #4
 8001456:	d9ca      	bls.n	80013ee <ov7670_write+0x22>
			HAL_Delay(10);
		}
	}
	*/

	return status;
 8001458:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
}
 800145c:	4618      	mov	r0, r3
 800145e:	3778      	adds	r7, #120	; 0x78
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000150 	.word	0x20000150
 8001468:	08009f34 	.word	0x08009f34

0800146c <ov7670_capture>:

void ov7670_snapshot(uint8_t *buff){
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
}

void ov7670_capture(uint8_t *buff){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	f243 03f0 	movw	r3, #12528	; 0x30f0
 800147a:	2100      	movs	r1, #0
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <ov7670_capture+0x20>)
 800147e:	f000 fe93 	bl	80021a8 <HAL_DCMI_Start_DMA>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000a0 	.word	0x200000a0

08001490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_MspInit+0x4c>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_MspInit+0x4c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	; 0x38
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a78      	ldr	r2, [pc, #480]	; (80016e0 <HAL_DCMI_MspInit+0x200>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	f040 80e9 	bne.w	80016d6 <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6353      	str	r3, [r2, #52]	; 0x34
 8001514:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	623b      	str	r3, [r7, #32]
 800151e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	4b6f      	ldr	r3, [pc, #444]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a6e      	ldr	r2, [pc, #440]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a67      	ldr	r2, [pc, #412]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a60      	ldr	r2, [pc, #384]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	4b5a      	ldr	r3, [pc, #360]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a59      	ldr	r2, [pc, #356]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 800159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_DCMI_MspInit+0x204>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015ac:	2370      	movs	r3, #112	; 0x70
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015bc:	230d      	movs	r3, #13
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4848      	ldr	r0, [pc, #288]	; (80016e8 <HAL_DCMI_MspInit+0x208>)
 80015c8:	f002 fe40 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015cc:	2350      	movs	r3, #80	; 0x50
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015dc:	230d      	movs	r3, #13
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4841      	ldr	r0, [pc, #260]	; (80016ec <HAL_DCMI_MspInit+0x20c>)
 80015e8:	f002 fe30 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80015ec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015fe:	230d      	movs	r3, #13
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4839      	ldr	r0, [pc, #228]	; (80016f0 <HAL_DCMI_MspInit+0x210>)
 800160a:	f002 fe1f 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800160e:	2308      	movs	r3, #8
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800161e:	230d      	movs	r3, #13
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4832      	ldr	r0, [pc, #200]	; (80016f4 <HAL_DCMI_MspInit+0x214>)
 800162a:	f002 fe0f 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001640:	230d      	movs	r3, #13
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	482b      	ldr	r0, [pc, #172]	; (80016f8 <HAL_DCMI_MspInit+0x218>)
 800164c:	f002 fdfe 	bl	800424c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 8001652:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <HAL_DCMI_MspInit+0x220>)
 8001654:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 8001658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 800166c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001670:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 8001674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001678:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 800167c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001680:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 8001684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001688:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 800168c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001690:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 8001694:	2204      	movs	r2, #4
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 800169a:	2203      	movs	r2, #3
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 80016ac:	f001 f844 	bl	8002738 <HAL_DMA_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 80016b6:	f7ff fd39 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 80016be:	649a      	str	r2, [r3, #72]	; 0x48
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_DCMI_MspInit+0x21c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	204e      	movs	r0, #78	; 0x4e
 80016cc:	f000 fd35 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80016d0:	204e      	movs	r0, #78	; 0x4e
 80016d2:	f000 fd4e 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3738      	adds	r7, #56	; 0x38
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	50050000 	.word	0x50050000
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40021800 	.word	0x40021800
 80016fc:	200000f0 	.word	0x200000f0
 8001700:	40026428 	.word	0x40026428

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_I2C_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001742:	2303      	movs	r3, #3
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <HAL_I2C_MspInit+0x8c>)
 800175e:	f002 fd75 	bl	800424c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_I2C_MspInit+0x88>)
 800176c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005800 	.word	0x40005800
 800178c:	40023800 	.word	0x40023800
 8001790:	40021400 	.word	0x40021400

08001794 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10d      	bne.n	80017c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_TIM_PWM_MspInit+0x40>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_TIM_PWM_MspInit+0x40>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_TIM_PWM_MspInit+0x40>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_TIM_Base_MspInit+0x48>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d115      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017f4:	f043 0310 	orr.w	r3, r3, #16
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2036      	movs	r0, #54	; 0x36
 800180c:	f000 fc95 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001810:	2036      	movs	r0, #54	; 0x36
 8001812:	f000 fcae 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40001000 	.word	0x40001000
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d11e      	bne.n	8001888 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800186a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001878:	2301      	movs	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_TIM_MspPostInit+0x70>)
 8001884:	f002 fce2 	bl	800424c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40010000 	.word	0x40010000
 8001894:	40023800 	.word	0x40023800
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a86      	ldr	r2, [pc, #536]	; (8001ad4 <HAL_UART_MspInit+0x238>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f040 8093 	bne.w	80019e6 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	4b84      	ldr	r3, [pc, #528]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a83      	ldr	r2, [pc, #524]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80018ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a7c      	ldr	r2, [pc, #496]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018f8:	2360      	movs	r3, #96	; 0x60
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001908:	2307      	movs	r3, #7
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	4872      	ldr	r0, [pc, #456]	; (8001adc <HAL_UART_MspInit+0x240>)
 8001914:	f002 fc9a 	bl	800424c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001918:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 800191a:	4a72      	ldr	r2, [pc, #456]	; (8001ae4 <HAL_UART_MspInit+0x248>)
 800191c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800191e:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 8001920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001924:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001926:	4b6e      	ldr	r3, [pc, #440]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192c:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001932:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 8001934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001938:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193a:	4b69      	ldr	r3, [pc, #420]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001946:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800194c:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 800194e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001952:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001954:	4b62      	ldr	r3, [pc, #392]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800195a:	4861      	ldr	r0, [pc, #388]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 800195c:	f000 feec 	bl	8002738 <HAL_DMA_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001966:	f7ff fbe1 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a5c      	ldr	r2, [pc, #368]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 800196e:	635a      	str	r2, [r3, #52]	; 0x34
 8001970:	4a5b      	ldr	r2, [pc, #364]	; (8001ae0 <HAL_UART_MspInit+0x244>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001976:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 8001978:	4a5c      	ldr	r2, [pc, #368]	; (8001aec <HAL_UART_MspInit+0x250>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800197c:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 800197e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001982:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001984:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 8001992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001996:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199e:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019a4:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019aa:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 80019ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b2:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019b8:	484b      	ldr	r0, [pc, #300]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 80019ba:	f000 febd 	bl	8002738 <HAL_DMA_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80019c4:	f7ff fbb2 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 80019cc:	639a      	str	r2, [r3, #56]	; 0x38
 80019ce:	4a46      	ldr	r2, [pc, #280]	; (8001ae8 <HAL_UART_MspInit+0x24c>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2026      	movs	r0, #38	; 0x26
 80019da:	f000 fbae 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019de:	2026      	movs	r0, #38	; 0x26
 80019e0:	f000 fbc7 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019e4:	e071      	b.n	8001aca <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a41      	ldr	r2, [pc, #260]	; (8001af0 <HAL_UART_MspInit+0x254>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d16c      	bne.n	8001aca <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 80019fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 8001a16:	f043 0308 	orr.w	r3, r3, #8
 8001a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_UART_MspInit+0x23c>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4825      	ldr	r0, [pc, #148]	; (8001adc <HAL_UART_MspInit+0x240>)
 8001a46:	f002 fc01 	bl	800424c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a4c:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <HAL_UART_MspInit+0x25c>)
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001a50:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a56:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a6a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a84:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a88:	2204      	movs	r2, #4
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a8e:	2203      	movs	r2, #3
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a9e:	4815      	ldr	r0, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001aa0:	f000 fe4a 	bl	8002738 <HAL_DMA_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001aaa:	f7ff fb3f 	bl	800112c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_UART_MspInit+0x258>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2027      	movs	r0, #39	; 0x27
 8001ac0:	f000 fb3b 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ac4:	2027      	movs	r0, #39	; 0x27
 8001ac6:	f000 fb54 	bl	8002172 <HAL_NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40004400 	.word	0x40004400
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	200002bc 	.word	0x200002bc
 8001ae4:	400260a0 	.word	0x400260a0
 8001ae8:	2000031c 	.word	0x2000031c
 8001aec:	40026088 	.word	0x40026088
 8001af0:	40004800 	.word	0x40004800
 8001af4:	2000037c 	.word	0x2000037c
 8001af8:	40026058 	.word	0x40026058

08001afc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0a0      	sub	sp, #128	; 0x80
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	225c      	movs	r2, #92	; 0x5c
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f007 fccb 	bl	80094b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2a:	d14e      	bne.n	8001bca <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001b32:	2300      	movs	r3, #0
 8001b34:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 f912 	bl	8005d64 <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001b46:	f7ff faf1 	bl	800112c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b78:	230a      	movs	r3, #10
 8001b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <HAL_PCD_MspInit+0xdc>)
 8001b84:	f002 fb62 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <HAL_PCD_MspInit+0xdc>)
 8001b9e:	f002 fb55 	bl	800424c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bac:	6353      	str	r3, [r2, #52]	; 0x34
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_PCD_MspInit+0xd8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3780      	adds	r7, #128	; 0x80
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001be0:	f3bf 8f4f 	dsb	sy
}
 8001be4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <__NVIC_SystemReset+0x24>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bee:	4904      	ldr	r1, [pc, #16]	; (8001c00 <__NVIC_SystemReset+0x24>)
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_SystemReset+0x28>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bf6:	f3bf 8f4f 	dsb	sy
}
 8001bfa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <__NVIC_SystemReset+0x20>
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	05fa0004 	.word	0x05fa0004

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>
	...

08001c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c18:	4801      	ldr	r0, [pc, #4]	; (8001c20 <HardFault_Handler+0x10>)
 8001c1a:	f002 fcdc 	bl	80045d6 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler+0xe>
 8001c20:	40020400 	.word	0x40020400

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 f94a 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	NVIC_SystemReset();
 8001c70:	f7ff ffb4 	bl	8001bdc <__NVIC_SystemReset>

08001c74 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <DMA1_Stream3_IRQHandler+0x10>)
 8001c7a:	f000 fef5 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000037c 	.word	0x2000037c

08001c88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <DMA1_Stream5_IRQHandler+0x10>)
 8001c8e:	f000 feeb 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000031c 	.word	0x2000031c

08001c9c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA1_Stream6_IRQHandler+0x10>)
 8001ca2:	f000 fee1 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200002bc 	.word	0x200002bc

08001cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <USART2_IRQHandler+0x10>)
 8001cb6:	f006 f803 	bl	8007cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000234 	.word	0x20000234

08001cc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <USART3_IRQHandler+0x10>)
 8001cca:	f005 fff9 	bl	8007cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000278 	.word	0x20000278

08001cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint32_t thisTime = HAL_GetTick();
 8001cde:	f000 f921 	bl	8001f24 <HAL_GetTick>
 8001ce2:	6078      	str	r0, [r7, #4]
		if (thisTime-lastTime >= interval) {
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <EXTI15_10_IRQHandler+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	1ad2      	subs	r2, r2, r3
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <EXTI15_10_IRQHandler+0x44>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d302      	bcc.n	8001cfa <EXTI15_10_IRQHandler+0x22>
			button_flag = 1;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <EXTI15_10_IRQHandler+0x48>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001cfa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cfe:	f002 fc85 	bl	800460c <HAL_GPIO_EXTI_IRQHandler>
		lastTime = thisTime;
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <EXTI15_10_IRQHandler+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d0c:	f002 fc7e 	bl	800460c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20019080 	.word	0x20019080
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	2001907d 	.word	0x2001907d

08001d24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <TIM6_DAC_IRQHandler+0x10>)
 8001d2a:	f005 f979 	bl	8007020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200001ec 	.word	0x200001ec

08001d38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	//TRIGGERED AFTER CAPTURE COMPLETES
	HAL_DCMI_Stop(&hdcmi);
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <DMA2_Stream1_IRQHandler+0x1c>)
 8001d3e:	f000 fad3 	bl	80022e8 <HAL_DCMI_Stop>
	dma_flag = 1;
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <DMA2_Stream1_IRQHandler+0x20>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <DMA2_Stream1_IRQHandler+0x24>)
 8001d4a:	f000 fe8d 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200000a0 	.word	0x200000a0
 8001d58:	2001907c 	.word	0x2001907c
 8001d5c:	200000f0 	.word	0x200000f0

08001d60 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
	//TRIGGERS VERY OFTEN
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <DCMI_IRQHandler+0x10>)
 8001d66:	f000 fb1b 	bl	80023a0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000a0 	.word	0x200000a0

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f007 fb90 	bl	80094c8 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20020000 	.word	0x20020000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	20019084 	.word	0x20019084
 8001ddc:	200191d8 	.word	0x200191d8

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0a:	490e      	ldr	r1, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e20:	4c0b      	ldr	r4, [pc, #44]	; (8001e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2e:	f7ff ffd7 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f007 fb4f 	bl	80094d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7fe fcf7 	bl	8000828 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001e48:	0800a0c8 	.word	0x0800a0c8
  ldr r2, =_sbss
 8001e4c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e50:	200191d4 	.word	0x200191d4

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_Init+0x40>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_Init+0x40>)
 8001e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x40>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f94f 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fb00 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f967 	bl	800218e <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed8:	f000 f92f 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	2000000c 	.word	0x2000000c

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000010 	.word	0x20000010
 8001f20:	20019088 	.word	0x20019088

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20019088 	.word	0x20019088

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000010 	.word	0x20000010

08001f84 <__NVIC_SetPriorityGrouping>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002104:	f7ff ff8e 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff29 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff3e 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff8e 	bl	8002078 <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5d 	bl	8002024 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff31 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa2 	bl	80020e0 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_DCMI_Start_DMA+0x20>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e086      	b.n	80022d6 <HAL_DCMI_Start_DMA+0x12e>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0202 	bic.w	r2, r2, #2
 80021f6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220c:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_DCMI_Start_DMA+0x138>)
 800220e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002214:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <HAL_DCMI_Start_DMA+0x13c>)
 8002216:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221c:	2200      	movs	r2, #0
 800221e:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	641a      	str	r2, [r3, #64]	; 0x40

  if(Length <= 0xFFFFU)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d20a      	bcs.n	800224a <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3328      	adds	r3, #40	; 0x28
 800223e:	4619      	mov	r1, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	f000 fb26 	bl	8002894 <HAL_DMA_Start_IT>
 8002248:	e038      	b.n	80022bc <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_DCMI_Start_DMA+0x138>)
 8002250:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002264:	e009      	b.n	800227a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	085a      	lsrs	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	005a      	lsls	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002282:	d2f0      	bcs.n	8002266 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	1e9a      	subs	r2, r3, #2
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3328      	adds	r3, #40	; 0x28
 80022ac:	4619      	mov	r1, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	f000 fe40 	bl	8002f3c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	080024ed 	.word	0x080024ed
 80022e4:	08002617 	.word	0x08002617

080022e8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_DCMI_Stop+0xb0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	4a29      	ldr	r2, [pc, #164]	; (800239c <HAL_DCMI_Stop+0xb4>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_DCMI_Stop+0x2a>
 800230e:	2302      	movs	r3, #2
 8002310:	e03e      	b.n	8002390 <HAL_DCMI_Stop+0xa8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1e5a      	subs	r2, r3, #1
 8002336:	60ba      	str	r2, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	73fb      	strb	r3, [r7, #15]
      break;
 800234c:	e006      	b.n	800235c <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ea      	bne.n	8002332 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800236a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fae7 	bl	8002944 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000008 	.word	0x20000008
 800239c:	92492493 	.word	0x92492493

080023a0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2204      	movs	r2, #4
 80023c0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2204      	movs	r2, #4
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023da:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <HAL_DCMI_IRQHandler+0xf8>)
 80023dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fb1e 	bl	8002a24 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2204      	movs	r2, #4
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_DCMI_IRQHandler+0xf8>)
 8002414:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fb02 	bl	8002a24 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2210      	movs	r2, #16
 8002430:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f83c 	bl	80024b0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2208      	movs	r2, #8
 8002448:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f83a 	bl	80024c4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d019      	beq.n	800248e <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b02      	cmp	r3, #2
 8002466:	d107      	bne.n	8002478 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 021e 	bic.w	r2, r2, #30
 8002476:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f825 	bl	80024d8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	08002617 	.word	0x08002617

0800249c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	2b00      	cmp	r3, #0
 8002504:	d043      	beq.n	800258e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d118      	bne.n	8002552 <DCMI_DMAXferCplt+0x66>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d015      	beq.n	8002552 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	00da      	lsls	r2, r3, #3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4413      	add	r3, r2
 800253e:	2200      	movs	r2, #0
 8002540:	4619      	mov	r1, r3
 8002542:	f001 fe43 	bl	80041cc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
 8002550:	e044      	b.n	80025dc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d13c      	bne.n	80025dc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	00da      	lsls	r2, r3, #3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	2201      	movs	r2, #1
 800257c:	4619      	mov	r1, r3
 800257e:	f001 fe25 	bl	80041cc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	1e5a      	subs	r2, r3, #1
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
 800258c:	e026      	b.n	80025dc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	e017      	b.n	80025dc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10f      	bne.n	80025dc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	440a      	add	r2, r1
 80025d2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d112      	bne.n	800260e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d103      	bne.n	800260e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	2b02      	cmp	r3, #2
 800262c:	d003      	beq.n	8002636 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff30 	bl	800249c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e069      	b.n	800272a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe ff38 	bl	80014e0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe ff35 	bl	80014e0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_DCMI_Init+0xf0>)
 800268a:	400b      	ands	r3, r1
 800268c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026a2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026ae:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026ba:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 80026c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80026d2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d112      	bne.n	800270a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7f1b      	ldrb	r3, [r3, #28]
 80026e8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7f5b      	ldrb	r3, [r3, #29]
 80026ee:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80026f0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7f9b      	ldrb	r3, [r3, #30]
 80026f6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7fdb      	ldrb	r3, [r3, #31]
 8002700:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002706:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002708:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 021e 	orr.w	r2, r2, #30
 8002718:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	ffe0f007 	.word	0xffe0f007

08002738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff fbee 	bl	8001f24 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e099      	b.n	8002888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002774:	e00f      	b.n	8002796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002776:	f7ff fbd5 	bl	8001f24 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b05      	cmp	r3, #5
 8002782:	d908      	bls.n	8002796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2203      	movs	r2, #3
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e078      	b.n	8002888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e8      	bne.n	8002776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_DMA_Init+0x158>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d107      	bne.n	8002800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	4313      	orrs	r3, r2
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2b04      	cmp	r3, #4
 8002828:	d117      	bne.n	800285a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb01 	bl	8002e44 <DMA_CheckFifoParam>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002856:	2301      	movs	r3, #1
 8002858:	e016      	b.n	8002888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fab8 	bl	8002dd8 <DMA_CalcBaseAndBitshift>
 8002868:	4603      	mov	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	223f      	movs	r2, #63	; 0x3f
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	f010803f 	.word	0xf010803f

08002894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_DMA_Start_IT+0x26>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e040      	b.n	800293c <HAL_DMA_Start_IT+0xa8>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d12f      	bne.n	800292e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa4a 	bl	8002d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	223f      	movs	r2, #63	; 0x3f
 80028ee:	409a      	lsls	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0216 	orr.w	r2, r2, #22
 8002902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e005      	b.n	800293a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002952:	f7ff fae7 	bl	8001f24 <HAL_GetTick>
 8002956:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d008      	beq.n	8002976 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e052      	b.n	8002a1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0216 	bic.w	r2, r2, #22
 8002984:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002994:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <HAL_DMA_Abort+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0208 	bic.w	r2, r2, #8
 80029b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	e013      	b.n	80029f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c8:	f7ff faac 	bl	8001f24 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d90c      	bls.n	80029f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2203      	movs	r2, #3
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e015      	b.n	8002a1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e4      	bne.n	80029c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	223f      	movs	r2, #63	; 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d004      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00c      	b.n	8002a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2205      	movs	r2, #5
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a74:	4b8e      	ldr	r3, [pc, #568]	; (8002cb0 <HAL_DMA_IRQHandler+0x248>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <HAL_DMA_IRQHandler+0x24c>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	2208      	movs	r2, #8
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01a      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2201      	movs	r2, #1
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2201      	movs	r2, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2204      	movs	r2, #4
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	2210      	movs	r2, #16
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d043      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03c      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	2210      	movs	r2, #16
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d018      	beq.n	8002baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d024      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
 8002b96:	e01f      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e016      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0208 	bic.w	r2, r2, #8
 8002bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	2220      	movs	r2, #32
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 808f 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8087 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2220      	movs	r2, #32
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d136      	bne.n	8002c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0216 	bic.w	r2, r2, #22
 8002c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x1da>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0208 	bic.w	r2, r2, #8
 8002c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	223f      	movs	r2, #63	; 0x3f
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d07e      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
        }
        return;
 8002c7e:	e079      	b.n	8002d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e02c      	b.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
 8002cae:	bf00      	nop
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e01e      	b.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10f      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0210 	bic.w	r2, r2, #16
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d032      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d022      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2205      	movs	r2, #5
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d307      	bcc.n	8002d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f2      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x2cc>
 8002d4e:	e000      	b.n	8002d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d74:	bf00      	nop
    }
  }
}
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d108      	bne.n	8002dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dba:	e007      	b.n	8002dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3b10      	subs	r3, #16
 8002de8:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <DMA_CalcBaseAndBitshift+0x64>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002df2:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <DMA_CalcBaseAndBitshift+0x68>)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d909      	bls.n	8002e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	659a      	str	r2, [r3, #88]	; 0x58
 8002e18:	e007      	b.n	8002e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	aaaaaaab 	.word	0xaaaaaaab
 8002e40:	0800a07c 	.word	0x0800a07c

08002e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11f      	bne.n	8002e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d856      	bhi.n	8002f12 <DMA_CheckFifoParam+0xce>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <DMA_CheckFifoParam+0x28>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e8f 	.word	0x08002e8f
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002f13 	.word	0x08002f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d046      	beq.n	8002f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e043      	b.n	8002f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e96:	d140      	bne.n	8002f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9c:	e03d      	b.n	8002f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea6:	d121      	bne.n	8002eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d837      	bhi.n	8002f1e <DMA_CheckFifoParam+0xda>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <DMA_CheckFifoParam+0x70>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ecb 	.word	0x08002ecb
 8002ebc:	08002ec5 	.word	0x08002ec5
 8002ec0:	08002edd 	.word	0x08002edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e030      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d025      	beq.n	8002f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eda:	e022      	b.n	8002f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eea:	e01c      	b.n	8002f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d903      	bls.n	8002efa <DMA_CheckFifoParam+0xb6>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d003      	beq.n	8002f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ef8:	e018      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      break;
 8002efe:	e015      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e00b      	b.n	8002f2a <DMA_CheckFifoParam+0xe6>
      break;
 8002f12:	bf00      	nop
 8002f14:	e00a      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
 8002f18:	e008      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e006      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e004      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e002      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d106      	bne.n	8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f001 b911 	b.w	8004186 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f001 b8ff 	b.w	8004186 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002f92:	2302      	movs	r3, #2
 8002f94:	f001 b8f7 	b.w	8004186 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	f041 80e5 	bne.w	8004178 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fca:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f001 f910 	bl	8004200 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d960      	bls.n	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a8b      	ldr	r2, [pc, #556]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d057      	beq.n	80030a6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a8a      	ldr	r2, [pc, #552]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d050      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a88      	ldr	r2, [pc, #544]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d049      	beq.n	800309e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a87      	ldr	r2, [pc, #540]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d042      	beq.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a85      	ldr	r2, [pc, #532]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03a      	beq.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a84      	ldr	r2, [pc, #528]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d032      	beq.n	800308e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a82      	ldr	r2, [pc, #520]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02a      	beq.n	8003088 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a81      	ldr	r2, [pc, #516]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a7f      	ldr	r2, [pc, #508]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01a      	beq.n	800307c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a7e      	ldr	r2, [pc, #504]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d012      	beq.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a7c      	ldr	r2, [pc, #496]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00a      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7b      	ldr	r2, [pc, #492]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d102      	bne.n	800306a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003064:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003068:	e01e      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800306a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800306e:	e01b      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003074:	e018      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003076:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800307a:	e015      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800307c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003080:	e012      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003086:	e00f      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800308c:	e00c      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800308e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003092:	e009      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003098:	e006      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800309a:	2320      	movs	r3, #32
 800309c:	e004      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800309e:	2320      	movs	r3, #32
 80030a0:	e002      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030a2:	2320      	movs	r3, #32
 80030a4:	e000      	b.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030a6:	2320      	movs	r3, #32
 80030a8:	4a69      	ldr	r2, [pc, #420]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80030aa:	60d3      	str	r3, [r2, #12]
 80030ac:	e14f      	b.n	800334e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b67      	ldr	r3, [pc, #412]	; (8003254 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d960      	bls.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d057      	beq.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a56      	ldr	r2, [pc, #344]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d050      	beq.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a55      	ldr	r2, [pc, #340]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d049      	beq.n	800316c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a53      	ldr	r2, [pc, #332]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d042      	beq.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03a      	beq.n	8003162 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d032      	beq.n	800315c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4f      	ldr	r2, [pc, #316]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02a      	beq.n	8003156 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a4d      	ldr	r2, [pc, #308]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d022      	beq.n	8003150 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4c      	ldr	r2, [pc, #304]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d01a      	beq.n	800314a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d012      	beq.n	8003144 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a49      	ldr	r2, [pc, #292]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00a      	beq.n	800313e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a47      	ldr	r2, [pc, #284]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d102      	bne.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8003132:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003136:	e01e      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800313c:	e01b      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800313e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003142:	e018      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003144:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003148:	e015      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800314a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800314e:	e012      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003154:	e00f      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800315a:	e00c      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800315c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003160:	e009      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003166:	e006      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003168:	2320      	movs	r3, #32
 800316a:	e004      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800316c:	2320      	movs	r3, #32
 800316e:	e002      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003170:	2320      	movs	r3, #32
 8003172:	e000      	b.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003174:	2320      	movs	r3, #32
 8003176:	4a36      	ldr	r2, [pc, #216]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003178:	6093      	str	r3, [r2, #8]
 800317a:	e0e8      	b.n	800334e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b35      	ldr	r3, [pc, #212]	; (8003258 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003184:	429a      	cmp	r2, r3
 8003186:	f240 8082 	bls.w	800328e <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a24      	ldr	r2, [pc, #144]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d078      	beq.n	8003286 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d071      	beq.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a21      	ldr	r2, [pc, #132]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d06a      	beq.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1f      	ldr	r2, [pc, #124]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d063      	beq.n	800327a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d05b      	beq.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d053      	beq.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d04b      	beq.n	8003268 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d043      	beq.n	8003262 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d03b      	beq.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d012      	beq.n	8003214 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00a      	beq.n	800320e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a13      	ldr	r2, [pc, #76]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d102      	bne.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8003202:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003206:	e03f      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800320c:	e03c      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800320e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003212:	e039      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003218:	e036      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800321a:	bf00      	nop
 800321c:	40026458 	.word	0x40026458
 8003220:	40026010 	.word	0x40026010
 8003224:	40026410 	.word	0x40026410
 8003228:	40026070 	.word	0x40026070
 800322c:	40026470 	.word	0x40026470
 8003230:	40026028 	.word	0x40026028
 8003234:	40026428 	.word	0x40026428
 8003238:	40026088 	.word	0x40026088
 800323c:	40026488 	.word	0x40026488
 8003240:	40026040 	.word	0x40026040
 8003244:	40026440 	.word	0x40026440
 8003248:	400260a0 	.word	0x400260a0
 800324c:	400264a0 	.word	0x400264a0
 8003250:	40026400 	.word	0x40026400
 8003254:	400260b8 	.word	0x400260b8
 8003258:	40026058 	.word	0x40026058
 800325c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003260:	e012      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003266:	e00f      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800326c:	e00c      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800326e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003272:	e009      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003278:	e006      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800327a:	2320      	movs	r3, #32
 800327c:	e004      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800327e:	2320      	movs	r3, #32
 8003280:	e002      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003282:	2320      	movs	r3, #32
 8003284:	e000      	b.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003286:	2320      	movs	r3, #32
 8003288:	4a8c      	ldr	r2, [pc, #560]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800328a:	60d3      	str	r3, [r2, #12]
 800328c:	e05f      	b.n	800334e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a8b      	ldr	r2, [pc, #556]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d057      	beq.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a89      	ldr	r2, [pc, #548]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d050      	beq.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a88      	ldr	r2, [pc, #544]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d049      	beq.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a86      	ldr	r2, [pc, #536]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d042      	beq.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a85      	ldr	r2, [pc, #532]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d03a      	beq.n	8003336 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a83      	ldr	r2, [pc, #524]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d032      	beq.n	8003330 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a82      	ldr	r2, [pc, #520]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d02a      	beq.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a80      	ldr	r2, [pc, #512]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d022      	beq.n	8003324 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7f      	ldr	r2, [pc, #508]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01a      	beq.n	800331e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a7d      	ldr	r2, [pc, #500]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d012      	beq.n	8003318 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7c      	ldr	r2, [pc, #496]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00a      	beq.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a7a      	ldr	r2, [pc, #488]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d102      	bne.n	800330c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8003306:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800330a:	e01e      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800330c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003310:	e01b      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003312:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003316:	e018      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800331c:	e015      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800331e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003322:	e012      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003328:	e00f      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800332a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332e:	e00c      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003334:	e009      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800333a:	e006      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800333c:	2320      	movs	r3, #32
 800333e:	e004      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003340:	2320      	movs	r3, #32
 8003342:	e002      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003344:	2320      	movs	r3, #32
 8003346:	e000      	b.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003348:	2320      	movs	r3, #32
 800334a:	4a5c      	ldr	r2, [pc, #368]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800334c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	4b66      	ldr	r3, [pc, #408]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003356:	429a      	cmp	r2, r3
 8003358:	d960      	bls.n	800341c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d057      	beq.n	8003414 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d050      	beq.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d049      	beq.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a53      	ldr	r2, [pc, #332]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d042      	beq.n	8003408 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d03a      	beq.n	8003402 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d032      	beq.n	80033fc <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d02a      	beq.n	80033f6 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4d      	ldr	r2, [pc, #308]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d022      	beq.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a4c      	ldr	r2, [pc, #304]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d01a      	beq.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d012      	beq.n	80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a49      	ldr	r2, [pc, #292]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00a      	beq.n	80033de <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a47      	ldr	r2, [pc, #284]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d102      	bne.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80033d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033d6:	e01e      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033dc:	e01b      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033e2:	e018      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033e8:	e015      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033ee:	e012      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f4:	e00f      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fa:	e00c      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003400:	e009      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003406:	e006      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003408:	2310      	movs	r3, #16
 800340a:	e004      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800340c:	2310      	movs	r3, #16
 800340e:	e002      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003410:	2310      	movs	r3, #16
 8003412:	e000      	b.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003414:	2310      	movs	r3, #16
 8003416:	4a37      	ldr	r2, [pc, #220]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003418:	60d3      	str	r3, [r2, #12]
 800341a:	e14f      	b.n	80036bc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003424:	429a      	cmp	r2, r3
 8003426:	f240 8082 	bls.w	800352e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d078      	beq.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d071      	beq.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d06a      	beq.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d063      	beq.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d05b      	beq.n	8003514 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d053      	beq.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d04b      	beq.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d043      	beq.n	8003502 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d03b      	beq.n	80034fc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d012      	beq.n	80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00a      	beq.n	80034ae <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a13      	ldr	r2, [pc, #76]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d102      	bne.n	80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80034a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034a6:	e03f      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034ac:	e03c      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034b2:	e039      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034b8:	e036      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80034ba:	bf00      	nop
 80034bc:	40026000 	.word	0x40026000
 80034c0:	40026010 	.word	0x40026010
 80034c4:	40026410 	.word	0x40026410
 80034c8:	40026070 	.word	0x40026070
 80034cc:	40026470 	.word	0x40026470
 80034d0:	40026028 	.word	0x40026028
 80034d4:	40026428 	.word	0x40026428
 80034d8:	40026088 	.word	0x40026088
 80034dc:	40026488 	.word	0x40026488
 80034e0:	40026040 	.word	0x40026040
 80034e4:	40026440 	.word	0x40026440
 80034e8:	400260a0 	.word	0x400260a0
 80034ec:	400264a0 	.word	0x400264a0
 80034f0:	40026458 	.word	0x40026458
 80034f4:	40026400 	.word	0x40026400
 80034f8:	400260b8 	.word	0x400260b8
 80034fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003500:	e012      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003506:	e00f      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350c:	e00c      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800350e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003512:	e009      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003518:	e006      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800351a:	2310      	movs	r3, #16
 800351c:	e004      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800351e:	2310      	movs	r3, #16
 8003520:	e002      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003522:	2310      	movs	r3, #16
 8003524:	e000      	b.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003526:	2310      	movs	r3, #16
 8003528:	4a8c      	ldr	r2, [pc, #560]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	e0c6      	b.n	80036bc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b8a      	ldr	r3, [pc, #552]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d960      	bls.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a89      	ldr	r2, [pc, #548]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d057      	beq.n	80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a87      	ldr	r2, [pc, #540]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d050      	beq.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a86      	ldr	r2, [pc, #536]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d049      	beq.n	80035ec <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a84      	ldr	r2, [pc, #528]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d042      	beq.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a83      	ldr	r2, [pc, #524]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d03a      	beq.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a81      	ldr	r2, [pc, #516]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d032      	beq.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d02a      	beq.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a7e      	ldr	r2, [pc, #504]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d022      	beq.n	80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a7d      	ldr	r2, [pc, #500]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d01a      	beq.n	80035ca <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a7b      	ldr	r2, [pc, #492]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d012      	beq.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7a      	ldr	r2, [pc, #488]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00a      	beq.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a78      	ldr	r2, [pc, #480]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d102      	bne.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80035b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035b6:	e01e      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035bc:	e01b      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c2:	e018      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c8:	e015      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ce:	e012      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d4:	e00f      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035da:	e00c      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e0:	e009      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e6:	e006      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035e8:	2310      	movs	r3, #16
 80035ea:	e004      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035ec:	2310      	movs	r3, #16
 80035ee:	e002      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035f0:	2310      	movs	r3, #16
 80035f2:	e000      	b.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80035f4:	2310      	movs	r3, #16
 80035f6:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80035f8:	60d3      	str	r3, [r2, #12]
 80035fa:	e05f      	b.n	80036bc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d057      	beq.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a57      	ldr	r2, [pc, #348]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d050      	beq.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d049      	beq.n	80036ae <HAL_DMAEx_MultiBufferStart_IT+0x772>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a54      	ldr	r2, [pc, #336]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d042      	beq.n	80036aa <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d03a      	beq.n	80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a51      	ldr	r2, [pc, #324]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d032      	beq.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4f      	ldr	r2, [pc, #316]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02a      	beq.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a4e      	ldr	r2, [pc, #312]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4c      	ldr	r2, [pc, #304]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01a      	beq.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4b      	ldr	r2, [pc, #300]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d012      	beq.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a49      	ldr	r2, [pc, #292]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00a      	beq.n	8003680 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a48      	ldr	r2, [pc, #288]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d102      	bne.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003674:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003678:	e01e      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800367a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800367e:	e01b      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003684:	e018      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003686:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800368a:	e015      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800368c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003690:	e012      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003696:	e00f      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369c:	e00c      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800369e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a2:	e009      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a8:	e006      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036aa:	2310      	movs	r3, #16
 80036ac:	e004      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036ae:	2310      	movs	r3, #16
 80036b0:	e002      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036b2:	2310      	movs	r3, #16
 80036b4:	e000      	b.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036b6:	2310      	movs	r3, #16
 80036b8:	4a36      	ldr	r2, [pc, #216]	; (8003794 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80036ba:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b35      	ldr	r3, [pc, #212]	; (8003798 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f240 8082 	bls.w	80037ce <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a25      	ldr	r2, [pc, #148]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d078      	beq.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a23      	ldr	r2, [pc, #140]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d071      	beq.n	80037c2 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d06a      	beq.n	80037be <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d063      	beq.n	80037ba <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d05b      	beq.n	80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d053      	beq.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d04b      	beq.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d043      	beq.n	80037a2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a19      	ldr	r2, [pc, #100]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d03b      	beq.n	800379c <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d012      	beq.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a16      	ldr	r2, [pc, #88]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00a      	beq.n	800374e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d102      	bne.n	8003748 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003742:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003746:	e03f      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800374c:	e03c      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800374e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003752:	e039      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003754:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003758:	e036      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800375a:	bf00      	nop
 800375c:	40026400 	.word	0x40026400
 8003760:	40026058 	.word	0x40026058
 8003764:	40026010 	.word	0x40026010
 8003768:	40026410 	.word	0x40026410
 800376c:	40026070 	.word	0x40026070
 8003770:	40026470 	.word	0x40026470
 8003774:	40026028 	.word	0x40026028
 8003778:	40026428 	.word	0x40026428
 800377c:	40026088 	.word	0x40026088
 8003780:	40026488 	.word	0x40026488
 8003784:	40026040 	.word	0x40026040
 8003788:	40026440 	.word	0x40026440
 800378c:	400260a0 	.word	0x400260a0
 8003790:	400264a0 	.word	0x400264a0
 8003794:	40026000 	.word	0x40026000
 8003798:	40026458 	.word	0x40026458
 800379c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037a0:	e012      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a6:	e00f      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ac:	e00c      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b2:	e009      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b8:	e006      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e004      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037be:	2308      	movs	r3, #8
 80037c0:	e002      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037c2:	2308      	movs	r3, #8
 80037c4:	e000      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037c6:	2308      	movs	r3, #8
 80037c8:	4a8c      	ldr	r2, [pc, #560]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80037ca:	60d3      	str	r3, [r2, #12]
 80037cc:	e14e      	b.n	8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b8a      	ldr	r3, [pc, #552]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d960      	bls.n	800389c <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a89      	ldr	r2, [pc, #548]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d057      	beq.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a87      	ldr	r2, [pc, #540]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d050      	beq.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a86      	ldr	r2, [pc, #536]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d049      	beq.n	800388c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a84      	ldr	r2, [pc, #528]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d042      	beq.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a83      	ldr	r2, [pc, #524]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03a      	beq.n	8003882 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a81      	ldr	r2, [pc, #516]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d032      	beq.n	800387c <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a80      	ldr	r2, [pc, #512]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d02a      	beq.n	8003876 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a7e      	ldr	r2, [pc, #504]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d022      	beq.n	8003870 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7d      	ldr	r2, [pc, #500]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d01a      	beq.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7b      	ldr	r2, [pc, #492]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d012      	beq.n	8003864 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7a      	ldr	r2, [pc, #488]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00a      	beq.n	800385e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a78      	ldr	r2, [pc, #480]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d102      	bne.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003852:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003856:	e01e      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800385c:	e01b      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800385e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003862:	e018      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003864:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003868:	e015      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800386a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800386e:	e012      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003874:	e00f      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387a:	e00c      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800387c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003880:	e009      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003886:	e006      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003888:	2308      	movs	r3, #8
 800388a:	e004      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800388c:	2308      	movs	r3, #8
 800388e:	e002      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003890:	2308      	movs	r3, #8
 8003892:	e000      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003894:	2308      	movs	r3, #8
 8003896:	4a59      	ldr	r2, [pc, #356]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003898:	6093      	str	r3, [r2, #8]
 800389a:	e0e7      	b.n	8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b64      	ldr	r3, [pc, #400]	; (8003a34 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d960      	bls.n	800396a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a55      	ldr	r2, [pc, #340]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d057      	beq.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a54      	ldr	r2, [pc, #336]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d050      	beq.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d049      	beq.n	800395a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a51      	ldr	r2, [pc, #324]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d042      	beq.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d03a      	beq.n	8003950 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4e      	ldr	r2, [pc, #312]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d032      	beq.n	800394a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a4c      	ldr	r2, [pc, #304]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02a      	beq.n	8003944 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a4b      	ldr	r2, [pc, #300]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d022      	beq.n	800393e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a49      	ldr	r2, [pc, #292]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01a      	beq.n	8003938 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a48      	ldr	r2, [pc, #288]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d012      	beq.n	8003932 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a46      	ldr	r2, [pc, #280]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00a      	beq.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a45      	ldr	r2, [pc, #276]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d102      	bne.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003920:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003924:	e01e      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800392a:	e01b      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800392c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003930:	e018      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003932:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003936:	e015      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003938:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800393c:	e012      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800393e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003942:	e00f      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003948:	e00c      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800394a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800394e:	e009      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003954:	e006      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003956:	2308      	movs	r3, #8
 8003958:	e004      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800395a:	2308      	movs	r3, #8
 800395c:	e002      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800395e:	2308      	movs	r3, #8
 8003960:	e000      	b.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003962:	2308      	movs	r3, #8
 8003964:	4a34      	ldr	r2, [pc, #208]	; (8003a38 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003966:	60d3      	str	r3, [r2, #12]
 8003968:	e080      	b.n	8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d078      	beq.n	8003a66 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a23      	ldr	r2, [pc, #140]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d071      	beq.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d06a      	beq.n	8003a5e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d063      	beq.n	8003a5a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d05b      	beq.n	8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d053      	beq.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04b      	beq.n	8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d043      	beq.n	8003a42 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d012      	beq.n	80039f4 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00a      	beq.n	80039ee <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d102      	bne.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80039e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039e6:	e03f      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ec:	e03c      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039f2:	e039      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039f8:	e036      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039fa:	bf00      	nop
 80039fc:	40026400 	.word	0x40026400
 8003a00:	400260b8 	.word	0x400260b8
 8003a04:	40026010 	.word	0x40026010
 8003a08:	40026410 	.word	0x40026410
 8003a0c:	40026070 	.word	0x40026070
 8003a10:	40026470 	.word	0x40026470
 8003a14:	40026028 	.word	0x40026028
 8003a18:	40026428 	.word	0x40026428
 8003a1c:	40026088 	.word	0x40026088
 8003a20:	40026488 	.word	0x40026488
 8003a24:	40026040 	.word	0x40026040
 8003a28:	40026440 	.word	0x40026440
 8003a2c:	400260a0 	.word	0x400260a0
 8003a30:	400264a0 	.word	0x400264a0
 8003a34:	40026058 	.word	0x40026058
 8003a38:	40026000 	.word	0x40026000
 8003a3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a40:	e012      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a46:	e00f      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4c:	e00c      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a52:	e009      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a58:	e006      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	e004      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	e002      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a62:	2308      	movs	r3, #8
 8003a64:	e000      	b.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a66:	2308      	movs	r3, #8
 8003a68:	4a8a      	ldr	r2, [pc, #552]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003a6a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b89      	ldr	r3, [pc, #548]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d960      	bls.n	8003b3a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a87      	ldr	r2, [pc, #540]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d057      	beq.n	8003b32 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a86      	ldr	r2, [pc, #536]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d050      	beq.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a84      	ldr	r2, [pc, #528]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d049      	beq.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a83      	ldr	r2, [pc, #524]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d042      	beq.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a81      	ldr	r2, [pc, #516]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d03a      	beq.n	8003b20 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a80      	ldr	r2, [pc, #512]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d032      	beq.n	8003b1a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a7e      	ldr	r2, [pc, #504]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d02a      	beq.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7d      	ldr	r2, [pc, #500]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7b      	ldr	r2, [pc, #492]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01a      	beq.n	8003b08 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7a      	ldr	r2, [pc, #488]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d012      	beq.n	8003b02 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a78      	ldr	r2, [pc, #480]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00a      	beq.n	8003afc <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a77      	ldr	r2, [pc, #476]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d102      	bne.n	8003af6 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003af0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003af4:	e01e      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003afa:	e01b      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b00:	e018      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b06:	e015      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b0c:	e012      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b12:	e00f      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b18:	e00c      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1e:	e009      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b24:	e006      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b26:	2304      	movs	r3, #4
 8003b28:	e004      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	e002      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	e000      	b.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b32:	2304      	movs	r3, #4
 8003b34:	4a65      	ldr	r2, [pc, #404]	; (8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003b36:	60d3      	str	r3, [r2, #12]
 8003b38:	e150      	b.n	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d960      	bls.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a54      	ldr	r2, [pc, #336]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d057      	beq.n	8003c00 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a52      	ldr	r2, [pc, #328]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d050      	beq.n	8003bfc <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d049      	beq.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4f      	ldr	r2, [pc, #316]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d042      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4e      	ldr	r2, [pc, #312]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03a      	beq.n	8003bee <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a4c      	ldr	r2, [pc, #304]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d032      	beq.n	8003be8 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a4b      	ldr	r2, [pc, #300]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02a      	beq.n	8003be2 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a48      	ldr	r2, [pc, #288]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d01a      	beq.n	8003bd6 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a46      	ldr	r2, [pc, #280]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d012      	beq.n	8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a45      	ldr	r2, [pc, #276]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00a      	beq.n	8003bca <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a43      	ldr	r2, [pc, #268]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d102      	bne.n	8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003bbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bc2:	e01e      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc8:	e01b      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bce:	e018      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bd4:	e015      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bda:	e012      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be0:	e00f      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be6:	e00c      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bec:	e009      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf2:	e006      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e004      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	e002      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	e000      	b.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c00:	2304      	movs	r3, #4
 8003c02:	4a32      	ldr	r2, [pc, #200]	; (8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	e0e9      	b.n	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003c10:	429a      	cmp	r2, r3
 8003c12:	f240 8083 	bls.w	8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d079      	beq.n	8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d072      	beq.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d06b      	beq.n	8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d064      	beq.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d05c      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d054      	beq.n	8003cfc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d04c      	beq.n	8003cf6 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d044      	beq.n	8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d03c      	beq.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d034      	beq.n	8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d124      	bne.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003c8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c92:	e040      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003c94:	40026000 	.word	0x40026000
 8003c98:	40026458 	.word	0x40026458
 8003c9c:	40026010 	.word	0x40026010
 8003ca0:	40026410 	.word	0x40026410
 8003ca4:	40026070 	.word	0x40026070
 8003ca8:	40026470 	.word	0x40026470
 8003cac:	40026028 	.word	0x40026028
 8003cb0:	40026428 	.word	0x40026428
 8003cb4:	40026088 	.word	0x40026088
 8003cb8:	40026488 	.word	0x40026488
 8003cbc:	40026040 	.word	0x40026040
 8003cc0:	40026440 	.word	0x40026440
 8003cc4:	400260a0 	.word	0x400260a0
 8003cc8:	400264a0 	.word	0x400264a0
 8003ccc:	40026400 	.word	0x40026400
 8003cd0:	400260b8 	.word	0x400260b8
 8003cd4:	40026058 	.word	0x40026058
 8003cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cdc:	e01b      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce2:	e018      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ce4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce8:	e015      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cee:	e012      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf4:	e00f      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfa:	e00c      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d00:	e009      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d06:	e006      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	e004      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	e002      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d10:	2304      	movs	r3, #4
 8003d12:	e000      	b.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d14:	2304      	movs	r3, #4
 8003d16:	4a8b      	ldr	r2, [pc, #556]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003d18:	60d3      	str	r3, [r2, #12]
 8003d1a:	e05f      	b.n	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a89      	ldr	r2, [pc, #548]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d057      	beq.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a88      	ldr	r2, [pc, #544]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d050      	beq.n	8003dd2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a86      	ldr	r2, [pc, #536]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d049      	beq.n	8003dce <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a85      	ldr	r2, [pc, #532]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d042      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a83      	ldr	r2, [pc, #524]	; (8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d03a      	beq.n	8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a82      	ldr	r2, [pc, #520]	; (8003f5c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d032      	beq.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a80      	ldr	r2, [pc, #512]	; (8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02a      	beq.n	8003db8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7f      	ldr	r2, [pc, #508]	; (8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a7d      	ldr	r2, [pc, #500]	; (8003f68 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01a      	beq.n	8003dac <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7c      	ldr	r2, [pc, #496]	; (8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d012      	beq.n	8003da6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a7a      	ldr	r2, [pc, #488]	; (8003f70 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00a      	beq.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a79      	ldr	r2, [pc, #484]	; (8003f74 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d102      	bne.n	8003d9a <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d98:	e01e      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9e:	e01b      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003da0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003da4:	e018      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003da6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003daa:	e015      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003db0:	e012      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003db6:	e00f      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbc:	e00c      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc2:	e009      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc8:	e006      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	e004      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	e002      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	e000      	b.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	4a5a      	ldr	r2, [pc, #360]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003dda:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b65      	ldr	r3, [pc, #404]	; (8003f78 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d95c      	bls.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a56      	ldr	r2, [pc, #344]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d053      	beq.n	8003e9a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a55      	ldr	r2, [pc, #340]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d04c      	beq.n	8003e96 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a53      	ldr	r2, [pc, #332]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d045      	beq.n	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a52      	ldr	r2, [pc, #328]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03e      	beq.n	8003e8e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a50      	ldr	r2, [pc, #320]	; (8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d037      	beq.n	8003e8a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a4f      	ldr	r2, [pc, #316]	; (8003f5c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d030      	beq.n	8003e86 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a4d      	ldr	r2, [pc, #308]	; (8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d029      	beq.n	8003e82 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a4c      	ldr	r2, [pc, #304]	; (8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d022      	beq.n	8003e7e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01a      	beq.n	8003e78 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a49      	ldr	r2, [pc, #292]	; (8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d012      	beq.n	8003e72 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a47      	ldr	r2, [pc, #284]	; (8003f70 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00a      	beq.n	8003e6c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a46      	ldr	r2, [pc, #280]	; (8003f74 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d102      	bne.n	8003e66 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e64:	e01a      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e6a:	e017      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e70:	e014      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e76:	e011      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e7c:	e00e      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	e00c      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	e00a      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e86:	2340      	movs	r3, #64	; 0x40
 8003e88:	e008      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	e006      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e004      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e002      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4a37      	ldr	r2, [pc, #220]	; (8003f7c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003e9e:	60d3      	str	r3, [r2, #12]
 8003ea0:	e141      	b.n	8004126 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d97c      	bls.n	8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d073      	beq.n	8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d06c      	beq.n	8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d065      	beq.n	8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d05e      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1f      	ldr	r2, [pc, #124]	; (8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d057      	beq.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d050      	beq.n	8003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d049      	beq.n	8003f88 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d042      	beq.n	8003f84 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a19      	ldr	r2, [pc, #100]	; (8003f68 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01a      	beq.n	8003f3e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d012      	beq.n	8003f38 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00a      	beq.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d102      	bne.n	8003f2c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f2a:	e03a      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f30:	e037      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f36:	e034      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f3c:	e031      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f42:	e02e      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f44:	40026000 	.word	0x40026000
 8003f48:	40026010 	.word	0x40026010
 8003f4c:	40026410 	.word	0x40026410
 8003f50:	40026070 	.word	0x40026070
 8003f54:	40026470 	.word	0x40026470
 8003f58:	40026028 	.word	0x40026028
 8003f5c:	40026428 	.word	0x40026428
 8003f60:	40026088 	.word	0x40026088
 8003f64:	40026488 	.word	0x40026488
 8003f68:	40026040 	.word	0x40026040
 8003f6c:	40026440 	.word	0x40026440
 8003f70:	400260a0 	.word	0x400260a0
 8003f74:	400264a0 	.word	0x400264a0
 8003f78:	40026458 	.word	0x40026458
 8003f7c:	40026400 	.word	0x40026400
 8003f80:	400260b8 	.word	0x400260b8
 8003f84:	2340      	movs	r3, #64	; 0x40
 8003f86:	e00c      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f88:	2340      	movs	r3, #64	; 0x40
 8003f8a:	e00a      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	e008      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f90:	2340      	movs	r3, #64	; 0x40
 8003f92:	e006      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e004      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e002      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4a7b      	ldr	r2, [pc, #492]	; (8004190 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003fa4:	6093      	str	r3, [r2, #8]
 8003fa6:	e0be      	b.n	8004126 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b79      	ldr	r3, [pc, #484]	; (8004194 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d95c      	bls.n	800406e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a77      	ldr	r2, [pc, #476]	; (8004198 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d053      	beq.n	8004066 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a76      	ldr	r2, [pc, #472]	; (800419c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04c      	beq.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a74      	ldr	r2, [pc, #464]	; (80041a0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d045      	beq.n	800405e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a73      	ldr	r2, [pc, #460]	; (80041a4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d03e      	beq.n	800405a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a71      	ldr	r2, [pc, #452]	; (80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d037      	beq.n	8004056 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a70      	ldr	r2, [pc, #448]	; (80041ac <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d030      	beq.n	8004052 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6e      	ldr	r2, [pc, #440]	; (80041b0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d029      	beq.n	800404e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6d      	ldr	r2, [pc, #436]	; (80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6b      	ldr	r2, [pc, #428]	; (80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01a      	beq.n	8004044 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6a      	ldr	r2, [pc, #424]	; (80041bc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d012      	beq.n	800403e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00a      	beq.n	8004038 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a67      	ldr	r2, [pc, #412]	; (80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d102      	bne.n	8004032 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800402c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004030:	e01a      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004036:	e017      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800403c:	e014      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800403e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004042:	e011      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004048:	e00e      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	e00c      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	e00a      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	e008      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004056:	2340      	movs	r3, #64	; 0x40
 8004058:	e006      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800405a:	2301      	movs	r3, #1
 800405c:	e004      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800405e:	2301      	movs	r3, #1
 8004060:	e002      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004066:	2301      	movs	r3, #1
 8004068:	4a57      	ldr	r2, [pc, #348]	; (80041c8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e05b      	b.n	8004126 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a49      	ldr	r2, [pc, #292]	; (8004198 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d053      	beq.n	8004120 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a47      	ldr	r2, [pc, #284]	; (800419c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d04c      	beq.n	800411c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d045      	beq.n	8004118 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a44      	ldr	r2, [pc, #272]	; (80041a4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d03e      	beq.n	8004114 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a43      	ldr	r2, [pc, #268]	; (80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d037      	beq.n	8004110 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a41      	ldr	r2, [pc, #260]	; (80041ac <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d030      	beq.n	800410c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a40      	ldr	r2, [pc, #256]	; (80041b0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d029      	beq.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a3e      	ldr	r2, [pc, #248]	; (80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a3d      	ldr	r2, [pc, #244]	; (80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d01a      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3b      	ldr	r2, [pc, #236]	; (80041bc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d012      	beq.n	80040f8 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00a      	beq.n	80040f2 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d102      	bne.n	80040ec <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80040e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ea:	e01a      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040f0:	e017      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040f6:	e014      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040fc:	e011      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80040fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004102:	e00e      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	e00c      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004108:	2340      	movs	r3, #64	; 0x40
 800410a:	e00a      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800410c:	2340      	movs	r3, #64	; 0x40
 800410e:	e008      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004110:	2340      	movs	r3, #64	; 0x40
 8004112:	e006      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004114:	2301      	movs	r3, #1
 8004116:	e004      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004118:	2301      	movs	r3, #1
 800411a:	e002      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004120:	2301      	movs	r3, #1
 8004122:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004124:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0216 	orr.w	r2, r2, #22
 8004134:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004144:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0208 	orr.w	r2, r2, #8
 8004164:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e005      	b.n	8004184 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004184:	7dfb      	ldrb	r3, [r7, #23]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40026400 	.word	0x40026400
 8004194:	40026058 	.word	0x40026058
 8004198:	40026010 	.word	0x40026010
 800419c:	40026410 	.word	0x40026410
 80041a0:	40026070 	.word	0x40026070
 80041a4:	40026470 	.word	0x40026470
 80041a8:	40026028 	.word	0x40026028
 80041ac:	40026428 	.word	0x40026428
 80041b0:	40026088 	.word	0x40026088
 80041b4:	40026488 	.word	0x40026488
 80041b8:	40026040 	.word	0x40026040
 80041bc:	40026440 	.word	0x40026440
 80041c0:	400260a0 	.word	0x400260a0
 80041c4:	400264a0 	.word	0x400264a0
 80041c8:	40026000 	.word	0x40026000

080041cc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d104      	bne.n	80041ea <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	60da      	str	r2, [r3, #12]
 80041e8:	e003      	b.n	80041f2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d108      	bne.n	8004230 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800422e:	e007      	b.n	8004240 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e165      	b.n	8004534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004268:	2201      	movs	r2, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	429a      	cmp	r2, r3
 8004282:	f040 8154 	bne.w	800452e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d005      	beq.n	800429e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800429a:	2b02      	cmp	r3, #2
 800429c:	d130      	bne.n	8004300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	2203      	movs	r2, #3
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042d4:	2201      	movs	r2, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 0201 	and.w	r2, r3, #1
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b03      	cmp	r3, #3
 800430a:	d017      	beq.n	800433c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d123      	bne.n	8004390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	08da      	lsrs	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3208      	adds	r2, #8
 8004350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	220f      	movs	r2, #15
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	08da      	lsrs	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3208      	adds	r2, #8
 800438a:	69b9      	ldr	r1, [r7, #24]
 800438c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0203 	and.w	r2, r3, #3
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80ae 	beq.w	800452e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <HAL_GPIO_Init+0x300>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4a5c      	ldr	r2, [pc, #368]	; (800454c <HAL_GPIO_Init+0x300>)
 80043dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e0:	6453      	str	r3, [r2, #68]	; 0x44
 80043e2:	4b5a      	ldr	r3, [pc, #360]	; (800454c <HAL_GPIO_Init+0x300>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ee:	4a58      	ldr	r2, [pc, #352]	; (8004550 <HAL_GPIO_Init+0x304>)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	3302      	adds	r3, #2
 80043f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	220f      	movs	r2, #15
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4f      	ldr	r2, [pc, #316]	; (8004554 <HAL_GPIO_Init+0x308>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d025      	beq.n	8004466 <HAL_GPIO_Init+0x21a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a4e      	ldr	r2, [pc, #312]	; (8004558 <HAL_GPIO_Init+0x30c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01f      	beq.n	8004462 <HAL_GPIO_Init+0x216>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a4d      	ldr	r2, [pc, #308]	; (800455c <HAL_GPIO_Init+0x310>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d019      	beq.n	800445e <HAL_GPIO_Init+0x212>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a4c      	ldr	r2, [pc, #304]	; (8004560 <HAL_GPIO_Init+0x314>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_GPIO_Init+0x20e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a4b      	ldr	r2, [pc, #300]	; (8004564 <HAL_GPIO_Init+0x318>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00d      	beq.n	8004456 <HAL_GPIO_Init+0x20a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4a      	ldr	r2, [pc, #296]	; (8004568 <HAL_GPIO_Init+0x31c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <HAL_GPIO_Init+0x206>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a49      	ldr	r2, [pc, #292]	; (800456c <HAL_GPIO_Init+0x320>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_GPIO_Init+0x202>
 800444a:	2306      	movs	r3, #6
 800444c:	e00c      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 800444e:	2307      	movs	r3, #7
 8004450:	e00a      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004452:	2305      	movs	r3, #5
 8004454:	e008      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004456:	2304      	movs	r3, #4
 8004458:	e006      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 800445a:	2303      	movs	r3, #3
 800445c:	e004      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 800445e:	2302      	movs	r3, #2
 8004460:	e002      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004466:	2300      	movs	r3, #0
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	f002 0203 	and.w	r2, r2, #3
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	4093      	lsls	r3, r2
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004478:	4935      	ldr	r1, [pc, #212]	; (8004550 <HAL_GPIO_Init+0x304>)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	3302      	adds	r3, #2
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004486:	4b3a      	ldr	r3, [pc, #232]	; (8004570 <HAL_GPIO_Init+0x324>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044aa:	4a31      	ldr	r2, [pc, #196]	; (8004570 <HAL_GPIO_Init+0x324>)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b0:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <HAL_GPIO_Init+0x324>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <HAL_GPIO_Init+0x324>)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044da:	4b25      	ldr	r3, [pc, #148]	; (8004570 <HAL_GPIO_Init+0x324>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_GPIO_Init+0x324>)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_GPIO_Init+0x324>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004528:	4a11      	ldr	r2, [pc, #68]	; (8004570 <HAL_GPIO_Init+0x324>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3301      	adds	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	f67f ae96 	bls.w	8004268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3724      	adds	r7, #36	; 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	40013800 	.word	0x40013800
 8004554:	40020000 	.word	0x40020000
 8004558:	40020400 	.word	0x40020400
 800455c:	40020800 	.word	0x40020800
 8004560:	40020c00 	.word	0x40020c00
 8004564:	40021000 	.word	0x40021000
 8004568:	40021400 	.word	0x40021400
 800456c:	40021800 	.word	0x40021800
 8004570:	40013c00 	.word	0x40013c00

08004574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	887b      	ldrh	r3, [r7, #2]
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e001      	b.n	8004596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004596:	7bfb      	ldrb	r3, [r7, #15]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]
 80045b0:	4613      	mov	r3, r2
 80045b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b4:	787b      	ldrb	r3, [r7, #1]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ba:	887a      	ldrh	r2, [r7, #2]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045c0:	e003      	b.n	80045ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045c2:	887b      	ldrh	r3, [r7, #2]
 80045c4:	041a      	lsls	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	619a      	str	r2, [r3, #24]
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045e8:	887a      	ldrh	r2, [r7, #2]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4013      	ands	r3, r2
 80045ee:	041a      	lsls	r2, r3, #16
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	43d9      	mvns	r1, r3
 80045f4:	887b      	ldrh	r3, [r7, #2]
 80045f6:	400b      	ands	r3, r1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	619a      	str	r2, [r3, #24]
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004616:	4b08      	ldr	r3, [pc, #32]	; (8004638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d006      	beq.n	8004630 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f806 	bl	800463c <HAL_GPIO_EXTI_Callback>
  }
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40013c00 	.word	0x40013c00

0800463c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e12b      	b.n	80048be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fd f842 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	; 0x24
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046b8:	f001 fb2c 	bl	8005d14 <HAL_RCC_GetPCLK1Freq>
 80046bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4a81      	ldr	r2, [pc, #516]	; (80048c8 <HAL_I2C_Init+0x274>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d807      	bhi.n	80046d8 <HAL_I2C_Init+0x84>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a80      	ldr	r2, [pc, #512]	; (80048cc <HAL_I2C_Init+0x278>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	bf94      	ite	ls
 80046d0:	2301      	movls	r3, #1
 80046d2:	2300      	movhi	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e006      	b.n	80046e6 <HAL_I2C_Init+0x92>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a7d      	ldr	r2, [pc, #500]	; (80048d0 <HAL_I2C_Init+0x27c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	bf94      	ite	ls
 80046e0:	2301      	movls	r3, #1
 80046e2:	2300      	movhi	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0e7      	b.n	80048be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a78      	ldr	r2, [pc, #480]	; (80048d4 <HAL_I2C_Init+0x280>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	0c9b      	lsrs	r3, r3, #18
 80046f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a6a      	ldr	r2, [pc, #424]	; (80048c8 <HAL_I2C_Init+0x274>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d802      	bhi.n	8004728 <HAL_I2C_Init+0xd4>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	3301      	adds	r3, #1
 8004726:	e009      	b.n	800473c <HAL_I2C_Init+0xe8>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	4a69      	ldr	r2, [pc, #420]	; (80048d8 <HAL_I2C_Init+0x284>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	3301      	adds	r3, #1
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	430b      	orrs	r3, r1
 8004742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800474e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	495c      	ldr	r1, [pc, #368]	; (80048c8 <HAL_I2C_Init+0x274>)
 8004758:	428b      	cmp	r3, r1
 800475a:	d819      	bhi.n	8004790 <HAL_I2C_Init+0x13c>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1e59      	subs	r1, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	fbb1 f3f3 	udiv	r3, r1, r3
 800476a:	1c59      	adds	r1, r3, #1
 800476c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004770:	400b      	ands	r3, r1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_I2C_Init+0x138>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1e59      	subs	r1, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fbb1 f3f3 	udiv	r3, r1, r3
 8004784:	3301      	adds	r3, #1
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478a:	e051      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 800478c:	2304      	movs	r3, #4
 800478e:	e04f      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d111      	bne.n	80047bc <HAL_I2C_Init+0x168>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e58      	subs	r0, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	440b      	add	r3, r1
 80047a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e012      	b.n	80047e2 <HAL_I2C_Init+0x18e>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e58      	subs	r0, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	0099      	lsls	r1, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Init+0x196>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e022      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10e      	bne.n	8004810 <HAL_I2C_Init+0x1bc>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1e58      	subs	r0, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	440b      	add	r3, r1
 8004800:	fbb0 f3f3 	udiv	r3, r0, r3
 8004804:	3301      	adds	r3, #1
 8004806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480e:	e00f      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e58      	subs	r0, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	0099      	lsls	r1, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	fbb0 f3f3 	udiv	r3, r0, r3
 8004826:	3301      	adds	r3, #1
 8004828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	6809      	ldr	r1, [r1, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800485e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6911      	ldr	r1, [r2, #16]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	430b      	orrs	r3, r1
 8004872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	000186a0 	.word	0x000186a0
 80048cc:	001e847f 	.word	0x001e847f
 80048d0:	003d08ff 	.word	0x003d08ff
 80048d4:	431bde83 	.word	0x431bde83
 80048d8:	10624dd3 	.word	0x10624dd3

080048dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	461a      	mov	r2, r3
 80048e8:	460b      	mov	r3, r1
 80048ea:	817b      	strh	r3, [r7, #10]
 80048ec:	4613      	mov	r3, r2
 80048ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f0:	f7fd fb18 	bl	8001f24 <HAL_GetTick>
 80048f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	f040 80e0 	bne.w	8004ac4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2319      	movs	r3, #25
 800490a:	2201      	movs	r2, #1
 800490c:	4970      	ldr	r1, [pc, #448]	; (8004ad0 <HAL_I2C_Master_Transmit+0x1f4>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fde8 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
 800491c:	e0d3      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_I2C_Master_Transmit+0x50>
 8004928:	2302      	movs	r3, #2
 800492a:	e0cc      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d007      	beq.n	8004952 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004960:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2221      	movs	r2, #33	; 0x21
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2210      	movs	r2, #16
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	893a      	ldrh	r2, [r7, #8]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a50      	ldr	r2, [pc, #320]	; (8004ad4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004994:	8979      	ldrh	r1, [r7, #10]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	6a3a      	ldr	r2, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fbbc 	bl	8005118 <I2C_MasterRequestWrite>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e08d      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049c0:	e066      	b.n	8004a90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	6a39      	ldr	r1, [r7, #32]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fe62 	bl	8005690 <I2C_WaitOnTXEFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d107      	bne.n	80049ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e06b      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d11b      	bne.n	8004a64 <HAL_I2C_Master_Transmit+0x188>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d017      	beq.n	8004a64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	6a39      	ldr	r1, [r7, #32]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fe52 	bl	8005712 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d107      	bne.n	8004a8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e01a      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d194      	bne.n	80049c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	00100002 	.word	0x00100002
 8004ad4:	ffff0000 	.word	0xffff0000

08004ad8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08c      	sub	sp, #48	; 0x30
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	817b      	strh	r3, [r7, #10]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aec:	f7fd fa1a 	bl	8001f24 <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	f040 820b 	bne.w	8004f16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2319      	movs	r3, #25
 8004b06:	2201      	movs	r2, #1
 8004b08:	497c      	ldr	r1, [pc, #496]	; (8004cfc <HAL_I2C_Master_Receive+0x224>)
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fcea 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
 8004b18:	e1fe      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_I2C_Master_Receive+0x50>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e1f7      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d007      	beq.n	8004b4e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2222      	movs	r2, #34	; 0x22
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	893a      	ldrh	r2, [r7, #8]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4a5c      	ldr	r2, [pc, #368]	; (8004d00 <HAL_I2C_Master_Receive+0x228>)
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b90:	8979      	ldrh	r1, [r7, #10]
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fb40 	bl	800521c <I2C_MasterRequestRead>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1b8      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d113      	bne.n	8004bd6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e18c      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d11b      	bne.n	8004c16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e16c      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d11b      	bne.n	8004c56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	e14c      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c7c:	e138      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	f200 80f1 	bhi.w	8004e6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d123      	bne.n	8004cd8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fd7d 	bl	8005794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e139      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cd6:	e10b      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d14e      	bne.n	8004d7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4906      	ldr	r1, [pc, #24]	; (8004d04 <HAL_I2C_Master_Receive+0x22c>)
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fbfa 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e10e      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
 8004cfa:	bf00      	nop
 8004cfc:	00100002 	.word	0x00100002
 8004d00:	ffff0000 	.word	0xffff0000
 8004d04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d7c:	e0b8      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	2200      	movs	r2, #0
 8004d86:	4966      	ldr	r1, [pc, #408]	; (8004f20 <HAL_I2C_Master_Receive+0x448>)
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fbab 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0bf      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	2200      	movs	r2, #0
 8004de2:	494f      	ldr	r1, [pc, #316]	; (8004f20 <HAL_I2C_Master_Receive+0x448>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fb7d 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e091      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e68:	e042      	b.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fc90 	bl	8005794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e04c      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d118      	bne.n	8004ef0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f aec2 	bne.w	8004c7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	; 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	00010004 	.word	0x00010004

08004f24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	817b      	strh	r3, [r7, #10]
 8004f36:	460b      	mov	r3, r1
 8004f38:	813b      	strh	r3, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f3e:	f7fc fff1 	bl	8001f24 <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	f040 80d9 	bne.w	8005104 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2319      	movs	r3, #25
 8004f58:	2201      	movs	r2, #1
 8004f5a:	496d      	ldr	r1, [pc, #436]	; (8005110 <HAL_I2C_Mem_Write+0x1ec>)
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fac1 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e0cc      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_I2C_Mem_Write+0x56>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0c5      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d007      	beq.n	8004fa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2221      	movs	r2, #33	; 0x21
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a4d      	ldr	r2, [pc, #308]	; (8005114 <HAL_I2C_Mem_Write+0x1f0>)
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fe2:	88f8      	ldrh	r0, [r7, #6]
 8004fe4:	893a      	ldrh	r2, [r7, #8]
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f9e0 	bl	80053b8 <I2C_RequestMemoryWrite>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d052      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e081      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fb42 	bl	8005690 <I2C_WaitOnTXEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b04      	cmp	r3, #4
 8005018:	d107      	bne.n	800502a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e06b      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d11b      	bne.n	80050a4 <HAL_I2C_Mem_Write+0x180>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d017      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1aa      	bne.n	8005002 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fb2e 	bl	8005712 <I2C_WaitOnBTFFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d107      	bne.n	80050d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e016      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	00100002 	.word	0x00100002
 8005114:	ffff0000 	.word	0xffff0000

08005118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	460b      	mov	r3, r1
 8005126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d006      	beq.n	8005142 <I2C_MasterRequestWrite+0x2a>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d003      	beq.n	8005142 <I2C_MasterRequestWrite+0x2a>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005140:	d108      	bne.n	8005154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e00b      	b.n	800516c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b12      	cmp	r3, #18
 800515a:	d107      	bne.n	800516c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f9b3 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d103      	bne.n	800519c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e035      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a8:	d108      	bne.n	80051bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	e01b      	b.n	80051f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051bc:	897b      	ldrh	r3, [r7, #10]
 80051be:	11db      	asrs	r3, r3, #7
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0306 	and.w	r3, r3, #6
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f063 030f 	orn	r3, r3, #15
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <I2C_MasterRequestWrite+0xfc>)
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f9d9 	bl	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e010      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4907      	ldr	r1, [pc, #28]	; (8005218 <I2C_MasterRequestWrite+0x100>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f9c9 	bl	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	00010008 	.word	0x00010008
 8005218:	00010002 	.word	0x00010002

0800521c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	460b      	mov	r3, r1
 800522a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005240:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d006      	beq.n	8005256 <I2C_MasterRequestRead+0x3a>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d003      	beq.n	8005256 <I2C_MasterRequestRead+0x3a>
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005254:	d108      	bne.n	8005268 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e00b      	b.n	8005280 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	2b11      	cmp	r3, #17
 800526e:	d107      	bne.n	8005280 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f929 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a6:	d103      	bne.n	80052b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e079      	b.n	80053a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052bc:	d108      	bne.n	80052d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052be:	897b      	ldrh	r3, [r7, #10]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	611a      	str	r2, [r3, #16]
 80052ce:	e05f      	b.n	8005390 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052d0:	897b      	ldrh	r3, [r7, #10]
 80052d2:	11db      	asrs	r3, r3, #7
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 0306 	and.w	r3, r3, #6
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f063 030f 	orn	r3, r3, #15
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4930      	ldr	r1, [pc, #192]	; (80053b0 <I2C_MasterRequestRead+0x194>)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f94f 	bl	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e054      	b.n	80053a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052fe:	897b      	ldrh	r3, [r7, #10]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4929      	ldr	r1, [pc, #164]	; (80053b4 <I2C_MasterRequestRead+0x198>)
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f93f 	bl	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e044      	b.n	80053a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005342:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f8c7 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536a:	d103      	bne.n	8005374 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e017      	b.n	80053a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005378:	897b      	ldrh	r3, [r7, #10]
 800537a:	11db      	asrs	r3, r3, #7
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f003 0306 	and.w	r3, r3, #6
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f063 030e 	orn	r3, r3, #14
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4907      	ldr	r1, [pc, #28]	; (80053b4 <I2C_MasterRequestRead+0x198>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f8fb 	bl	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	00010008 	.word	0x00010008
 80053b4:	00010002 	.word	0x00010002

080053b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	817b      	strh	r3, [r7, #10]
 80053ca:	460b      	mov	r3, r1
 80053cc:	813b      	strh	r3, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f878 	bl	80054e4 <I2C_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00d      	beq.n	8005416 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005408:	d103      	bne.n	8005412 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e05f      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	492d      	ldr	r1, [pc, #180]	; (80054e0 <I2C_RequestMemoryWrite+0x128>)
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f8b0 	bl	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e04c      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	6a39      	ldr	r1, [r7, #32]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f91a 	bl	8005690 <I2C_WaitOnTXEFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b04      	cmp	r3, #4
 8005468:	d107      	bne.n	800547a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e02b      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005484:	893b      	ldrh	r3, [r7, #8]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	611a      	str	r2, [r3, #16]
 800548e:	e021      	b.n	80054d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005490:	893b      	ldrh	r3, [r7, #8]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	b29b      	uxth	r3, r3
 8005496:	b2da      	uxtb	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	6a39      	ldr	r1, [r7, #32]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f8f4 	bl	8005690 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00d      	beq.n	80054ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d107      	bne.n	80054c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e005      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ca:	893b      	ldrh	r3, [r7, #8]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	00010002 	.word	0x00010002

080054e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f4:	e025      	b.n	8005542 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fc:	d021      	beq.n	8005542 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7fc fd11 	bl	8001f24 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <I2C_WaitOnFlagUntilTimeout+0x30>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d116      	bne.n	8005542 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f043 0220 	orr.w	r2, r3, #32
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e023      	b.n	800558a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	0c1b      	lsrs	r3, r3, #16
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10d      	bne.n	8005568 <I2C_WaitOnFlagUntilTimeout+0x84>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	43da      	mvns	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4013      	ands	r3, r2
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	bf0c      	ite	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	2300      	movne	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	e00c      	b.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	43da      	mvns	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf0c      	ite	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	2300      	movne	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	429a      	cmp	r2, r3
 8005586:	d0b6      	beq.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055a0:	e051      	b.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b0:	d123      	bne.n	80055fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f043 0204 	orr.w	r2, r3, #4
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e046      	b.n	8005688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005600:	d021      	beq.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fc fc8f 	bl	8001f24 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e020      	b.n	8005688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	0c1b      	lsrs	r3, r3, #16
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d10c      	bne.n	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	43da      	mvns	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4013      	ands	r3, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	bf14      	ite	ne
 8005662:	2301      	movne	r3, #1
 8005664:	2300      	moveq	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	e00b      	b.n	8005682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	43da      	mvns	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4013      	ands	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d18d      	bne.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800569c:	e02d      	b.n	80056fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f8ce 	bl	8005840 <I2C_IsAcknowledgeFailed>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e02d      	b.n	800570a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b4:	d021      	beq.n	80056fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7fc fc35 	bl	8001f24 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d302      	bcc.n	80056cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d116      	bne.n	80056fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f043 0220 	orr.w	r2, r3, #32
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e007      	b.n	800570a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	d1ca      	bne.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800571e:	e02d      	b.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f88d 	bl	8005840 <I2C_IsAcknowledgeFailed>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e02d      	b.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005736:	d021      	beq.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005738:	f7fc fbf4 	bl	8001f24 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d302      	bcc.n	800574e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d116      	bne.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e007      	b.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d1ca      	bne.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a0:	e042      	b.n	8005828 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d119      	bne.n	80057e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0210 	mvn.w	r2, #16
 80057b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e029      	b.n	8005838 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e4:	f7fc fb9e 	bl	8001f24 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d302      	bcc.n	80057fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d116      	bne.n	8005828 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f043 0220 	orr.w	r2, r3, #32
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e007      	b.n	8005838 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d1b5      	bne.n	80057a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005856:	d11b      	bne.n	8005890 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005860:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	f043 0204 	orr.w	r2, r3, #4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800589e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a0:	b08f      	sub	sp, #60	; 0x3c
 80058a2:	af0a      	add	r7, sp, #40	; 0x28
 80058a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e116      	b.n	8005ade <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fc f916 	bl	8001afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2203      	movs	r2, #3
 80058d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f003 fb27 	bl	8008f42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	687e      	ldr	r6, [r7, #4]
 80058fc:	466d      	mov	r5, sp
 80058fe:	f106 0410 	add.w	r4, r6, #16
 8005902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800590a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800590e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005912:	1d33      	adds	r3, r6, #4
 8005914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005916:	6838      	ldr	r0, [r7, #0]
 8005918:	f003 fab2 	bl	8008e80 <USB_CoreInit>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e0d7      	b.n	8005ade <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f003 fb15 	bl	8008f64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
 800593e:	e04a      	b.n	80059d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005940:	7bfa      	ldrb	r2, [r7, #15]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	333d      	adds	r3, #61	; 0x3d
 8005950:	2201      	movs	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005954:	7bfa      	ldrb	r2, [r7, #15]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	333c      	adds	r3, #60	; 0x3c
 8005964:	7bfa      	ldrb	r2, [r7, #15]
 8005966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005968:	7bfa      	ldrb	r2, [r7, #15]
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	b298      	uxth	r0, r3
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	3344      	adds	r3, #68	; 0x44
 800597c:	4602      	mov	r2, r0
 800597e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	3340      	adds	r3, #64	; 0x40
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005994:	7bfa      	ldrb	r2, [r7, #15]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	3348      	adds	r3, #72	; 0x48
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	334c      	adds	r3, #76	; 0x4c
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3354      	adds	r3, #84	; 0x54
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	3301      	adds	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	7bfa      	ldrb	r2, [r7, #15]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3af      	bcc.n	8005940 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e044      	b.n	8005a70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059fc:	7bfa      	ldrb	r2, [r7, #15]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005a0e:	7bfa      	ldrb	r2, [r7, #15]
 8005a10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a12:	7bfa      	ldrb	r2, [r7, #15]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a54:	7bfa      	ldrb	r2, [r7, #15]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
 8005a70:	7bfa      	ldrb	r2, [r7, #15]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3b5      	bcc.n	80059e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	687e      	ldr	r6, [r7, #4]
 8005a82:	466d      	mov	r5, sp
 8005a84:	f106 0410 	add.w	r4, r6, #16
 8005a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a94:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a98:	1d33      	adds	r3, r6, #4
 8005a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a9c:	6838      	ldr	r0, [r7, #0]
 8005a9e:	f003 faad 	bl	8008ffc <USB_DevInit>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e014      	b.n	8005ade <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d102      	bne.n	8005ad2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f80a 	bl	8005ae6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f003 fc6b 	bl	80093b2 <USB_DevDisconnect>

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ae6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b18:	f043 0303 	orr.w	r3, r3, #3
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0cc      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b44:	4b68      	ldr	r3, [pc, #416]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d90c      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b52:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5a:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0b8      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d020      	beq.n	8005bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4a58      	ldr	r2, [pc, #352]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b9c:	4b53      	ldr	r3, [pc, #332]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a52      	ldr	r2, [pc, #328]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba8:	4b50      	ldr	r3, [pc, #320]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	494d      	ldr	r1, [pc, #308]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d044      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	4b47      	ldr	r3, [pc, #284]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d119      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07f      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d003      	beq.n	8005bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d107      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bee:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e06f      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfe:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e067      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0e:	4b37      	ldr	r3, [pc, #220]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 0203 	bic.w	r2, r3, #3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4934      	ldr	r1, [pc, #208]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c20:	f7fc f980 	bl	8001f24 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c28:	f7fc f97c 	bl	8001f24 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e04f      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 020c 	and.w	r2, r3, #12
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d1eb      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c50:	4b25      	ldr	r3, [pc, #148]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d20c      	bcs.n	8005c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5e:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e032      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c84:	4b19      	ldr	r3, [pc, #100]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	4916      	ldr	r1, [pc, #88]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	490e      	ldr	r1, [pc, #56]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb6:	f000 fb7f 	bl	80063b8 <HAL_RCC_GetSysClockFreq>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	490a      	ldr	r1, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc8:	5ccb      	ldrb	r3, [r1, r3]
 8005cca:	fa22 f303 	lsr.w	r3, r2, r3
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fc f8e0 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023c00 	.word	0x40023c00
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	0800a064 	.word	0x0800a064
 8005cf4:	20000008 	.word	0x20000008
 8005cf8:	2000000c 	.word	0x2000000c

08005cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d02:	681b      	ldr	r3, [r3, #0]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000008 	.word	0x20000008

08005d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d18:	f7ff fff0 	bl	8005cfc <HAL_RCC_GetHCLKFreq>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	0a9b      	lsrs	r3, r3, #10
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	4903      	ldr	r1, [pc, #12]	; (8005d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2a:	5ccb      	ldrb	r3, [r1, r3]
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40023800 	.word	0x40023800
 8005d38:	0800a074 	.word	0x0800a074

08005d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d40:	f7ff ffdc 	bl	8005cfc <HAL_RCC_GetHCLKFreq>
 8005d44:	4602      	mov	r2, r0
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	0b5b      	lsrs	r3, r3, #13
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	4903      	ldr	r1, [pc, #12]	; (8005d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d52:	5ccb      	ldrb	r3, [r1, r3]
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0800a074 	.word	0x0800a074

08005d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08c      	sub	sp, #48	; 0x30
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005d9c:	4b6f      	ldr	r3, [pc, #444]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	496c      	ldr	r1, [pc, #432]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d010      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005dca:	4b64      	ldr	r3, [pc, #400]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dd0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	4960      	ldr	r1, [pc, #384]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005de8:	2301      	movs	r3, #1
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d017      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005df8:	4b58      	ldr	r3, [pc, #352]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	4955      	ldr	r1, [pc, #340]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e16:	d101      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005e24:	2301      	movs	r3, #1
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d017      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e34:	4b49      	ldr	r3, [pc, #292]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	4946      	ldr	r1, [pc, #280]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e52:	d101      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005e54:	2301      	movs	r3, #1
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005e60:	2301      	movs	r3, #1
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 808a 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	4b39      	ldr	r3, [pc, #228]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	4a38      	ldr	r2, [pc, #224]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e80:	6413      	str	r3, [r2, #64]	; 0x40
 8005e82:	4b36      	ldr	r3, [pc, #216]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e8e:	4b34      	ldr	r3, [pc, #208]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a33      	ldr	r2, [pc, #204]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e9a:	f7fc f843 	bl	8001f24 <HAL_GetTick>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ea2:	f7fc f83f 	bl	8001f24 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e278      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005eb4:	4b2a      	ldr	r3, [pc, #168]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f0      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ec0:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d02f      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed8:	6a3a      	ldr	r2, [r7, #32]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d028      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005efa:	4b18      	ldr	r3, [pc, #96]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d114      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f06:	f7fc f80d 	bl	8001f24 <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0c:	e00a      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f0e:	f7fc f809 	bl	8001f24 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e240      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f24:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ee      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f3c:	d114      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	4902      	ldr	r1, [pc, #8]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]
 8005f58:	e00c      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005f5a:	bf00      	nop
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	40007000 	.word	0x40007000
 8005f64:	42470e40 	.word	0x42470e40
 8005f68:	4b4a      	ldr	r3, [pc, #296]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4a49      	ldr	r2, [pc, #292]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f72:	6093      	str	r3, [r2, #8]
 8005f74:	4b47      	ldr	r3, [pc, #284]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f80:	4944      	ldr	r1, [pc, #272]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005f98:	4b3f      	ldr	r3, [pc, #252]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005f9a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005fa8:	4b3a      	ldr	r3, [pc, #232]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb6:	4937      	ldr	r1, [pc, #220]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fca:	4b32      	ldr	r3, [pc, #200]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd8:	492e      	ldr	r1, [pc, #184]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d011      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005fec:	4b29      	ldr	r3, [pc, #164]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	4926      	ldr	r1, [pc, #152]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800600a:	d101      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800600c:	2301      	movs	r3, #1
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800601e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006022:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	491a      	ldr	r1, [pc, #104]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603a:	2b00      	cmp	r3, #0
 800603c:	d011      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800603e:	4b15      	ldr	r3, [pc, #84]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006044:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	4911      	ldr	r1, [pc, #68]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605c:	d101      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800605e:	2301      	movs	r3, #1
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d005      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006070:	f040 80ff 	bne.w	8006272 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006074:	4b09      	ldr	r3, [pc, #36]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800607a:	f7fb ff53 	bl	8001f24 <HAL_GetTick>
 800607e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006080:	e00e      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006082:	f7fb ff4f 	bl	8001f24 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d907      	bls.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e188      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006094:	40023800 	.word	0x40023800
 8006098:	424711e0 	.word	0x424711e0
 800609c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a0:	4b7e      	ldr	r3, [pc, #504]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1ea      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d028      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d124      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80060d4:	4b71      	ldr	r3, [pc, #452]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	3301      	adds	r3, #1
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060e6:	4b6d      	ldr	r3, [pc, #436]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ec:	0e1b      	lsrs	r3, r3, #24
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	019b      	lsls	r3, r3, #6
 80060fe:	431a      	orrs	r2, r3
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	3b01      	subs	r3, #1
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	431a      	orrs	r2, r3
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	061b      	lsls	r3, r3, #24
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	071b      	lsls	r3, r3, #28
 8006116:	4961      	ldr	r1, [pc, #388]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006132:	d00a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800613c:	2b00      	cmp	r3, #0
 800613e:	d035      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006148:	d130      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800614a:	4b54      	ldr	r3, [pc, #336]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800614c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	3301      	adds	r3, #1
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800615c:	4b4f      	ldr	r3, [pc, #316]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800615e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006162:	0f1b      	lsrs	r3, r3, #28
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	019b      	lsls	r3, r3, #6
 8006174:	431a      	orrs	r2, r3
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	3b01      	subs	r3, #1
 800617c:	041b      	lsls	r3, r3, #16
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	061b      	lsls	r3, r3, #24
 8006186:	431a      	orrs	r2, r3
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	071b      	lsls	r3, r3, #28
 800618c:	4943      	ldr	r1, [pc, #268]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006194:	4b41      	ldr	r3, [pc, #260]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800619a:	f023 021f 	bic.w	r2, r3, #31
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	3b01      	subs	r3, #1
 80061a4:	493d      	ldr	r1, [pc, #244]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d029      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c0:	d124      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80061c2:	4b36      	ldr	r3, [pc, #216]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	3301      	adds	r3, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061d4:	4b31      	ldr	r3, [pc, #196]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061da:	0f1b      	lsrs	r3, r3, #28
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	019b      	lsls	r3, r3, #6
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	3b01      	subs	r3, #1
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	431a      	orrs	r2, r3
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	061b      	lsls	r3, r3, #24
 80061fe:	431a      	orrs	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	071b      	lsls	r3, r3, #28
 8006204:	4925      	ldr	r1, [pc, #148]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006214:	2b00      	cmp	r3, #0
 8006216:	d016      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	019b      	lsls	r3, r3, #6
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	3b01      	subs	r3, #1
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	061b      	lsls	r3, r3, #24
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	071b      	lsls	r3, r3, #28
 800623e:	4917      	ldr	r1, [pc, #92]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006246:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800624c:	f7fb fe6a 	bl	8001f24 <HAL_GetTick>
 8006250:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006252:	e008      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006254:	f7fb fe66 	bl	8001f24 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d901      	bls.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e09f      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f0      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	2b01      	cmp	r3, #1
 8006276:	f040 8095 	bne.w	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800627a:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006280:	f7fb fe50 	bl	8001f24 <HAL_GetTick>
 8006284:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006286:	e00f      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006288:	f7fb fe4c 	bl	8001f24 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d908      	bls.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e085      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800
 80062a0:	42470068 	.word	0x42470068
 80062a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062a8:	4b41      	ldr	r3, [pc, #260]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b4:	d0e8      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d02b      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d127      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80062de:	4b34      	ldr	r3, [pc, #208]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	3301      	adds	r3, #1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	019b      	lsls	r3, r3, #6
 80062fa:	431a      	orrs	r2, r3
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	3b01      	subs	r3, #1
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	061b      	lsls	r3, r3, #24
 800630c:	4928      	ldr	r1, [pc, #160]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006314:	4b26      	ldr	r3, [pc, #152]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	3b01      	subs	r3, #1
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	4922      	ldr	r1, [pc, #136]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01d      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006342:	d118      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006344:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	0e1b      	lsrs	r3, r3, #24
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	019b      	lsls	r3, r3, #6
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	3b01      	subs	r3, #1
 8006366:	041b      	lsls	r3, r3, #16
 8006368:	431a      	orrs	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	061b      	lsls	r3, r3, #24
 800636e:	4910      	ldr	r1, [pc, #64]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006376:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800637c:	f7fb fdd2 	bl	8001f24 <HAL_GetTick>
 8006380:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006384:	f7fb fdce 	bl	8001f24 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e007      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006396:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a2:	d1ef      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3730      	adds	r7, #48	; 0x30
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023800 	.word	0x40023800
 80063b4:	42470070 	.word	0x42470070

080063b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063bc:	b0ae      	sub	sp, #184	; 0xb8
 80063be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063de:	4bcb      	ldr	r3, [pc, #812]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	f200 8206 	bhi.w	80067f8 <HAL_RCC_GetSysClockFreq+0x440>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006429 	.word	0x08006429
 80063f8:	080067f9 	.word	0x080067f9
 80063fc:	080067f9 	.word	0x080067f9
 8006400:	080067f9 	.word	0x080067f9
 8006404:	08006431 	.word	0x08006431
 8006408:	080067f9 	.word	0x080067f9
 800640c:	080067f9 	.word	0x080067f9
 8006410:	080067f9 	.word	0x080067f9
 8006414:	08006439 	.word	0x08006439
 8006418:	080067f9 	.word	0x080067f9
 800641c:	080067f9 	.word	0x080067f9
 8006420:	080067f9 	.word	0x080067f9
 8006424:	08006629 	.word	0x08006629
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006428:	4bb9      	ldr	r3, [pc, #740]	; (8006710 <HAL_RCC_GetSysClockFreq+0x358>)
 800642a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800642e:	e1e7      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006430:	4bb8      	ldr	r3, [pc, #736]	; (8006714 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006436:	e1e3      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006438:	4bb4      	ldr	r3, [pc, #720]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006444:	4bb1      	ldr	r3, [pc, #708]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d071      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006450:	4bae      	ldr	r3, [pc, #696]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	099b      	lsrs	r3, r3, #6
 8006456:	2200      	movs	r2, #0
 8006458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800645c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006476:	4622      	mov	r2, r4
 8006478:	462b      	mov	r3, r5
 800647a:	f04f 0000 	mov.w	r0, #0
 800647e:	f04f 0100 	mov.w	r1, #0
 8006482:	0159      	lsls	r1, r3, #5
 8006484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006488:	0150      	lsls	r0, r2, #5
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4621      	mov	r1, r4
 8006490:	1a51      	subs	r1, r2, r1
 8006492:	6439      	str	r1, [r7, #64]	; 0x40
 8006494:	4629      	mov	r1, r5
 8006496:	eb63 0301 	sbc.w	r3, r3, r1
 800649a:	647b      	str	r3, [r7, #68]	; 0x44
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80064a8:	4649      	mov	r1, r9
 80064aa:	018b      	lsls	r3, r1, #6
 80064ac:	4641      	mov	r1, r8
 80064ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064b2:	4641      	mov	r1, r8
 80064b4:	018a      	lsls	r2, r1, #6
 80064b6:	4641      	mov	r1, r8
 80064b8:	1a51      	subs	r1, r2, r1
 80064ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80064bc:	4649      	mov	r1, r9
 80064be:	eb63 0301 	sbc.w	r3, r3, r1
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80064d0:	4649      	mov	r1, r9
 80064d2:	00cb      	lsls	r3, r1, #3
 80064d4:	4641      	mov	r1, r8
 80064d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064da:	4641      	mov	r1, r8
 80064dc:	00ca      	lsls	r2, r1, #3
 80064de:	4610      	mov	r0, r2
 80064e0:	4619      	mov	r1, r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	4622      	mov	r2, r4
 80064e6:	189b      	adds	r3, r3, r2
 80064e8:	633b      	str	r3, [r7, #48]	; 0x30
 80064ea:	462b      	mov	r3, r5
 80064ec:	460a      	mov	r2, r1
 80064ee:	eb42 0303 	adc.w	r3, r2, r3
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006500:	4629      	mov	r1, r5
 8006502:	024b      	lsls	r3, r1, #9
 8006504:	4621      	mov	r1, r4
 8006506:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800650a:	4621      	mov	r1, r4
 800650c:	024a      	lsls	r2, r1, #9
 800650e:	4610      	mov	r0, r2
 8006510:	4619      	mov	r1, r3
 8006512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006516:	2200      	movs	r2, #0
 8006518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800651c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006520:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006524:	f7f9 fecc 	bl	80002c0 <__aeabi_uldivmod>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4613      	mov	r3, r2
 800652e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006532:	e067      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006534:	4b75      	ldr	r3, [pc, #468]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	099b      	lsrs	r3, r3, #6
 800653a:	2200      	movs	r2, #0
 800653c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006540:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654c:	67bb      	str	r3, [r7, #120]	; 0x78
 800654e:	2300      	movs	r3, #0
 8006550:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006552:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006556:	4622      	mov	r2, r4
 8006558:	462b      	mov	r3, r5
 800655a:	f04f 0000 	mov.w	r0, #0
 800655e:	f04f 0100 	mov.w	r1, #0
 8006562:	0159      	lsls	r1, r3, #5
 8006564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006568:	0150      	lsls	r0, r2, #5
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4621      	mov	r1, r4
 8006570:	1a51      	subs	r1, r2, r1
 8006572:	62b9      	str	r1, [r7, #40]	; 0x28
 8006574:	4629      	mov	r1, r5
 8006576:	eb63 0301 	sbc.w	r3, r3, r1
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006588:	4649      	mov	r1, r9
 800658a:	018b      	lsls	r3, r1, #6
 800658c:	4641      	mov	r1, r8
 800658e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006592:	4641      	mov	r1, r8
 8006594:	018a      	lsls	r2, r1, #6
 8006596:	4641      	mov	r1, r8
 8006598:	ebb2 0a01 	subs.w	sl, r2, r1
 800659c:	4649      	mov	r1, r9
 800659e:	eb63 0b01 	sbc.w	fp, r3, r1
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065b6:	4692      	mov	sl, r2
 80065b8:	469b      	mov	fp, r3
 80065ba:	4623      	mov	r3, r4
 80065bc:	eb1a 0303 	adds.w	r3, sl, r3
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	462b      	mov	r3, r5
 80065c4:	eb4b 0303 	adc.w	r3, fp, r3
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80065d6:	4629      	mov	r1, r5
 80065d8:	028b      	lsls	r3, r1, #10
 80065da:	4621      	mov	r1, r4
 80065dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065e0:	4621      	mov	r1, r4
 80065e2:	028a      	lsls	r2, r1, #10
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065ec:	2200      	movs	r2, #0
 80065ee:	673b      	str	r3, [r7, #112]	; 0x70
 80065f0:	677a      	str	r2, [r7, #116]	; 0x74
 80065f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80065f6:	f7f9 fe63 	bl	80002c0 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4613      	mov	r3, r2
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006604:	4b41      	ldr	r3, [pc, #260]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	3301      	adds	r3, #1
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800661a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800661e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006626:	e0eb      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006628:	4b38      	ldr	r3, [pc, #224]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006634:	4b35      	ldr	r3, [pc, #212]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d06b      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006640:	4b32      	ldr	r3, [pc, #200]	; (800670c <HAL_RCC_GetSysClockFreq+0x354>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	099b      	lsrs	r3, r3, #6
 8006646:	2200      	movs	r2, #0
 8006648:	66bb      	str	r3, [r7, #104]	; 0x68
 800664a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800664c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800664e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006652:	663b      	str	r3, [r7, #96]	; 0x60
 8006654:	2300      	movs	r3, #0
 8006656:	667b      	str	r3, [r7, #100]	; 0x64
 8006658:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800665c:	4622      	mov	r2, r4
 800665e:	462b      	mov	r3, r5
 8006660:	f04f 0000 	mov.w	r0, #0
 8006664:	f04f 0100 	mov.w	r1, #0
 8006668:	0159      	lsls	r1, r3, #5
 800666a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800666e:	0150      	lsls	r0, r2, #5
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4621      	mov	r1, r4
 8006676:	1a51      	subs	r1, r2, r1
 8006678:	61b9      	str	r1, [r7, #24]
 800667a:	4629      	mov	r1, r5
 800667c:	eb63 0301 	sbc.w	r3, r3, r1
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	f04f 0300 	mov.w	r3, #0
 800668a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800668e:	4659      	mov	r1, fp
 8006690:	018b      	lsls	r3, r1, #6
 8006692:	4651      	mov	r1, sl
 8006694:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006698:	4651      	mov	r1, sl
 800669a:	018a      	lsls	r2, r1, #6
 800669c:	4651      	mov	r1, sl
 800669e:	ebb2 0801 	subs.w	r8, r2, r1
 80066a2:	4659      	mov	r1, fp
 80066a4:	eb63 0901 	sbc.w	r9, r3, r1
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066bc:	4690      	mov	r8, r2
 80066be:	4699      	mov	r9, r3
 80066c0:	4623      	mov	r3, r4
 80066c2:	eb18 0303 	adds.w	r3, r8, r3
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	462b      	mov	r3, r5
 80066ca:	eb49 0303 	adc.w	r3, r9, r3
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80066dc:	4629      	mov	r1, r5
 80066de:	024b      	lsls	r3, r1, #9
 80066e0:	4621      	mov	r1, r4
 80066e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066e6:	4621      	mov	r1, r4
 80066e8:	024a      	lsls	r2, r1, #9
 80066ea:	4610      	mov	r0, r2
 80066ec:	4619      	mov	r1, r3
 80066ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066f2:	2200      	movs	r2, #0
 80066f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80066f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066fc:	f7f9 fde0 	bl	80002c0 <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4613      	mov	r3, r2
 8006706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800670a:	e065      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x420>
 800670c:	40023800 	.word	0x40023800
 8006710:	00f42400 	.word	0x00f42400
 8006714:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006718:	4b3d      	ldr	r3, [pc, #244]	; (8006810 <HAL_RCC_GetSysClockFreq+0x458>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	099b      	lsrs	r3, r3, #6
 800671e:	2200      	movs	r2, #0
 8006720:	4618      	mov	r0, r3
 8006722:	4611      	mov	r1, r2
 8006724:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006728:	653b      	str	r3, [r7, #80]	; 0x50
 800672a:	2300      	movs	r3, #0
 800672c:	657b      	str	r3, [r7, #84]	; 0x54
 800672e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	f04f 0000 	mov.w	r0, #0
 800673a:	f04f 0100 	mov.w	r1, #0
 800673e:	0159      	lsls	r1, r3, #5
 8006740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006744:	0150      	lsls	r0, r2, #5
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4641      	mov	r1, r8
 800674c:	1a51      	subs	r1, r2, r1
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	4649      	mov	r1, r9
 8006752:	eb63 0301 	sbc.w	r3, r3, r1
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006764:	4659      	mov	r1, fp
 8006766:	018b      	lsls	r3, r1, #6
 8006768:	4651      	mov	r1, sl
 800676a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800676e:	4651      	mov	r1, sl
 8006770:	018a      	lsls	r2, r1, #6
 8006772:	4651      	mov	r1, sl
 8006774:	1a54      	subs	r4, r2, r1
 8006776:	4659      	mov	r1, fp
 8006778:	eb63 0501 	sbc.w	r5, r3, r1
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	00eb      	lsls	r3, r5, #3
 8006786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800678a:	00e2      	lsls	r2, r4, #3
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	4643      	mov	r3, r8
 8006792:	18e3      	adds	r3, r4, r3
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	464b      	mov	r3, r9
 8006798:	eb45 0303 	adc.w	r3, r5, r3
 800679c:	607b      	str	r3, [r7, #4]
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067aa:	4629      	mov	r1, r5
 80067ac:	028b      	lsls	r3, r1, #10
 80067ae:	4621      	mov	r1, r4
 80067b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067b4:	4621      	mov	r1, r4
 80067b6:	028a      	lsls	r2, r1, #10
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c0:	2200      	movs	r2, #0
 80067c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80067c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067ca:	f7f9 fd79 	bl	80002c0 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4613      	mov	r3, r2
 80067d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80067d8:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <HAL_RCC_GetSysClockFreq+0x458>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	0f1b      	lsrs	r3, r3, #28
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80067e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80067f6:	e003      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <HAL_RCC_GetSysClockFreq+0x45c>)
 80067fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80067fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006804:	4618      	mov	r0, r3
 8006806:	37b8      	adds	r7, #184	; 0xb8
 8006808:	46bd      	mov	sp, r7
 800680a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800680e:	bf00      	nop
 8006810:	40023800 	.word	0x40023800
 8006814:	00f42400 	.word	0x00f42400

08006818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e28d      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 8083 	beq.w	800693e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006838:	4b94      	ldr	r3, [pc, #592]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 030c 	and.w	r3, r3, #12
 8006840:	2b04      	cmp	r3, #4
 8006842:	d019      	beq.n	8006878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006844:	4b91      	ldr	r3, [pc, #580]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800684c:	2b08      	cmp	r3, #8
 800684e:	d106      	bne.n	800685e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006850:	4b8e      	ldr	r3, [pc, #568]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685c:	d00c      	beq.n	8006878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800685e:	4b8b      	ldr	r3, [pc, #556]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006866:	2b0c      	cmp	r3, #12
 8006868:	d112      	bne.n	8006890 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800686a:	4b88      	ldr	r3, [pc, #544]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006876:	d10b      	bne.n	8006890 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006878:	4b84      	ldr	r3, [pc, #528]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d05b      	beq.n	800693c <HAL_RCC_OscConfig+0x124>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d157      	bne.n	800693c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e25a      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006898:	d106      	bne.n	80068a8 <HAL_RCC_OscConfig+0x90>
 800689a:	4b7c      	ldr	r3, [pc, #496]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a7b      	ldr	r2, [pc, #492]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e01d      	b.n	80068e4 <HAL_RCC_OscConfig+0xcc>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068b0:	d10c      	bne.n	80068cc <HAL_RCC_OscConfig+0xb4>
 80068b2:	4b76      	ldr	r3, [pc, #472]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a75      	ldr	r2, [pc, #468]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	4b73      	ldr	r3, [pc, #460]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a72      	ldr	r2, [pc, #456]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e00b      	b.n	80068e4 <HAL_RCC_OscConfig+0xcc>
 80068cc:	4b6f      	ldr	r3, [pc, #444]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a6e      	ldr	r2, [pc, #440]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	4b6c      	ldr	r3, [pc, #432]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a6b      	ldr	r2, [pc, #428]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80068de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d013      	beq.n	8006914 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fb fb1a 	bl	8001f24 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068f4:	f7fb fb16 	bl	8001f24 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b64      	cmp	r3, #100	; 0x64
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e21f      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006906:	4b61      	ldr	r3, [pc, #388]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCC_OscConfig+0xdc>
 8006912:	e014      	b.n	800693e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006914:	f7fb fb06 	bl	8001f24 <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800691c:	f7fb fb02 	bl	8001f24 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b64      	cmp	r3, #100	; 0x64
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e20b      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800692e:	4b57      	ldr	r3, [pc, #348]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <HAL_RCC_OscConfig+0x104>
 800693a:	e000      	b.n	800693e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800693c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d06f      	beq.n	8006a2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800694a:	4b50      	ldr	r3, [pc, #320]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 030c 	and.w	r3, r3, #12
 8006952:	2b00      	cmp	r3, #0
 8006954:	d017      	beq.n	8006986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006956:	4b4d      	ldr	r3, [pc, #308]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800695e:	2b08      	cmp	r3, #8
 8006960:	d105      	bne.n	800696e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006962:	4b4a      	ldr	r3, [pc, #296]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800696e:	4b47      	ldr	r3, [pc, #284]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d11c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800697a:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d116      	bne.n	80069b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006986:	4b41      	ldr	r3, [pc, #260]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_RCC_OscConfig+0x186>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d001      	beq.n	800699e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e1d3      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699e:	4b3b      	ldr	r3, [pc, #236]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	4937      	ldr	r1, [pc, #220]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069b2:	e03a      	b.n	8006a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d020      	beq.n	80069fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069bc:	4b34      	ldr	r3, [pc, #208]	; (8006a90 <HAL_RCC_OscConfig+0x278>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c2:	f7fb faaf 	bl	8001f24 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ca:	f7fb faab 	bl	8001f24 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e1b4      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069dc:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e8:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4925      	ldr	r1, [pc, #148]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	600b      	str	r3, [r1, #0]
 80069fc:	e015      	b.n	8006a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069fe:	4b24      	ldr	r3, [pc, #144]	; (8006a90 <HAL_RCC_OscConfig+0x278>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fb fa8e 	bl	8001f24 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a0c:	f7fb fa8a 	bl	8001f24 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e193      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a1e:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f0      	bne.n	8006a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d036      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a3e:	4b15      	ldr	r3, [pc, #84]	; (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a44:	f7fb fa6e 	bl	8001f24 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a4c:	f7fb fa6a 	bl	8001f24 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e173      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <HAL_RCC_OscConfig+0x274>)
 8006a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f0      	beq.n	8006a4c <HAL_RCC_OscConfig+0x234>
 8006a6a:	e01b      	b.n	8006aa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a6c:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a72:	f7fb fa57 	bl	8001f24 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a78:	e00e      	b.n	8006a98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a7a:	f7fb fa53 	bl	8001f24 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d907      	bls.n	8006a98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e15c      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	42470000 	.word	0x42470000
 8006a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a98:	4b8a      	ldr	r3, [pc, #552]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1ea      	bne.n	8006a7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8097 	beq.w	8006be0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ab6:	4b83      	ldr	r3, [pc, #524]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10f      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]
 8006ac6:	4b7f      	ldr	r3, [pc, #508]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	4a7e      	ldr	r2, [pc, #504]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ad2:	4b7c      	ldr	r3, [pc, #496]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae2:	4b79      	ldr	r3, [pc, #484]	; (8006cc8 <HAL_RCC_OscConfig+0x4b0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d118      	bne.n	8006b20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aee:	4b76      	ldr	r3, [pc, #472]	; (8006cc8 <HAL_RCC_OscConfig+0x4b0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a75      	ldr	r2, [pc, #468]	; (8006cc8 <HAL_RCC_OscConfig+0x4b0>)
 8006af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006afa:	f7fb fa13 	bl	8001f24 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b02:	f7fb fa0f 	bl	8001f24 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e118      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b14:	4b6c      	ldr	r3, [pc, #432]	; (8006cc8 <HAL_RCC_OscConfig+0x4b0>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d106      	bne.n	8006b36 <HAL_RCC_OscConfig+0x31e>
 8006b28:	4b66      	ldr	r3, [pc, #408]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	4a65      	ldr	r2, [pc, #404]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	6713      	str	r3, [r2, #112]	; 0x70
 8006b34:	e01c      	b.n	8006b70 <HAL_RCC_OscConfig+0x358>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	d10c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x340>
 8006b3e:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	4a60      	ldr	r2, [pc, #384]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b44:	f043 0304 	orr.w	r3, r3, #4
 8006b48:	6713      	str	r3, [r2, #112]	; 0x70
 8006b4a:	4b5e      	ldr	r3, [pc, #376]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	4a5d      	ldr	r2, [pc, #372]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	6713      	str	r3, [r2, #112]	; 0x70
 8006b56:	e00b      	b.n	8006b70 <HAL_RCC_OscConfig+0x358>
 8006b58:	4b5a      	ldr	r3, [pc, #360]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5c:	4a59      	ldr	r2, [pc, #356]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b5e:	f023 0301 	bic.w	r3, r3, #1
 8006b62:	6713      	str	r3, [r2, #112]	; 0x70
 8006b64:	4b57      	ldr	r3, [pc, #348]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	4a56      	ldr	r2, [pc, #344]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b6a:	f023 0304 	bic.w	r3, r3, #4
 8006b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d015      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b78:	f7fb f9d4 	bl	8001f24 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b80:	f7fb f9d0 	bl	8001f24 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e0d7      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b96:	4b4b      	ldr	r3, [pc, #300]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0ee      	beq.n	8006b80 <HAL_RCC_OscConfig+0x368>
 8006ba2:	e014      	b.n	8006bce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba4:	f7fb f9be 	bl	8001f24 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bac:	f7fb f9ba 	bl	8001f24 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e0c1      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc2:	4b40      	ldr	r3, [pc, #256]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1ee      	bne.n	8006bac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd4:	4b3b      	ldr	r3, [pc, #236]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	4a3a      	ldr	r2, [pc, #232]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80ad 	beq.w	8006d44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bea:	4b36      	ldr	r3, [pc, #216]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d060      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d145      	bne.n	8006c8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfe:	4b33      	ldr	r3, [pc, #204]	; (8006ccc <HAL_RCC_OscConfig+0x4b4>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fb f98e 	bl	8001f24 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0c:	f7fb f98a 	bl	8001f24 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e093      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1e:	4b29      	ldr	r3, [pc, #164]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f0      	bne.n	8006c0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69da      	ldr	r2, [r3, #28]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	019b      	lsls	r3, r3, #6
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	085b      	lsrs	r3, r3, #1
 8006c42:	3b01      	subs	r3, #1
 8006c44:	041b      	lsls	r3, r3, #16
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	071b      	lsls	r3, r3, #28
 8006c56:	491b      	ldr	r1, [pc, #108]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <HAL_RCC_OscConfig+0x4b4>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c62:	f7fb f95f 	bl	8001f24 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c6a:	f7fb f95b 	bl	8001f24 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e064      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCC_OscConfig+0x452>
 8006c88:	e05c      	b.n	8006d44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <HAL_RCC_OscConfig+0x4b4>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fb f948 	bl	8001f24 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fb f944 	bl	8001f24 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e04d      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_RCC_OscConfig+0x4ac>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x480>
 8006cb6:	e045      	b.n	8006d44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e040      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	40007000 	.word	0x40007000
 8006ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cd0:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <HAL_RCC_OscConfig+0x538>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d030      	beq.n	8006d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d129      	bne.n	8006d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d122      	bne.n	8006d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d119      	bne.n	8006d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d10f      	bne.n	8006d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800

08006d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e041      	b.n	8006dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fa fd2c 	bl	80017d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f000 fb40 	bl	8007418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e041      	b.n	8006e88 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fa fcbb 	bl	8001794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f000 faf1 	bl	8007418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d109      	bne.n	8006eb4 <HAL_TIM_PWM_Start+0x24>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e022      	b.n	8006efa <HAL_TIM_PWM_Start+0x6a>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d109      	bne.n	8006ece <HAL_TIM_PWM_Start+0x3e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	bf14      	ite	ne
 8006ec6:	2301      	movne	r3, #1
 8006ec8:	2300      	moveq	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	e015      	b.n	8006efa <HAL_TIM_PWM_Start+0x6a>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d109      	bne.n	8006ee8 <HAL_TIM_PWM_Start+0x58>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	bf14      	ite	ne
 8006ee0:	2301      	movne	r3, #1
 8006ee2:	2300      	moveq	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	e008      	b.n	8006efa <HAL_TIM_PWM_Start+0x6a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bf14      	ite	ne
 8006ef4:	2301      	movne	r3, #1
 8006ef6:	2300      	moveq	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e07c      	b.n	8006ffc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_PWM_Start+0x82>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f10:	e013      	b.n	8006f3a <HAL_TIM_PWM_Start+0xaa>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0x92>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f20:	e00b      	b.n	8006f3a <HAL_TIM_PWM_Start+0xaa>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0xa2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f30:	e003      	b.n	8006f3a <HAL_TIM_PWM_Start+0xaa>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fcb8 	bl	80078b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a2d      	ldr	r2, [pc, #180]	; (8007004 <HAL_TIM_PWM_Start+0x174>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_TIM_PWM_Start+0xcc>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <HAL_TIM_PWM_Start+0x178>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIM_PWM_Start+0xd0>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <HAL_TIM_PWM_Start+0xd2>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a22      	ldr	r2, [pc, #136]	; (8007004 <HAL_TIM_PWM_Start+0x174>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x136>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d01d      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x136>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <HAL_TIM_PWM_Start+0x17c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x136>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <HAL_TIM_PWM_Start+0x180>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x136>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1c      	ldr	r2, [pc, #112]	; (8007014 <HAL_TIM_PWM_Start+0x184>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x136>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a16      	ldr	r2, [pc, #88]	; (8007008 <HAL_TIM_PWM_Start+0x178>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x136>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a18      	ldr	r2, [pc, #96]	; (8007018 <HAL_TIM_PWM_Start+0x188>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x136>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a16      	ldr	r2, [pc, #88]	; (800701c <HAL_TIM_PWM_Start+0x18c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d111      	bne.n	8006fea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b06      	cmp	r3, #6
 8006fd6:	d010      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe8:	e007      	b.n	8006ffa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40010000 	.word	0x40010000
 8007008:	40010400 	.word	0x40010400
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40014000 	.word	0x40014000
 800701c:	40001800 	.word	0x40001800

08007020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d122      	bne.n	800707c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d11b      	bne.n	800707c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f06f 0202 	mvn.w	r2, #2
 800704c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9ba 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 8007068:	e005      	b.n	8007076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9ac 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f9bd 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b04      	cmp	r3, #4
 8007088:	d122      	bne.n	80070d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d11b      	bne.n	80070d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0204 	mvn.w	r2, #4
 80070a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f990 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 80070bc:	e005      	b.n	80070ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f982 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f993 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0208 	mvn.w	r2, #8
 80070f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2204      	movs	r2, #4
 80070fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f966 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f958 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f969 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b10      	cmp	r3, #16
 8007130:	d122      	bne.n	8007178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b10      	cmp	r3, #16
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0210 	mvn.w	r2, #16
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2208      	movs	r2, #8
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f93c 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f92e 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f93f 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b01      	cmp	r3, #1
 8007184:	d10e      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b01      	cmp	r3, #1
 8007192:	d107      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0201 	mvn.w	r2, #1
 800719c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f908 	bl	80073b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ae:	2b80      	cmp	r3, #128	; 0x80
 80071b0:	d10e      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d107      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fc72 	bl	8007ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d10e      	bne.n	80071fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	d107      	bne.n	80071fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f904 	bl	8007404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b20      	cmp	r3, #32
 8007208:	d10e      	bne.n	8007228 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b20      	cmp	r3, #32
 8007216:	d107      	bne.n	8007228 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0220 	mvn.w	r2, #32
 8007220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fc3c 	bl	8007aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800724a:	2302      	movs	r3, #2
 800724c:	e0ae      	b.n	80073ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b0c      	cmp	r3, #12
 800725a:	f200 809f 	bhi.w	800739c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007299 	.word	0x08007299
 8007268:	0800739d 	.word	0x0800739d
 800726c:	0800739d 	.word	0x0800739d
 8007270:	0800739d 	.word	0x0800739d
 8007274:	080072d9 	.word	0x080072d9
 8007278:	0800739d 	.word	0x0800739d
 800727c:	0800739d 	.word	0x0800739d
 8007280:	0800739d 	.word	0x0800739d
 8007284:	0800731b 	.word	0x0800731b
 8007288:	0800739d 	.word	0x0800739d
 800728c:	0800739d 	.word	0x0800739d
 8007290:	0800739d 	.word	0x0800739d
 8007294:	0800735b 	.word	0x0800735b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f95a 	bl	8007558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0208 	orr.w	r2, r2, #8
 80072b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0204 	bic.w	r2, r2, #4
 80072c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6999      	ldr	r1, [r3, #24]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	619a      	str	r2, [r3, #24]
      break;
 80072d6:	e064      	b.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 f9aa 	bl	8007638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6999      	ldr	r1, [r3, #24]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	021a      	lsls	r2, r3, #8
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	619a      	str	r2, [r3, #24]
      break;
 8007318:	e043      	b.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f9ff 	bl	8007724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0208 	orr.w	r2, r2, #8
 8007334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0204 	bic.w	r2, r2, #4
 8007344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69d9      	ldr	r1, [r3, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	61da      	str	r2, [r3, #28]
      break;
 8007358:	e023      	b.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fa53 	bl	800780c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69d9      	ldr	r1, [r3, #28]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	021a      	lsls	r2, r3, #8
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	61da      	str	r2, [r3, #28]
      break;
 800739a:	e002      	b.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
      break;
 80073a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a40      	ldr	r2, [pc, #256]	; (800752c <TIM_Base_SetConfig+0x114>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007436:	d00f      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a3d      	ldr	r2, [pc, #244]	; (8007530 <TIM_Base_SetConfig+0x118>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00b      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a3c      	ldr	r2, [pc, #240]	; (8007534 <TIM_Base_SetConfig+0x11c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d007      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3b      	ldr	r2, [pc, #236]	; (8007538 <TIM_Base_SetConfig+0x120>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3a      	ldr	r2, [pc, #232]	; (800753c <TIM_Base_SetConfig+0x124>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d108      	bne.n	800746a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a2f      	ldr	r2, [pc, #188]	; (800752c <TIM_Base_SetConfig+0x114>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d02b      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007478:	d027      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <TIM_Base_SetConfig+0x118>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d023      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2b      	ldr	r2, [pc, #172]	; (8007534 <TIM_Base_SetConfig+0x11c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01f      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <TIM_Base_SetConfig+0x120>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d01b      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a29      	ldr	r2, [pc, #164]	; (800753c <TIM_Base_SetConfig+0x124>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d017      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a28      	ldr	r2, [pc, #160]	; (8007540 <TIM_Base_SetConfig+0x128>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d013      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a27      	ldr	r2, [pc, #156]	; (8007544 <TIM_Base_SetConfig+0x12c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00f      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a26      	ldr	r2, [pc, #152]	; (8007548 <TIM_Base_SetConfig+0x130>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00b      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a25      	ldr	r2, [pc, #148]	; (800754c <TIM_Base_SetConfig+0x134>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d007      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a24      	ldr	r2, [pc, #144]	; (8007550 <TIM_Base_SetConfig+0x138>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a23      	ldr	r2, [pc, #140]	; (8007554 <TIM_Base_SetConfig+0x13c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d108      	bne.n	80074dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a0a      	ldr	r2, [pc, #40]	; (800752c <TIM_Base_SetConfig+0x114>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_Base_SetConfig+0xf8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a0c      	ldr	r2, [pc, #48]	; (800753c <TIM_Base_SetConfig+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d103      	bne.n	8007518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	615a      	str	r2, [r3, #20]
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40010000 	.word	0x40010000
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40010400 	.word	0x40010400
 8007540:	40014000 	.word	0x40014000
 8007544:	40014400 	.word	0x40014400
 8007548:	40014800 	.word	0x40014800
 800754c:	40001800 	.word	0x40001800
 8007550:	40001c00 	.word	0x40001c00
 8007554:	40002000 	.word	0x40002000

08007558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f023 0201 	bic.w	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f023 0302 	bic.w	r3, r3, #2
 80075a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a20      	ldr	r2, [pc, #128]	; (8007630 <TIM_OC1_SetConfig+0xd8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC1_SetConfig+0x64>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <TIM_OC1_SetConfig+0xdc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d10c      	bne.n	80075d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 0308 	bic.w	r3, r3, #8
 80075c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f023 0304 	bic.w	r3, r3, #4
 80075d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a15      	ldr	r2, [pc, #84]	; (8007630 <TIM_OC1_SetConfig+0xd8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC1_SetConfig+0x8e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a14      	ldr	r2, [pc, #80]	; (8007634 <TIM_OC1_SetConfig+0xdc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d111      	bne.n	800760a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400

08007638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0210 	bic.w	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f023 0320 	bic.w	r3, r3, #32
 8007682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a22      	ldr	r2, [pc, #136]	; (800771c <TIM_OC2_SetConfig+0xe4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_OC2_SetConfig+0x68>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a21      	ldr	r2, [pc, #132]	; (8007720 <TIM_OC2_SetConfig+0xe8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d10d      	bne.n	80076bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a17      	ldr	r2, [pc, #92]	; (800771c <TIM_OC2_SetConfig+0xe4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d003      	beq.n	80076cc <TIM_OC2_SetConfig+0x94>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a16      	ldr	r2, [pc, #88]	; (8007720 <TIM_OC2_SetConfig+0xe8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d113      	bne.n	80076f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	621a      	str	r2, [r3, #32]
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000
 8007720:	40010400 	.word	0x40010400

08007724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800776c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a21      	ldr	r2, [pc, #132]	; (8007804 <TIM_OC3_SetConfig+0xe0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_OC3_SetConfig+0x66>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a20      	ldr	r2, [pc, #128]	; (8007808 <TIM_OC3_SetConfig+0xe4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d10d      	bne.n	80077a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a16      	ldr	r2, [pc, #88]	; (8007804 <TIM_OC3_SetConfig+0xe0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d003      	beq.n	80077b6 <TIM_OC3_SetConfig+0x92>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a15      	ldr	r2, [pc, #84]	; (8007808 <TIM_OC3_SetConfig+0xe4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d113      	bne.n	80077de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	621a      	str	r2, [r3, #32]
}
 80077f8:	bf00      	nop
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	40010000 	.word	0x40010000
 8007808:	40010400 	.word	0x40010400

0800780c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	031b      	lsls	r3, r3, #12
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a12      	ldr	r2, [pc, #72]	; (80078b0 <TIM_OC4_SetConfig+0xa4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC4_SetConfig+0x68>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a11      	ldr	r2, [pc, #68]	; (80078b4 <TIM_OC4_SetConfig+0xa8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d109      	bne.n	8007888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800787a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	019b      	lsls	r3, r3, #6
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40010400 	.word	0x40010400

080078b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	2201      	movs	r2, #1
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1a      	ldr	r2, [r3, #32]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	43db      	mvns	r3, r3
 80078da:	401a      	ands	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	fa01 f303 	lsl.w	r3, r1, r3
 80078f0:	431a      	orrs	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	621a      	str	r2, [r3, #32]
}
 80078f6:	bf00      	nop
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
	...

08007904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007918:	2302      	movs	r3, #2
 800791a:	e05a      	b.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a21      	ldr	r2, [pc, #132]	; (80079e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d022      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007968:	d01d      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d018      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d10c      	bne.n	80079c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40010400 	.word	0x40010400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40001800 	.word	0x40001800

080079fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e03d      	b.n	8007a94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e03f      	b.n	8007b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7f9 fed4 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2224      	movs	r2, #36	; 0x24
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 ff43 	bl	8008998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695a      	ldr	r2, [r3, #20]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	; 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d165      	bne.n	8007c4a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_UART_Transmit_DMA+0x26>
 8007b84:	88fb      	ldrh	r3, [r7, #6]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e05e      	b.n	8007c4c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_UART_Transmit_DMA+0x38>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e057      	b.n	8007c4c <HAL_UART_Transmit_DMA+0xe8>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2221      	movs	r2, #33	; 0x21
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	4a22      	ldr	r2, [pc, #136]	; (8007c54 <HAL_UART_Transmit_DMA+0xf0>)
 8007bca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd0:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <HAL_UART_Transmit_DMA+0xf4>)
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd8:	4a20      	ldr	r2, [pc, #128]	; (8007c5c <HAL_UART_Transmit_DMA+0xf8>)
 8007bda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be0:	2200      	movs	r2, #0
 8007be2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007be4:	f107 0308 	add.w	r3, r7, #8
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	6819      	ldr	r1, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	f7fa fe4a 	bl	8002894 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3314      	adds	r3, #20
 8007c18:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	617b      	str	r3, [r7, #20]
   return(result);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3314      	adds	r3, #20
 8007c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c32:	627a      	str	r2, [r7, #36]	; 0x24
 8007c34:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6a39      	ldr	r1, [r7, #32]
 8007c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e000      	b.n	8007c4c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007c4a:	2302      	movs	r3, #2
  }
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3730      	adds	r7, #48	; 0x30
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	08008231 	.word	0x08008231
 8007c58:	080082cb 	.word	0x080082cb
 8007c5c:	08008443 	.word	0x08008443

08007c60 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d11d      	bne.n	8007cb6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_UART_Receive_DMA+0x26>
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e016      	b.n	8007cb8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_UART_Receive_DMA+0x38>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e00f      	b.n	8007cb8 <HAL_UART_Receive_DMA+0x58>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fc13 	bl	80084d8 <UART_Start_Receive_DMA>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	e000      	b.n	8007cb8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cb6:	2302      	movs	r3, #2
  }
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b0ba      	sub	sp, #232	; 0xe8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf6:	f003 030f 	and.w	r3, r3, #15
 8007cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10f      	bne.n	8007d26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <HAL_UART_IRQHandler+0x66>
 8007d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fd7f 	bl	8008822 <UART_Receive_IT>
      return;
 8007d24:	e256      	b.n	80081d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80de 	beq.w	8007eec <HAL_UART_IRQHandler+0x22c>
 8007d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80d1 	beq.w	8007eec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <HAL_UART_IRQHandler+0xae>
 8007d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	f043 0201 	orr.w	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <HAL_UART_IRQHandler+0xd2>
 8007d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	f043 0202 	orr.w	r2, r3, #2
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <HAL_UART_IRQHandler+0xf6>
 8007d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	f043 0204 	orr.w	r2, r3, #4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d011      	beq.n	8007de6 <HAL_UART_IRQHandler+0x126>
 8007dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	f043 0208 	orr.w	r2, r3, #8
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 81ed 	beq.w	80081ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d008      	beq.n	8007e0e <HAL_UART_IRQHandler+0x14e>
 8007dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fd0a 	bl	8008822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b40      	cmp	r3, #64	; 0x40
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2301      	moveq	r3, #1
 8007e1e:	2300      	movne	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d103      	bne.n	8007e3a <HAL_UART_IRQHandler+0x17a>
 8007e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d04f      	beq.n	8007eda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fc12 	bl	8008664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d141      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3314      	adds	r3, #20
 8007e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3314      	adds	r3, #20
 8007e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1d9      	bne.n	8007e4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	4a7d      	ldr	r2, [pc, #500]	; (800809c <HAL_UART_IRQHandler+0x3dc>)
 8007ea8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fa fdb8 	bl	8002a24 <HAL_DMA_Abort_IT>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d016      	beq.n	8007ee8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec8:	e00e      	b.n	8007ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f99a 	bl	8008204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed0:	e00a      	b.n	8007ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f996 	bl	8008204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed8:	e006      	b.n	8007ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f992 	bl	8008204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ee6:	e170      	b.n	80081ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee8:	bf00      	nop
    return;
 8007eea:	e16e      	b.n	80081ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	f040 814a 	bne.w	800818a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8143 	beq.w	800818a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 813c 	beq.w	800818a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60bb      	str	r3, [r7, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	60bb      	str	r3, [r7, #8]
 8007f26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f32:	2b40      	cmp	r3, #64	; 0x40
 8007f34:	f040 80b4 	bne.w	80080a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 8140 	beq.w	80081ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f56:	429a      	cmp	r2, r3
 8007f58:	f080 8139 	bcs.w	80081ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6e:	f000 8088 	beq.w	8008082 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	330c      	adds	r3, #12
 8007f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1d9      	bne.n	8007f72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3314      	adds	r3, #20
 8007fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e1      	bne.n	8007fbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3314      	adds	r3, #20
 8008000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800800a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800800c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800801e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800802c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e3      	bne.n	8007ffa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	330c      	adds	r3, #12
 8008046:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008052:	f023 0310 	bic.w	r3, r3, #16
 8008056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	330c      	adds	r3, #12
 8008060:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008064:	65ba      	str	r2, [r7, #88]	; 0x58
 8008066:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800806a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e3      	bne.n	8008040 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	4618      	mov	r0, r3
 800807e:	f7fa fc61 	bl	8002944 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800808a:	b29b      	uxth	r3, r3
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	b29b      	uxth	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f8c0 	bl	8008218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008098:	e099      	b.n	80081ce <HAL_UART_IRQHandler+0x50e>
 800809a:	bf00      	nop
 800809c:	0800872b 	.word	0x0800872b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 808b 	beq.w	80081d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8086 	beq.w	80081d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	330c      	adds	r3, #12
 80080cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	330c      	adds	r3, #12
 80080e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080ea:	647a      	str	r2, [r7, #68]	; 0x44
 80080ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e3      	bne.n	80080c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3314      	adds	r3, #20
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	623b      	str	r3, [r7, #32]
   return(result);
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3314      	adds	r3, #20
 800811e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008122:	633a      	str	r2, [r7, #48]	; 0x30
 8008124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e3      	bne.n	80080fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	e853 3f00 	ldrex	r3, [r3]
 8008152:	60fb      	str	r3, [r7, #12]
   return(result);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0310 	bic.w	r3, r3, #16
 800815a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008168:	61fa      	str	r2, [r7, #28]
 800816a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	69b9      	ldr	r1, [r7, #24]
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	617b      	str	r3, [r7, #20]
   return(result);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e3      	bne.n	8008144 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800817c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f848 	bl	8008218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008188:	e023      	b.n	80081d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800818a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008192:	2b00      	cmp	r3, #0
 8008194:	d009      	beq.n	80081aa <HAL_UART_IRQHandler+0x4ea>
 8008196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fad5 	bl	8008752 <UART_Transmit_IT>
    return;
 80081a8:	e014      	b.n	80081d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00e      	beq.n	80081d4 <HAL_UART_IRQHandler+0x514>
 80081b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb15 	bl	80087f2 <UART_EndTransmit_IT>
    return;
 80081c8:	e004      	b.n	80081d4 <HAL_UART_IRQHandler+0x514>
    return;
 80081ca:	bf00      	nop
 80081cc:	e002      	b.n	80081d4 <HAL_UART_IRQHandler+0x514>
      return;
 80081ce:	bf00      	nop
 80081d0:	e000      	b.n	80081d4 <HAL_UART_IRQHandler+0x514>
      return;
 80081d2:	bf00      	nop
  }
}
 80081d4:	37e8      	adds	r7, #232	; 0xe8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop

080081dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b090      	sub	sp, #64	; 0x40
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008248:	2b00      	cmp	r3, #0
 800824a:	d137      	bne.n	80082bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800824c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824e:	2200      	movs	r2, #0
 8008250:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3314      	adds	r3, #20
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	623b      	str	r3, [r7, #32]
   return(result);
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
 800826a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3314      	adds	r3, #20
 8008270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008272:	633a      	str	r2, [r7, #48]	; 0x30
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	60fb      	str	r3, [r7, #12]
   return(result);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	330c      	adds	r3, #12
 80082a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a6:	61fa      	str	r2, [r7, #28]
 80082a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	69b9      	ldr	r1, [r7, #24]
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	617b      	str	r3, [r7, #20]
   return(result);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e5      	bne.n	8008286 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082ba:	e002      	b.n	80082c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80082bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082be:	f7f8 fa79 	bl	80007b4 <HAL_UART_TxCpltCallback>
}
 80082c2:	bf00      	nop
 80082c4:	3740      	adds	r7, #64	; 0x40
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ff7f 	bl	80081dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b09c      	sub	sp, #112	; 0x70
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d172      	bne.n	80083e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008304:	2200      	movs	r2, #0
 8008306:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	330c      	adds	r3, #12
 800830e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800831a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	330c      	adds	r3, #12
 8008326:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008328:	65ba      	str	r2, [r7, #88]	; 0x58
 800832a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800832e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3314      	adds	r3, #20
 8008342:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	667b      	str	r3, [r7, #100]	; 0x64
 8008354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3314      	adds	r3, #20
 800835a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800835c:	647a      	str	r2, [r7, #68]	; 0x44
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800836a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e5      	bne.n	800833c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3314      	adds	r3, #20
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	623b      	str	r3, [r7, #32]
   return(result);
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008386:	663b      	str	r3, [r7, #96]	; 0x60
 8008388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3314      	adds	r3, #20
 800838e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008390:	633a      	str	r2, [r7, #48]	; 0x30
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e5      	bne.n	8008370 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d119      	bne.n	80083e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0310 	bic.w	r3, r3, #16
 80083ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	330c      	adds	r3, #12
 80083d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083d4:	61fa      	str	r2, [r7, #28]
 80083d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	617b      	str	r3, [r7, #20]
   return(result);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e5      	bne.n	80083b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d106      	bne.n	80083fe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083f4:	4619      	mov	r1, r3
 80083f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80083f8:	f7ff ff0e 	bl	8008218 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083fc:	e002      	b.n	8008404 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80083fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008400:	f7f8 f9a8 	bl	8000754 <HAL_UART_RxCpltCallback>
}
 8008404:	bf00      	nop
 8008406:	3770      	adds	r7, #112	; 0x70
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841e:	2b01      	cmp	r3, #1
 8008420:	d108      	bne.n	8008434 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	b29b      	uxth	r3, r3
 800842a:	4619      	mov	r1, r3
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7ff fef3 	bl	8008218 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008432:	e002      	b.n	800843a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7ff fedb 	bl	80081f0 <HAL_UART_RxHalfCpltCallback>
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	2b80      	cmp	r3, #128	; 0x80
 8008460:	bf0c      	ite	eq
 8008462:	2301      	moveq	r3, #1
 8008464:	2300      	movne	r3, #0
 8008466:	b2db      	uxtb	r3, r3
 8008468:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b21      	cmp	r3, #33	; 0x21
 8008474:	d108      	bne.n	8008488 <UART_DMAError+0x46>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2200      	movs	r2, #0
 8008480:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008482:	68b8      	ldr	r0, [r7, #8]
 8008484:	f000 f8c6 	bl	8008614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b40      	cmp	r3, #64	; 0x40
 8008494:	bf0c      	ite	eq
 8008496:	2301      	moveq	r3, #1
 8008498:	2300      	movne	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b22      	cmp	r3, #34	; 0x22
 80084a8:	d108      	bne.n	80084bc <UART_DMAError+0x7a>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2200      	movs	r2, #0
 80084b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80084b6:	68b8      	ldr	r0, [r7, #8]
 80084b8:	f000 f8d4 	bl	8008664 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	f043 0210 	orr.w	r2, r3, #16
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084c8:	68b8      	ldr	r0, [r7, #8]
 80084ca:	f7ff fe9b 	bl	8008204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b098      	sub	sp, #96	; 0x60
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	88fa      	ldrh	r2, [r7, #6]
 80084f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2222      	movs	r2, #34	; 0x22
 80084fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	4a40      	ldr	r2, [pc, #256]	; (8008608 <UART_Start_Receive_DMA+0x130>)
 8008506:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	4a3f      	ldr	r2, [pc, #252]	; (800860c <UART_Start_Receive_DMA+0x134>)
 800850e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	4a3e      	ldr	r2, [pc, #248]	; (8008610 <UART_Start_Receive_DMA+0x138>)
 8008516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	2200      	movs	r2, #0
 800851e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008520:	f107 0308 	add.w	r3, r7, #8
 8008524:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	f7fa f9ac 	bl	8002894 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	613b      	str	r3, [r7, #16]
 8008550:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d019      	beq.n	8008596 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	330c      	adds	r3, #12
 8008568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008578:	65bb      	str	r3, [r7, #88]	; 0x58
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	330c      	adds	r3, #12
 8008580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008582:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008584:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e5      	bne.n	8008562 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3314      	adds	r3, #20
 800859c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	657b      	str	r3, [r7, #84]	; 0x54
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3314      	adds	r3, #20
 80085b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e5      	bne.n	8008596 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3314      	adds	r3, #20
 80085d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	617b      	str	r3, [r7, #20]
   return(result);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e0:	653b      	str	r3, [r7, #80]	; 0x50
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085ea:	627a      	str	r2, [r7, #36]	; 0x24
 80085ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6a39      	ldr	r1, [r7, #32]
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e5      	bne.n	80085ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3760      	adds	r7, #96	; 0x60
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	080082e7 	.word	0x080082e7
 800860c:	0800840d 	.word	0x0800840d
 8008610:	08008443 	.word	0x08008443

08008614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b089      	sub	sp, #36	; 0x24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	330c      	adds	r3, #12
 8008622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	60bb      	str	r3, [r7, #8]
   return(result);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008632:	61fb      	str	r3, [r7, #28]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	330c      	adds	r3, #12
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	61ba      	str	r2, [r7, #24]
 800863e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6979      	ldr	r1, [r7, #20]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	613b      	str	r3, [r7, #16]
   return(result);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e5      	bne.n	800861c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2220      	movs	r2, #32
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008658:	bf00      	nop
 800865a:	3724      	adds	r7, #36	; 0x24
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008664:	b480      	push	{r7}
 8008666:	b095      	sub	sp, #84	; 0x54
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	330c      	adds	r3, #12
 800868a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800868c:	643a      	str	r2, [r7, #64]	; 0x40
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e5      	bne.n	800866c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3314      	adds	r3, #20
 80086a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e5      	bne.n	80086a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d119      	bne.n	8008710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	330c      	adds	r3, #12
 80086e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f023 0310 	bic.w	r3, r3, #16
 80086f2:	647b      	str	r3, [r7, #68]	; 0x44
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	330c      	adds	r3, #12
 80086fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086fc:	61ba      	str	r2, [r7, #24]
 80086fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	6979      	ldr	r1, [r7, #20]
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	613b      	str	r3, [r7, #16]
   return(result);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e5      	bne.n	80086dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800871e:	bf00      	nop
 8008720:	3754      	adds	r7, #84	; 0x54
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7ff fd5d 	bl	8008204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b21      	cmp	r3, #33	; 0x21
 8008764:	d13e      	bne.n	80087e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876e:	d114      	bne.n	800879a <UART_Transmit_IT+0x48>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d110      	bne.n	800879a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800878c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	1c9a      	adds	r2, r3, #2
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	621a      	str	r2, [r3, #32]
 8008798:	e008      	b.n	80087ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	1c59      	adds	r1, r3, #1
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6211      	str	r1, [r2, #32]
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	4619      	mov	r1, r3
 80087ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10f      	bne.n	80087e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	e000      	b.n	80087e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087e4:	2302      	movs	r3, #2
  }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7f7 ffce 	bl	80007b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b08c      	sub	sp, #48	; 0x30
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b22      	cmp	r3, #34	; 0x22
 8008834:	f040 80ab 	bne.w	800898e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008840:	d117      	bne.n	8008872 <UART_Receive_IT+0x50>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d113      	bne.n	8008872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	b29b      	uxth	r3, r3
 800885c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008860:	b29a      	uxth	r2, r3
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	1c9a      	adds	r2, r3, #2
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	629a      	str	r2, [r3, #40]	; 0x28
 8008870:	e026      	b.n	80088c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008878:	2300      	movs	r3, #0
 800887a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008884:	d007      	beq.n	8008896 <UART_Receive_IT+0x74>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10a      	bne.n	80088a4 <UART_Receive_IT+0x82>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	b2da      	uxtb	r2, r3
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	e008      	b.n	80088b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	4619      	mov	r1, r3
 80088ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d15a      	bne.n	800898a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0220 	bic.w	r2, r2, #32
 80088e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 0201 	bic.w	r2, r2, #1
 8008902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	2b01      	cmp	r3, #1
 8008912:	d135      	bne.n	8008980 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	330c      	adds	r3, #12
 8008920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	613b      	str	r3, [r7, #16]
   return(result);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f023 0310 	bic.w	r3, r3, #16
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893a:	623a      	str	r2, [r7, #32]
 800893c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	69f9      	ldr	r1, [r7, #28]
 8008940:	6a3a      	ldr	r2, [r7, #32]
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	61bb      	str	r3, [r7, #24]
   return(result);
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e5      	bne.n	800891a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0310 	and.w	r3, r3, #16
 8008958:	2b10      	cmp	r3, #16
 800895a:	d10a      	bne.n	8008972 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fc4d 	bl	8008218 <HAL_UARTEx_RxEventCallback>
 800897e:	e002      	b.n	8008986 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7f7 fee7 	bl	8000754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e002      	b.n	8008990 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	e000      	b.n	8008990 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800898e:	2302      	movs	r3, #2
  }
}
 8008990:	4618      	mov	r0, r3
 8008992:	3730      	adds	r7, #48	; 0x30
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800899c:	b0c0      	sub	sp, #256	; 0x100
 800899e:	af00      	add	r7, sp, #0
 80089a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b4:	68d9      	ldr	r1, [r3, #12]
 80089b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	ea40 0301 	orr.w	r3, r0, r1
 80089c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089f0:	f021 010c 	bic.w	r1, r1, #12
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089fe:	430b      	orrs	r3, r1
 8008a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a12:	6999      	ldr	r1, [r3, #24]
 8008a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	ea40 0301 	orr.w	r3, r0, r1
 8008a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b8f      	ldr	r3, [pc, #572]	; (8008c64 <UART_SetConfig+0x2cc>)
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d005      	beq.n	8008a38 <UART_SetConfig+0xa0>
 8008a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b8d      	ldr	r3, [pc, #564]	; (8008c68 <UART_SetConfig+0x2d0>)
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d104      	bne.n	8008a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a38:	f7fd f980 	bl	8005d3c <HAL_RCC_GetPCLK2Freq>
 8008a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a40:	e003      	b.n	8008a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a42:	f7fd f967 	bl	8005d14 <HAL_RCC_GetPCLK1Freq>
 8008a46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a54:	f040 810c 	bne.w	8008c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	1891      	adds	r1, r2, r2
 8008a70:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a72:	415b      	adcs	r3, r3
 8008a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	eb12 0801 	adds.w	r8, r2, r1
 8008a80:	4629      	mov	r1, r5
 8008a82:	eb43 0901 	adc.w	r9, r3, r1
 8008a86:	f04f 0200 	mov.w	r2, #0
 8008a8a:	f04f 0300 	mov.w	r3, #0
 8008a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a9a:	4690      	mov	r8, r2
 8008a9c:	4699      	mov	r9, r3
 8008a9e:	4623      	mov	r3, r4
 8008aa0:	eb18 0303 	adds.w	r3, r8, r3
 8008aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	eb49 0303 	adc.w	r3, r9, r3
 8008aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008abe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	18db      	adds	r3, r3, r3
 8008aca:	653b      	str	r3, [r7, #80]	; 0x50
 8008acc:	4613      	mov	r3, r2
 8008ace:	eb42 0303 	adc.w	r3, r2, r3
 8008ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008adc:	f7f7 fbf0 	bl	80002c0 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4b61      	ldr	r3, [pc, #388]	; (8008c6c <UART_SetConfig+0x2d4>)
 8008ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	011c      	lsls	r4, r3, #4
 8008aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008af8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	1891      	adds	r1, r2, r2
 8008b06:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b08:	415b      	adcs	r3, r3
 8008b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b10:	4641      	mov	r1, r8
 8008b12:	eb12 0a01 	adds.w	sl, r2, r1
 8008b16:	4649      	mov	r1, r9
 8008b18:	eb43 0b01 	adc.w	fp, r3, r1
 8008b1c:	f04f 0200 	mov.w	r2, #0
 8008b20:	f04f 0300 	mov.w	r3, #0
 8008b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b30:	4692      	mov	sl, r2
 8008b32:	469b      	mov	fp, r3
 8008b34:	4643      	mov	r3, r8
 8008b36:	eb1a 0303 	adds.w	r3, sl, r3
 8008b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b3e:	464b      	mov	r3, r9
 8008b40:	eb4b 0303 	adc.w	r3, fp, r3
 8008b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	18db      	adds	r3, r3, r3
 8008b60:	643b      	str	r3, [r7, #64]	; 0x40
 8008b62:	4613      	mov	r3, r2
 8008b64:	eb42 0303 	adc.w	r3, r2, r3
 8008b68:	647b      	str	r3, [r7, #68]	; 0x44
 8008b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b72:	f7f7 fba5 	bl	80002c0 <__aeabi_uldivmod>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4b3b      	ldr	r3, [pc, #236]	; (8008c6c <UART_SetConfig+0x2d4>)
 8008b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	2264      	movs	r2, #100	; 0x64
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	1acb      	subs	r3, r1, r3
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b92:	4b36      	ldr	r3, [pc, #216]	; (8008c6c <UART_SetConfig+0x2d4>)
 8008b94:	fba3 2302 	umull	r2, r3, r3, r2
 8008b98:	095b      	lsrs	r3, r3, #5
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ba0:	441c      	add	r4, r3
 8008ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	464b      	mov	r3, r9
 8008bb8:	1891      	adds	r1, r2, r2
 8008bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bbc:	415b      	adcs	r3, r3
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bc4:	4641      	mov	r1, r8
 8008bc6:	1851      	adds	r1, r2, r1
 8008bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8008bca:	4649      	mov	r1, r9
 8008bcc:	414b      	adcs	r3, r1
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd0:	f04f 0200 	mov.w	r2, #0
 8008bd4:	f04f 0300 	mov.w	r3, #0
 8008bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008bdc:	4659      	mov	r1, fp
 8008bde:	00cb      	lsls	r3, r1, #3
 8008be0:	4651      	mov	r1, sl
 8008be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008be6:	4651      	mov	r1, sl
 8008be8:	00ca      	lsls	r2, r1, #3
 8008bea:	4610      	mov	r0, r2
 8008bec:	4619      	mov	r1, r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	189b      	adds	r3, r3, r2
 8008bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bf8:	464b      	mov	r3, r9
 8008bfa:	460a      	mov	r2, r1
 8008bfc:	eb42 0303 	adc.w	r3, r2, r3
 8008c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c18:	460b      	mov	r3, r1
 8008c1a:	18db      	adds	r3, r3, r3
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c1e:	4613      	mov	r3, r2
 8008c20:	eb42 0303 	adc.w	r3, r2, r3
 8008c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c2e:	f7f7 fb47 	bl	80002c0 <__aeabi_uldivmod>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <UART_SetConfig+0x2d4>)
 8008c38:	fba3 1302 	umull	r1, r3, r3, r2
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	2164      	movs	r1, #100	; 0x64
 8008c40:	fb01 f303 	mul.w	r3, r1, r3
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	3332      	adds	r3, #50	; 0x32
 8008c4a:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <UART_SetConfig+0x2d4>)
 8008c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	f003 0207 	and.w	r2, r3, #7
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4422      	add	r2, r4
 8008c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c60:	e106      	b.n	8008e70 <UART_SetConfig+0x4d8>
 8008c62:	bf00      	nop
 8008c64:	40011000 	.word	0x40011000
 8008c68:	40011400 	.word	0x40011400
 8008c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c82:	4642      	mov	r2, r8
 8008c84:	464b      	mov	r3, r9
 8008c86:	1891      	adds	r1, r2, r2
 8008c88:	6239      	str	r1, [r7, #32]
 8008c8a:	415b      	adcs	r3, r3
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c92:	4641      	mov	r1, r8
 8008c94:	1854      	adds	r4, r2, r1
 8008c96:	4649      	mov	r1, r9
 8008c98:	eb43 0501 	adc.w	r5, r3, r1
 8008c9c:	f04f 0200 	mov.w	r2, #0
 8008ca0:	f04f 0300 	mov.w	r3, #0
 8008ca4:	00eb      	lsls	r3, r5, #3
 8008ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008caa:	00e2      	lsls	r2, r4, #3
 8008cac:	4614      	mov	r4, r2
 8008cae:	461d      	mov	r5, r3
 8008cb0:	4643      	mov	r3, r8
 8008cb2:	18e3      	adds	r3, r4, r3
 8008cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cb8:	464b      	mov	r3, r9
 8008cba:	eb45 0303 	adc.w	r3, r5, r3
 8008cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cd2:	f04f 0200 	mov.w	r2, #0
 8008cd6:	f04f 0300 	mov.w	r3, #0
 8008cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008cde:	4629      	mov	r1, r5
 8008ce0:	008b      	lsls	r3, r1, #2
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ce8:	4621      	mov	r1, r4
 8008cea:	008a      	lsls	r2, r1, #2
 8008cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cf0:	f7f7 fae6 	bl	80002c0 <__aeabi_uldivmod>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4b60      	ldr	r3, [pc, #384]	; (8008e7c <UART_SetConfig+0x4e4>)
 8008cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	011c      	lsls	r4, r3, #4
 8008d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d14:	4642      	mov	r2, r8
 8008d16:	464b      	mov	r3, r9
 8008d18:	1891      	adds	r1, r2, r2
 8008d1a:	61b9      	str	r1, [r7, #24]
 8008d1c:	415b      	adcs	r3, r3
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d24:	4641      	mov	r1, r8
 8008d26:	1851      	adds	r1, r2, r1
 8008d28:	6139      	str	r1, [r7, #16]
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	414b      	adcs	r3, r1
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	00cb      	lsls	r3, r1, #3
 8008d40:	4651      	mov	r1, sl
 8008d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d46:	4651      	mov	r1, sl
 8008d48:	00ca      	lsls	r2, r1, #3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4642      	mov	r2, r8
 8008d52:	189b      	adds	r3, r3, r2
 8008d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d58:	464b      	mov	r3, r9
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	eb42 0303 	adc.w	r3, r2, r3
 8008d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	f04f 0300 	mov.w	r3, #0
 8008d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	008b      	lsls	r3, r1, #2
 8008d80:	4641      	mov	r1, r8
 8008d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d86:	4641      	mov	r1, r8
 8008d88:	008a      	lsls	r2, r1, #2
 8008d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d8e:	f7f7 fa97 	bl	80002c0 <__aeabi_uldivmod>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	4b38      	ldr	r3, [pc, #224]	; (8008e7c <UART_SetConfig+0x4e4>)
 8008d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008d9e:	095b      	lsrs	r3, r3, #5
 8008da0:	2264      	movs	r2, #100	; 0x64
 8008da2:	fb02 f303 	mul.w	r3, r2, r3
 8008da6:	1acb      	subs	r3, r1, r3
 8008da8:	011b      	lsls	r3, r3, #4
 8008daa:	3332      	adds	r3, #50	; 0x32
 8008dac:	4a33      	ldr	r2, [pc, #204]	; (8008e7c <UART_SetConfig+0x4e4>)
 8008dae:	fba2 2303 	umull	r2, r3, r2, r3
 8008db2:	095b      	lsrs	r3, r3, #5
 8008db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008db8:	441c      	add	r4, r3
 8008dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	673b      	str	r3, [r7, #112]	; 0x70
 8008dc2:	677a      	str	r2, [r7, #116]	; 0x74
 8008dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	1891      	adds	r1, r2, r2
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	415b      	adcs	r3, r3
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dd8:	4641      	mov	r1, r8
 8008dda:	1851      	adds	r1, r2, r1
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	4649      	mov	r1, r9
 8008de0:	414b      	adcs	r3, r1
 8008de2:	607b      	str	r3, [r7, #4]
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008df0:	4659      	mov	r1, fp
 8008df2:	00cb      	lsls	r3, r1, #3
 8008df4:	4651      	mov	r1, sl
 8008df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dfa:	4651      	mov	r1, sl
 8008dfc:	00ca      	lsls	r2, r1, #3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	4642      	mov	r2, r8
 8008e06:	189b      	adds	r3, r3, r2
 8008e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	eb42 0303 	adc.w	r3, r2, r3
 8008e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8008e1e:	667a      	str	r2, [r7, #100]	; 0x64
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	008b      	lsls	r3, r1, #2
 8008e30:	4641      	mov	r1, r8
 8008e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e36:	4641      	mov	r1, r8
 8008e38:	008a      	lsls	r2, r1, #2
 8008e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e3e:	f7f7 fa3f 	bl	80002c0 <__aeabi_uldivmod>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <UART_SetConfig+0x4e4>)
 8008e48:	fba3 1302 	umull	r1, r3, r3, r2
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	2164      	movs	r1, #100	; 0x64
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	3332      	adds	r3, #50	; 0x32
 8008e5a:	4a08      	ldr	r2, [pc, #32]	; (8008e7c <UART_SetConfig+0x4e4>)
 8008e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e60:	095b      	lsrs	r3, r3, #5
 8008e62:	f003 020f 	and.w	r2, r3, #15
 8008e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4422      	add	r2, r4
 8008e6e:	609a      	str	r2, [r3, #8]
}
 8008e70:	bf00      	nop
 8008e72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e76:	46bd      	mov	sp, r7
 8008e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e7c:	51eb851f 	.word	0x51eb851f

08008e80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e80:	b084      	sub	sp, #16
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	f107 001c 	add.w	r0, r7, #28
 8008e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d122      	bne.n	8008ede <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d105      	bne.n	8008ed2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa9c 	bl	8009410 <USB_CoreReset>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
 8008edc:	e01a      	b.n	8008f14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa90 	bl	8009410 <USB_CoreReset>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
 8008f06:	e005      	b.n	8008f14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d10b      	bne.n	8008f32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f043 0206 	orr.w	r2, r3, #6
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f043 0220 	orr.w	r2, r3, #32
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f3e:	b004      	add	sp, #16
 8008f40:	4770      	bx	lr

08008f42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f023 0201 	bic.w	r2, r3, #1
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d115      	bne.n	8008fb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f92:	2001      	movs	r0, #1
 8008f94:	f7f8 ffd2 	bl	8001f3c <HAL_Delay>
      ms++;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa28 	bl	80093f4 <USB_GetMode>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d01e      	beq.n	8008fe8 <USB_SetCurrentMode+0x84>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b31      	cmp	r3, #49	; 0x31
 8008fae:	d9f0      	bls.n	8008f92 <USB_SetCurrentMode+0x2e>
 8008fb0:	e01a      	b.n	8008fe8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d115      	bne.n	8008fe4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	f7f8 ffb9 	bl	8001f3c <HAL_Delay>
      ms++;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa0f 	bl	80093f4 <USB_GetMode>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <USB_SetCurrentMode+0x84>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b31      	cmp	r3, #49	; 0x31
 8008fe0:	d9f0      	bls.n	8008fc4 <USB_SetCurrentMode+0x60>
 8008fe2:	e001      	b.n	8008fe8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e005      	b.n	8008ff4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b32      	cmp	r3, #50	; 0x32
 8008fec:	d101      	bne.n	8008ff2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b086      	sub	sp, #24
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800900a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009016:	2300      	movs	r3, #0
 8009018:	613b      	str	r3, [r7, #16]
 800901a:	e009      	b.n	8009030 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	3340      	adds	r3, #64	; 0x40
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	2200      	movs	r2, #0
 8009028:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	3301      	adds	r3, #1
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	2b0e      	cmp	r3, #14
 8009034:	d9f2      	bls.n	800901c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d11c      	bne.n	8009076 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904a:	f043 0302 	orr.w	r3, r3, #2
 800904e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e005      	b.n	8009082 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009088:	461a      	mov	r2, r3
 800908a:	2300      	movs	r3, #0
 800908c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009094:	4619      	mov	r1, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909c:	461a      	mov	r2, r3
 800909e:	680b      	ldr	r3, [r1, #0]
 80090a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d10c      	bne.n	80090c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090ae:	2100      	movs	r1, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f965 	bl	8009380 <USB_SetDevSpeed>
 80090b6:	e008      	b.n	80090ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090b8:	2101      	movs	r1, #1
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f960 	bl	8009380 <USB_SetDevSpeed>
 80090c0:	e003      	b.n	80090ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090c2:	2103      	movs	r1, #3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f95b 	bl	8009380 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090ca:	2110      	movs	r1, #16
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8f3 	bl	80092b8 <USB_FlushTxFifo>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f91f 	bl	8009320 <USB_FlushRxFifo>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f2:	461a      	mov	r2, r3
 80090f4:	2300      	movs	r3, #0
 80090f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fe:	461a      	mov	r2, r3
 8009100:	2300      	movs	r3, #0
 8009102:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910a:	461a      	mov	r2, r3
 800910c:	2300      	movs	r3, #0
 800910e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009110:	2300      	movs	r3, #0
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	e043      	b.n	800919e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800912c:	d118      	bne.n	8009160 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	461a      	mov	r2, r3
 8009142:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	e013      	b.n	8009172 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009156:	461a      	mov	r2, r3
 8009158:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	e008      	b.n	8009172 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916c:	461a      	mov	r2, r3
 800916e:	2300      	movs	r3, #0
 8009170:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917e:	461a      	mov	r2, r3
 8009180:	2300      	movs	r3, #0
 8009182:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009190:	461a      	mov	r2, r3
 8009192:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009196:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	3301      	adds	r3, #1
 800919c:	613b      	str	r3, [r7, #16]
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d3b7      	bcc.n	8009116 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091a6:	2300      	movs	r3, #0
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	e043      	b.n	8009234 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091c2:	d118      	bne.n	80091f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d6:	461a      	mov	r2, r3
 80091d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	e013      	b.n	8009208 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	461a      	mov	r2, r3
 80091ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	e008      	b.n	8009208 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	461a      	mov	r2, r3
 8009204:	2300      	movs	r3, #0
 8009206:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009214:	461a      	mov	r2, r3
 8009216:	2300      	movs	r3, #0
 8009218:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009226:	461a      	mov	r2, r3
 8009228:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800922c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	3301      	adds	r3, #1
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	429a      	cmp	r2, r3
 800923a:	d3b7      	bcc.n	80091ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800924a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800924e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800925c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f043 0210 	orr.w	r2, r3, #16
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <USB_DevInit+0x2b8>)
 8009276:	4313      	orrs	r3, r2
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800927c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	f043 0208 	orr.w	r2, r3, #8
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800928e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009290:	2b01      	cmp	r3, #1
 8009292:	d107      	bne.n	80092a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800929c:	f043 0304 	orr.w	r3, r3, #4
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092b0:	b004      	add	sp, #16
 80092b2:	4770      	bx	lr
 80092b4:	803c3800 	.word	0x803c3800

080092b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4a13      	ldr	r2, [pc, #76]	; (800931c <USB_FlushTxFifo+0x64>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d901      	bls.n	80092d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e01b      	b.n	8009310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	daf2      	bge.n	80092c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	019b      	lsls	r3, r3, #6
 80092e8:	f043 0220 	orr.w	r2, r3, #32
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3301      	adds	r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4a08      	ldr	r2, [pc, #32]	; (800931c <USB_FlushTxFifo+0x64>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d901      	bls.n	8009302 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e006      	b.n	8009310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f003 0320 	and.w	r3, r3, #32
 800930a:	2b20      	cmp	r3, #32
 800930c:	d0f0      	beq.n	80092f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	00030d40 	.word	0x00030d40

08009320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3301      	adds	r3, #1
 8009330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4a11      	ldr	r2, [pc, #68]	; (800937c <USB_FlushRxFifo+0x5c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d901      	bls.n	800933e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e018      	b.n	8009370 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	daf2      	bge.n	800932c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2210      	movs	r2, #16
 800934e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4a08      	ldr	r2, [pc, #32]	; (800937c <USB_FlushRxFifo+0x5c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d901      	bls.n	8009362 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e006      	b.n	8009370 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	2b10      	cmp	r3, #16
 800936c:	d0f0      	beq.n	8009350 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	00030d40 	.word	0x00030d40

08009380 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	68f9      	ldr	r1, [r7, #12]
 800939c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093a0:	4313      	orrs	r3, r2
 80093a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093cc:	f023 0303 	bic.w	r3, r3, #3
 80093d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e0:	f043 0302 	orr.w	r3, r3, #2
 80093e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	f003 0301 	and.w	r3, r3, #1
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4a13      	ldr	r2, [pc, #76]	; (8009474 <USB_CoreReset+0x64>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d901      	bls.n	800942e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e01b      	b.n	8009466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	daf2      	bge.n	800941c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f043 0201 	orr.w	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3301      	adds	r3, #1
 800944a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a09      	ldr	r2, [pc, #36]	; (8009474 <USB_CoreReset+0x64>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d901      	bls.n	8009458 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e006      	b.n	8009466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b01      	cmp	r3, #1
 8009462:	d0f0      	beq.n	8009446 <USB_CoreReset+0x36>

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	00030d40 	.word	0x00030d40

08009478 <siprintf>:
 8009478:	b40e      	push	{r1, r2, r3}
 800947a:	b500      	push	{lr}
 800947c:	b09c      	sub	sp, #112	; 0x70
 800947e:	ab1d      	add	r3, sp, #116	; 0x74
 8009480:	9002      	str	r0, [sp, #8]
 8009482:	9006      	str	r0, [sp, #24]
 8009484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009488:	4809      	ldr	r0, [pc, #36]	; (80094b0 <siprintf+0x38>)
 800948a:	9107      	str	r1, [sp, #28]
 800948c:	9104      	str	r1, [sp, #16]
 800948e:	4909      	ldr	r1, [pc, #36]	; (80094b4 <siprintf+0x3c>)
 8009490:	f853 2b04 	ldr.w	r2, [r3], #4
 8009494:	9105      	str	r1, [sp, #20]
 8009496:	6800      	ldr	r0, [r0, #0]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	a902      	add	r1, sp, #8
 800949c:	f000 f89a 	bl	80095d4 <_svfiprintf_r>
 80094a0:	9b02      	ldr	r3, [sp, #8]
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	b01c      	add	sp, #112	; 0x70
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	20000060 	.word	0x20000060
 80094b4:	ffff0208 	.word	0xffff0208

080094b8 <memset>:
 80094b8:	4402      	add	r2, r0
 80094ba:	4603      	mov	r3, r0
 80094bc:	4293      	cmp	r3, r2
 80094be:	d100      	bne.n	80094c2 <memset+0xa>
 80094c0:	4770      	bx	lr
 80094c2:	f803 1b01 	strb.w	r1, [r3], #1
 80094c6:	e7f9      	b.n	80094bc <memset+0x4>

080094c8 <__errno>:
 80094c8:	4b01      	ldr	r3, [pc, #4]	; (80094d0 <__errno+0x8>)
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	20000060 	.word	0x20000060

080094d4 <__libc_init_array>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	4d0d      	ldr	r5, [pc, #52]	; (800950c <__libc_init_array+0x38>)
 80094d8:	4c0d      	ldr	r4, [pc, #52]	; (8009510 <__libc_init_array+0x3c>)
 80094da:	1b64      	subs	r4, r4, r5
 80094dc:	10a4      	asrs	r4, r4, #2
 80094de:	2600      	movs	r6, #0
 80094e0:	42a6      	cmp	r6, r4
 80094e2:	d109      	bne.n	80094f8 <__libc_init_array+0x24>
 80094e4:	4d0b      	ldr	r5, [pc, #44]	; (8009514 <__libc_init_array+0x40>)
 80094e6:	4c0c      	ldr	r4, [pc, #48]	; (8009518 <__libc_init_array+0x44>)
 80094e8:	f000 fc6a 	bl	8009dc0 <_init>
 80094ec:	1b64      	subs	r4, r4, r5
 80094ee:	10a4      	asrs	r4, r4, #2
 80094f0:	2600      	movs	r6, #0
 80094f2:	42a6      	cmp	r6, r4
 80094f4:	d105      	bne.n	8009502 <__libc_init_array+0x2e>
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fc:	4798      	blx	r3
 80094fe:	3601      	adds	r6, #1
 8009500:	e7ee      	b.n	80094e0 <__libc_init_array+0xc>
 8009502:	f855 3b04 	ldr.w	r3, [r5], #4
 8009506:	4798      	blx	r3
 8009508:	3601      	adds	r6, #1
 800950a:	e7f2      	b.n	80094f2 <__libc_init_array+0x1e>
 800950c:	0800a0c0 	.word	0x0800a0c0
 8009510:	0800a0c0 	.word	0x0800a0c0
 8009514:	0800a0c0 	.word	0x0800a0c0
 8009518:	0800a0c4 	.word	0x0800a0c4

0800951c <__retarget_lock_acquire_recursive>:
 800951c:	4770      	bx	lr

0800951e <__retarget_lock_release_recursive>:
 800951e:	4770      	bx	lr

08009520 <__ssputs_r>:
 8009520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	688e      	ldr	r6, [r1, #8]
 8009526:	461f      	mov	r7, r3
 8009528:	42be      	cmp	r6, r7
 800952a:	680b      	ldr	r3, [r1, #0]
 800952c:	4682      	mov	sl, r0
 800952e:	460c      	mov	r4, r1
 8009530:	4690      	mov	r8, r2
 8009532:	d82c      	bhi.n	800958e <__ssputs_r+0x6e>
 8009534:	898a      	ldrh	r2, [r1, #12]
 8009536:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800953a:	d026      	beq.n	800958a <__ssputs_r+0x6a>
 800953c:	6965      	ldr	r5, [r4, #20]
 800953e:	6909      	ldr	r1, [r1, #16]
 8009540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009544:	eba3 0901 	sub.w	r9, r3, r1
 8009548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800954c:	1c7b      	adds	r3, r7, #1
 800954e:	444b      	add	r3, r9
 8009550:	106d      	asrs	r5, r5, #1
 8009552:	429d      	cmp	r5, r3
 8009554:	bf38      	it	cc
 8009556:	461d      	movcc	r5, r3
 8009558:	0553      	lsls	r3, r2, #21
 800955a:	d527      	bpl.n	80095ac <__ssputs_r+0x8c>
 800955c:	4629      	mov	r1, r5
 800955e:	f000 f957 	bl	8009810 <_malloc_r>
 8009562:	4606      	mov	r6, r0
 8009564:	b360      	cbz	r0, 80095c0 <__ssputs_r+0xa0>
 8009566:	6921      	ldr	r1, [r4, #16]
 8009568:	464a      	mov	r2, r9
 800956a:	f000 fbc7 	bl	8009cfc <memcpy>
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	6126      	str	r6, [r4, #16]
 800957c:	6165      	str	r5, [r4, #20]
 800957e:	444e      	add	r6, r9
 8009580:	eba5 0509 	sub.w	r5, r5, r9
 8009584:	6026      	str	r6, [r4, #0]
 8009586:	60a5      	str	r5, [r4, #8]
 8009588:	463e      	mov	r6, r7
 800958a:	42be      	cmp	r6, r7
 800958c:	d900      	bls.n	8009590 <__ssputs_r+0x70>
 800958e:	463e      	mov	r6, r7
 8009590:	6820      	ldr	r0, [r4, #0]
 8009592:	4632      	mov	r2, r6
 8009594:	4641      	mov	r1, r8
 8009596:	f000 fb86 	bl	8009ca6 <memmove>
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	1b9b      	subs	r3, r3, r6
 800959e:	60a3      	str	r3, [r4, #8]
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	4433      	add	r3, r6
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	2000      	movs	r0, #0
 80095a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ac:	462a      	mov	r2, r5
 80095ae:	f000 fb4b 	bl	8009c48 <_realloc_r>
 80095b2:	4606      	mov	r6, r0
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d1e0      	bne.n	800957a <__ssputs_r+0x5a>
 80095b8:	6921      	ldr	r1, [r4, #16]
 80095ba:	4650      	mov	r0, sl
 80095bc:	f000 fbac 	bl	8009d18 <_free_r>
 80095c0:	230c      	movs	r3, #12
 80095c2:	f8ca 3000 	str.w	r3, [sl]
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d2:	e7e9      	b.n	80095a8 <__ssputs_r+0x88>

080095d4 <_svfiprintf_r>:
 80095d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	4698      	mov	r8, r3
 80095da:	898b      	ldrh	r3, [r1, #12]
 80095dc:	061b      	lsls	r3, r3, #24
 80095de:	b09d      	sub	sp, #116	; 0x74
 80095e0:	4607      	mov	r7, r0
 80095e2:	460d      	mov	r5, r1
 80095e4:	4614      	mov	r4, r2
 80095e6:	d50e      	bpl.n	8009606 <_svfiprintf_r+0x32>
 80095e8:	690b      	ldr	r3, [r1, #16]
 80095ea:	b963      	cbnz	r3, 8009606 <_svfiprintf_r+0x32>
 80095ec:	2140      	movs	r1, #64	; 0x40
 80095ee:	f000 f90f 	bl	8009810 <_malloc_r>
 80095f2:	6028      	str	r0, [r5, #0]
 80095f4:	6128      	str	r0, [r5, #16]
 80095f6:	b920      	cbnz	r0, 8009602 <_svfiprintf_r+0x2e>
 80095f8:	230c      	movs	r3, #12
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009600:	e0d0      	b.n	80097a4 <_svfiprintf_r+0x1d0>
 8009602:	2340      	movs	r3, #64	; 0x40
 8009604:	616b      	str	r3, [r5, #20]
 8009606:	2300      	movs	r3, #0
 8009608:	9309      	str	r3, [sp, #36]	; 0x24
 800960a:	2320      	movs	r3, #32
 800960c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009610:	f8cd 800c 	str.w	r8, [sp, #12]
 8009614:	2330      	movs	r3, #48	; 0x30
 8009616:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80097bc <_svfiprintf_r+0x1e8>
 800961a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800961e:	f04f 0901 	mov.w	r9, #1
 8009622:	4623      	mov	r3, r4
 8009624:	469a      	mov	sl, r3
 8009626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800962a:	b10a      	cbz	r2, 8009630 <_svfiprintf_r+0x5c>
 800962c:	2a25      	cmp	r2, #37	; 0x25
 800962e:	d1f9      	bne.n	8009624 <_svfiprintf_r+0x50>
 8009630:	ebba 0b04 	subs.w	fp, sl, r4
 8009634:	d00b      	beq.n	800964e <_svfiprintf_r+0x7a>
 8009636:	465b      	mov	r3, fp
 8009638:	4622      	mov	r2, r4
 800963a:	4629      	mov	r1, r5
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff ff6f 	bl	8009520 <__ssputs_r>
 8009642:	3001      	adds	r0, #1
 8009644:	f000 80a9 	beq.w	800979a <_svfiprintf_r+0x1c6>
 8009648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800964a:	445a      	add	r2, fp
 800964c:	9209      	str	r2, [sp, #36]	; 0x24
 800964e:	f89a 3000 	ldrb.w	r3, [sl]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80a1 	beq.w	800979a <_svfiprintf_r+0x1c6>
 8009658:	2300      	movs	r3, #0
 800965a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800965e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009662:	f10a 0a01 	add.w	sl, sl, #1
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	9307      	str	r3, [sp, #28]
 800966a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800966e:	931a      	str	r3, [sp, #104]	; 0x68
 8009670:	4654      	mov	r4, sl
 8009672:	2205      	movs	r2, #5
 8009674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009678:	4850      	ldr	r0, [pc, #320]	; (80097bc <_svfiprintf_r+0x1e8>)
 800967a:	f7f6 fdd1 	bl	8000220 <memchr>
 800967e:	9a04      	ldr	r2, [sp, #16]
 8009680:	b9d8      	cbnz	r0, 80096ba <_svfiprintf_r+0xe6>
 8009682:	06d0      	lsls	r0, r2, #27
 8009684:	bf44      	itt	mi
 8009686:	2320      	movmi	r3, #32
 8009688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800968c:	0711      	lsls	r1, r2, #28
 800968e:	bf44      	itt	mi
 8009690:	232b      	movmi	r3, #43	; 0x2b
 8009692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009696:	f89a 3000 	ldrb.w	r3, [sl]
 800969a:	2b2a      	cmp	r3, #42	; 0x2a
 800969c:	d015      	beq.n	80096ca <_svfiprintf_r+0xf6>
 800969e:	9a07      	ldr	r2, [sp, #28]
 80096a0:	4654      	mov	r4, sl
 80096a2:	2000      	movs	r0, #0
 80096a4:	f04f 0c0a 	mov.w	ip, #10
 80096a8:	4621      	mov	r1, r4
 80096aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ae:	3b30      	subs	r3, #48	; 0x30
 80096b0:	2b09      	cmp	r3, #9
 80096b2:	d94d      	bls.n	8009750 <_svfiprintf_r+0x17c>
 80096b4:	b1b0      	cbz	r0, 80096e4 <_svfiprintf_r+0x110>
 80096b6:	9207      	str	r2, [sp, #28]
 80096b8:	e014      	b.n	80096e4 <_svfiprintf_r+0x110>
 80096ba:	eba0 0308 	sub.w	r3, r0, r8
 80096be:	fa09 f303 	lsl.w	r3, r9, r3
 80096c2:	4313      	orrs	r3, r2
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	46a2      	mov	sl, r4
 80096c8:	e7d2      	b.n	8009670 <_svfiprintf_r+0x9c>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	1d19      	adds	r1, r3, #4
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	9103      	str	r1, [sp, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	bfbb      	ittet	lt
 80096d6:	425b      	neglt	r3, r3
 80096d8:	f042 0202 	orrlt.w	r2, r2, #2
 80096dc:	9307      	strge	r3, [sp, #28]
 80096de:	9307      	strlt	r3, [sp, #28]
 80096e0:	bfb8      	it	lt
 80096e2:	9204      	strlt	r2, [sp, #16]
 80096e4:	7823      	ldrb	r3, [r4, #0]
 80096e6:	2b2e      	cmp	r3, #46	; 0x2e
 80096e8:	d10c      	bne.n	8009704 <_svfiprintf_r+0x130>
 80096ea:	7863      	ldrb	r3, [r4, #1]
 80096ec:	2b2a      	cmp	r3, #42	; 0x2a
 80096ee:	d134      	bne.n	800975a <_svfiprintf_r+0x186>
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	1d1a      	adds	r2, r3, #4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	9203      	str	r2, [sp, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bfb8      	it	lt
 80096fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009700:	3402      	adds	r4, #2
 8009702:	9305      	str	r3, [sp, #20]
 8009704:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80097cc <_svfiprintf_r+0x1f8>
 8009708:	7821      	ldrb	r1, [r4, #0]
 800970a:	2203      	movs	r2, #3
 800970c:	4650      	mov	r0, sl
 800970e:	f7f6 fd87 	bl	8000220 <memchr>
 8009712:	b138      	cbz	r0, 8009724 <_svfiprintf_r+0x150>
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	eba0 000a 	sub.w	r0, r0, sl
 800971a:	2240      	movs	r2, #64	; 0x40
 800971c:	4082      	lsls	r2, r0
 800971e:	4313      	orrs	r3, r2
 8009720:	3401      	adds	r4, #1
 8009722:	9304      	str	r3, [sp, #16]
 8009724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009728:	4825      	ldr	r0, [pc, #148]	; (80097c0 <_svfiprintf_r+0x1ec>)
 800972a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800972e:	2206      	movs	r2, #6
 8009730:	f7f6 fd76 	bl	8000220 <memchr>
 8009734:	2800      	cmp	r0, #0
 8009736:	d038      	beq.n	80097aa <_svfiprintf_r+0x1d6>
 8009738:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <_svfiprintf_r+0x1f0>)
 800973a:	bb1b      	cbnz	r3, 8009784 <_svfiprintf_r+0x1b0>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	3307      	adds	r3, #7
 8009740:	f023 0307 	bic.w	r3, r3, #7
 8009744:	3308      	adds	r3, #8
 8009746:	9303      	str	r3, [sp, #12]
 8009748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974a:	4433      	add	r3, r6
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	e768      	b.n	8009622 <_svfiprintf_r+0x4e>
 8009750:	fb0c 3202 	mla	r2, ip, r2, r3
 8009754:	460c      	mov	r4, r1
 8009756:	2001      	movs	r0, #1
 8009758:	e7a6      	b.n	80096a8 <_svfiprintf_r+0xd4>
 800975a:	2300      	movs	r3, #0
 800975c:	3401      	adds	r4, #1
 800975e:	9305      	str	r3, [sp, #20]
 8009760:	4619      	mov	r1, r3
 8009762:	f04f 0c0a 	mov.w	ip, #10
 8009766:	4620      	mov	r0, r4
 8009768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800976c:	3a30      	subs	r2, #48	; 0x30
 800976e:	2a09      	cmp	r2, #9
 8009770:	d903      	bls.n	800977a <_svfiprintf_r+0x1a6>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0c6      	beq.n	8009704 <_svfiprintf_r+0x130>
 8009776:	9105      	str	r1, [sp, #20]
 8009778:	e7c4      	b.n	8009704 <_svfiprintf_r+0x130>
 800977a:	fb0c 2101 	mla	r1, ip, r1, r2
 800977e:	4604      	mov	r4, r0
 8009780:	2301      	movs	r3, #1
 8009782:	e7f0      	b.n	8009766 <_svfiprintf_r+0x192>
 8009784:	ab03      	add	r3, sp, #12
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462a      	mov	r2, r5
 800978a:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <_svfiprintf_r+0x1f4>)
 800978c:	a904      	add	r1, sp, #16
 800978e:	4638      	mov	r0, r7
 8009790:	f3af 8000 	nop.w
 8009794:	1c42      	adds	r2, r0, #1
 8009796:	4606      	mov	r6, r0
 8009798:	d1d6      	bne.n	8009748 <_svfiprintf_r+0x174>
 800979a:	89ab      	ldrh	r3, [r5, #12]
 800979c:	065b      	lsls	r3, r3, #25
 800979e:	f53f af2d 	bmi.w	80095fc <_svfiprintf_r+0x28>
 80097a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097a4:	b01d      	add	sp, #116	; 0x74
 80097a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097aa:	ab03      	add	r3, sp, #12
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	462a      	mov	r2, r5
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <_svfiprintf_r+0x1f4>)
 80097b2:	a904      	add	r1, sp, #16
 80097b4:	4638      	mov	r0, r7
 80097b6:	f000 f919 	bl	80099ec <_printf_i>
 80097ba:	e7eb      	b.n	8009794 <_svfiprintf_r+0x1c0>
 80097bc:	0800a084 	.word	0x0800a084
 80097c0:	0800a08e 	.word	0x0800a08e
 80097c4:	00000000 	.word	0x00000000
 80097c8:	08009521 	.word	0x08009521
 80097cc:	0800a08a 	.word	0x0800a08a

080097d0 <sbrk_aligned>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	4e0e      	ldr	r6, [pc, #56]	; (800980c <sbrk_aligned+0x3c>)
 80097d4:	460c      	mov	r4, r1
 80097d6:	6831      	ldr	r1, [r6, #0]
 80097d8:	4605      	mov	r5, r0
 80097da:	b911      	cbnz	r1, 80097e2 <sbrk_aligned+0x12>
 80097dc:	f000 fa7e 	bl	8009cdc <_sbrk_r>
 80097e0:	6030      	str	r0, [r6, #0]
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 fa79 	bl	8009cdc <_sbrk_r>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d00a      	beq.n	8009804 <sbrk_aligned+0x34>
 80097ee:	1cc4      	adds	r4, r0, #3
 80097f0:	f024 0403 	bic.w	r4, r4, #3
 80097f4:	42a0      	cmp	r0, r4
 80097f6:	d007      	beq.n	8009808 <sbrk_aligned+0x38>
 80097f8:	1a21      	subs	r1, r4, r0
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 fa6e 	bl	8009cdc <_sbrk_r>
 8009800:	3001      	adds	r0, #1
 8009802:	d101      	bne.n	8009808 <sbrk_aligned+0x38>
 8009804:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009808:	4620      	mov	r0, r4
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	200191cc 	.word	0x200191cc

08009810 <_malloc_r>:
 8009810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009814:	1ccd      	adds	r5, r1, #3
 8009816:	f025 0503 	bic.w	r5, r5, #3
 800981a:	3508      	adds	r5, #8
 800981c:	2d0c      	cmp	r5, #12
 800981e:	bf38      	it	cc
 8009820:	250c      	movcc	r5, #12
 8009822:	2d00      	cmp	r5, #0
 8009824:	4607      	mov	r7, r0
 8009826:	db01      	blt.n	800982c <_malloc_r+0x1c>
 8009828:	42a9      	cmp	r1, r5
 800982a:	d905      	bls.n	8009838 <_malloc_r+0x28>
 800982c:	230c      	movs	r3, #12
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	2600      	movs	r6, #0
 8009832:	4630      	mov	r0, r6
 8009834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009838:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800990c <_malloc_r+0xfc>
 800983c:	f000 f9f8 	bl	8009c30 <__malloc_lock>
 8009840:	f8d8 3000 	ldr.w	r3, [r8]
 8009844:	461c      	mov	r4, r3
 8009846:	bb5c      	cbnz	r4, 80098a0 <_malloc_r+0x90>
 8009848:	4629      	mov	r1, r5
 800984a:	4638      	mov	r0, r7
 800984c:	f7ff ffc0 	bl	80097d0 <sbrk_aligned>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	4604      	mov	r4, r0
 8009854:	d155      	bne.n	8009902 <_malloc_r+0xf2>
 8009856:	f8d8 4000 	ldr.w	r4, [r8]
 800985a:	4626      	mov	r6, r4
 800985c:	2e00      	cmp	r6, #0
 800985e:	d145      	bne.n	80098ec <_malloc_r+0xdc>
 8009860:	2c00      	cmp	r4, #0
 8009862:	d048      	beq.n	80098f6 <_malloc_r+0xe6>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	4631      	mov	r1, r6
 8009868:	4638      	mov	r0, r7
 800986a:	eb04 0903 	add.w	r9, r4, r3
 800986e:	f000 fa35 	bl	8009cdc <_sbrk_r>
 8009872:	4581      	cmp	r9, r0
 8009874:	d13f      	bne.n	80098f6 <_malloc_r+0xe6>
 8009876:	6821      	ldr	r1, [r4, #0]
 8009878:	1a6d      	subs	r5, r5, r1
 800987a:	4629      	mov	r1, r5
 800987c:	4638      	mov	r0, r7
 800987e:	f7ff ffa7 	bl	80097d0 <sbrk_aligned>
 8009882:	3001      	adds	r0, #1
 8009884:	d037      	beq.n	80098f6 <_malloc_r+0xe6>
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	442b      	add	r3, r5
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	f8d8 3000 	ldr.w	r3, [r8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d038      	beq.n	8009906 <_malloc_r+0xf6>
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	42a2      	cmp	r2, r4
 8009898:	d12b      	bne.n	80098f2 <_malloc_r+0xe2>
 800989a:	2200      	movs	r2, #0
 800989c:	605a      	str	r2, [r3, #4]
 800989e:	e00f      	b.n	80098c0 <_malloc_r+0xb0>
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	1b52      	subs	r2, r2, r5
 80098a4:	d41f      	bmi.n	80098e6 <_malloc_r+0xd6>
 80098a6:	2a0b      	cmp	r2, #11
 80098a8:	d917      	bls.n	80098da <_malloc_r+0xca>
 80098aa:	1961      	adds	r1, r4, r5
 80098ac:	42a3      	cmp	r3, r4
 80098ae:	6025      	str	r5, [r4, #0]
 80098b0:	bf18      	it	ne
 80098b2:	6059      	strne	r1, [r3, #4]
 80098b4:	6863      	ldr	r3, [r4, #4]
 80098b6:	bf08      	it	eq
 80098b8:	f8c8 1000 	streq.w	r1, [r8]
 80098bc:	5162      	str	r2, [r4, r5]
 80098be:	604b      	str	r3, [r1, #4]
 80098c0:	4638      	mov	r0, r7
 80098c2:	f104 060b 	add.w	r6, r4, #11
 80098c6:	f000 f9b9 	bl	8009c3c <__malloc_unlock>
 80098ca:	f026 0607 	bic.w	r6, r6, #7
 80098ce:	1d23      	adds	r3, r4, #4
 80098d0:	1af2      	subs	r2, r6, r3
 80098d2:	d0ae      	beq.n	8009832 <_malloc_r+0x22>
 80098d4:	1b9b      	subs	r3, r3, r6
 80098d6:	50a3      	str	r3, [r4, r2]
 80098d8:	e7ab      	b.n	8009832 <_malloc_r+0x22>
 80098da:	42a3      	cmp	r3, r4
 80098dc:	6862      	ldr	r2, [r4, #4]
 80098de:	d1dd      	bne.n	800989c <_malloc_r+0x8c>
 80098e0:	f8c8 2000 	str.w	r2, [r8]
 80098e4:	e7ec      	b.n	80098c0 <_malloc_r+0xb0>
 80098e6:	4623      	mov	r3, r4
 80098e8:	6864      	ldr	r4, [r4, #4]
 80098ea:	e7ac      	b.n	8009846 <_malloc_r+0x36>
 80098ec:	4634      	mov	r4, r6
 80098ee:	6876      	ldr	r6, [r6, #4]
 80098f0:	e7b4      	b.n	800985c <_malloc_r+0x4c>
 80098f2:	4613      	mov	r3, r2
 80098f4:	e7cc      	b.n	8009890 <_malloc_r+0x80>
 80098f6:	230c      	movs	r3, #12
 80098f8:	603b      	str	r3, [r7, #0]
 80098fa:	4638      	mov	r0, r7
 80098fc:	f000 f99e 	bl	8009c3c <__malloc_unlock>
 8009900:	e797      	b.n	8009832 <_malloc_r+0x22>
 8009902:	6025      	str	r5, [r4, #0]
 8009904:	e7dc      	b.n	80098c0 <_malloc_r+0xb0>
 8009906:	605b      	str	r3, [r3, #4]
 8009908:	deff      	udf	#255	; 0xff
 800990a:	bf00      	nop
 800990c:	200191c8 	.word	0x200191c8

08009910 <_printf_common>:
 8009910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009914:	4616      	mov	r6, r2
 8009916:	4699      	mov	r9, r3
 8009918:	688a      	ldr	r2, [r1, #8]
 800991a:	690b      	ldr	r3, [r1, #16]
 800991c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009920:	4293      	cmp	r3, r2
 8009922:	bfb8      	it	lt
 8009924:	4613      	movlt	r3, r2
 8009926:	6033      	str	r3, [r6, #0]
 8009928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800992c:	4607      	mov	r7, r0
 800992e:	460c      	mov	r4, r1
 8009930:	b10a      	cbz	r2, 8009936 <_printf_common+0x26>
 8009932:	3301      	adds	r3, #1
 8009934:	6033      	str	r3, [r6, #0]
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	0699      	lsls	r1, r3, #26
 800993a:	bf42      	ittt	mi
 800993c:	6833      	ldrmi	r3, [r6, #0]
 800993e:	3302      	addmi	r3, #2
 8009940:	6033      	strmi	r3, [r6, #0]
 8009942:	6825      	ldr	r5, [r4, #0]
 8009944:	f015 0506 	ands.w	r5, r5, #6
 8009948:	d106      	bne.n	8009958 <_printf_common+0x48>
 800994a:	f104 0a19 	add.w	sl, r4, #25
 800994e:	68e3      	ldr	r3, [r4, #12]
 8009950:	6832      	ldr	r2, [r6, #0]
 8009952:	1a9b      	subs	r3, r3, r2
 8009954:	42ab      	cmp	r3, r5
 8009956:	dc26      	bgt.n	80099a6 <_printf_common+0x96>
 8009958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800995c:	1e13      	subs	r3, r2, #0
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	bf18      	it	ne
 8009962:	2301      	movne	r3, #1
 8009964:	0692      	lsls	r2, r2, #26
 8009966:	d42b      	bmi.n	80099c0 <_printf_common+0xb0>
 8009968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800996c:	4649      	mov	r1, r9
 800996e:	4638      	mov	r0, r7
 8009970:	47c0      	blx	r8
 8009972:	3001      	adds	r0, #1
 8009974:	d01e      	beq.n	80099b4 <_printf_common+0xa4>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	6922      	ldr	r2, [r4, #16]
 800997a:	f003 0306 	and.w	r3, r3, #6
 800997e:	2b04      	cmp	r3, #4
 8009980:	bf02      	ittt	eq
 8009982:	68e5      	ldreq	r5, [r4, #12]
 8009984:	6833      	ldreq	r3, [r6, #0]
 8009986:	1aed      	subeq	r5, r5, r3
 8009988:	68a3      	ldr	r3, [r4, #8]
 800998a:	bf0c      	ite	eq
 800998c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009990:	2500      	movne	r5, #0
 8009992:	4293      	cmp	r3, r2
 8009994:	bfc4      	itt	gt
 8009996:	1a9b      	subgt	r3, r3, r2
 8009998:	18ed      	addgt	r5, r5, r3
 800999a:	2600      	movs	r6, #0
 800999c:	341a      	adds	r4, #26
 800999e:	42b5      	cmp	r5, r6
 80099a0:	d11a      	bne.n	80099d8 <_printf_common+0xc8>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e008      	b.n	80099b8 <_printf_common+0xa8>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4652      	mov	r2, sl
 80099aa:	4649      	mov	r1, r9
 80099ac:	4638      	mov	r0, r7
 80099ae:	47c0      	blx	r8
 80099b0:	3001      	adds	r0, #1
 80099b2:	d103      	bne.n	80099bc <_printf_common+0xac>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099bc:	3501      	adds	r5, #1
 80099be:	e7c6      	b.n	800994e <_printf_common+0x3e>
 80099c0:	18e1      	adds	r1, r4, r3
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	2030      	movs	r0, #48	; 0x30
 80099c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ca:	4422      	add	r2, r4
 80099cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099d4:	3302      	adds	r3, #2
 80099d6:	e7c7      	b.n	8009968 <_printf_common+0x58>
 80099d8:	2301      	movs	r3, #1
 80099da:	4622      	mov	r2, r4
 80099dc:	4649      	mov	r1, r9
 80099de:	4638      	mov	r0, r7
 80099e0:	47c0      	blx	r8
 80099e2:	3001      	adds	r0, #1
 80099e4:	d0e6      	beq.n	80099b4 <_printf_common+0xa4>
 80099e6:	3601      	adds	r6, #1
 80099e8:	e7d9      	b.n	800999e <_printf_common+0x8e>
	...

080099ec <_printf_i>:
 80099ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	7e0f      	ldrb	r7, [r1, #24]
 80099f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099f4:	2f78      	cmp	r7, #120	; 0x78
 80099f6:	4691      	mov	r9, r2
 80099f8:	4680      	mov	r8, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	469a      	mov	sl, r3
 80099fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a02:	d807      	bhi.n	8009a14 <_printf_i+0x28>
 8009a04:	2f62      	cmp	r7, #98	; 0x62
 8009a06:	d80a      	bhi.n	8009a1e <_printf_i+0x32>
 8009a08:	2f00      	cmp	r7, #0
 8009a0a:	f000 80d4 	beq.w	8009bb6 <_printf_i+0x1ca>
 8009a0e:	2f58      	cmp	r7, #88	; 0x58
 8009a10:	f000 80c0 	beq.w	8009b94 <_printf_i+0x1a8>
 8009a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a1c:	e03a      	b.n	8009a94 <_printf_i+0xa8>
 8009a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a22:	2b15      	cmp	r3, #21
 8009a24:	d8f6      	bhi.n	8009a14 <_printf_i+0x28>
 8009a26:	a101      	add	r1, pc, #4	; (adr r1, 8009a2c <_printf_i+0x40>)
 8009a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a2c:	08009a85 	.word	0x08009a85
 8009a30:	08009a99 	.word	0x08009a99
 8009a34:	08009a15 	.word	0x08009a15
 8009a38:	08009a15 	.word	0x08009a15
 8009a3c:	08009a15 	.word	0x08009a15
 8009a40:	08009a15 	.word	0x08009a15
 8009a44:	08009a99 	.word	0x08009a99
 8009a48:	08009a15 	.word	0x08009a15
 8009a4c:	08009a15 	.word	0x08009a15
 8009a50:	08009a15 	.word	0x08009a15
 8009a54:	08009a15 	.word	0x08009a15
 8009a58:	08009b9d 	.word	0x08009b9d
 8009a5c:	08009ac5 	.word	0x08009ac5
 8009a60:	08009b57 	.word	0x08009b57
 8009a64:	08009a15 	.word	0x08009a15
 8009a68:	08009a15 	.word	0x08009a15
 8009a6c:	08009bbf 	.word	0x08009bbf
 8009a70:	08009a15 	.word	0x08009a15
 8009a74:	08009ac5 	.word	0x08009ac5
 8009a78:	08009a15 	.word	0x08009a15
 8009a7c:	08009a15 	.word	0x08009a15
 8009a80:	08009b5f 	.word	0x08009b5f
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	1d1a      	adds	r2, r3, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	602a      	str	r2, [r5, #0]
 8009a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a94:	2301      	movs	r3, #1
 8009a96:	e09f      	b.n	8009bd8 <_printf_i+0x1ec>
 8009a98:	6820      	ldr	r0, [r4, #0]
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	0607      	lsls	r7, r0, #24
 8009a9e:	f103 0104 	add.w	r1, r3, #4
 8009aa2:	6029      	str	r1, [r5, #0]
 8009aa4:	d501      	bpl.n	8009aaa <_printf_i+0xbe>
 8009aa6:	681e      	ldr	r6, [r3, #0]
 8009aa8:	e003      	b.n	8009ab2 <_printf_i+0xc6>
 8009aaa:	0646      	lsls	r6, r0, #25
 8009aac:	d5fb      	bpl.n	8009aa6 <_printf_i+0xba>
 8009aae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	da03      	bge.n	8009abe <_printf_i+0xd2>
 8009ab6:	232d      	movs	r3, #45	; 0x2d
 8009ab8:	4276      	negs	r6, r6
 8009aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009abe:	485a      	ldr	r0, [pc, #360]	; (8009c28 <_printf_i+0x23c>)
 8009ac0:	230a      	movs	r3, #10
 8009ac2:	e012      	b.n	8009aea <_printf_i+0xfe>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	6820      	ldr	r0, [r4, #0]
 8009ac8:	1d19      	adds	r1, r3, #4
 8009aca:	6029      	str	r1, [r5, #0]
 8009acc:	0605      	lsls	r5, r0, #24
 8009ace:	d501      	bpl.n	8009ad4 <_printf_i+0xe8>
 8009ad0:	681e      	ldr	r6, [r3, #0]
 8009ad2:	e002      	b.n	8009ada <_printf_i+0xee>
 8009ad4:	0641      	lsls	r1, r0, #25
 8009ad6:	d5fb      	bpl.n	8009ad0 <_printf_i+0xe4>
 8009ad8:	881e      	ldrh	r6, [r3, #0]
 8009ada:	4853      	ldr	r0, [pc, #332]	; (8009c28 <_printf_i+0x23c>)
 8009adc:	2f6f      	cmp	r7, #111	; 0x6f
 8009ade:	bf0c      	ite	eq
 8009ae0:	2308      	moveq	r3, #8
 8009ae2:	230a      	movne	r3, #10
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aea:	6865      	ldr	r5, [r4, #4]
 8009aec:	60a5      	str	r5, [r4, #8]
 8009aee:	2d00      	cmp	r5, #0
 8009af0:	bfa2      	ittt	ge
 8009af2:	6821      	ldrge	r1, [r4, #0]
 8009af4:	f021 0104 	bicge.w	r1, r1, #4
 8009af8:	6021      	strge	r1, [r4, #0]
 8009afa:	b90e      	cbnz	r6, 8009b00 <_printf_i+0x114>
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	d04b      	beq.n	8009b98 <_printf_i+0x1ac>
 8009b00:	4615      	mov	r5, r2
 8009b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b06:	fb03 6711 	mls	r7, r3, r1, r6
 8009b0a:	5dc7      	ldrb	r7, [r0, r7]
 8009b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b10:	4637      	mov	r7, r6
 8009b12:	42bb      	cmp	r3, r7
 8009b14:	460e      	mov	r6, r1
 8009b16:	d9f4      	bls.n	8009b02 <_printf_i+0x116>
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d10b      	bne.n	8009b34 <_printf_i+0x148>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	07de      	lsls	r6, r3, #31
 8009b20:	d508      	bpl.n	8009b34 <_printf_i+0x148>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6861      	ldr	r1, [r4, #4]
 8009b26:	4299      	cmp	r1, r3
 8009b28:	bfde      	ittt	le
 8009b2a:	2330      	movle	r3, #48	; 0x30
 8009b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b34:	1b52      	subs	r2, r2, r5
 8009b36:	6122      	str	r2, [r4, #16]
 8009b38:	f8cd a000 	str.w	sl, [sp]
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	aa03      	add	r2, sp, #12
 8009b40:	4621      	mov	r1, r4
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7ff fee4 	bl	8009910 <_printf_common>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d14a      	bne.n	8009be2 <_printf_i+0x1f6>
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b50:	b004      	add	sp, #16
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	f043 0320 	orr.w	r3, r3, #32
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	4833      	ldr	r0, [pc, #204]	; (8009c2c <_printf_i+0x240>)
 8009b60:	2778      	movs	r7, #120	; 0x78
 8009b62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	6829      	ldr	r1, [r5, #0]
 8009b6a:	061f      	lsls	r7, r3, #24
 8009b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b70:	d402      	bmi.n	8009b78 <_printf_i+0x18c>
 8009b72:	065f      	lsls	r7, r3, #25
 8009b74:	bf48      	it	mi
 8009b76:	b2b6      	uxthmi	r6, r6
 8009b78:	07df      	lsls	r7, r3, #31
 8009b7a:	bf48      	it	mi
 8009b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8009b80:	6029      	str	r1, [r5, #0]
 8009b82:	bf48      	it	mi
 8009b84:	6023      	strmi	r3, [r4, #0]
 8009b86:	b91e      	cbnz	r6, 8009b90 <_printf_i+0x1a4>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	f023 0320 	bic.w	r3, r3, #32
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	2310      	movs	r3, #16
 8009b92:	e7a7      	b.n	8009ae4 <_printf_i+0xf8>
 8009b94:	4824      	ldr	r0, [pc, #144]	; (8009c28 <_printf_i+0x23c>)
 8009b96:	e7e4      	b.n	8009b62 <_printf_i+0x176>
 8009b98:	4615      	mov	r5, r2
 8009b9a:	e7bd      	b.n	8009b18 <_printf_i+0x12c>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	6826      	ldr	r6, [r4, #0]
 8009ba0:	6961      	ldr	r1, [r4, #20]
 8009ba2:	1d18      	adds	r0, r3, #4
 8009ba4:	6028      	str	r0, [r5, #0]
 8009ba6:	0635      	lsls	r5, r6, #24
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	d501      	bpl.n	8009bb0 <_printf_i+0x1c4>
 8009bac:	6019      	str	r1, [r3, #0]
 8009bae:	e002      	b.n	8009bb6 <_printf_i+0x1ca>
 8009bb0:	0670      	lsls	r0, r6, #25
 8009bb2:	d5fb      	bpl.n	8009bac <_printf_i+0x1c0>
 8009bb4:	8019      	strh	r1, [r3, #0]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	4615      	mov	r5, r2
 8009bbc:	e7bc      	b.n	8009b38 <_printf_i+0x14c>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	602a      	str	r2, [r5, #0]
 8009bc4:	681d      	ldr	r5, [r3, #0]
 8009bc6:	6862      	ldr	r2, [r4, #4]
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f7f6 fb28 	bl	8000220 <memchr>
 8009bd0:	b108      	cbz	r0, 8009bd6 <_printf_i+0x1ea>
 8009bd2:	1b40      	subs	r0, r0, r5
 8009bd4:	6060      	str	r0, [r4, #4]
 8009bd6:	6863      	ldr	r3, [r4, #4]
 8009bd8:	6123      	str	r3, [r4, #16]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be0:	e7aa      	b.n	8009b38 <_printf_i+0x14c>
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	462a      	mov	r2, r5
 8009be6:	4649      	mov	r1, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	47d0      	blx	sl
 8009bec:	3001      	adds	r0, #1
 8009bee:	d0ad      	beq.n	8009b4c <_printf_i+0x160>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	079b      	lsls	r3, r3, #30
 8009bf4:	d413      	bmi.n	8009c1e <_printf_i+0x232>
 8009bf6:	68e0      	ldr	r0, [r4, #12]
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	4298      	cmp	r0, r3
 8009bfc:	bfb8      	it	lt
 8009bfe:	4618      	movlt	r0, r3
 8009c00:	e7a6      	b.n	8009b50 <_printf_i+0x164>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4632      	mov	r2, r6
 8009c06:	4649      	mov	r1, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	47d0      	blx	sl
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d09d      	beq.n	8009b4c <_printf_i+0x160>
 8009c10:	3501      	adds	r5, #1
 8009c12:	68e3      	ldr	r3, [r4, #12]
 8009c14:	9903      	ldr	r1, [sp, #12]
 8009c16:	1a5b      	subs	r3, r3, r1
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	dcf2      	bgt.n	8009c02 <_printf_i+0x216>
 8009c1c:	e7eb      	b.n	8009bf6 <_printf_i+0x20a>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	f104 0619 	add.w	r6, r4, #25
 8009c24:	e7f5      	b.n	8009c12 <_printf_i+0x226>
 8009c26:	bf00      	nop
 8009c28:	0800a095 	.word	0x0800a095
 8009c2c:	0800a0a6 	.word	0x0800a0a6

08009c30 <__malloc_lock>:
 8009c30:	4801      	ldr	r0, [pc, #4]	; (8009c38 <__malloc_lock+0x8>)
 8009c32:	f7ff bc73 	b.w	800951c <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	200191c4 	.word	0x200191c4

08009c3c <__malloc_unlock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__malloc_unlock+0x8>)
 8009c3e:	f7ff bc6e 	b.w	800951e <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	200191c4 	.word	0x200191c4

08009c48 <_realloc_r>:
 8009c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	4614      	mov	r4, r2
 8009c50:	460e      	mov	r6, r1
 8009c52:	b921      	cbnz	r1, 8009c5e <_realloc_r+0x16>
 8009c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c58:	4611      	mov	r1, r2
 8009c5a:	f7ff bdd9 	b.w	8009810 <_malloc_r>
 8009c5e:	b92a      	cbnz	r2, 8009c6c <_realloc_r+0x24>
 8009c60:	f000 f85a 	bl	8009d18 <_free_r>
 8009c64:	4625      	mov	r5, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c6c:	f000 f8a0 	bl	8009db0 <_malloc_usable_size_r>
 8009c70:	4284      	cmp	r4, r0
 8009c72:	4607      	mov	r7, r0
 8009c74:	d802      	bhi.n	8009c7c <_realloc_r+0x34>
 8009c76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c7a:	d812      	bhi.n	8009ca2 <_realloc_r+0x5a>
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4640      	mov	r0, r8
 8009c80:	f7ff fdc6 	bl	8009810 <_malloc_r>
 8009c84:	4605      	mov	r5, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0ed      	beq.n	8009c66 <_realloc_r+0x1e>
 8009c8a:	42bc      	cmp	r4, r7
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	4631      	mov	r1, r6
 8009c90:	bf28      	it	cs
 8009c92:	463a      	movcs	r2, r7
 8009c94:	f000 f832 	bl	8009cfc <memcpy>
 8009c98:	4631      	mov	r1, r6
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	f000 f83c 	bl	8009d18 <_free_r>
 8009ca0:	e7e1      	b.n	8009c66 <_realloc_r+0x1e>
 8009ca2:	4635      	mov	r5, r6
 8009ca4:	e7df      	b.n	8009c66 <_realloc_r+0x1e>

08009ca6 <memmove>:
 8009ca6:	4288      	cmp	r0, r1
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	eb01 0402 	add.w	r4, r1, r2
 8009cae:	d902      	bls.n	8009cb6 <memmove+0x10>
 8009cb0:	4284      	cmp	r4, r0
 8009cb2:	4623      	mov	r3, r4
 8009cb4:	d807      	bhi.n	8009cc6 <memmove+0x20>
 8009cb6:	1e43      	subs	r3, r0, #1
 8009cb8:	42a1      	cmp	r1, r4
 8009cba:	d008      	beq.n	8009cce <memmove+0x28>
 8009cbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cc4:	e7f8      	b.n	8009cb8 <memmove+0x12>
 8009cc6:	4402      	add	r2, r0
 8009cc8:	4601      	mov	r1, r0
 8009cca:	428a      	cmp	r2, r1
 8009ccc:	d100      	bne.n	8009cd0 <memmove+0x2a>
 8009cce:	bd10      	pop	{r4, pc}
 8009cd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cd8:	e7f7      	b.n	8009cca <memmove+0x24>
	...

08009cdc <_sbrk_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d06      	ldr	r5, [pc, #24]	; (8009cf8 <_sbrk_r+0x1c>)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	602b      	str	r3, [r5, #0]
 8009ce8:	f7f8 f844 	bl	8001d74 <_sbrk>
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d102      	bne.n	8009cf6 <_sbrk_r+0x1a>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	b103      	cbz	r3, 8009cf6 <_sbrk_r+0x1a>
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	200191d0 	.word	0x200191d0

08009cfc <memcpy>:
 8009cfc:	440a      	add	r2, r1
 8009cfe:	4291      	cmp	r1, r2
 8009d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d04:	d100      	bne.n	8009d08 <memcpy+0xc>
 8009d06:	4770      	bx	lr
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d12:	4291      	cmp	r1, r2
 8009d14:	d1f9      	bne.n	8009d0a <memcpy+0xe>
 8009d16:	bd10      	pop	{r4, pc}

08009d18 <_free_r>:
 8009d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	d044      	beq.n	8009da8 <_free_r+0x90>
 8009d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d22:	9001      	str	r0, [sp, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f1a1 0404 	sub.w	r4, r1, #4
 8009d2a:	bfb8      	it	lt
 8009d2c:	18e4      	addlt	r4, r4, r3
 8009d2e:	f7ff ff7f 	bl	8009c30 <__malloc_lock>
 8009d32:	4a1e      	ldr	r2, [pc, #120]	; (8009dac <_free_r+0x94>)
 8009d34:	9801      	ldr	r0, [sp, #4]
 8009d36:	6813      	ldr	r3, [r2, #0]
 8009d38:	b933      	cbnz	r3, 8009d48 <_free_r+0x30>
 8009d3a:	6063      	str	r3, [r4, #4]
 8009d3c:	6014      	str	r4, [r2, #0]
 8009d3e:	b003      	add	sp, #12
 8009d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d44:	f7ff bf7a 	b.w	8009c3c <__malloc_unlock>
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	d908      	bls.n	8009d5e <_free_r+0x46>
 8009d4c:	6825      	ldr	r5, [r4, #0]
 8009d4e:	1961      	adds	r1, r4, r5
 8009d50:	428b      	cmp	r3, r1
 8009d52:	bf01      	itttt	eq
 8009d54:	6819      	ldreq	r1, [r3, #0]
 8009d56:	685b      	ldreq	r3, [r3, #4]
 8009d58:	1949      	addeq	r1, r1, r5
 8009d5a:	6021      	streq	r1, [r4, #0]
 8009d5c:	e7ed      	b.n	8009d3a <_free_r+0x22>
 8009d5e:	461a      	mov	r2, r3
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	b10b      	cbz	r3, 8009d68 <_free_r+0x50>
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	d9fa      	bls.n	8009d5e <_free_r+0x46>
 8009d68:	6811      	ldr	r1, [r2, #0]
 8009d6a:	1855      	adds	r5, r2, r1
 8009d6c:	42a5      	cmp	r5, r4
 8009d6e:	d10b      	bne.n	8009d88 <_free_r+0x70>
 8009d70:	6824      	ldr	r4, [r4, #0]
 8009d72:	4421      	add	r1, r4
 8009d74:	1854      	adds	r4, r2, r1
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	6011      	str	r1, [r2, #0]
 8009d7a:	d1e0      	bne.n	8009d3e <_free_r+0x26>
 8009d7c:	681c      	ldr	r4, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	6053      	str	r3, [r2, #4]
 8009d82:	440c      	add	r4, r1
 8009d84:	6014      	str	r4, [r2, #0]
 8009d86:	e7da      	b.n	8009d3e <_free_r+0x26>
 8009d88:	d902      	bls.n	8009d90 <_free_r+0x78>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	e7d6      	b.n	8009d3e <_free_r+0x26>
 8009d90:	6825      	ldr	r5, [r4, #0]
 8009d92:	1961      	adds	r1, r4, r5
 8009d94:	428b      	cmp	r3, r1
 8009d96:	bf04      	itt	eq
 8009d98:	6819      	ldreq	r1, [r3, #0]
 8009d9a:	685b      	ldreq	r3, [r3, #4]
 8009d9c:	6063      	str	r3, [r4, #4]
 8009d9e:	bf04      	itt	eq
 8009da0:	1949      	addeq	r1, r1, r5
 8009da2:	6021      	streq	r1, [r4, #0]
 8009da4:	6054      	str	r4, [r2, #4]
 8009da6:	e7ca      	b.n	8009d3e <_free_r+0x26>
 8009da8:	b003      	add	sp, #12
 8009daa:	bd30      	pop	{r4, r5, pc}
 8009dac:	200191c8 	.word	0x200191c8

08009db0 <_malloc_usable_size_r>:
 8009db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db4:	1f18      	subs	r0, r3, #4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bfbc      	itt	lt
 8009dba:	580b      	ldrlt	r3, [r1, r0]
 8009dbc:	18c0      	addlt	r0, r0, r3
 8009dbe:	4770      	bx	lr

08009dc0 <_init>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	bf00      	nop
 8009dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc6:	bc08      	pop	{r3}
 8009dc8:	469e      	mov	lr, r3
 8009dca:	4770      	bx	lr

08009dcc <_fini>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr
