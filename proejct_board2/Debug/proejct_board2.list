
proejct_board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800a01c  0800a01c  0001a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2fc  0800a2fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a304  0800a304  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a304  0800a304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a308  0800a308  0001a308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019174  2000006c  0800a378  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200191e0  0800a378  000291e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188c8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000351a  00000000  00000000  000389a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001087  00000000  00000000  0003d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246df  00000000  00000000  0003e45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b8bd  00000000  00000000  00062b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7777  00000000  00000000  0007e3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f00  00000000  00000000  00155b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a004 	.word	0x0800a004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800a004 	.word	0x0800a004

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <hc05Init>:
bool exportingData = false;

UART_HandleTypeDef* BT_huart;
UART_HandleTypeDef* USB_huart;

void hc05Init(UART_HandleTypeDef* moduleHuart, UART_HandleTypeDef* sisterHuart) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	BT_huart = moduleHuart;
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <hc05Init+0x24>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6013      	str	r3, [r2, #0]
	USB_huart = sisterHuart;
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <hc05Init+0x28>)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	200000a8 	.word	0x200000a8

080005e8 <checkConnection>:

bool checkConnection() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin)) {
 80005ec:	2101      	movs	r1, #1
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <checkConnection+0x28>)
 80005f0:	f003 fff6 	bl	80045e0 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <checkConnection+0x1c>
		moduleState = IDLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <checkConnection+0x2c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
		return true;
 8000600:	2301      	movs	r3, #1
 8000602:	e003      	b.n	800060c <checkConnection+0x24>
	} else {
		moduleState = DISCONNECTED;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <checkConnection+0x2c>)
 8000606:	2204      	movs	r2, #4
 8000608:	701a      	strb	r2, [r3, #0]
		return false;
 800060a:	2300      	movs	r3, #0
	}
}
 800060c:	4618      	mov	r0, r3
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021800 	.word	0x40021800
 8000614:	20000000 	.word	0x20000000

08000618 <cancelTransfer>:

bool cancelTransfer() {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Abort(BT_huart);
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <cancelTransfer+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f007 fb83 	bl	8007d2c <HAL_UART_Abort>
	return true;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000a4 	.word	0x200000a4

08000630 <sendData>:
		return false;
	}
	return true;
}

bool sendData(uint8_t* pdata, uint16_t size) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
	//Send data size
	sendingSize = true;
 800063c:	4b36      	ldr	r3, [pc, #216]	; (8000718 <sendData+0xe8>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
	sprintf((char*)sizeBuffer, "%d", size);
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	461a      	mov	r2, r3
 8000646:	4935      	ldr	r1, [pc, #212]	; (800071c <sendData+0xec>)
 8000648:	4835      	ldr	r0, [pc, #212]	; (8000720 <sendData+0xf0>)
 800064a:	f009 f837 	bl	80096bc <siprintf>
	HAL_UART_Transmit_DMA(BT_huart, sizeBuffer, SIZE_BUFFER_LENGTH);
 800064e:	4b35      	ldr	r3, [pc, #212]	; (8000724 <sendData+0xf4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	220a      	movs	r2, #10
 8000654:	4932      	ldr	r1, [pc, #200]	; (8000720 <sendData+0xf0>)
 8000656:	4618      	mov	r0, r3
 8000658:	f007 faba 	bl	8007bd0 <HAL_UART_Transmit_DMA>
	while(sendingSize) { //Wait until the DMA transfer completes
 800065c:	e002      	b.n	8000664 <sendData+0x34>
		HAL_Delay(0);
 800065e:	2000      	movs	r0, #0
 8000660:	f001 fc96 	bl	8001f90 <HAL_Delay>
	while(sendingSize) { //Wait until the DMA transfer completes
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <sendData+0xe8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f8      	bne.n	800065e <sendData+0x2e>
	}

	//Wait for confirmation signal
	waitingForOK = true;
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <sendData+0xf8>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(BT_huart, okBuffer, OK_SIGNAL_LENGTH);
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <sendData+0xf4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2205      	movs	r2, #5
 8000678:	492c      	ldr	r1, [pc, #176]	; (800072c <sendData+0xfc>)
 800067a:	4618      	mov	r0, r3
 800067c:	f007 fb26 	bl	8007ccc <HAL_UART_Receive_DMA>
	while(waitingForOK) { //Wait until the DMA transfer completes
 8000680:	e002      	b.n	8000688 <sendData+0x58>
		HAL_Delay(0);
 8000682:	2000      	movs	r0, #0
 8000684:	f001 fc84 	bl	8001f90 <HAL_Delay>
	while(waitingForOK) { //Wait until the DMA transfer completes
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <sendData+0xf8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f8      	bne.n	8000682 <sendData+0x52>
	}

	//Check confirmation
	if (okBuffer[0] != 'O' || okBuffer[1] != 'K') {
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <sendData+0xfc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b4f      	cmp	r3, #79	; 0x4f
 8000696:	d103      	bne.n	80006a0 <sendData+0x70>
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <sendData+0xfc>)
 800069a:	785b      	ldrb	r3, [r3, #1]
 800069c:	2b4b      	cmp	r3, #75	; 0x4b
 800069e:	d006      	beq.n	80006ae <sendData+0x7e>
		while(1) {//Lock
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	4822      	ldr	r0, [pc, #136]	; (8000730 <sendData+0x100>)
 80006a8:	f003 ffb2 	bl	8004610 <HAL_GPIO_WritePin>
 80006ac:	e7f8      	b.n	80006a0 <sendData+0x70>
		}
	}
	memset(okBuffer, 0, OK_SIGNAL_LENGTH);
 80006ae:	2205      	movs	r2, #5
 80006b0:	2100      	movs	r1, #0
 80006b2:	481e      	ldr	r0, [pc, #120]	; (800072c <sendData+0xfc>)
 80006b4:	f009 f822 	bl	80096fc <memset>

	//Begin data transfer
	sendingData = true;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <sendData+0x104>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(BT_huart, pdata, size);
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <sendData+0xf4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	887a      	ldrh	r2, [r7, #2]
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f007 fa82 	bl	8007bd0 <HAL_UART_Transmit_DMA>
	previousTime = HAL_GetTick();
 80006cc:	f001 fc54 	bl	8001f78 <HAL_GetTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a19      	ldr	r2, [pc, #100]	; (8000738 <sendData+0x108>)
 80006d4:	6013      	str	r3, [r2, #0]
	while(sendingData) { //Wait until the DMA transfer completes
 80006d6:	e016      	b.n	8000706 <sendData+0xd6>
		currentTime = HAL_GetTick();
 80006d8:	f001 fc4e 	bl	8001f78 <HAL_GetTick>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <sendData+0x10c>)
 80006e0:	6013      	str	r3, [r2, #0]
		if (currentTime - previousTime > TIME_THRESHOLD) { //Assume transfer complete given enough time
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <sendData+0x10c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <sendData+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d905      	bls.n	8000700 <sendData+0xd0>
			cancelTransfer();
 80006f4:	f7ff ff90 	bl	8000618 <cancelTransfer>
			waitingForData = false;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <sendData+0x110>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
			break;
 80006fe:	e006      	b.n	800070e <sendData+0xde>
		}
		HAL_Delay(0);
 8000700:	2000      	movs	r0, #0
 8000702:	f001 fc45 	bl	8001f90 <HAL_Delay>
	while(sendingData) { //Wait until the DMA transfer completes
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <sendData+0x104>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1e4      	bne.n	80006d8 <sendData+0xa8>
	}

	return true; //Transfer complete
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000009e 	.word	0x2000009e
 800071c:	0800a01c 	.word	0x0800a01c
 8000720:	20000090 	.word	0x20000090
 8000724:	200000a4 	.word	0x200000a4
 8000728:	2000009c 	.word	0x2000009c
 800072c:	20000004 	.word	0x20000004
 8000730:	40020400 	.word	0x40020400
 8000734:	2000009d 	.word	0x2000009d
 8000738:	2000008c 	.word	0x2000008c
 800073c:	20000088 	.word	0x20000088
 8000740:	2000009a 	.word	0x2000009a

08000744 <waitForNextFrameRequest>:
	while(sendingOK) {
		HAL_Delay(0);
	}
}

void waitForNextFrameRequest() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	//Wait for confirmation signal
	waitingForOK = true;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <waitForNextFrameRequest+0x54>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(BT_huart, okBuffer, OK_SIGNAL_LENGTH);
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <waitForNextFrameRequest+0x58>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2205      	movs	r2, #5
 8000754:	4912      	ldr	r1, [pc, #72]	; (80007a0 <waitForNextFrameRequest+0x5c>)
 8000756:	4618      	mov	r0, r3
 8000758:	f007 fab8 	bl	8007ccc <HAL_UART_Receive_DMA>
	while(waitingForOK) { //Wait until the DMA transfer completes
 800075c:	e002      	b.n	8000764 <waitForNextFrameRequest+0x20>
		HAL_Delay(0);
 800075e:	2000      	movs	r0, #0
 8000760:	f001 fc16 	bl	8001f90 <HAL_Delay>
	while(waitingForOK) { //Wait until the DMA transfer completes
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <waitForNextFrameRequest+0x54>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f8      	bne.n	800075e <waitForNextFrameRequest+0x1a>
	}

	//Check confirmation
	if (okBuffer[0] != 'O' || okBuffer[1] != 'K') {
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <waitForNextFrameRequest+0x5c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b4f      	cmp	r3, #79	; 0x4f
 8000772:	d103      	bne.n	800077c <waitForNextFrameRequest+0x38>
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <waitForNextFrameRequest+0x5c>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	2b4b      	cmp	r3, #75	; 0x4b
 800077a:	d006      	beq.n	800078a <waitForNextFrameRequest+0x46>
		while(1) {//Lock
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <waitForNextFrameRequest+0x60>)
 8000784:	f003 ff44 	bl	8004610 <HAL_GPIO_WritePin>
 8000788:	e7f8      	b.n	800077c <waitForNextFrameRequest+0x38>
		}
	}
	memset(okBuffer, 0, OK_SIGNAL_LENGTH);
 800078a:	2205      	movs	r2, #5
 800078c:	2100      	movs	r1, #0
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <waitForNextFrameRequest+0x5c>)
 8000790:	f008 ffb4 	bl	80096fc <memset>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000009c 	.word	0x2000009c
 800079c:	200000a4 	.word	0x200000a4
 80007a0:	20000004 	.word	0x20000004
 80007a4:	40020400 	.word	0x40020400

080007a8 <HAL_UART_RxCpltCallback>:
	sizeBuffer[7] = sizeBuffer[8];
	sizeBuffer[8] = sizeBuffer[9];
	sizeBuffer[9] = 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if (huart != BT_huart) {
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_UART_RxCpltCallback+0x50>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d117      	bne.n	80007ea <HAL_UART_RxCpltCallback+0x42>
		return;
	}

	if (waitingForSize) {
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_UART_RxCpltCallback+0x54>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d003      	beq.n	80007ca <HAL_UART_RxCpltCallback+0x22>
		waitingForSize = false;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_UART_RxCpltCallback+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
		return;
 80007c8:	e010      	b.n	80007ec <HAL_UART_RxCpltCallback+0x44>
	}

	if (waitingForData) {
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_UART_RxCpltCallback+0x58>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d003      	beq.n	80007da <HAL_UART_RxCpltCallback+0x32>
		waitingForData = false;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_UART_RxCpltCallback+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
		return;
 80007d8:	e008      	b.n	80007ec <HAL_UART_RxCpltCallback+0x44>
	}

	if (waitingForOK) {
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_UART_RxCpltCallback+0x5c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d004      	beq.n	80007ec <HAL_UART_RxCpltCallback+0x44>
		waitingForOK = false;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_UART_RxCpltCallback+0x5c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
		return;
 80007e8:	e000      	b.n	80007ec <HAL_UART_RxCpltCallback+0x44>
		return;
 80007ea:	bf00      	nop
	}
}
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000a4 	.word	0x200000a4
 80007fc:	2000009b 	.word	0x2000009b
 8000800:	2000009a 	.word	0x2000009a
 8000804:	2000009c 	.word	0x2000009c

08000808 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	if (huart != BT_huart) {
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_UART_TxCpltCallback+0x60>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	d11f      	bne.n	800085a <HAL_UART_TxCpltCallback+0x52>
		return;
	}

	if (sendingSize) {
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_UART_TxCpltCallback+0x64>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <HAL_UART_TxCpltCallback+0x22>
		sendingSize = false;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_UART_TxCpltCallback+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
		return;
 8000828:	e018      	b.n	800085c <HAL_UART_TxCpltCallback+0x54>
	}

	if (sendingData) {
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_UART_TxCpltCallback+0x68>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d003      	beq.n	800083a <HAL_UART_TxCpltCallback+0x32>
		sendingData = false;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_UART_TxCpltCallback+0x68>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
		return;
 8000838:	e010      	b.n	800085c <HAL_UART_TxCpltCallback+0x54>
	}

	if (sendingOK) {
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_UART_TxCpltCallback+0x6c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d003      	beq.n	800084a <HAL_UART_TxCpltCallback+0x42>
		sendingOK = false;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_UART_TxCpltCallback+0x6c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
		return;
 8000848:	e008      	b.n	800085c <HAL_UART_TxCpltCallback+0x54>
	}

	if (exportingData) {
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_UART_TxCpltCallback+0x70>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <HAL_UART_TxCpltCallback+0x54>
		exportingData = false;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_UART_TxCpltCallback+0x70>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
		return;
 8000858:	e000      	b.n	800085c <HAL_UART_TxCpltCallback+0x54>
		return;
 800085a:	bf00      	nop
	}
}
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	200000a4 	.word	0x200000a4
 800086c:	2000009e 	.word	0x2000009e
 8000870:	2000009d 	.word	0x2000009d
 8000874:	2000009f 	.word	0x2000009f
 8000878:	200000a0 	.word	0x200000a0

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f001 fb14 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f832 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 fa7e 	bl	8000d88 <MX_GPIO_Init>
  MX_DMA_Init();
 800088c:	f000 fa36 	bl	8000cfc <MX_DMA_Init>
  MX_DCMI_Init();
 8000890:	f000 f898 	bl	80009c4 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000894:	f000 f9da 	bl	8000c4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000898:	f000 fa02 	bl	8000ca0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800089c:	f000 f8c6 	bl	8000a2c <MX_I2C2_Init>
  MX_TIM1_Init();
 80008a0:	f000 f8f2 	bl	8000a88 <MX_TIM1_Init>
  MX_TIM6_Init();
 80008a4:	f000 f972 	bl	8000b8c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80008a8:	f000 f9a6 	bl	8000bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <main+0x64>)
 80008b0:	f006 fb24 	bl	8006efc <HAL_TIM_PWM_Start>
  ov7670_init();
 80008b4:	f000 fc80 	bl	80011b8 <ov7670_init>
  hc05Init(&huart2, &huart3);
 80008b8:	490a      	ldr	r1, [pc, #40]	; (80008e4 <main+0x68>)
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <main+0x6c>)
 80008bc:	f7ff fe7e 	bl	80005bc <hc05Init>

  //Establish BT connection
    while(!checkConnection()) {
 80008c0:	e002      	b.n	80008c8 <main+0x4c>
  	  HAL_Delay(0);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f001 fb64 	bl	8001f90 <HAL_Delay>
    while(!checkConnection()) {
 80008c8:	f7ff fe8e 	bl	80005e8 <checkConnection>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f083 0301 	eor.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1f4      	bne.n	80008c2 <main+0x46>
    }

  extraTruncatedVideoMode();
 80008d8:	f000 fb3c 	bl	8000f54 <extraTruncatedVideoMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x60>
 80008de:	bf00      	nop
 80008e0:	200001b0 	.word	0x200001b0
 80008e4:	20000284 	.word	0x20000284
 80008e8:	20000240 	.word	0x20000240

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2234      	movs	r2, #52	; 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f008 fefe 	bl	80096fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <SystemClock_Config+0xd0>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a28      	ldr	r2, [pc, #160]	; (80009bc <SystemClock_Config+0xd0>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <SystemClock_Config+0xd0>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <SystemClock_Config+0xd4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <SystemClock_Config+0xd4>)
 8000936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <SystemClock_Config+0xd4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000950:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000960:	23a8      	movs	r3, #168	; 0xa8
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000968:	2307      	movs	r3, #7
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096c:	2302      	movs	r3, #2
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4618      	mov	r0, r3
 8000976:	f005 ff85 	bl	8006884 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000980:	f000 fbfe 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2105      	movs	r1, #5
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 f8fa 	bl	8005b9c <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ae:	f000 fbe7 	bl	8001180 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3750      	adds	r7, #80	; 0x50
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <MX_DCMI_Init+0x64>)
 80009cc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009d6:	2220      	movs	r2, #32
 80009d8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_DCMI_Init+0x60>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_DCMI_Init+0x60>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_DCMI_Init+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_DCMI_Init+0x60>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_DCMI_Init+0x60>)
 8000a12:	f001 fe41 	bl	8002698 <HAL_DCMI_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 fbb0 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000ac 	.word	0x200000ac
 8000a28:	50050000 	.word	0x50050000

08000a2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a32:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <MX_I2C2_Init+0x54>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_I2C2_Init+0x58>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_I2C2_Init+0x50>)
 8000a6a:	f003 fe29 	bl	80046c0 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 fb84 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000015c 	.word	0x2000015c
 8000a80:	40005800 	.word	0x40005800
 8000a84:	000186a0 	.word	0x000186a0

08000a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b092      	sub	sp, #72	; 0x48
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2220      	movs	r2, #32
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f008 fe22 	bl	80096fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <MX_TIM1_Init+0x100>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000acc:	2214      	movs	r2, #20
 8000ace:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000ae4:	f006 f9bb 	bl	8006e5e <HAL_TIM_PWM_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 fb47 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000b02:	f006 ff35 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000b0c:	f000 fb38 	bl	8001180 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	; 0x60
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8000b14:	230a      	movs	r3, #10
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000b36:	f006 fbb1 	bl	800729c <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000b40:	f000 fb1e 	bl	8001180 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000b68:	f006 ff7e 	bl	8007a68 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000b72:	f000 fb05 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM1_Init+0xfc>)
 8000b78:	f000 fe80 	bl	800187c <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3748      	adds	r7, #72	; 0x48
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200001b0 	.word	0x200001b0
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000b9c:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <MX_TIM6_Init+0x68>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bbc:	f006 f900 	bl	8006dc0 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000bc6:	f000 fadb 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bd8:	f006 feca 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000be2:	f000 facd 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001f8 	.word	0x200001f8
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART2_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f006 ff80 	bl	8007b34 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 faa1 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000240 	.word	0x20000240
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <MX_USART3_UART_Init+0x50>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART3_UART_Init+0x4c>)
 8000c84:	f006 ff56 	bl	8007b34 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c8e:	f000 fa77 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000284 	.word	0x20000284
 8000c9c:	40004800 	.word	0x40004800

08000ca0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000caa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cae:	2206      	movs	r2, #6
 8000cb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce4:	f004 fe11 	bl	800590a <HAL_PCD_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 fa47 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200003e8 	.word	0x200003e8

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_DMA_Init+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <MX_DMA_Init+0x88>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_DMA_Init+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_DMA_Init+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <MX_DMA_Init+0x88>)
 8000d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_DMA_Init+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	200e      	movs	r0, #14
 8000d40:	f001 fa25 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d44:	200e      	movs	r0, #14
 8000d46:	f001 fa3e 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f001 fa1d 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d54:	2010      	movs	r0, #16
 8000d56:	f001 fa36 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2011      	movs	r0, #17
 8000d60:	f001 fa15 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d64:	2011      	movs	r0, #17
 8000d66:	f001 fa2e 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2039      	movs	r0, #57	; 0x39
 8000d70:	f001 fa0d 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d74:	2039      	movs	r0, #57	; 0x39
 8000d76:	f001 fa26 	bl	80021c6 <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	4b68      	ldr	r3, [pc, #416]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a67      	ldr	r2, [pc, #412]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	623b      	str	r3, [r7, #32]
 8000db8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	4b61      	ldr	r3, [pc, #388]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a60      	ldr	r2, [pc, #384]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b5e      	ldr	r3, [pc, #376]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	4b5a      	ldr	r3, [pc, #360]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a59      	ldr	r2, [pc, #356]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b57      	ldr	r3, [pc, #348]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a44      	ldr	r2, [pc, #272]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a3d      	ldr	r2, [pc, #244]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a36      	ldr	r2, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e84:	4830      	ldr	r0, [pc, #192]	; (8000f48 <MX_GPIO_Init+0x1c0>)
 8000e86:	f003 fbc3 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	482f      	ldr	r0, [pc, #188]	; (8000f4c <MX_GPIO_Init+0x1c4>)
 8000e90:	f003 fbbe 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4829      	ldr	r0, [pc, #164]	; (8000f50 <MX_GPIO_Init+0x1c8>)
 8000eac:	f003 fa04 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000eb0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <MX_GPIO_Init+0x1c0>)
 8000eca:	f003 f9f5 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_STATE_Pin */
  GPIO_InitStruct.Pin = BT_STATE_Pin;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481a      	ldr	r0, [pc, #104]	; (8000f4c <MX_GPIO_Init+0x1c4>)
 8000ee4:	f003 f9e8 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ee8:	2340      	movs	r3, #64	; 0x40
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <MX_GPIO_Init+0x1c4>)
 8000f00:	f003 f9da 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <MX_GPIO_Init+0x1c4>)
 8000f18:	f003 f9ce 	bl	80042b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2006      	movs	r0, #6
 8000f22:	f001 f934 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f26:	2006      	movs	r0, #6
 8000f28:	f001 f94d 	bl	80021c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2028      	movs	r0, #40	; 0x28
 8000f32:	f001 f92c 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f36:	2028      	movs	r0, #40	; 0x28
 8000f38:	f001 f945 	bl	80021c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3738      	adds	r7, #56	; 0x38
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40021800 	.word	0x40021800
 8000f50:	40020800 	.word	0x40020800

08000f54 <extraTruncatedVideoMode>:

/* USER CODE BEGIN 4 */
void extraTruncatedVideoMode() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
	uint16_t bufferIndex= 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	e00c      	b.n	8000f7e <extraTruncatedVideoMode+0x2a>
		video_buff[bufferIndex++] = PREAMBLE[index];
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	81fa      	strh	r2, [r7, #14]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <extraTruncatedVideoMode+0xa4>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	4413      	add	r3, r2
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <extraTruncatedVideoMode+0xa8>)
 8000f76:	545a      	strb	r2, [r3, r1]
	for (int index = 0; index < sizeof(PREAMBLE); index++) {
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b0b      	cmp	r3, #11
 8000f82:	d9ef      	bls.n	8000f64 <extraTruncatedVideoMode+0x10>
	}

	//Loop forever
	while(1) {
		//Reset
		HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <extraTruncatedVideoMode+0xac>)
 8000f8c:	f003 fb40 	bl	8004610 <HAL_GPIO_WritePin>
		dma_flag = 0;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <extraTruncatedVideoMode+0xb0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]

		ov7670_capture(raw_buff);
 8000f96:	481c      	ldr	r0, [pc, #112]	; (8001008 <extraTruncatedVideoMode+0xb4>)
 8000f98:	f000 fa92 	bl	80014c0 <ov7670_capture>

		//Wait for capture to finish
		while (!dma_flag) {
 8000f9c:	e002      	b.n	8000fa4 <extraTruncatedVideoMode+0x50>
			HAL_Delay(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 fff6 	bl	8001f90 <HAL_Delay>
		while (!dma_flag) {
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <extraTruncatedVideoMode+0xb0>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f8      	beq.n	8000f9e <extraTruncatedVideoMode+0x4a>
		}

		//Extract grey scale
		transferRawBufferToIntermediate();
 8000fac:	f000 f86a 	bl	8001084 <transferRawBufferToIntermediate>

		//RLE and place between pre-amble and suffix
		bufferIndex = rle(sizeof(PREAMBLE));
 8000fb0:	200c      	movs	r0, #12
 8000fb2:	f000 f8a3 	bl	80010fc <rle>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	81fb      	strh	r3, [r7, #14]

		//Append suffix
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	e00c      	b.n	8000fda <extraTruncatedVideoMode+0x86>
			video_buff[bufferIndex] = SUFFIX[index];
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	4912      	ldr	r1, [pc, #72]	; (800100c <extraTruncatedVideoMode+0xb8>)
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	440a      	add	r2, r1
 8000fc8:	7811      	ldrb	r1, [r2, #0]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <extraTruncatedVideoMode+0xa8>)
 8000fcc:	54d1      	strb	r1, [r2, r3]
			bufferIndex++;
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	81fb      	strh	r3, [r7, #14]
		for (int index = 0; index < sizeof(SUFFIX); index++) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d9ef      	bls.n	8000fc0 <extraTruncatedVideoMode+0x6c>
		}

		bufferIndex--;
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	81fb      	strh	r3, [r7, #14]

		sendData(video_buff, bufferIndex);
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4804      	ldr	r0, [pc, #16]	; (8000ffc <extraTruncatedVideoMode+0xa8>)
 8000fec:	f7ff fb20 	bl	8000630 <sendData>
		waitForNextFrameRequest();
 8000ff0:	f7ff fba8 	bl	8000744 <waitForNextFrameRequest>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ff4:	e7c6      	b.n	8000f84 <extraTruncatedVideoMode+0x30>
 8000ff6:	bf00      	nop
 8000ff8:	0800a020 	.word	0x0800a020
 8000ffc:	20012e94 	.word	0x20012e94
 8001000:	40020400 	.word	0x40020400
 8001004:	20019088 	.word	0x20019088
 8001008:	200008f4 	.word	0x200008f4
 800100c:	0800a02c 	.word	0x0800a02c

08001010 <findNumberOfRepeatedPixels>:
	}

}

//Returns the number of pixels that are consecutive, beginning search at [startRow, startCol]
uint8_t findNumberOfRepeatedPixels(uint8_t startRow, uint8_t startCol) {
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
	uint8_t count = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	75fb      	strb	r3, [r7, #23]
	uint8_t prevColour = intermediate_buff[startRow][startCol];
 8001024:	79fa      	ldrb	r2, [r7, #7]
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	4915      	ldr	r1, [pc, #84]	; (8001080 <findNumberOfRepeatedPixels+0x70>)
 800102a:	20ae      	movs	r0, #174	; 0xae
 800102c:	fb00 f202 	mul.w	r2, r0, r2
 8001030:	440a      	add	r2, r1
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	73fb      	strb	r3, [r7, #15]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	e011      	b.n	8001062 <findNumberOfRepeatedPixels+0x52>
		if (intermediate_buff[startRow][columnIndex] == prevColour) {
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <findNumberOfRepeatedPixels+0x70>)
 8001042:	21ae      	movs	r1, #174	; 0xae
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	441a      	add	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	429a      	cmp	r2, r3
 8001054:	d10c      	bne.n	8001070 <findNumberOfRepeatedPixels+0x60>
			count++;
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	3301      	adds	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]
	for (int columnIndex = startCol; columnIndex < IMG_COLS && count < 15; columnIndex++) {
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	3301      	adds	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2bad      	cmp	r3, #173	; 0xad
 8001066:	dc04      	bgt.n	8001072 <findNumberOfRepeatedPixels+0x62>
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b0e      	cmp	r3, #14
 800106c:	d9e7      	bls.n	800103e <findNumberOfRepeatedPixels+0x2e>
 800106e:	e000      	b.n	8001072 <findNumberOfRepeatedPixels+0x62>
		} else {
			break;
 8001070:	bf00      	nop
		}
	}
	return count;
 8001072:	7dfb      	ldrb	r3, [r7, #23]
}
 8001074:	4618      	mov	r0, r3
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	2000ccb4 	.word	0x2000ccb4

08001084 <transferRawBufferToIntermediate>:

//Extracts grey-scale data from the raw buffer to the intermediate buffer and formats it in a 2D array
void transferRawBufferToIntermediate() {
 8001084:	b490      	push	{r4, r7}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
	int rowIndex = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
	int colIndex = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 8001092:	2301      	movs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e022      	b.n	80010de <transferRawBufferToIntermediate+0x5a>
		if (rawIndex % 2 != 0) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01a      	beq.n	80010d8 <transferRawBufferToIntermediate+0x54>
			intermediate_buff[rowIndex][colIndex++] = raw_buff[rawIndex] & 0xF0;
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <transferRawBufferToIntermediate+0x70>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1c59      	adds	r1, r3, #1
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	f022 020f 	bic.w	r2, r2, #15
 80010b4:	b2d4      	uxtb	r4, r2
 80010b6:	4910      	ldr	r1, [pc, #64]	; (80010f8 <transferRawBufferToIntermediate+0x74>)
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	20ae      	movs	r0, #174	; 0xae
 80010bc:	fb00 f202 	mul.w	r2, r0, r2
 80010c0:	440a      	add	r2, r1
 80010c2:	4413      	add	r3, r2
 80010c4:	4622      	mov	r2, r4
 80010c6:	701a      	strb	r2, [r3, #0]
			if (colIndex == IMG_COLS) {
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2bae      	cmp	r3, #174	; 0xae
 80010cc:	d104      	bne.n	80010d8 <transferRawBufferToIntermediate+0x54>
				rowIndex++;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
				colIndex = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
	for (int rawIndex = 1; rawIndex < 2*IMG_ROWS*IMG_COLS; rawIndex++) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3301      	adds	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f24c 32bf 	movw	r2, #50111	; 0xc3bf
 80010e4:	4293      	cmp	r3, r2
 80010e6:	ddd7      	ble.n	8001098 <transferRawBufferToIntermediate+0x14>
			}
		}
	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc90      	pop	{r4, r7}
 80010f2:	4770      	bx	lr
 80010f4:	200008f4 	.word	0x200008f4
 80010f8:	2000ccb4 	.word	0x2000ccb4

080010fc <rle>:

//Compresses contents of intermediate buff using RLE and places data in the output buffer beginning at bufferIndex
int rle(int bufferIndex) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e02d      	b.n	8001166 <rle+0x6a>
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e024      	b.n	800115a <rle+0x5e>
			uint8_t repetitions = findNumberOfRepeatedPixels(rowIndex, colIndex);
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff78 	bl	8001010 <findNumberOfRepeatedPixels>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]

			video_buff[bufferIndex++] = intermediate_buff[rowIndex][colIndex] | (repetitions & 0xF);
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <rle+0x7c>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	21ae      	movs	r1, #174	; 0xae
 800112a:	fb01 f303 	mul.w	r3, r1, r3
 800112e:	441a      	add	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25a      	sxtb	r2, r3
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	b25b      	sxtb	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b259      	sxtb	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	b2c9      	uxtb	r1, r1
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <rle+0x80>)
 8001150:	54d1      	strb	r1, [r2, r3]

			colIndex += repetitions;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4413      	add	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
		for (int colIndex = 0; colIndex < IMG_COLS;) {
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	2bad      	cmp	r3, #173	; 0xad
 800115e:	ddd7      	ble.n	8001110 <rle+0x14>
	for (int rowIndex = 0; rowIndex < IMG_ROWS; rowIndex++) {
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b8f      	cmp	r3, #143	; 0x8f
 800116a:	ddce      	ble.n	800110a <rle+0xe>
		}
	}
	return bufferIndex;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000ccb4 	.word	0x2000ccb4
 800117c:	20012e94 	.word	0x20012e94

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <print_msg>:
  { 0x4b, 0x01 },
};

HAL_StatusTypeDef print_msg(char * msg);

HAL_StatusTypeDef print_msg(char * msg) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  // Your code here
  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff f83b 	bl	8000210 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <print_msg+0x28>)
 80011a4:	f006 fd14 	bl	8007bd0 <HAL_UART_Transmit_DMA>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000284 	.word	0x20000284

080011b8 <ov7670_init>:

uint8_t ov7670_init(void){
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b0a1      	sub	sp, #132	; 0x84
 80011bc:	af02      	add	r7, sp, #8
  uint8_t val;
  char msg[100];

  print_msg("Beginning reading check\r\n");
 80011be:	484d      	ldr	r0, [pc, #308]	; (80012f4 <ov7670_init+0x13c>)
 80011c0:	f7ff ffe4 	bl	800118c <print_msg>
  HAL_Delay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f000 fee3 	bl	8001f90 <HAL_Delay>
  val = ov7670_read(0x0A);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f000 f8a4 	bl	8001318 <ov7670_read>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  if (val != 0x76) {
 80011d6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80011da:	2b76      	cmp	r3, #118	; 0x76
 80011dc:	d00f      	beq.n	80011fe <ov7670_init+0x46>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 80011de:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4944      	ldr	r1, [pc, #272]	; (80012f8 <ov7670_init+0x140>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fa68 	bl	80096bc <siprintf>
    print_msg(msg);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ffcc 	bl	800118c <print_msg>
    HAL_Delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f000 fecb 	bl	8001f90 <HAL_Delay>
    return 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e076      	b.n	80012ec <ov7670_init+0x134>
  } else {
	  print_msg("Value correct\r\n");
 80011fe:	483f      	ldr	r0, [pc, #252]	; (80012fc <ov7670_init+0x144>)
 8001200:	f7ff ffc4 	bl	800118c <print_msg>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001204:	2101      	movs	r1, #1
 8001206:	483e      	ldr	r0, [pc, #248]	; (8001300 <ov7670_init+0x148>)
 8001208:	f003 fa1b 	bl	8004642 <HAL_GPIO_TogglePin>
  }

  print_msg("Writing to registers...\r\n");
 800120c:	483d      	ldr	r0, [pc, #244]	; (8001304 <ov7670_init+0x14c>)
 800120e:	f7ff ffbd 	bl	800118c <print_msg>
  HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f000 febc 	bl	8001f90 <HAL_Delay>

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 8001218:	2300      	movs	r3, #0
 800121a:	677b      	str	r3, [r7, #116]	; 0x74
 800121c:	e012      	b.n	8001244 <ov7670_init+0x8c>
	  ov7670_write(OV7670_reg[index][0], OV7670_reg[index][1]);
 800121e:	4a3a      	ldr	r2, [pc, #232]	; (8001308 <ov7670_init+0x150>)
 8001220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001222:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001226:	4938      	ldr	r1, [pc, #224]	; (8001308 <ov7670_init+0x150>)
 8001228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	440b      	add	r3, r1
 800122e:	785b      	ldrb	r3, [r3, #1]
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f000 f8f4 	bl	8001420 <ov7670_write>
	  HAL_Delay(11);
 8001238:	200b      	movs	r0, #11
 800123a:	f000 fea9 	bl	8001f90 <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 800123e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001240:	3301      	adds	r3, #1
 8001242:	677b      	str	r3, [r7, #116]	; 0x74
 8001244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001246:	2b79      	cmp	r3, #121	; 0x79
 8001248:	dde9      	ble.n	800121e <ov7670_init+0x66>
  }

  print_msg("Beginning sanity check\r\n");
 800124a:	4830      	ldr	r0, [pc, #192]	; (800130c <ov7670_init+0x154>)
 800124c:	f7ff ff9e 	bl	800118c <print_msg>
  HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f000 fe9d 	bl	8001f90 <HAL_Delay>

  uint8_t isDataCorrect = 1;
 8001256:	2301      	movs	r3, #1
 8001258:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  for (int index = 0; index < OV7670_REG_NUM; index++) {
 800125c:	2300      	movs	r3, #0
 800125e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001260:	e032      	b.n	80012c8 <ov7670_init+0x110>
	  uint8_t dataRead = ov7670_read(OV7670_reg[index][0]);
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <ov7670_init+0x150>)
 8001264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001266:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f854 	bl	8001318 <ov7670_read>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	  if (dataRead != OV7670_reg[index][1]) {
 8001276:	4a24      	ldr	r2, [pc, #144]	; (8001308 <ov7670_init+0x150>)
 8001278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8001284:	429a      	cmp	r2, r3
 8001286:	d01c      	beq.n	80012c2 <ov7670_init+0x10a>
		  isDataCorrect = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  sprintf(msg, "Register 0x%x contains incorrect data 0x%x (should be 0x%x)\r\n", OV7670_reg[index][0], dataRead, OV7670_reg[index][1]);
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <ov7670_init+0x150>)
 8001290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001292:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001296:	461c      	mov	r4, r3
 8001298:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 800129c:	491a      	ldr	r1, [pc, #104]	; (8001308 <ov7670_init+0x150>)
 800129e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	440b      	add	r3, r1
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	1d38      	adds	r0, r7, #4
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4613      	mov	r3, r2
 80012ac:	4622      	mov	r2, r4
 80012ae:	4918      	ldr	r1, [pc, #96]	; (8001310 <ov7670_init+0x158>)
 80012b0:	f008 fa04 	bl	80096bc <siprintf>
		  print_msg(msg);
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff68 	bl	800118c <print_msg>
		  HAL_Delay(10);
 80012bc:	200a      	movs	r0, #10
 80012be:	f000 fe67 	bl	8001f90 <HAL_Delay>
  for (int index = 0; index < OV7670_REG_NUM; index++) {
 80012c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012c4:	3301      	adds	r3, #1
 80012c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ca:	2b79      	cmp	r3, #121	; 0x79
 80012cc:	ddc9      	ble.n	8001262 <ov7670_init+0xaa>
	  }
  }

  if (isDataCorrect) {
 80012ce:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <ov7670_init+0x12a>
	  print_msg("All data OK\r\n");
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <ov7670_init+0x15c>)
 80012d8:	f7ff ff58 	bl	800118c <print_msg>
	  HAL_Delay(10);
 80012dc:	200a      	movs	r0, #10
 80012de:	f000 fe57 	bl	8001f90 <HAL_Delay>
  }
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <ov7670_init+0x148>)
 80012e6:	f003 f9ac 	bl	8004642 <HAL_GPIO_TogglePin>
  return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	377c      	adds	r7, #124	; 0x7c
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	0800a034 	.word	0x0800a034
 80012f8:	0800a050 	.word	0x0800a050
 80012fc:	0800a06c 	.word	0x0800a06c
 8001300:	40020400 	.word	0x40020400
 8001304:	0800a07c 	.word	0x0800a07c
 8001308:	0800a1b4 	.word	0x0800a1b4
 800130c:	0800a098 	.word	0x0800a098
 8001310:	0800a0b4 	.word	0x0800a0b4
 8001314:	0800a0f4 	.word	0x0800a0f4

08001318 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8001318:	b580      	push	{r7, lr}
 800131a:	b0a0      	sub	sp, #128	; 0x80
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	char msg[100];
	uint8_t data = 0x00;
 8001322:	2300      	movs	r3, #0
 8001324:	72fb      	strb	r3, [r7, #11]
	uint8_t attempts = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 800132c:	2302      	movs	r3, #2
 800132e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	uint8_t *regAddress = &reg;
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 8001336:	e028      	b.n	800138a <ov7670_read+0x72>
		status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670_READ, regAddress, 1, 100);
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001340:	2143      	movs	r1, #67	; 0x43
 8001342:	4834      	ldr	r0, [pc, #208]	; (8001414 <ov7670_read+0xfc>)
 8001344:	f003 fb00 	bl	8004948 <HAL_I2C_Master_Transmit>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 800134e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001352:	3301      	adds	r3, #1
 8001354:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 8001358:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800135c:	2b00      	cmp	r3, #0
 800135e:	d014      	beq.n	800138a <ov7670_read+0x72>
			sprintf(msg, "Transmit Status: %d on attempt %d with register 0x%x\r\n", status, attempts, *regAddress);
 8001360:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001364:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8001368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	f107 000c 	add.w	r0, r7, #12
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	460b      	mov	r3, r1
 8001374:	4928      	ldr	r1, [pc, #160]	; (8001418 <ov7670_read+0x100>)
 8001376:	f008 f9a1 	bl	80096bc <siprintf>
			print_msg(msg);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff04 	bl	800118c <print_msg>
			HAL_Delay(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f000 fe03 	bl	8001f90 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 800138a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <ov7670_read+0x82>
 8001392:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001396:	2b04      	cmp	r3, #4
 8001398:	d9ce      	bls.n	8001338 <ov7670_read+0x20>
		}
	}

	status = HAL_BUSY;
 800139a:	2302      	movs	r3, #2
 800139c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	attempts = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	while (status != HAL_OK && attempts < 5) {
 80013a6:	e027      	b.n	80013f8 <ov7670_read+0xe0>
		status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670_READ, &data, 1, 100);
 80013a8:	f107 020b 	add.w	r2, r7, #11
 80013ac:	2364      	movs	r3, #100	; 0x64
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	2143      	movs	r1, #67	; 0x43
 80013b4:	4817      	ldr	r0, [pc, #92]	; (8001414 <ov7670_read+0xfc>)
 80013b6:	f003 fbc5 	bl	8004b44 <HAL_I2C_Master_Receive>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 80013c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013c4:	3301      	adds	r3, #1
 80013c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 80013ca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <ov7670_read+0xe0>
			sprintf(msg, "Receive Status: %d on attempt %d with current data: 0x%x\r\n", status, attempts, data);
 80013d2:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80013d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013da:	7af9      	ldrb	r1, [r7, #11]
 80013dc:	f107 000c 	add.w	r0, r7, #12
 80013e0:	9100      	str	r1, [sp, #0]
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <ov7670_read+0x104>)
 80013e4:	f008 f96a 	bl	80096bc <siprintf>
			print_msg(msg);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fecd 	bl	800118c <print_msg>
			HAL_Delay(10);
 80013f2:	200a      	movs	r0, #10
 80013f4:	f000 fdcc 	bl	8001f90 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 80013f8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <ov7670_read+0xf0>
 8001400:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001404:	2b04      	cmp	r3, #4
 8001406:	d9cf      	bls.n	80013a8 <ov7670_read+0x90>
		}
	}


	return data;
 8001408:	7afb      	ldrb	r3, [r7, #11]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3778      	adds	r7, #120	; 0x78
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000015c 	.word	0x2000015c
 8001418:	0800a104 	.word	0x0800a104
 800141c:	0800a13c 	.word	0x0800a13c

08001420 <ov7670_write>:

HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
 8001420:	b580      	push	{r7, lr}
 8001422:	b0a2      	sub	sp, #136	; 0x88
 8001424:	af04      	add	r7, sp, #16
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
	char msg[100];
	uint8_t attempts = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	HAL_StatusTypeDef status = HAL_BUSY;
 8001436:	2302      	movs	r3, #2
 8001438:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	//uint8_t *regAddress = &reg;
	uint8_t *data = &val;
 800143c:	1dbb      	adds	r3, r7, #6
 800143e:	673b      	str	r3, [r7, #112]	; 0x70

	while (status != HAL_OK && attempts < 5) {
 8001440:	e02c      	b.n	800149c <ov7670_write+0x7c>
		status = HAL_I2C_Mem_Write(&hi2c2,ADDR_OV7670_WRITE,reg,I2C_MEMADD_SIZE_8BIT,data,1,100);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	b29a      	uxth	r2, r3
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2301      	movs	r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	2142      	movs	r1, #66	; 0x42
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <ov7670_write+0x98>)
 8001458:	f003 fd9a 	bl	8004f90 <HAL_I2C_Mem_Write>
 800145c:	4603      	mov	r3, r0
 800145e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		attempts += 1;
 8001462:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001466:	3301      	adds	r3, #1
 8001468:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (status != HAL_OK) {
 800146c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <ov7670_write+0x7c>
			sprintf(msg, "Memory Write Status: %d on attempt %d with register 0x%x\r\n", status, attempts, reg);
 8001474:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001478:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f107 000c 	add.w	r0, r7, #12
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	460b      	mov	r3, r1
 8001486:	490d      	ldr	r1, [pc, #52]	; (80014bc <ov7670_write+0x9c>)
 8001488:	f008 f918 	bl	80096bc <siprintf>
			print_msg(msg);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe7b 	bl	800118c <print_msg>
			HAL_Delay(10);
 8001496:	200a      	movs	r0, #10
 8001498:	f000 fd7a 	bl	8001f90 <HAL_Delay>
	while (status != HAL_OK && attempts < 5) {
 800149c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <ov7670_write+0x8c>
 80014a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d9ca      	bls.n	8001442 <ov7670_write+0x22>
			HAL_Delay(10);
		}
	}
	*/

	return status;
 80014ac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3778      	adds	r7, #120	; 0x78
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000015c 	.word	0x2000015c
 80014bc:	0800a178 	.word	0x0800a178

080014c0 <ov7670_capture>:

void ov7670_snapshot(uint8_t *buff){
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
}

void ov7670_capture(uint8_t *buff){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,(uint32_t)buff, IMG_ROWS*IMG_COLS/2);
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	f243 03f0 	movw	r3, #12528	; 0x30f0
 80014ce:	2100      	movs	r1, #0
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <ov7670_capture+0x20>)
 80014d2:	f000 fe93 	bl	80021fc <HAL_DCMI_Start_DMA>

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000ac 	.word	0x200000ac

080014e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a78      	ldr	r2, [pc, #480]	; (8001734 <HAL_DCMI_MspInit+0x200>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f040 80e9 	bne.w	800172a <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
 800155c:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	4a75      	ldr	r2, [pc, #468]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6353      	str	r3, [r2, #52]	; 0x34
 8001568:	4b73      	ldr	r3, [pc, #460]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b6c      	ldr	r3, [pc, #432]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	4b68      	ldr	r3, [pc, #416]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a67      	ldr	r2, [pc, #412]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a60      	ldr	r2, [pc, #384]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a59      	ldr	r2, [pc, #356]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b57      	ldr	r3, [pc, #348]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b53      	ldr	r3, [pc, #332]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a52      	ldr	r2, [pc, #328]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_DCMI_MspInit+0x204>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001600:	2370      	movs	r3, #112	; 0x70
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001610:	230d      	movs	r3, #13
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4848      	ldr	r0, [pc, #288]	; (800173c <HAL_DCMI_MspInit+0x208>)
 800161c:	f002 fe4c 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001620:	2350      	movs	r3, #80	; 0x50
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001630:	230d      	movs	r3, #13
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4841      	ldr	r0, [pc, #260]	; (8001740 <HAL_DCMI_MspInit+0x20c>)
 800163c:	f002 fe3c 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001640:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001652:	230d      	movs	r3, #13
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4839      	ldr	r0, [pc, #228]	; (8001744 <HAL_DCMI_MspInit+0x210>)
 800165e:	f002 fe2b 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001662:	2308      	movs	r3, #8
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001672:	230d      	movs	r3, #13
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4832      	ldr	r0, [pc, #200]	; (8001748 <HAL_DCMI_MspInit+0x214>)
 800167e:	f002 fe1b 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001694:	230d      	movs	r3, #13
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	482b      	ldr	r0, [pc, #172]	; (800174c <HAL_DCMI_MspInit+0x218>)
 80016a0:	f002 fe0a 	bl	80042b8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016a6:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <HAL_DCMI_MspInit+0x220>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016cc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016dc:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016e4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016e8:	2204      	movs	r2, #4
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016ee:	2203      	movs	r2, #3
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 8001700:	f001 f844 	bl	800278c <HAL_DMA_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 800170a:	f7ff fd39 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 8001712:	649a      	str	r2, [r3, #72]	; 0x48
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_DCMI_MspInit+0x21c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	204e      	movs	r0, #78	; 0x4e
 8001720:	f000 fd35 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001724:	204e      	movs	r0, #78	; 0x4e
 8001726:	f000 fd4e 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3738      	adds	r7, #56	; 0x38
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	50050000 	.word	0x50050000
 8001738:	40023800 	.word	0x40023800
 800173c:	40021000 	.word	0x40021000
 8001740:	40020000 	.word	0x40020000
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40021800 	.word	0x40021800
 8001750:	200000fc 	.word	0x200000fc
 8001754:	40026428 	.word	0x40026428

08001758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_I2C_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12b      	bne.n	80017d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001796:	2303      	movs	r3, #3
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017a6:	2304      	movs	r3, #4
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <HAL_I2C_MspInit+0x8c>)
 80017b2:	f002 fd81 	bl	80042b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 80017c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_I2C_MspInit+0x88>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40005800 	.word	0x40005800
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40021400 	.word	0x40021400

080017e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <HAL_TIM_PWM_MspInit+0x3c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_TIM_PWM_MspInit+0x40>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_TIM_PWM_MspInit+0x40>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_TIM_PWM_MspInit+0x40>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40010000 	.word	0x40010000
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_TIM_Base_MspInit+0x48>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d115      	bne.n	800186a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_TIM_Base_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <HAL_TIM_Base_MspInit+0x4c>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_TIM_Base_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	2036      	movs	r0, #54	; 0x36
 8001860:	f000 fc95 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001864:	2036      	movs	r0, #54	; 0x36
 8001866:	f000 fcae 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40001000 	.word	0x40001000
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_TIM_MspPostInit+0x68>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d11e      	bne.n	80018dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_TIM_MspPostInit+0x6c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <HAL_TIM_MspPostInit+0x6c>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_MspPostInit+0x6c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4619      	mov	r1, r3
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <HAL_TIM_MspPostInit+0x70>)
 80018d8:	f002 fcee 	bl	80042b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a86      	ldr	r2, [pc, #536]	; (8001b28 <HAL_UART_MspInit+0x238>)
 800190e:	4293      	cmp	r3, r2
 8001910:	f040 8093 	bne.w	8001a3a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a83      	ldr	r2, [pc, #524]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 800191e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
 8001924:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	4a7c      	ldr	r2, [pc, #496]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
 8001940:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800194c:	2360      	movs	r3, #96	; 0x60
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195c:	2307      	movs	r3, #7
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4872      	ldr	r0, [pc, #456]	; (8001b30 <HAL_UART_MspInit+0x240>)
 8001968:	f002 fca6 	bl	80042b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800196c:	4b71      	ldr	r3, [pc, #452]	; (8001b34 <HAL_UART_MspInit+0x244>)
 800196e:	4a72      	ldr	r2, [pc, #456]	; (8001b38 <HAL_UART_MspInit+0x248>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001972:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_UART_MspInit+0x244>)
 8001974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001978:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197a:	4b6e      	ldr	r3, [pc, #440]	; (8001b34 <HAL_UART_MspInit+0x244>)
 800197c:	2240      	movs	r2, #64	; 0x40
 800197e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001980:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_UART_MspInit+0x244>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001986:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <HAL_UART_MspInit+0x244>)
 8001988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198e:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <HAL_UART_MspInit+0x244>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001994:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_UART_MspInit+0x244>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800199a:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_UART_MspInit+0x244>)
 800199c:	2200      	movs	r2, #0
 800199e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_UART_MspInit+0x244>)
 80019a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a8:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <HAL_UART_MspInit+0x244>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019ae:	4861      	ldr	r0, [pc, #388]	; (8001b34 <HAL_UART_MspInit+0x244>)
 80019b0:	f000 feec 	bl	800278c <HAL_DMA_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80019ba:	f7ff fbe1 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a5c      	ldr	r2, [pc, #368]	; (8001b34 <HAL_UART_MspInit+0x244>)
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34
 80019c4:	4a5b      	ldr	r2, [pc, #364]	; (8001b34 <HAL_UART_MspInit+0x244>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019cc:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <HAL_UART_MspInit+0x250>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80019d0:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d8:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f2:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019fe:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 8001a00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a04:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a06:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a0c:	484b      	ldr	r0, [pc, #300]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 8001a0e:	f000 febd 	bl	800278c <HAL_DMA_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001a18:	f7ff fbb2 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
 8001a22:	4a46      	ldr	r2, [pc, #280]	; (8001b3c <HAL_UART_MspInit+0x24c>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2026      	movs	r0, #38	; 0x26
 8001a2e:	f000 fbae 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a32:	2026      	movs	r0, #38	; 0x26
 8001a34:	f000 fbc7 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a38:	e071      	b.n	8001b1e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a41      	ldr	r2, [pc, #260]	; (8001b44 <HAL_UART_MspInit+0x254>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d16c      	bne.n	8001b1e <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a37      	ldr	r2, [pc, #220]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001a4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_UART_MspInit+0x23c>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a8e:	2307      	movs	r3, #7
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4825      	ldr	r0, [pc, #148]	; (8001b30 <HAL_UART_MspInit+0x240>)
 8001a9a:	f002 fc0d 	bl	80042b8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_UART_MspInit+0x25c>)
 8001aa2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aaa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001abe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001ad4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ad8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001adc:	2204      	movs	r2, #4
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001af2:	4815      	ldr	r0, [pc, #84]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001af4:	f000 fe4a 	bl	800278c <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001afe:	f7ff fb3f 	bl	8001180 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_UART_MspInit+0x258>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2027      	movs	r0, #39	; 0x27
 8001b14:	f000 fb3b 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b18:	2027      	movs	r0, #39	; 0x27
 8001b1a:	f000 fb54 	bl	80021c6 <HAL_NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3730      	adds	r7, #48	; 0x30
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	200002c8 	.word	0x200002c8
 8001b38:	400260a0 	.word	0x400260a0
 8001b3c:	20000328 	.word	0x20000328
 8001b40:	40026088 	.word	0x40026088
 8001b44:	40004800 	.word	0x40004800
 8001b48:	20000388 	.word	0x20000388
 8001b4c:	40026058 	.word	0x40026058

08001b50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0a0      	sub	sp, #128	; 0x80
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	225c      	movs	r2, #92	; 0x5c
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f007 fdc3 	bl	80096fc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b7e:	d14e      	bne.n	8001c1e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001b86:	2300      	movs	r3, #0
 8001b88:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 f91e 	bl	8005dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001b9a:	f7ff faf1 	bl	8001180 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a20      	ldr	r2, [pc, #128]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001bba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bcc:	230a      	movs	r3, #10
 8001bce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4815      	ldr	r0, [pc, #84]	; (8001c2c <HAL_PCD_MspInit+0xdc>)
 8001bd8:	f002 fb6e 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480e      	ldr	r0, [pc, #56]	; (8001c2c <HAL_PCD_MspInit+0xdc>)
 8001bf2:	f002 fb61 	bl	80042b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6353      	str	r3, [r2, #52]	; 0x34
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_PCD_MspInit+0xd8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3780      	adds	r7, #128	; 0x80
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000

08001c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c34:	f3bf 8f4f 	dsb	sy
}
 8001c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <__NVIC_SystemReset+0x24>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c42:	4904      	ldr	r1, [pc, #16]	; (8001c54 <__NVIC_SystemReset+0x24>)
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_SystemReset+0x28>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4a:	f3bf 8f4f 	dsb	sy
}
 8001c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <__NVIC_SystemReset+0x20>
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	05fa0004 	.word	0x05fa0004

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>
	...

08001c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c6c:	4801      	ldr	r0, [pc, #4]	; (8001c74 <HardFault_Handler+0x10>)
 8001c6e:	f002 fce8 	bl	8004642 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler+0xe>
 8001c74:	40020400 	.word	0x40020400

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f94a 	bl	8001f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	NVIC_SystemReset();
 8001cc4:	f7ff ffb4 	bl	8001c30 <__NVIC_SystemReset>

08001cc8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <DMA1_Stream3_IRQHandler+0x10>)
 8001cce:	f000 fef5 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000388 	.word	0x20000388

08001cdc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <DMA1_Stream5_IRQHandler+0x10>)
 8001ce2:	f000 feeb 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000328 	.word	0x20000328

08001cf0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <DMA1_Stream6_IRQHandler+0x10>)
 8001cf6:	f000 fee1 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200002c8 	.word	0x200002c8

08001d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART2_IRQHandler+0x10>)
 8001d0a:	f006 f8fb 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000240 	.word	0x20000240

08001d18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <USART3_IRQHandler+0x10>)
 8001d1e:	f006 f8f1 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000284 	.word	0x20000284

08001d2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint32_t thisTime = HAL_GetTick();
 8001d32:	f000 f921 	bl	8001f78 <HAL_GetTick>
 8001d36:	6078      	str	r0, [r7, #4]
		if (thisTime-lastTime >= interval) {
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <EXTI15_10_IRQHandler+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	1ad2      	subs	r2, r2, r3
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <EXTI15_10_IRQHandler+0x44>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d302      	bcc.n	8001d4e <EXTI15_10_IRQHandler+0x22>
			button_flag = 1;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <EXTI15_10_IRQHandler+0x48>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d52:	f002 fc91 	bl	8004678 <HAL_GPIO_EXTI_IRQHandler>
		lastTime = thisTime;
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <EXTI15_10_IRQHandler+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d60:	f002 fc8a 	bl	8004678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2001908c 	.word	0x2001908c
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	20019089 	.word	0x20019089

08001d78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM6_DAC_IRQHandler+0x10>)
 8001d7e:	f005 f985 	bl	800708c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001f8 	.word	0x200001f8

08001d8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	//TRIGGERED AFTER CAPTURE COMPLETES
	HAL_DCMI_Stop(&hdcmi);
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <DMA2_Stream1_IRQHandler+0x1c>)
 8001d92:	f000 fad3 	bl	800233c <HAL_DCMI_Stop>
	dma_flag = 1;
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <DMA2_Stream1_IRQHandler+0x20>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <DMA2_Stream1_IRQHandler+0x24>)
 8001d9e:	f000 fe8d 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200000ac 	.word	0x200000ac
 8001dac:	20019088 	.word	0x20019088
 8001db0:	200000fc 	.word	0x200000fc

08001db4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
	//TRIGGERS VERY OFTEN
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <DCMI_IRQHandler+0x10>)
 8001dba:	f000 fb1b 	bl	80023f4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000ac 	.word	0x200000ac

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df8:	f007 fc88 	bl	800970c <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	220c      	movs	r2, #12
 8001e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e06:	e009      	b.n	8001e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <_sbrk+0x64>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20020000 	.word	0x20020000
 8001e28:	00000400 	.word	0x00000400
 8001e2c:	20019090 	.word	0x20019090
 8001e30:	200191e0 	.word	0x200191e0

08001e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <SystemInit+0x20>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <SystemInit+0x20>)
 8001e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e5c:	480d      	ldr	r0, [pc, #52]	; (8001e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5e:	490e      	ldr	r1, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e60:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e74:	4c0b      	ldr	r4, [pc, #44]	; (8001ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e82:	f7ff ffd7 	bl	8001e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f007 fc47 	bl	8009718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7fe fcf7 	bl	800087c <main>
  bx  lr    
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e9c:	0800a30c 	.word	0x0800a30c
  ldr r2, =_sbss
 8001ea0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001ea4:	200191e0 	.word	0x200191e0

08001ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_Init+0x40>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_Init+0x40>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_Init+0x40>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 f94f 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f808 	bl	8001ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee0:	f7ff fb00 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x54>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f967 	bl	80021e2 <HAL_SYSTICK_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00e      	b.n	8001f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d80a      	bhi.n	8001f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f2c:	f000 f92f 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <HAL_InitTick+0x5c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000010 	.word	0x20000010
 8001f48:	20000018 	.word	0x20000018
 8001f4c:	20000014 	.word	0x20000014

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000018 	.word	0x20000018
 8001f74:	20019094 	.word	0x20019094

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20019094 	.word	0x20019094

08001f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff ffee 	bl	8001f78 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa8:	d005      	beq.n	8001fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_Delay+0x44>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff ffde 	bl	8001f78 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d8f7      	bhi.n	8001fb8 <HAL_Delay+0x28>
  {
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000018 	.word	0x20000018

08001fd8 <__NVIC_SetPriorityGrouping>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_GetPriorityGrouping>:
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_EnableIRQ>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0b      	blt.n	8002066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4907      	ldr	r1, [pc, #28]	; (8002074 <__NVIC_EnableIRQ+0x38>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	; (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	; (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002158:	f7ff ff8e 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff29 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff3e 	bl	8002020 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff8e 	bl	80020cc <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5d 	bl	8002078 <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff31 	bl	800203c <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa2 	bl	8002134 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_DCMI_Start_DMA+0x20>
 8002218:	2302      	movs	r3, #2
 800221a:	e086      	b.n	800232a <HAL_DCMI_Start_DMA+0x12e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800223a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0202 	bic.w	r2, r2, #2
 800224a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002260:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_DCMI_Start_DMA+0x138>)
 8002262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_DCMI_Start_DMA+0x13c>)
 800226a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	2200      	movs	r2, #0
 8002272:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

  if(Length <= 0xFFFFU)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d20a      	bcs.n	800229e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3328      	adds	r3, #40	; 0x28
 8002292:	4619      	mov	r1, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	f000 fb26 	bl	80028e8 <HAL_DMA_Start_IT>
 800229c:	e038      	b.n	8002310 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_DCMI_Start_DMA+0x138>)
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80022b8:	e009      	b.n	80022ce <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	085a      	lsrs	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	005a      	lsls	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d2f0      	bcs.n	80022ba <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	1e9a      	subs	r2, r3, #2
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3328      	adds	r3, #40	; 0x28
 8002300:	4619      	mov	r1, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	f000 fe4c 	bl	8002fa8 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	08002541 	.word	0x08002541
 8002338:	0800266b 	.word	0x0800266b

0800233c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8002344:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_DCMI_Stop+0xb0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_DCMI_Stop+0xb4>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_DCMI_Stop+0x2a>
 8002362:	2302      	movs	r3, #2
 8002364:	e03e      	b.n	80023e4 <HAL_DCMI_Stop+0xa8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	60ba      	str	r2, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	73fb      	strb	r3, [r7, #15]
      break;
 80023a0:	e006      	b.n	80023b0 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ea      	bne.n	8002386 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023be:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fae7 	bl	8002998 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000010 	.word	0x20000010
 80023f0:	92492493 	.word	0x92492493

080023f4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2204      	movs	r2, #4
 8002414:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	f043 0202 	orr.w	r2, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242e:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <HAL_DCMI_IRQHandler+0xf8>)
 8002430:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fb1e 	bl	8002a78 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2202      	movs	r2, #2
 800244c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_DCMI_IRQHandler+0xf8>)
 8002468:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fb02 	bl	8002a78 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2210      	movs	r2, #16
 8002484:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f83c 	bl	8002504 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2208      	movs	r2, #8
 800249c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f83a 	bl	8002518 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d019      	beq.n	80024e2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d107      	bne.n	80024cc <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 021e 	bic.w	r2, r2, #30
 80024ca:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f825 	bl	800252c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0800266b 	.word	0x0800266b

080024f0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	d043      	beq.n	80025e2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002566:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d118      	bne.n	80025a6 <DCMI_DMAXferCplt+0x66>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	00da      	lsls	r2, r3, #3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	f001 fe4f 	bl	8004238 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	1e5a      	subs	r2, r3, #1
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
 80025a4:	e044      	b.n	8002630 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d13c      	bne.n	8002630 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	00da      	lsls	r2, r3, #3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4413      	add	r3, r2
 80025ce:	2201      	movs	r2, #1
 80025d0:	4619      	mov	r1, r3
 80025d2:	f001 fe31 	bl	8004238 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
 80025e0:	e026      	b.n	8002630 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	e017      	b.n	8002630 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10f      	bne.n	8002630 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	440a      	add	r2, r1
 8002626:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	429a      	cmp	r2, r3
 800263a:	d112      	bne.n	8002662 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d103      	bne.n	8002662 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff ff30 	bl	80024f0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e069      	b.n	800277e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe ff38 	bl	8001534 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7fe ff35 	bl	8001534 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6819      	ldr	r1, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_DCMI_Init+0xf0>)
 80026de:	400b      	ands	r3, r1
 80026e0:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026f6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002702:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800270e:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 800271a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002726:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b10      	cmp	r3, #16
 8002736:	d112      	bne.n	800275e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7f5b      	ldrb	r3, [r3, #29]
 8002742:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002744:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7f9b      	ldrb	r3, [r3, #30]
 800274a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800274c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7fdb      	ldrb	r3, [r3, #31]
 8002754:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800275a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800275c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 021e 	orr.w	r2, r2, #30
 800276c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	ffe0f007 	.word	0xffe0f007

0800278c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7ff fbee 	bl	8001f78 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e099      	b.n	80028dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c8:	e00f      	b.n	80027ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ca:	f7ff fbd5 	bl	8001f78 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d908      	bls.n	80027ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2203      	movs	r2, #3
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e078      	b.n	80028dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e8      	bne.n	80027ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_DMA_Init+0x158>)
 8002804:	4013      	ands	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b04      	cmp	r3, #4
 8002842:	d107      	bne.n	8002854 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4313      	orrs	r3, r2
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f023 0307 	bic.w	r3, r3, #7
 800286a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2b04      	cmp	r3, #4
 800287c:	d117      	bne.n	80028ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fb0d 	bl	8002eb0 <DMA_CheckFifoParam>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2240      	movs	r2, #64	; 0x40
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028aa:	2301      	movs	r3, #1
 80028ac:	e016      	b.n	80028dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fac4 	bl	8002e44 <DMA_CalcBaseAndBitshift>
 80028bc:	4603      	mov	r3, r0
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	223f      	movs	r2, #63	; 0x3f
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	f010803f 	.word	0xf010803f

080028e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_DMA_Start_IT+0x26>
 800290a:	2302      	movs	r3, #2
 800290c:	e040      	b.n	8002990 <HAL_DMA_Start_IT+0xa8>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d12f      	bne.n	8002982 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa56 	bl	8002de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	223f      	movs	r2, #63	; 0x3f
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0216 	orr.w	r2, r2, #22
 8002956:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e005      	b.n	800298e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029a6:	f7ff fae7 	bl	8001f78 <HAL_GetTick>
 80029aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d008      	beq.n	80029ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e052      	b.n	8002a70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0216 	bic.w	r2, r2, #22
 80029d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_DMA_Abort+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1a:	e013      	b.n	8002a44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a1c:	f7ff faac 	bl	8001f78 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d90c      	bls.n	8002a44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e015      	b.n	8002a70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e4      	bne.n	8002a1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	223f      	movs	r2, #63	; 0x3f
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d004      	beq.n	8002a96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00c      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2205      	movs	r2, #5
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ac8:	4b8e      	ldr	r3, [pc, #568]	; (8002d04 <HAL_DMA_IRQHandler+0x248>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a8e      	ldr	r2, [pc, #568]	; (8002d08 <HAL_DMA_IRQHandler+0x24c>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01a      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0204 	bic.w	r2, r2, #4
 8002b0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2208      	movs	r2, #8
 8002b16:	409a      	lsls	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	2204      	movs	r2, #4
 8002b64:	409a      	lsls	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d012      	beq.n	8002b94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2204      	movs	r2, #4
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2210      	movs	r2, #16
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d043      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d03c      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	2210      	movs	r2, #16
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d018      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d108      	bne.n	8002bec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d024      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e01f      	b.n	8002c2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e016      	b.n	8002c2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0208 	bic.w	r2, r2, #8
 8002c1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	2220      	movs	r2, #32
 8002c32:	409a      	lsls	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 808f 	beq.w	8002d5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8087 	beq.w	8002d5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	2220      	movs	r2, #32
 8002c54:	409a      	lsls	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d136      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0216 	bic.w	r2, r2, #22
 8002c74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x1da>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0208 	bic.w	r2, r2, #8
 8002ca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	223f      	movs	r2, #63	; 0x3f
 8002cac:	409a      	lsls	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d07e      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
        }
        return;
 8002cd2:	e079      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d031      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
 8002d00:	e02c      	b.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
 8002d02:	bf00      	nop
 8002d04:	20000010 	.word	0x20000010
 8002d08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d023      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
 8002d1c:	e01e      	b.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0210 	bic.w	r2, r2, #16
 8002d3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d032      	beq.n	8002dca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d022      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2205      	movs	r2, #5
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d307      	bcc.n	8002da4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f2      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x2cc>
 8002da2:	e000      	b.n	8002da6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002da4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
 8002dc6:	e000      	b.n	8002dca <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dc8:	bf00      	nop
    }
  }
}
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d108      	bne.n	8002e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e26:	e007      	b.n	8002e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3b10      	subs	r3, #16
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <DMA_CalcBaseAndBitshift+0x68>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d909      	bls.n	8002e86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	; 0x58
 8002e84:	e007      	b.n	8002e96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	0800a2c0 	.word	0x0800a2c0

08002eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d856      	bhi.n	8002f7e <DMA_CheckFifoParam+0xce>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <DMA_CheckFifoParam+0x28>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002efb 	.word	0x08002efb
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f7f 	.word	0x08002f7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d046      	beq.n	8002f82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e043      	b.n	8002f82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f02:	d140      	bne.n	8002f86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e03d      	b.n	8002f86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f12:	d121      	bne.n	8002f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d837      	bhi.n	8002f8a <DMA_CheckFifoParam+0xda>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <DMA_CheckFifoParam+0x70>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f37 	.word	0x08002f37
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002f49 	.word	0x08002f49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e030      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d025      	beq.n	8002f8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f46:	e022      	b.n	8002f8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f56:	e01c      	b.n	8002f92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d903      	bls.n	8002f66 <DMA_CheckFifoParam+0xb6>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d003      	beq.n	8002f6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f64:	e018      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6a:	e015      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e00b      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e00a      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e008      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e006      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
    }
  } 
  
  return status; 
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d106      	bne.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f001 b911 	b.w	80041f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f001 b8ff 	b.w	80041f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002ffe:	2302      	movs	r3, #2
 8003000:	f001 b8f7 	b.w	80041f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	f041 80e5 	bne.w	80041e4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003036:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f001 f910 	bl	800426c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8003054:	429a      	cmp	r2, r3
 8003056:	d960      	bls.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a8b      	ldr	r2, [pc, #556]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d057      	beq.n	8003112 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a8a      	ldr	r2, [pc, #552]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d050      	beq.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a88      	ldr	r2, [pc, #544]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d049      	beq.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a87      	ldr	r2, [pc, #540]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d042      	beq.n	8003106 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a85      	ldr	r2, [pc, #532]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d03a      	beq.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a84      	ldr	r2, [pc, #528]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d032      	beq.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a82      	ldr	r2, [pc, #520]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02a      	beq.n	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a81      	ldr	r2, [pc, #516]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7f      	ldr	r2, [pc, #508]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01a      	beq.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7e      	ldr	r2, [pc, #504]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d012      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a7c      	ldr	r2, [pc, #496]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00a      	beq.n	80030dc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7b      	ldr	r2, [pc, #492]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d102      	bne.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80030d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030d4:	e01e      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030da:	e01b      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030e0:	e018      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030e6:	e015      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030ec:	e012      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f2:	e00f      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f8:	e00c      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030fe:	e009      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003104:	e006      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003106:	2320      	movs	r3, #32
 8003108:	e004      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800310a:	2320      	movs	r3, #32
 800310c:	e002      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800310e:	2320      	movs	r3, #32
 8003110:	e000      	b.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003112:	2320      	movs	r3, #32
 8003114:	4a69      	ldr	r2, [pc, #420]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003116:	60d3      	str	r3, [r2, #12]
 8003118:	e14f      	b.n	80033ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b67      	ldr	r3, [pc, #412]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003122:	429a      	cmp	r2, r3
 8003124:	d960      	bls.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d057      	beq.n	80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d050      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a55      	ldr	r2, [pc, #340]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d049      	beq.n	80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a53      	ldr	r2, [pc, #332]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d042      	beq.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d03a      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d032      	beq.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d02a      	beq.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4d      	ldr	r2, [pc, #308]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d022      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4c      	ldr	r2, [pc, #304]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d01a      	beq.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a4a      	ldr	r2, [pc, #296]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d012      	beq.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00a      	beq.n	80031aa <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a47      	ldr	r2, [pc, #284]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d102      	bne.n	80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800319e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031a2:	e01e      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031a8:	e01b      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031ae:	e018      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031b4:	e015      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031ba:	e012      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031c0:	e00f      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031c6:	e00c      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031cc:	e009      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d2:	e006      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031d4:	2320      	movs	r3, #32
 80031d6:	e004      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031d8:	2320      	movs	r3, #32
 80031da:	e002      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031dc:	2320      	movs	r3, #32
 80031de:	e000      	b.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031e0:	2320      	movs	r3, #32
 80031e2:	4a36      	ldr	r2, [pc, #216]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	e0e8      	b.n	80033ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f240 8082 	bls.w	80032fa <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a24      	ldr	r2, [pc, #144]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d078      	beq.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d071      	beq.n	80032ee <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d06a      	beq.n	80032ea <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d063      	beq.n	80032e6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d05b      	beq.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d053      	beq.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04b      	beq.n	80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d043      	beq.n	80032ce <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d03b      	beq.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d012      	beq.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00a      	beq.n	800327a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d102      	bne.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800326e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003272:	e03f      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003278:	e03c      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800327a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800327e:	e039      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003284:	e036      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003286:	bf00      	nop
 8003288:	40026458 	.word	0x40026458
 800328c:	40026010 	.word	0x40026010
 8003290:	40026410 	.word	0x40026410
 8003294:	40026070 	.word	0x40026070
 8003298:	40026470 	.word	0x40026470
 800329c:	40026028 	.word	0x40026028
 80032a0:	40026428 	.word	0x40026428
 80032a4:	40026088 	.word	0x40026088
 80032a8:	40026488 	.word	0x40026488
 80032ac:	40026040 	.word	0x40026040
 80032b0:	40026440 	.word	0x40026440
 80032b4:	400260a0 	.word	0x400260a0
 80032b8:	400264a0 	.word	0x400264a0
 80032bc:	40026400 	.word	0x40026400
 80032c0:	400260b8 	.word	0x400260b8
 80032c4:	40026058 	.word	0x40026058
 80032c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032cc:	e012      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032d2:	e00f      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032d8:	e00c      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032de:	e009      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032e4:	e006      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032e6:	2320      	movs	r3, #32
 80032e8:	e004      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032ea:	2320      	movs	r3, #32
 80032ec:	e002      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032ee:	2320      	movs	r3, #32
 80032f0:	e000      	b.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032f2:	2320      	movs	r3, #32
 80032f4:	4a8c      	ldr	r2, [pc, #560]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80032f6:	60d3      	str	r3, [r2, #12]
 80032f8:	e05f      	b.n	80033ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a8b      	ldr	r2, [pc, #556]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d057      	beq.n	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a89      	ldr	r2, [pc, #548]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d050      	beq.n	80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a88      	ldr	r2, [pc, #544]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d049      	beq.n	80033ac <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a86      	ldr	r2, [pc, #536]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d042      	beq.n	80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a85      	ldr	r2, [pc, #532]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d03a      	beq.n	80033a2 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a83      	ldr	r2, [pc, #524]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d032      	beq.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a82      	ldr	r2, [pc, #520]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d02a      	beq.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a80      	ldr	r2, [pc, #512]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d022      	beq.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7f      	ldr	r2, [pc, #508]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d01a      	beq.n	800338a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a7d      	ldr	r2, [pc, #500]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d012      	beq.n	8003384 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7c      	ldr	r2, [pc, #496]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00a      	beq.n	800337e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7a      	ldr	r2, [pc, #488]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d102      	bne.n	8003378 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8003372:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003376:	e01e      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800337c:	e01b      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800337e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003382:	e018      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003388:	e015      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800338a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800338e:	e012      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003394:	e00f      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800339a:	e00c      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800339c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033a0:	e009      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033a6:	e006      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033a8:	2320      	movs	r3, #32
 80033aa:	e004      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033ac:	2320      	movs	r3, #32
 80033ae:	e002      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033b0:	2320      	movs	r3, #32
 80033b2:	e000      	b.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033b4:	2320      	movs	r3, #32
 80033b6:	4a5c      	ldr	r2, [pc, #368]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80033b8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d960      	bls.n	8003488 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a58      	ldr	r2, [pc, #352]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d057      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a56      	ldr	r2, [pc, #344]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d050      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a55      	ldr	r2, [pc, #340]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d049      	beq.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a53      	ldr	r2, [pc, #332]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d042      	beq.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a52      	ldr	r2, [pc, #328]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d03a      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a50      	ldr	r2, [pc, #320]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d032      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02a      	beq.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4d      	ldr	r2, [pc, #308]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d022      	beq.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4c      	ldr	r2, [pc, #304]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d01a      	beq.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4a      	ldr	r2, [pc, #296]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d012      	beq.n	8003450 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a49      	ldr	r2, [pc, #292]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00a      	beq.n	800344a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a47      	ldr	r2, [pc, #284]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d102      	bne.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800343e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003442:	e01e      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003444:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003448:	e01b      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800344a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800344e:	e018      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003450:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003454:	e015      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003456:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800345a:	e012      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800345c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003460:	e00f      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003466:	e00c      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346c:	e009      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800346e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003472:	e006      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003474:	2310      	movs	r3, #16
 8003476:	e004      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003478:	2310      	movs	r3, #16
 800347a:	e002      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800347c:	2310      	movs	r3, #16
 800347e:	e000      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003480:	2310      	movs	r3, #16
 8003482:	4a37      	ldr	r2, [pc, #220]	; (8003560 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003484:	60d3      	str	r3, [r2, #12]
 8003486:	e14f      	b.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	4b35      	ldr	r3, [pc, #212]	; (8003564 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003490:	429a      	cmp	r2, r3
 8003492:	f240 8082 	bls.w	800359a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a24      	ldr	r2, [pc, #144]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d078      	beq.n	8003592 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d071      	beq.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a21      	ldr	r2, [pc, #132]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d06a      	beq.n	800358a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d063      	beq.n	8003586 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d05b      	beq.n	8003580 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d053      	beq.n	800357a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d04b      	beq.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d043      	beq.n	800356e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d03b      	beq.n	8003568 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d012      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00a      	beq.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d102      	bne.n	8003514 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800350e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003512:	e03f      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003514:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003518:	e03c      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800351a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800351e:	e039      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003520:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003524:	e036      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003526:	bf00      	nop
 8003528:	40026000 	.word	0x40026000
 800352c:	40026010 	.word	0x40026010
 8003530:	40026410 	.word	0x40026410
 8003534:	40026070 	.word	0x40026070
 8003538:	40026470 	.word	0x40026470
 800353c:	40026028 	.word	0x40026028
 8003540:	40026428 	.word	0x40026428
 8003544:	40026088 	.word	0x40026088
 8003548:	40026488 	.word	0x40026488
 800354c:	40026040 	.word	0x40026040
 8003550:	40026440 	.word	0x40026440
 8003554:	400260a0 	.word	0x400260a0
 8003558:	400264a0 	.word	0x400264a0
 800355c:	40026458 	.word	0x40026458
 8003560:	40026400 	.word	0x40026400
 8003564:	400260b8 	.word	0x400260b8
 8003568:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800356c:	e012      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800356e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003572:	e00f      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003578:	e00c      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800357a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357e:	e009      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003584:	e006      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003586:	2310      	movs	r3, #16
 8003588:	e004      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800358a:	2310      	movs	r3, #16
 800358c:	e002      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800358e:	2310      	movs	r3, #16
 8003590:	e000      	b.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003592:	2310      	movs	r3, #16
 8003594:	4a8c      	ldr	r2, [pc, #560]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	e0c6      	b.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	4b8a      	ldr	r3, [pc, #552]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d960      	bls.n	8003668 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a89      	ldr	r2, [pc, #548]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d057      	beq.n	8003660 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a87      	ldr	r2, [pc, #540]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d050      	beq.n	800365c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a86      	ldr	r2, [pc, #536]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d049      	beq.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a84      	ldr	r2, [pc, #528]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d042      	beq.n	8003654 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a83      	ldr	r2, [pc, #524]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d03a      	beq.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a81      	ldr	r2, [pc, #516]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d032      	beq.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a80      	ldr	r2, [pc, #512]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d02a      	beq.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7e      	ldr	r2, [pc, #504]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d022      	beq.n	800363c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7d      	ldr	r2, [pc, #500]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d01a      	beq.n	8003636 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7b      	ldr	r2, [pc, #492]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d012      	beq.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7a      	ldr	r2, [pc, #488]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00a      	beq.n	800362a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a78      	ldr	r2, [pc, #480]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d102      	bne.n	8003624 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800361e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003622:	e01e      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003624:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003628:	e01b      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800362a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800362e:	e018      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003630:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003634:	e015      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003636:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800363a:	e012      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800363c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003640:	e00f      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003646:	e00c      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364c:	e009      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800364e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003652:	e006      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003654:	2310      	movs	r3, #16
 8003656:	e004      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003658:	2310      	movs	r3, #16
 800365a:	e002      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800365c:	2310      	movs	r3, #16
 800365e:	e000      	b.n	8003662 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003660:	2310      	movs	r3, #16
 8003662:	4a67      	ldr	r2, [pc, #412]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003664:	60d3      	str	r3, [r2, #12]
 8003666:	e05f      	b.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d057      	beq.n	8003722 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a57      	ldr	r2, [pc, #348]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d050      	beq.n	800371e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a55      	ldr	r2, [pc, #340]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d049      	beq.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a54      	ldr	r2, [pc, #336]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d042      	beq.n	8003716 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d03a      	beq.n	8003710 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a51      	ldr	r2, [pc, #324]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d032      	beq.n	800370a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02a      	beq.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4e      	ldr	r2, [pc, #312]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4c      	ldr	r2, [pc, #304]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01a      	beq.n	80036f8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a4b      	ldr	r2, [pc, #300]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d012      	beq.n	80036f2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a49      	ldr	r2, [pc, #292]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00a      	beq.n	80036ec <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a48      	ldr	r2, [pc, #288]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d102      	bne.n	80036e6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80036e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036e4:	e01e      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036ea:	e01b      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036f0:	e018      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036f6:	e015      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036fc:	e012      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80036fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003702:	e00f      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003708:	e00c      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800370a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800370e:	e009      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003714:	e006      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003716:	2310      	movs	r3, #16
 8003718:	e004      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800371a:	2310      	movs	r3, #16
 800371c:	e002      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800371e:	2310      	movs	r3, #16
 8003720:	e000      	b.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003722:	2310      	movs	r3, #16
 8003724:	4a36      	ldr	r2, [pc, #216]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003726:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003730:	429a      	cmp	r2, r3
 8003732:	f240 8082 	bls.w	800383a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d078      	beq.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d071      	beq.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d06a      	beq.n	800382a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d063      	beq.n	8003826 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d05b      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d053      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04b      	beq.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d043      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d03b      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d012      	beq.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00a      	beq.n	80037ba <HAL_DMAEx_MultiBufferStart_IT+0x812>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d102      	bne.n	80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 80037ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037b2:	e03f      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b8:	e03c      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037be:	e039      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037c4:	e036      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80037c6:	bf00      	nop
 80037c8:	40026400 	.word	0x40026400
 80037cc:	40026058 	.word	0x40026058
 80037d0:	40026010 	.word	0x40026010
 80037d4:	40026410 	.word	0x40026410
 80037d8:	40026070 	.word	0x40026070
 80037dc:	40026470 	.word	0x40026470
 80037e0:	40026028 	.word	0x40026028
 80037e4:	40026428 	.word	0x40026428
 80037e8:	40026088 	.word	0x40026088
 80037ec:	40026488 	.word	0x40026488
 80037f0:	40026040 	.word	0x40026040
 80037f4:	40026440 	.word	0x40026440
 80037f8:	400260a0 	.word	0x400260a0
 80037fc:	400264a0 	.word	0x400264a0
 8003800:	40026000 	.word	0x40026000
 8003804:	40026458 	.word	0x40026458
 8003808:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800380c:	e012      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800380e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003812:	e00f      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003818:	e00c      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800381a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800381e:	e009      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003824:	e006      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003826:	2308      	movs	r3, #8
 8003828:	e004      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800382a:	2308      	movs	r3, #8
 800382c:	e002      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800382e:	2308      	movs	r3, #8
 8003830:	e000      	b.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003832:	2308      	movs	r3, #8
 8003834:	4a8c      	ldr	r2, [pc, #560]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003836:	60d3      	str	r3, [r2, #12]
 8003838:	e14e      	b.n	8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	4b8a      	ldr	r3, [pc, #552]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003842:	429a      	cmp	r2, r3
 8003844:	d960      	bls.n	8003908 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a89      	ldr	r2, [pc, #548]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d057      	beq.n	8003900 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a87      	ldr	r2, [pc, #540]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d050      	beq.n	80038fc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a86      	ldr	r2, [pc, #536]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d049      	beq.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a84      	ldr	r2, [pc, #528]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d042      	beq.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a83      	ldr	r2, [pc, #524]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d03a      	beq.n	80038ee <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a81      	ldr	r2, [pc, #516]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d032      	beq.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a80      	ldr	r2, [pc, #512]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d02a      	beq.n	80038e2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a7e      	ldr	r2, [pc, #504]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d022      	beq.n	80038dc <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7d      	ldr	r2, [pc, #500]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d01a      	beq.n	80038d6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7b      	ldr	r2, [pc, #492]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d012      	beq.n	80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7a      	ldr	r2, [pc, #488]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00a      	beq.n	80038ca <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a78      	ldr	r2, [pc, #480]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d102      	bne.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 80038be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038c2:	e01e      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c8:	e01b      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038ce:	e018      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038d4:	e015      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038da:	e012      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e0:	e00f      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e6:	e00c      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ec:	e009      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f2:	e006      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038f4:	2308      	movs	r3, #8
 80038f6:	e004      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038f8:	2308      	movs	r3, #8
 80038fa:	e002      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80038fc:	2308      	movs	r3, #8
 80038fe:	e000      	b.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003900:	2308      	movs	r3, #8
 8003902:	4a59      	ldr	r2, [pc, #356]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003904:	6093      	str	r3, [r2, #8]
 8003906:	e0e7      	b.n	8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d960      	bls.n	80039d6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a55      	ldr	r2, [pc, #340]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d057      	beq.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a54      	ldr	r2, [pc, #336]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d050      	beq.n	80039ca <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d049      	beq.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d042      	beq.n	80039c2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a4f      	ldr	r2, [pc, #316]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d03a      	beq.n	80039bc <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a4e      	ldr	r2, [pc, #312]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d032      	beq.n	80039b6 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4c      	ldr	r2, [pc, #304]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d02a      	beq.n	80039b0 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4b      	ldr	r2, [pc, #300]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a49      	ldr	r2, [pc, #292]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01a      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a48      	ldr	r2, [pc, #288]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d012      	beq.n	800399e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a46      	ldr	r2, [pc, #280]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00a      	beq.n	8003998 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a45      	ldr	r2, [pc, #276]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d102      	bne.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800398c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003990:	e01e      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003996:	e01b      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003998:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800399c:	e018      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800399e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039a2:	e015      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039a8:	e012      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ae:	e00f      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b4:	e00c      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ba:	e009      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039c0:	e006      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039c2:	2308      	movs	r3, #8
 80039c4:	e004      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039c6:	2308      	movs	r3, #8
 80039c8:	e002      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e000      	b.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039ce:	2308      	movs	r3, #8
 80039d0:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80039d2:	60d3      	str	r3, [r2, #12]
 80039d4:	e080      	b.n	8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a25      	ldr	r2, [pc, #148]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d078      	beq.n	8003ad2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d071      	beq.n	8003ace <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d06a      	beq.n	8003aca <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a20      	ldr	r2, [pc, #128]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d063      	beq.n	8003ac6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d05b      	beq.n	8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d053      	beq.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04b      	beq.n	8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d043      	beq.n	8003aae <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d03b      	beq.n	8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d012      	beq.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00a      	beq.n	8003a5a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d102      	bne.n	8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003a4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a52:	e03f      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a58:	e03c      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a5e:	e039      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a64:	e036      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003a66:	bf00      	nop
 8003a68:	40026400 	.word	0x40026400
 8003a6c:	400260b8 	.word	0x400260b8
 8003a70:	40026010 	.word	0x40026010
 8003a74:	40026410 	.word	0x40026410
 8003a78:	40026070 	.word	0x40026070
 8003a7c:	40026470 	.word	0x40026470
 8003a80:	40026028 	.word	0x40026028
 8003a84:	40026428 	.word	0x40026428
 8003a88:	40026088 	.word	0x40026088
 8003a8c:	40026488 	.word	0x40026488
 8003a90:	40026040 	.word	0x40026040
 8003a94:	40026440 	.word	0x40026440
 8003a98:	400260a0 	.word	0x400260a0
 8003a9c:	400264a0 	.word	0x400264a0
 8003aa0:	40026058 	.word	0x40026058
 8003aa4:	40026000 	.word	0x40026000
 8003aa8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003aac:	e012      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab2:	e00f      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab8:	e00c      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003abe:	e009      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ac4:	e006      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	e004      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003aca:	2308      	movs	r3, #8
 8003acc:	e002      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	e000      	b.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	4a8a      	ldr	r2, [pc, #552]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003ad6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	4b89      	ldr	r3, [pc, #548]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d960      	bls.n	8003ba6 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a87      	ldr	r2, [pc, #540]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d057      	beq.n	8003b9e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a86      	ldr	r2, [pc, #536]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d050      	beq.n	8003b9a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a84      	ldr	r2, [pc, #528]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d049      	beq.n	8003b96 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a83      	ldr	r2, [pc, #524]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d042      	beq.n	8003b92 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a81      	ldr	r2, [pc, #516]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d03a      	beq.n	8003b8c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a80      	ldr	r2, [pc, #512]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d032      	beq.n	8003b86 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7e      	ldr	r2, [pc, #504]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02a      	beq.n	8003b80 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d022      	beq.n	8003b7a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7b      	ldr	r2, [pc, #492]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01a      	beq.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7a      	ldr	r2, [pc, #488]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d012      	beq.n	8003b6e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a78      	ldr	r2, [pc, #480]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00a      	beq.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a77      	ldr	r2, [pc, #476]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d102      	bne.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003b5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b60:	e01e      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b66:	e01b      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b6c:	e018      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b72:	e015      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b78:	e012      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b7e:	e00f      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b84:	e00c      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8a:	e009      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b90:	e006      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e004      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b96:	2304      	movs	r3, #4
 8003b98:	e002      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	e000      	b.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003ba2:	60d3      	str	r3, [r2, #12]
 8003ba4:	e150      	b.n	8003e48 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d960      	bls.n	8003c74 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a54      	ldr	r2, [pc, #336]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d057      	beq.n	8003c6c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d050      	beq.n	8003c68 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a51      	ldr	r2, [pc, #324]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d049      	beq.n	8003c64 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a4f      	ldr	r2, [pc, #316]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d042      	beq.n	8003c60 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a4e      	ldr	r2, [pc, #312]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03a      	beq.n	8003c5a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d032      	beq.n	8003c54 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02a      	beq.n	8003c4e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a49      	ldr	r2, [pc, #292]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d022      	beq.n	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a48      	ldr	r2, [pc, #288]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d01a      	beq.n	8003c42 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a46      	ldr	r2, [pc, #280]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d012      	beq.n	8003c3c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a45      	ldr	r2, [pc, #276]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00a      	beq.n	8003c36 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d102      	bne.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003c2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c2e:	e01e      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c34:	e01b      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c3a:	e018      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c40:	e015      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c46:	e012      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c4c:	e00f      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c52:	e00c      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c58:	e009      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c5e:	e006      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c60:	2304      	movs	r3, #4
 8003c62:	e004      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c64:	2304      	movs	r3, #4
 8003c66:	e002      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	e000      	b.n	8003c6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	4a32      	ldr	r2, [pc, #200]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003c70:	6093      	str	r3, [r2, #8]
 8003c72:	e0e9      	b.n	8003e48 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f240 8083 	bls.w	8003d88 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a20      	ldr	r2, [pc, #128]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d079      	beq.n	8003d80 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d072      	beq.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d06b      	beq.n	8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d064      	beq.n	8003d74 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d05c      	beq.n	8003d6e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d054      	beq.n	8003d68 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d04c      	beq.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d044      	beq.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d03c      	beq.n	8003d56 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d034      	beq.n	8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d02c      	beq.n	8003d4a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d124      	bne.n	8003d44 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003cfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cfe:	e040      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d00:	40026000 	.word	0x40026000
 8003d04:	40026458 	.word	0x40026458
 8003d08:	40026010 	.word	0x40026010
 8003d0c:	40026410 	.word	0x40026410
 8003d10:	40026070 	.word	0x40026070
 8003d14:	40026470 	.word	0x40026470
 8003d18:	40026028 	.word	0x40026028
 8003d1c:	40026428 	.word	0x40026428
 8003d20:	40026088 	.word	0x40026088
 8003d24:	40026488 	.word	0x40026488
 8003d28:	40026040 	.word	0x40026040
 8003d2c:	40026440 	.word	0x40026440
 8003d30:	400260a0 	.word	0x400260a0
 8003d34:	400264a0 	.word	0x400264a0
 8003d38:	40026400 	.word	0x40026400
 8003d3c:	400260b8 	.word	0x400260b8
 8003d40:	40026058 	.word	0x40026058
 8003d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d48:	e01b      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d4e:	e018      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d54:	e015      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d5a:	e012      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d60:	e00f      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d66:	e00c      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d6c:	e009      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d72:	e006      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d74:	2304      	movs	r3, #4
 8003d76:	e004      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e002      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	e000      	b.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d80:	2304      	movs	r3, #4
 8003d82:	4a8b      	ldr	r2, [pc, #556]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003d84:	60d3      	str	r3, [r2, #12]
 8003d86:	e05f      	b.n	8003e48 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a89      	ldr	r2, [pc, #548]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d057      	beq.n	8003e42 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a88      	ldr	r2, [pc, #544]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d050      	beq.n	8003e3e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a86      	ldr	r2, [pc, #536]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d049      	beq.n	8003e3a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a85      	ldr	r2, [pc, #532]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d042      	beq.n	8003e36 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a83      	ldr	r2, [pc, #524]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d03a      	beq.n	8003e30 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a82      	ldr	r2, [pc, #520]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d032      	beq.n	8003e2a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a80      	ldr	r2, [pc, #512]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02a      	beq.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7f      	ldr	r2, [pc, #508]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d022      	beq.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a7d      	ldr	r2, [pc, #500]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01a      	beq.n	8003e18 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7c      	ldr	r2, [pc, #496]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d012      	beq.n	8003e12 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7a      	ldr	r2, [pc, #488]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00a      	beq.n	8003e0c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a79      	ldr	r2, [pc, #484]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d102      	bne.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003e00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e04:	e01e      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e0a:	e01b      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e10:	e018      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e16:	e015      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e1c:	e012      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e22:	e00f      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e28:	e00c      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e2e:	e009      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e34:	e006      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e36:	2304      	movs	r3, #4
 8003e38:	e004      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	e002      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	e000      	b.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e42:	2304      	movs	r3, #4
 8003e44:	4a5a      	ldr	r2, [pc, #360]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003e46:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d95c      	bls.n	8003f0e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a56      	ldr	r2, [pc, #344]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d053      	beq.n	8003f06 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a55      	ldr	r2, [pc, #340]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d04c      	beq.n	8003f02 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a53      	ldr	r2, [pc, #332]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d045      	beq.n	8003efe <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a52      	ldr	r2, [pc, #328]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d03e      	beq.n	8003efa <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a50      	ldr	r2, [pc, #320]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d037      	beq.n	8003ef6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a4f      	ldr	r2, [pc, #316]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d030      	beq.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a4d      	ldr	r2, [pc, #308]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d029      	beq.n	8003eee <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a4c      	ldr	r2, [pc, #304]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d022      	beq.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a4a      	ldr	r2, [pc, #296]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01a      	beq.n	8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a49      	ldr	r2, [pc, #292]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d012      	beq.n	8003ede <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a47      	ldr	r2, [pc, #284]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a46      	ldr	r2, [pc, #280]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d102      	bne.n	8003ed2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ed0:	e01a      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ed6:	e017      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003edc:	e014      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ee2:	e011      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ee8:	e00e      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003eea:	2340      	movs	r3, #64	; 0x40
 8003eec:	e00c      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003eee:	2340      	movs	r3, #64	; 0x40
 8003ef0:	e00a      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ef2:	2340      	movs	r3, #64	; 0x40
 8003ef4:	e008      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ef6:	2340      	movs	r3, #64	; 0x40
 8003ef8:	e006      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e004      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e002      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4a37      	ldr	r2, [pc, #220]	; (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003f0a:	60d3      	str	r3, [r2, #12]
 8003f0c:	e141      	b.n	8004192 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b35      	ldr	r3, [pc, #212]	; (8003fec <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d97c      	bls.n	8004014 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d073      	beq.n	800400c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d06c      	beq.n	8004008 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d065      	beq.n	8004004 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d05e      	beq.n	8004000 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d057      	beq.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d050      	beq.n	8003ff8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1c      	ldr	r2, [pc, #112]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d049      	beq.n	8003ff4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d042      	beq.n	8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01a      	beq.n	8003faa <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d012      	beq.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00a      	beq.n	8003f9e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d102      	bne.n	8003f98 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f96:	e03a      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f9c:	e037      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa2:	e034      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa8:	e031      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fae:	e02e      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003fb0:	40026000 	.word	0x40026000
 8003fb4:	40026010 	.word	0x40026010
 8003fb8:	40026410 	.word	0x40026410
 8003fbc:	40026070 	.word	0x40026070
 8003fc0:	40026470 	.word	0x40026470
 8003fc4:	40026028 	.word	0x40026028
 8003fc8:	40026428 	.word	0x40026428
 8003fcc:	40026088 	.word	0x40026088
 8003fd0:	40026488 	.word	0x40026488
 8003fd4:	40026040 	.word	0x40026040
 8003fd8:	40026440 	.word	0x40026440
 8003fdc:	400260a0 	.word	0x400260a0
 8003fe0:	400264a0 	.word	0x400264a0
 8003fe4:	40026458 	.word	0x40026458
 8003fe8:	40026400 	.word	0x40026400
 8003fec:	400260b8 	.word	0x400260b8
 8003ff0:	2340      	movs	r3, #64	; 0x40
 8003ff2:	e00c      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ff4:	2340      	movs	r3, #64	; 0x40
 8003ff6:	e00a      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	e008      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ffc:	2340      	movs	r3, #64	; 0x40
 8003ffe:	e006      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004000:	2301      	movs	r3, #1
 8004002:	e004      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004004:	2301      	movs	r3, #1
 8004006:	e002      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800400c:	2301      	movs	r3, #1
 800400e:	4a7b      	ldr	r2, [pc, #492]	; (80041fc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004010:	6093      	str	r3, [r2, #8]
 8004012:	e0be      	b.n	8004192 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	4b79      	ldr	r3, [pc, #484]	; (8004200 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d95c      	bls.n	80040da <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a77      	ldr	r2, [pc, #476]	; (8004204 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d053      	beq.n	80040d2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a76      	ldr	r2, [pc, #472]	; (8004208 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d04c      	beq.n	80040ce <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a74      	ldr	r2, [pc, #464]	; (800420c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d045      	beq.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a73      	ldr	r2, [pc, #460]	; (8004210 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d03e      	beq.n	80040c6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a71      	ldr	r2, [pc, #452]	; (8004214 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d037      	beq.n	80040c2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a70      	ldr	r2, [pc, #448]	; (8004218 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d030      	beq.n	80040be <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6e      	ldr	r2, [pc, #440]	; (800421c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d029      	beq.n	80040ba <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6d      	ldr	r2, [pc, #436]	; (8004220 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a6b      	ldr	r2, [pc, #428]	; (8004224 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01a      	beq.n	80040b0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6a      	ldr	r2, [pc, #424]	; (8004228 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d012      	beq.n	80040aa <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a68      	ldr	r2, [pc, #416]	; (800422c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00a      	beq.n	80040a4 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a67      	ldr	r2, [pc, #412]	; (8004230 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d102      	bne.n	800409e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8004098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800409c:	e01a      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800409e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a2:	e017      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040a8:	e014      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ae:	e011      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b4:	e00e      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	e00c      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040ba:	2340      	movs	r3, #64	; 0x40
 80040bc:	e00a      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	e008      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040c2:	2340      	movs	r3, #64	; 0x40
 80040c4:	e006      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e004      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e002      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4a57      	ldr	r2, [pc, #348]	; (8004234 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80040d6:	60d3      	str	r3, [r2, #12]
 80040d8:	e05b      	b.n	8004192 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a49      	ldr	r2, [pc, #292]	; (8004204 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d053      	beq.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a47      	ldr	r2, [pc, #284]	; (8004208 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d04c      	beq.n	8004188 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a46      	ldr	r2, [pc, #280]	; (800420c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d045      	beq.n	8004184 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a44      	ldr	r2, [pc, #272]	; (8004210 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d03e      	beq.n	8004180 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a43      	ldr	r2, [pc, #268]	; (8004214 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d037      	beq.n	800417c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a41      	ldr	r2, [pc, #260]	; (8004218 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d030      	beq.n	8004178 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a40      	ldr	r2, [pc, #256]	; (800421c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d029      	beq.n	8004174 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3e      	ldr	r2, [pc, #248]	; (8004220 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d022      	beq.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3d      	ldr	r2, [pc, #244]	; (8004224 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01a      	beq.n	800416a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d012      	beq.n	8004164 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3a      	ldr	r2, [pc, #232]	; (800422c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00a      	beq.n	800415e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a38      	ldr	r2, [pc, #224]	; (8004230 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d102      	bne.n	8004158 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8004152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004156:	e01a      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004158:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800415c:	e017      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800415e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004162:	e014      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004168:	e011      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800416a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800416e:	e00e      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	e00c      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004174:	2340      	movs	r3, #64	; 0x40
 8004176:	e00a      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004178:	2340      	movs	r3, #64	; 0x40
 800417a:	e008      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800417c:	2340      	movs	r3, #64	; 0x40
 800417e:	e006      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004180:	2301      	movs	r3, #1
 8004182:	e004      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004184:	2301      	movs	r3, #1
 8004186:	e002      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800418c:	2301      	movs	r3, #1
 800418e:	4a29      	ldr	r2, [pc, #164]	; (8004234 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004190:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0216 	orr.w	r2, r2, #22
 80041a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0208 	orr.w	r2, r2, #8
 80041d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e005      	b.n	80041f0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40026400 	.word	0x40026400
 8004200:	40026058 	.word	0x40026058
 8004204:	40026010 	.word	0x40026010
 8004208:	40026410 	.word	0x40026410
 800420c:	40026070 	.word	0x40026070
 8004210:	40026470 	.word	0x40026470
 8004214:	40026028 	.word	0x40026028
 8004218:	40026428 	.word	0x40026428
 800421c:	40026088 	.word	0x40026088
 8004220:	40026488 	.word	0x40026488
 8004224:	40026040 	.word	0x40026040
 8004228:	40026440 	.word	0x40026440
 800422c:	400260a0 	.word	0x400260a0
 8004230:	400264a0 	.word	0x400264a0
 8004234:	40026000 	.word	0x40026000

08004238 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	e003      	b.n	800425e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d108      	bne.n	800429c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800429a:	e007      	b.n	80042ac <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e165      	b.n	80045a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042d4:	2201      	movs	r2, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 8154 	bne.w	800459a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d005      	beq.n	800430a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	2b02      	cmp	r3, #2
 8004308:	d130      	bne.n	800436c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004340:	2201      	movs	r2, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 0201 	and.w	r2, r3, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b03      	cmp	r3, #3
 8004376:	d017      	beq.n	80043a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d123      	bne.n	80043fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80ae 	beq.w	800459a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b5d      	ldr	r3, [pc, #372]	; (80045b8 <HAL_GPIO_Init+0x300>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a5c      	ldr	r2, [pc, #368]	; (80045b8 <HAL_GPIO_Init+0x300>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b5a      	ldr	r3, [pc, #360]	; (80045b8 <HAL_GPIO_Init+0x300>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445a:	4a58      	ldr	r2, [pc, #352]	; (80045bc <HAL_GPIO_Init+0x304>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4f      	ldr	r2, [pc, #316]	; (80045c0 <HAL_GPIO_Init+0x308>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d025      	beq.n	80044d2 <HAL_GPIO_Init+0x21a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a4e      	ldr	r2, [pc, #312]	; (80045c4 <HAL_GPIO_Init+0x30c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01f      	beq.n	80044ce <HAL_GPIO_Init+0x216>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a4d      	ldr	r2, [pc, #308]	; (80045c8 <HAL_GPIO_Init+0x310>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d019      	beq.n	80044ca <HAL_GPIO_Init+0x212>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4c      	ldr	r2, [pc, #304]	; (80045cc <HAL_GPIO_Init+0x314>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_GPIO_Init+0x20e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4b      	ldr	r2, [pc, #300]	; (80045d0 <HAL_GPIO_Init+0x318>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00d      	beq.n	80044c2 <HAL_GPIO_Init+0x20a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4a      	ldr	r2, [pc, #296]	; (80045d4 <HAL_GPIO_Init+0x31c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d007      	beq.n	80044be <HAL_GPIO_Init+0x206>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a49      	ldr	r2, [pc, #292]	; (80045d8 <HAL_GPIO_Init+0x320>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d101      	bne.n	80044ba <HAL_GPIO_Init+0x202>
 80044b6:	2306      	movs	r3, #6
 80044b8:	e00c      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044ba:	2307      	movs	r3, #7
 80044bc:	e00a      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044be:	2305      	movs	r3, #5
 80044c0:	e008      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044c2:	2304      	movs	r3, #4
 80044c4:	e006      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044c6:	2303      	movs	r3, #3
 80044c8:	e004      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e002      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044d2:	2300      	movs	r3, #0
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	f002 0203 	and.w	r2, r2, #3
 80044da:	0092      	lsls	r2, r2, #2
 80044dc:	4093      	lsls	r3, r2
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044e4:	4935      	ldr	r1, [pc, #212]	; (80045bc <HAL_GPIO_Init+0x304>)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	3302      	adds	r3, #2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044f2:	4b3a      	ldr	r3, [pc, #232]	; (80045dc <HAL_GPIO_Init+0x324>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004516:	4a31      	ldr	r2, [pc, #196]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HAL_GPIO_Init+0x324>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004540:	4a26      	ldr	r2, [pc, #152]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004546:	4b25      	ldr	r3, [pc, #148]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_GPIO_Init+0x324>)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	f67f ae96 	bls.w	80042d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40013800 	.word	0x40013800
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40020400 	.word	0x40020400
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40021400 	.word	0x40021400
 80045d8:	40021800 	.word	0x40021800
 80045dc:	40013c00 	.word	0x40013c00

080045e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	e001      	b.n	8004602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
 800461c:	4613      	mov	r3, r2
 800461e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004620:	787b      	ldrb	r3, [r7, #1]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800462c:	e003      	b.n	8004636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462e:	887b      	ldrh	r3, [r7, #2]
 8004630:	041a      	lsls	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	619a      	str	r2, [r3, #24]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004654:	887a      	ldrh	r2, [r7, #2]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4013      	ands	r3, r2
 800465a:	041a      	lsls	r2, r3, #16
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	43d9      	mvns	r1, r3
 8004660:	887b      	ldrh	r3, [r7, #2]
 8004662:	400b      	ands	r3, r1
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	619a      	str	r2, [r3, #24]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d006      	beq.n	800469c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800468e:	4a05      	ldr	r2, [pc, #20]	; (80046a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f806 	bl	80046a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40013c00 	.word	0x40013c00

080046a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e12b      	b.n	800492a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd f836 	bl	8001758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004724:	f001 fb2c 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8004728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4a81      	ldr	r2, [pc, #516]	; (8004934 <HAL_I2C_Init+0x274>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d807      	bhi.n	8004744 <HAL_I2C_Init+0x84>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a80      	ldr	r2, [pc, #512]	; (8004938 <HAL_I2C_Init+0x278>)
 8004738:	4293      	cmp	r3, r2
 800473a:	bf94      	ite	ls
 800473c:	2301      	movls	r3, #1
 800473e:	2300      	movhi	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e006      	b.n	8004752 <HAL_I2C_Init+0x92>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a7d      	ldr	r2, [pc, #500]	; (800493c <HAL_I2C_Init+0x27c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	bf94      	ite	ls
 800474c:	2301      	movls	r3, #1
 800474e:	2300      	movhi	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0e7      	b.n	800492a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a78      	ldr	r2, [pc, #480]	; (8004940 <HAL_I2C_Init+0x280>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	0c9b      	lsrs	r3, r3, #18
 8004764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a6a      	ldr	r2, [pc, #424]	; (8004934 <HAL_I2C_Init+0x274>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d802      	bhi.n	8004794 <HAL_I2C_Init+0xd4>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	e009      	b.n	80047a8 <HAL_I2C_Init+0xe8>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	4a69      	ldr	r2, [pc, #420]	; (8004944 <HAL_I2C_Init+0x284>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	3301      	adds	r3, #1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	495c      	ldr	r1, [pc, #368]	; (8004934 <HAL_I2C_Init+0x274>)
 80047c4:	428b      	cmp	r3, r1
 80047c6:	d819      	bhi.n	80047fc <HAL_I2C_Init+0x13c>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1e59      	subs	r1, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d6:	1c59      	adds	r1, r3, #1
 80047d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047dc:	400b      	ands	r3, r1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_I2C_Init+0x138>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1e59      	subs	r1, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	e051      	b.n	800489c <HAL_I2C_Init+0x1dc>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e04f      	b.n	800489c <HAL_I2C_Init+0x1dc>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d111      	bne.n	8004828 <HAL_I2C_Init+0x168>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	440b      	add	r3, r1
 8004812:	fbb0 f3f3 	udiv	r3, r0, r3
 8004816:	3301      	adds	r3, #1
 8004818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e012      	b.n	800484e <HAL_I2C_Init+0x18e>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e58      	subs	r0, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	0099      	lsls	r1, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	fbb0 f3f3 	udiv	r3, r0, r3
 800483e:	3301      	adds	r3, #1
 8004840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Init+0x196>
 8004852:	2301      	movs	r3, #1
 8004854:	e022      	b.n	800489c <HAL_I2C_Init+0x1dc>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10e      	bne.n	800487c <HAL_I2C_Init+0x1bc>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e58      	subs	r0, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	440b      	add	r3, r1
 800486c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004870:	3301      	adds	r3, #1
 8004872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487a:	e00f      	b.n	800489c <HAL_I2C_Init+0x1dc>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1e58      	subs	r0, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	0099      	lsls	r1, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	6809      	ldr	r1, [r1, #0]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6911      	ldr	r1, [r2, #16]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68d2      	ldr	r2, [r2, #12]
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	000186a0 	.word	0x000186a0
 8004938:	001e847f 	.word	0x001e847f
 800493c:	003d08ff 	.word	0x003d08ff
 8004940:	431bde83 	.word	0x431bde83
 8004944:	10624dd3 	.word	0x10624dd3

08004948 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	460b      	mov	r3, r1
 8004956:	817b      	strh	r3, [r7, #10]
 8004958:	4613      	mov	r3, r2
 800495a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800495c:	f7fd fb0c 	bl	8001f78 <HAL_GetTick>
 8004960:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b20      	cmp	r3, #32
 800496c:	f040 80e0 	bne.w	8004b30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2319      	movs	r3, #25
 8004976:	2201      	movs	r2, #1
 8004978:	4970      	ldr	r1, [pc, #448]	; (8004b3c <HAL_I2C_Master_Transmit+0x1f4>)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fde8 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	e0d3      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_I2C_Master_Transmit+0x50>
 8004994:	2302      	movs	r3, #2
 8004996:	e0cc      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d007      	beq.n	80049be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2221      	movs	r2, #33	; 0x21
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2210      	movs	r2, #16
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	893a      	ldrh	r2, [r7, #8]
 80049ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a50      	ldr	r2, [pc, #320]	; (8004b40 <HAL_I2C_Master_Transmit+0x1f8>)
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a00:	8979      	ldrh	r1, [r7, #10]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a3a      	ldr	r2, [r7, #32]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fbbc 	bl	8005184 <I2C_MasterRequestWrite>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e08d      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a2c:	e066      	b.n	8004afc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	6a39      	ldr	r1, [r7, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fe62 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d107      	bne.n	8004a56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06b      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <HAL_I2C_Master_Transmit+0x188>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d017      	beq.n	8004ad0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	6a39      	ldr	r1, [r7, #32]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fe52 	bl	800577e <I2C_WaitOnBTFFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d107      	bne.n	8004af8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e01a      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d194      	bne.n	8004a2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	00100002 	.word	0x00100002
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
 8004b54:	4613      	mov	r3, r2
 8004b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7fd fa0e 	bl	8001f78 <HAL_GetTick>
 8004b5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	f040 820b 	bne.w	8004f82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2319      	movs	r3, #25
 8004b72:	2201      	movs	r2, #1
 8004b74:	497c      	ldr	r1, [pc, #496]	; (8004d68 <HAL_I2C_Master_Receive+0x224>)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fcea 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
 8004b84:	e1fe      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_I2C_Master_Receive+0x50>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e1f7      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d007      	beq.n	8004bba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2222      	movs	r2, #34	; 0x22
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	893a      	ldrh	r2, [r7, #8]
 8004bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a5c      	ldr	r2, [pc, #368]	; (8004d6c <HAL_I2C_Master_Receive+0x228>)
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bfc:	8979      	ldrh	r1, [r7, #10]
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fb40 	bl	8005288 <I2C_MasterRequestRead>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e1b8      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d113      	bne.n	8004c42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e18c      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d11b      	bne.n	8004c82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e16c      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d11b      	bne.n	8004cc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	e14c      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ce8:	e138      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	f200 80f1 	bhi.w	8004ed6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d123      	bne.n	8004d44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fd7d 	bl	8005800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e139      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d42:	e10b      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d14e      	bne.n	8004dea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	2200      	movs	r2, #0
 8004d54:	4906      	ldr	r1, [pc, #24]	; (8004d70 <HAL_I2C_Master_Receive+0x22c>)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fbfa 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e10e      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
 8004d66:	bf00      	nop
 8004d68:	00100002 	.word	0x00100002
 8004d6c:	ffff0000 	.word	0xffff0000
 8004d70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de8:	e0b8      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	2200      	movs	r2, #0
 8004df2:	4966      	ldr	r1, [pc, #408]	; (8004f8c <HAL_I2C_Master_Receive+0x448>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fbab 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0bf      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	494f      	ldr	r1, [pc, #316]	; (8004f8c <HAL_I2C_Master_Receive+0x448>)
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fb7d 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e091      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed4:	e042      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fc90 	bl	8005800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e04c      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d118      	bne.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f47f aec2 	bne.w	8004cea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	00010004 	.word	0x00010004

08004f90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	817b      	strh	r3, [r7, #10]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	813b      	strh	r3, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004faa:	f7fc ffe5 	bl	8001f78 <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	f040 80d9 	bne.w	8005170 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	2319      	movs	r3, #25
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	496d      	ldr	r1, [pc, #436]	; (800517c <HAL_I2C_Mem_Write+0x1ec>)
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fac1 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e0cc      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_I2C_Mem_Write+0x56>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0c5      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d007      	beq.n	800500c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2221      	movs	r2, #33	; 0x21
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2240      	movs	r2, #64	; 0x40
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800503c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a4d      	ldr	r2, [pc, #308]	; (8005180 <HAL_I2C_Mem_Write+0x1f0>)
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800504e:	88f8      	ldrh	r0, [r7, #6]
 8005050:	893a      	ldrh	r2, [r7, #8]
 8005052:	8979      	ldrh	r1, [r7, #10]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4603      	mov	r3, r0
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f9e0 	bl	8005424 <I2C_RequestMemoryWrite>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d052      	beq.n	8005110 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e081      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fb42 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2b04      	cmp	r3, #4
 8005084:	d107      	bne.n	8005096 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e06b      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d11b      	bne.n	8005110 <HAL_I2C_Mem_Write+0x180>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d017      	beq.n	8005110 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1aa      	bne.n	800506e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fb2e 	bl	800577e <I2C_WaitOnBTFFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	2b04      	cmp	r3, #4
 800512e:	d107      	bne.n	8005140 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e016      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	00100002 	.word	0x00100002
 8005180:	ffff0000 	.word	0xffff0000

08005184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	460b      	mov	r3, r1
 8005192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d006      	beq.n	80051ae <I2C_MasterRequestWrite+0x2a>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d003      	beq.n	80051ae <I2C_MasterRequestWrite+0x2a>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051ac:	d108      	bne.n	80051c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e00b      	b.n	80051d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	2b12      	cmp	r3, #18
 80051c6:	d107      	bne.n	80051d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f9b3 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00d      	beq.n	800520c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fe:	d103      	bne.n	8005208 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e035      	b.n	8005278 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005214:	d108      	bne.n	8005228 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005224:	611a      	str	r2, [r3, #16]
 8005226:	e01b      	b.n	8005260 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005228:	897b      	ldrh	r3, [r7, #10]
 800522a:	11db      	asrs	r3, r3, #7
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 0306 	and.w	r3, r3, #6
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f063 030f 	orn	r3, r3, #15
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	490e      	ldr	r1, [pc, #56]	; (8005280 <I2C_MasterRequestWrite+0xfc>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f9d9 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e010      	b.n	8005278 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005256:	897b      	ldrh	r3, [r7, #10]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4907      	ldr	r1, [pc, #28]	; (8005284 <I2C_MasterRequestWrite+0x100>)
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f9c9 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	00010008 	.word	0x00010008
 8005284:	00010002 	.word	0x00010002

08005288 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	460b      	mov	r3, r1
 8005296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d006      	beq.n	80052c2 <I2C_MasterRequestRead+0x3a>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d003      	beq.n	80052c2 <I2C_MasterRequestRead+0x3a>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052c0:	d108      	bne.n	80052d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e00b      	b.n	80052ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	2b11      	cmp	r3, #17
 80052da:	d107      	bne.n	80052ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f929 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005312:	d103      	bne.n	800531c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e079      	b.n	8005414 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005328:	d108      	bne.n	800533c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800532a:	897b      	ldrh	r3, [r7, #10]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	b2da      	uxtb	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	611a      	str	r2, [r3, #16]
 800533a:	e05f      	b.n	80053fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800533c:	897b      	ldrh	r3, [r7, #10]
 800533e:	11db      	asrs	r3, r3, #7
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0306 	and.w	r3, r3, #6
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f063 030f 	orn	r3, r3, #15
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	4930      	ldr	r1, [pc, #192]	; (800541c <I2C_MasterRequestRead+0x194>)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f94f 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e054      	b.n	8005414 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800536a:	897b      	ldrh	r3, [r7, #10]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	4929      	ldr	r1, [pc, #164]	; (8005420 <I2C_MasterRequestRead+0x198>)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f93f 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e044      	b.n	8005414 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f8c7 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d103      	bne.n	80053e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e017      	b.n	8005414 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80053e4:	897b      	ldrh	r3, [r7, #10]
 80053e6:	11db      	asrs	r3, r3, #7
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f063 030e 	orn	r3, r3, #14
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4907      	ldr	r1, [pc, #28]	; (8005420 <I2C_MasterRequestRead+0x198>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f8fb 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	00010008 	.word	0x00010008
 8005420:	00010002 	.word	0x00010002

08005424 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	461a      	mov	r2, r3
 8005432:	4603      	mov	r3, r0
 8005434:	817b      	strh	r3, [r7, #10]
 8005436:	460b      	mov	r3, r1
 8005438:	813b      	strh	r3, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	2200      	movs	r2, #0
 8005456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f878 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00d      	beq.n	8005482 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005474:	d103      	bne.n	800547e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e05f      	b.n	8005542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005490:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	492d      	ldr	r1, [pc, #180]	; (800554c <I2C_RequestMemoryWrite+0x128>)
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f8b0 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e04c      	b.n	8005542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	6a39      	ldr	r1, [r7, #32]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f91a 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d107      	bne.n	80054e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e02b      	b.n	8005542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d105      	bne.n	80054fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054f0:	893b      	ldrh	r3, [r7, #8]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	611a      	str	r2, [r3, #16]
 80054fa:	e021      	b.n	8005540 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054fc:	893b      	ldrh	r3, [r7, #8]
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	b29b      	uxth	r3, r3
 8005502:	b2da      	uxtb	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800550a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550c:	6a39      	ldr	r1, [r7, #32]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f8f4 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b04      	cmp	r3, #4
 8005520:	d107      	bne.n	8005532 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e005      	b.n	8005542 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005536:	893b      	ldrh	r3, [r7, #8]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	00010002 	.word	0x00010002

08005550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005560:	e025      	b.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005568:	d021      	beq.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7fc fd05 	bl	8001f78 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d116      	bne.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f043 0220 	orr.w	r2, r3, #32
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e023      	b.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10d      	bne.n	80055d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	43da      	mvns	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	e00c      	b.n	80055ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	43da      	mvns	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d0b6      	beq.n	8005562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800560c:	e051      	b.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d123      	bne.n	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005636:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f043 0204 	orr.w	r2, r3, #4
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e046      	b.n	80056f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800566c:	d021      	beq.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566e:	f7fc fc83 	bl	8001f78 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d116      	bne.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e020      	b.n	80056f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10c      	bne.n	80056d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	43da      	mvns	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf14      	ite	ne
 80056ce:	2301      	movne	r3, #1
 80056d0:	2300      	moveq	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	e00b      	b.n	80056ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	43da      	mvns	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4013      	ands	r3, r2
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d18d      	bne.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005708:	e02d      	b.n	8005766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f8ce 	bl	80058ac <I2C_IsAcknowledgeFailed>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e02d      	b.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005720:	d021      	beq.n	8005766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fc fc29 	bl	8001f78 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d116      	bne.n	8005766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e007      	b.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d1ca      	bne.n	800570a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800578a:	e02d      	b.n	80057e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f88d 	bl	80058ac <I2C_IsAcknowledgeFailed>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e02d      	b.n	80057f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a2:	d021      	beq.n	80057e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7fc fbe8 	bl	8001f78 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d302      	bcc.n	80057ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d116      	bne.n	80057e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e007      	b.n	80057f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d1ca      	bne.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800580c:	e042      	b.n	8005894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d119      	bne.n	8005850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0210 	mvn.w	r2, #16
 8005824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e029      	b.n	80058a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005850:	f7fc fb92 	bl	8001f78 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	429a      	cmp	r2, r3
 800585e:	d302      	bcc.n	8005866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d116      	bne.n	8005894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	f043 0220 	orr.w	r2, r3, #32
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e007      	b.n	80058a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d1b5      	bne.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c2:	d11b      	bne.n	80058fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f043 0204 	orr.w	r2, r3, #4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800590a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590c:	b08f      	sub	sp, #60	; 0x3c
 800590e:	af0a      	add	r7, sp, #40	; 0x28
 8005910:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e116      	b.n	8005b4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc f90a 	bl	8001b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2203      	movs	r2, #3
 8005940:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f003 fc13 	bl	8009186 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	687e      	ldr	r6, [r7, #4]
 8005968:	466d      	mov	r5, sp
 800596a:	f106 0410 	add.w	r4, r6, #16
 800596e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005976:	e894 0003 	ldmia.w	r4, {r0, r1}
 800597a:	e885 0003 	stmia.w	r5, {r0, r1}
 800597e:	1d33      	adds	r3, r6, #4
 8005980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005982:	6838      	ldr	r0, [r7, #0]
 8005984:	f003 fb9e 	bl	80090c4 <USB_CoreInit>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e0d7      	b.n	8005b4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f003 fc01 	bl	80091a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
 80059aa:	e04a      	b.n	8005a42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	333d      	adds	r3, #61	; 0x3d
 80059bc:	2201      	movs	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059c0:	7bfa      	ldrb	r2, [r7, #15]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	333c      	adds	r3, #60	; 0x3c
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059d4:	7bfa      	ldrb	r2, [r7, #15]
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	b298      	uxth	r0, r3
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3344      	adds	r3, #68	; 0x44
 80059e8:	4602      	mov	r2, r0
 80059ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059ec:	7bfa      	ldrb	r2, [r7, #15]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3340      	adds	r3, #64	; 0x40
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a00:	7bfa      	ldrb	r2, [r7, #15]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3348      	adds	r3, #72	; 0x48
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	334c      	adds	r3, #76	; 0x4c
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	3354      	adds	r3, #84	; 0x54
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	7bfa      	ldrb	r2, [r7, #15]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3af      	bcc.n	80059ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]
 8005a50:	e044      	b.n	8005adc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a68:	7bfa      	ldrb	r2, [r7, #15]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a7e:	7bfa      	ldrb	r2, [r7, #15]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a94:	7bfa      	ldrb	r2, [r7, #15]
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005aaa:	7bfa      	ldrb	r2, [r7, #15]
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d3b5      	bcc.n	8005a52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	687e      	ldr	r6, [r7, #4]
 8005aee:	466d      	mov	r5, sp
 8005af0:	f106 0410 	add.w	r4, r6, #16
 8005af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005afc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b00:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b04:	1d33      	adds	r3, r6, #4
 8005b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f003 fb99 	bl	8009240 <USB_DevInit>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e014      	b.n	8005b4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d102      	bne.n	8005b3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f80a 	bl	8005b52 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f003 fd57 	bl	80095f6 <USB_DevDisconnect>

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b84:	f043 0303 	orr.w	r3, r3, #3
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0cc      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb0:	4b68      	ldr	r3, [pc, #416]	; (8005d54 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d90c      	bls.n	8005bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bbe:	4b65      	ldr	r3, [pc, #404]	; (8005d54 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	4b63      	ldr	r3, [pc, #396]	; (8005d54 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0b8      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf0:	4b59      	ldr	r3, [pc, #356]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	4a58      	ldr	r2, [pc, #352]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c08:	4b53      	ldr	r3, [pc, #332]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a52      	ldr	r2, [pc, #328]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c14:	4b50      	ldr	r3, [pc, #320]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	494d      	ldr	r1, [pc, #308]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d044      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d107      	bne.n	8005c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3a:	4b47      	ldr	r3, [pc, #284]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d119      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e07f      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d003      	beq.n	8005c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d107      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5a:	4b3f      	ldr	r3, [pc, #252]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e06f      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c6a:	4b3b      	ldr	r3, [pc, #236]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e067      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 0203 	bic.w	r2, r3, #3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4934      	ldr	r1, [pc, #208]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c8c:	f7fc f974 	bl	8001f78 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c92:	e00a      	b.n	8005caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c94:	f7fc f970 	bl	8001f78 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e04f      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005caa:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 020c 	and.w	r2, r3, #12
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d1eb      	bne.n	8005c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cbc:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d20c      	bcs.n	8005ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cca:	4b22      	ldr	r3, [pc, #136]	; (8005d54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd2:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d001      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e032      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf0:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4916      	ldr	r1, [pc, #88]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	490e      	ldr	r1, [pc, #56]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d22:	f000 fb7f 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8005d26:	4602      	mov	r2, r0
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	490a      	ldr	r1, [pc, #40]	; (8005d5c <HAL_RCC_ClockConfig+0x1c0>)
 8005d34:	5ccb      	ldrb	r3, [r1, r3]
 8005d36:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCC_ClockConfig+0x1c8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fc f8d4 	bl	8001ef0 <HAL_InitTick>

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40023c00 	.word	0x40023c00
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	0800a2a8 	.word	0x0800a2a8
 8005d60:	20000010 	.word	0x20000010
 8005d64:	20000014 	.word	0x20000014

08005d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000010 	.word	0x20000010

08005d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d84:	f7ff fff0 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	0a9b      	lsrs	r3, r3, #10
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	4903      	ldr	r1, [pc, #12]	; (8005da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40023800 	.word	0x40023800
 8005da4:	0800a2b8 	.word	0x0800a2b8

08005da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dac:	f7ff ffdc 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	0b5b      	lsrs	r3, r3, #13
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4903      	ldr	r1, [pc, #12]	; (8005dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dbe:	5ccb      	ldrb	r3, [r1, r3]
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	0800a2b8 	.word	0x0800a2b8

08005dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	; 0x30
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d010      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005e08:	4b6f      	ldr	r3, [pc, #444]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e0e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	496c      	ldr	r1, [pc, #432]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005e26:	2301      	movs	r3, #1
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005e36:	4b64      	ldr	r3, [pc, #400]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	4960      	ldr	r1, [pc, #384]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005e54:	2301      	movs	r3, #1
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d017      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e64:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	4955      	ldr	r1, [pc, #340]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e82:	d101      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005e90:	2301      	movs	r3, #1
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d017      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ea0:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	4946      	ldr	r1, [pc, #280]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ebe:	d101      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 808a 	beq.w	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	4a38      	ldr	r2, [pc, #224]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eec:	6413      	str	r3, [r2, #64]	; 0x40
 8005eee:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005efa:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a33      	ldr	r2, [pc, #204]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f06:	f7fc f837 	bl	8001f78 <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f0e:	f7fc f833 	bl	8001f78 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e278      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f20:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f2c:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f34:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02f      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f44:	6a3a      	ldr	r2, [r7, #32]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d028      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f54:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f56:	2201      	movs	r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f60:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f66:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d114      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f72:	f7fc f801 	bl	8001f78 <HAL_GetTick>
 8005f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f78:	e00a      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f7a:	f7fb fffd 	bl	8001f78 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e240      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0ee      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa8:	d114      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005faa:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbe:	4902      	ldr	r1, [pc, #8]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	608b      	str	r3, [r1, #8]
 8005fc4:	e00c      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005fc6:	bf00      	nop
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	42470e40 	.word	0x42470e40
 8005fd4:	4b4a      	ldr	r3, [pc, #296]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4a49      	ldr	r2, [pc, #292]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fde:	6093      	str	r3, [r2, #8]
 8005fe0:	4b47      	ldr	r3, [pc, #284]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fec:	4944      	ldr	r1, [pc, #272]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006004:	4b3f      	ldr	r3, [pc, #252]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006006:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006014:	4b3a      	ldr	r3, [pc, #232]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	4937      	ldr	r1, [pc, #220]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006036:	4b32      	ldr	r3, [pc, #200]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800603c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006044:	492e      	ldr	r1, [pc, #184]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d011      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006058:	4b29      	ldr	r3, [pc, #164]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800605a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	4926      	ldr	r1, [pc, #152]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006076:	d101      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006078:	2301      	movs	r3, #1
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006088:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	491a      	ldr	r1, [pc, #104]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d011      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80060aa:	4b15      	ldr	r3, [pc, #84]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80060ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b8:	4911      	ldr	r1, [pc, #68]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c8:	d101      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80060ca:	2301      	movs	r3, #1
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d005      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	f040 80ff 	bne.w	80062de <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060e0:	4b09      	ldr	r3, [pc, #36]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060e6:	f7fb ff47 	bl	8001f78 <HAL_GetTick>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060ec:	e00e      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060ee:	f7fb ff43 	bl	8001f78 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d907      	bls.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e188      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006100:	40023800 	.word	0x40023800
 8006104:	424711e0 	.word	0x424711e0
 8006108:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800610c:	4b7e      	ldr	r3, [pc, #504]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ea      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006134:	2b00      	cmp	r3, #0
 8006136:	d028      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d124      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006140:	4b71      	ldr	r3, [pc, #452]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006146:	0c1b      	lsrs	r3, r3, #16
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	3301      	adds	r3, #1
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006152:	4b6d      	ldr	r3, [pc, #436]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006158:	0e1b      	lsrs	r3, r3, #24
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	019b      	lsls	r3, r3, #6
 800616a:	431a      	orrs	r2, r3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	3b01      	subs	r3, #1
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	431a      	orrs	r2, r3
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	071b      	lsls	r3, r3, #28
 8006182:	4961      	ldr	r1, [pc, #388]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d035      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b4:	d130      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80061b6:	4b54      	ldr	r3, [pc, #336]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	3301      	adds	r3, #1
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061c8:	4b4f      	ldr	r3, [pc, #316]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ce:	0f1b      	lsrs	r3, r3, #28
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	019b      	lsls	r3, r3, #6
 80061e0:	431a      	orrs	r2, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	3b01      	subs	r3, #1
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	061b      	lsls	r3, r3, #24
 80061f2:	431a      	orrs	r2, r3
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	071b      	lsls	r3, r3, #28
 80061f8:	4943      	ldr	r1, [pc, #268]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006200:	4b41      	ldr	r3, [pc, #260]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006206:	f023 021f 	bic.w	r2, r3, #31
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	3b01      	subs	r3, #1
 8006210:	493d      	ldr	r1, [pc, #244]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006220:	2b00      	cmp	r3, #0
 8006222:	d029      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622c:	d124      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800622e:	4b36      	ldr	r3, [pc, #216]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	3301      	adds	r3, #1
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006240:	4b31      	ldr	r3, [pc, #196]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006246:	0f1b      	lsrs	r3, r3, #28
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	019b      	lsls	r3, r3, #6
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	3b01      	subs	r3, #1
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	431a      	orrs	r2, r3
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	061b      	lsls	r3, r3, #24
 800626a:	431a      	orrs	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	071b      	lsls	r3, r3, #28
 8006270:	4925      	ldr	r1, [pc, #148]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006280:	2b00      	cmp	r3, #0
 8006282:	d016      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	3b01      	subs	r3, #1
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	061b      	lsls	r3, r3, #24
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	071b      	lsls	r3, r3, #28
 80062aa:	4917      	ldr	r1, [pc, #92]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062b2:	4b16      	ldr	r3, [pc, #88]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062b8:	f7fb fe5e 	bl	8001f78 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062c0:	f7fb fe5a 	bl	8001f78 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e09f      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062d2:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f040 8095 	bne.w	8006410 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062ec:	f7fb fe44 	bl	8001f78 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062f2:	e00f      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80062f4:	f7fb fe40 	bl	8001f78 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d908      	bls.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e085      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800
 800630c:	42470068 	.word	0x42470068
 8006310:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006314:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800631c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006320:	d0e8      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800633e:	2b00      	cmp	r3, #0
 8006340:	d02b      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006346:	2b00      	cmp	r3, #0
 8006348:	d127      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800634a:	4b34      	ldr	r3, [pc, #208]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	3301      	adds	r3, #1
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	019b      	lsls	r3, r3, #6
 8006366:	431a      	orrs	r2, r3
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	3b01      	subs	r3, #1
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	061b      	lsls	r3, r3, #24
 8006378:	4928      	ldr	r1, [pc, #160]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006380:	4b26      	ldr	r3, [pc, #152]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006386:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	3b01      	subs	r3, #1
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	4922      	ldr	r1, [pc, #136]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01d      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ae:	d118      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063b0:	4b1a      	ldr	r3, [pc, #104]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	0e1b      	lsrs	r3, r3, #24
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	019b      	lsls	r3, r3, #6
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	3b01      	subs	r3, #1
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	431a      	orrs	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	4910      	ldr	r1, [pc, #64]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063e2:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063e8:	f7fb fdc6 	bl	8001f78 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063f0:	f7fb fdc2 	bl	8001f78 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e007      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800640e:	d1ef      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3730      	adds	r7, #48	; 0x30
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40023800 	.word	0x40023800
 8006420:	42470070 	.word	0x42470070

08006424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b0ae      	sub	sp, #184	; 0xb8
 800642a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800644a:	4bcb      	ldr	r3, [pc, #812]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	2b0c      	cmp	r3, #12
 8006454:	f200 8206 	bhi.w	8006864 <HAL_RCC_GetSysClockFreq+0x440>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <HAL_RCC_GetSysClockFreq+0x3c>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006495 	.word	0x08006495
 8006464:	08006865 	.word	0x08006865
 8006468:	08006865 	.word	0x08006865
 800646c:	08006865 	.word	0x08006865
 8006470:	0800649d 	.word	0x0800649d
 8006474:	08006865 	.word	0x08006865
 8006478:	08006865 	.word	0x08006865
 800647c:	08006865 	.word	0x08006865
 8006480:	080064a5 	.word	0x080064a5
 8006484:	08006865 	.word	0x08006865
 8006488:	08006865 	.word	0x08006865
 800648c:	08006865 	.word	0x08006865
 8006490:	08006695 	.word	0x08006695
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006494:	4bb9      	ldr	r3, [pc, #740]	; (800677c <HAL_RCC_GetSysClockFreq+0x358>)
 8006496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800649a:	e1e7      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800649c:	4bb8      	ldr	r3, [pc, #736]	; (8006780 <HAL_RCC_GetSysClockFreq+0x35c>)
 800649e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80064a2:	e1e3      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064a4:	4bb4      	ldr	r3, [pc, #720]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064b0:	4bb1      	ldr	r3, [pc, #708]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d071      	beq.n	80065a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064bc:	4bae      	ldr	r3, [pc, #696]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	099b      	lsrs	r3, r3, #6
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80064cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064e2:	4622      	mov	r2, r4
 80064e4:	462b      	mov	r3, r5
 80064e6:	f04f 0000 	mov.w	r0, #0
 80064ea:	f04f 0100 	mov.w	r1, #0
 80064ee:	0159      	lsls	r1, r3, #5
 80064f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f4:	0150      	lsls	r0, r2, #5
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4621      	mov	r1, r4
 80064fc:	1a51      	subs	r1, r2, r1
 80064fe:	6439      	str	r1, [r7, #64]	; 0x40
 8006500:	4629      	mov	r1, r5
 8006502:	eb63 0301 	sbc.w	r3, r3, r1
 8006506:	647b      	str	r3, [r7, #68]	; 0x44
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006514:	4649      	mov	r1, r9
 8006516:	018b      	lsls	r3, r1, #6
 8006518:	4641      	mov	r1, r8
 800651a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800651e:	4641      	mov	r1, r8
 8006520:	018a      	lsls	r2, r1, #6
 8006522:	4641      	mov	r1, r8
 8006524:	1a51      	subs	r1, r2, r1
 8006526:	63b9      	str	r1, [r7, #56]	; 0x38
 8006528:	4649      	mov	r1, r9
 800652a:	eb63 0301 	sbc.w	r3, r3, r1
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800653c:	4649      	mov	r1, r9
 800653e:	00cb      	lsls	r3, r1, #3
 8006540:	4641      	mov	r1, r8
 8006542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006546:	4641      	mov	r1, r8
 8006548:	00ca      	lsls	r2, r1, #3
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	4603      	mov	r3, r0
 8006550:	4622      	mov	r2, r4
 8006552:	189b      	adds	r3, r3, r2
 8006554:	633b      	str	r3, [r7, #48]	; 0x30
 8006556:	462b      	mov	r3, r5
 8006558:	460a      	mov	r2, r1
 800655a:	eb42 0303 	adc.w	r3, r2, r3
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800656c:	4629      	mov	r1, r5
 800656e:	024b      	lsls	r3, r1, #9
 8006570:	4621      	mov	r1, r4
 8006572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006576:	4621      	mov	r1, r4
 8006578:	024a      	lsls	r2, r1, #9
 800657a:	4610      	mov	r0, r2
 800657c:	4619      	mov	r1, r3
 800657e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006582:	2200      	movs	r2, #0
 8006584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006588:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800658c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006590:	f7f9 fe96 	bl	80002c0 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4613      	mov	r3, r2
 800659a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800659e:	e067      	b.n	8006670 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a0:	4b75      	ldr	r3, [pc, #468]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	099b      	lsrs	r3, r3, #6
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80065b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ba:	2300      	movs	r3, #0
 80065bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80065c2:	4622      	mov	r2, r4
 80065c4:	462b      	mov	r3, r5
 80065c6:	f04f 0000 	mov.w	r0, #0
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	0159      	lsls	r1, r3, #5
 80065d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d4:	0150      	lsls	r0, r2, #5
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4621      	mov	r1, r4
 80065dc:	1a51      	subs	r1, r2, r1
 80065de:	62b9      	str	r1, [r7, #40]	; 0x28
 80065e0:	4629      	mov	r1, r5
 80065e2:	eb63 0301 	sbc.w	r3, r3, r1
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80065f4:	4649      	mov	r1, r9
 80065f6:	018b      	lsls	r3, r1, #6
 80065f8:	4641      	mov	r1, r8
 80065fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065fe:	4641      	mov	r1, r8
 8006600:	018a      	lsls	r2, r1, #6
 8006602:	4641      	mov	r1, r8
 8006604:	ebb2 0a01 	subs.w	sl, r2, r1
 8006608:	4649      	mov	r1, r9
 800660a:	eb63 0b01 	sbc.w	fp, r3, r1
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800661a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800661e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006622:	4692      	mov	sl, r2
 8006624:	469b      	mov	fp, r3
 8006626:	4623      	mov	r3, r4
 8006628:	eb1a 0303 	adds.w	r3, sl, r3
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	462b      	mov	r3, r5
 8006630:	eb4b 0303 	adc.w	r3, fp, r3
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006642:	4629      	mov	r1, r5
 8006644:	028b      	lsls	r3, r1, #10
 8006646:	4621      	mov	r1, r4
 8006648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800664c:	4621      	mov	r1, r4
 800664e:	028a      	lsls	r2, r1, #10
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006658:	2200      	movs	r2, #0
 800665a:	673b      	str	r3, [r7, #112]	; 0x70
 800665c:	677a      	str	r2, [r7, #116]	; 0x74
 800665e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006662:	f7f9 fe2d 	bl	80002c0 <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4613      	mov	r3, r2
 800666c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006670:	4b41      	ldr	r3, [pc, #260]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	3301      	adds	r3, #1
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800668a:	fbb2 f3f3 	udiv	r3, r2, r3
 800668e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006692:	e0eb      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006694:	4b38      	ldr	r3, [pc, #224]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800669c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066a0:	4b35      	ldr	r3, [pc, #212]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d06b      	beq.n	8006784 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ac:	4b32      	ldr	r3, [pc, #200]	; (8006778 <HAL_RCC_GetSysClockFreq+0x354>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	2200      	movs	r2, #0
 80066b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	663b      	str	r3, [r7, #96]	; 0x60
 80066c0:	2300      	movs	r3, #0
 80066c2:	667b      	str	r3, [r7, #100]	; 0x64
 80066c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80066c8:	4622      	mov	r2, r4
 80066ca:	462b      	mov	r3, r5
 80066cc:	f04f 0000 	mov.w	r0, #0
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	0159      	lsls	r1, r3, #5
 80066d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066da:	0150      	lsls	r0, r2, #5
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4621      	mov	r1, r4
 80066e2:	1a51      	subs	r1, r2, r1
 80066e4:	61b9      	str	r1, [r7, #24]
 80066e6:	4629      	mov	r1, r5
 80066e8:	eb63 0301 	sbc.w	r3, r3, r1
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80066fa:	4659      	mov	r1, fp
 80066fc:	018b      	lsls	r3, r1, #6
 80066fe:	4651      	mov	r1, sl
 8006700:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006704:	4651      	mov	r1, sl
 8006706:	018a      	lsls	r2, r1, #6
 8006708:	4651      	mov	r1, sl
 800670a:	ebb2 0801 	subs.w	r8, r2, r1
 800670e:	4659      	mov	r1, fp
 8006710:	eb63 0901 	sbc.w	r9, r3, r1
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006728:	4690      	mov	r8, r2
 800672a:	4699      	mov	r9, r3
 800672c:	4623      	mov	r3, r4
 800672e:	eb18 0303 	adds.w	r3, r8, r3
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	462b      	mov	r3, r5
 8006736:	eb49 0303 	adc.w	r3, r9, r3
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006748:	4629      	mov	r1, r5
 800674a:	024b      	lsls	r3, r1, #9
 800674c:	4621      	mov	r1, r4
 800674e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006752:	4621      	mov	r1, r4
 8006754:	024a      	lsls	r2, r1, #9
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800675e:	2200      	movs	r2, #0
 8006760:	65bb      	str	r3, [r7, #88]	; 0x58
 8006762:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006768:	f7f9 fdaa 	bl	80002c0 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4613      	mov	r3, r2
 8006772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006776:	e065      	b.n	8006844 <HAL_RCC_GetSysClockFreq+0x420>
 8006778:	40023800 	.word	0x40023800
 800677c:	00f42400 	.word	0x00f42400
 8006780:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006784:	4b3d      	ldr	r3, [pc, #244]	; (800687c <HAL_RCC_GetSysClockFreq+0x458>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	099b      	lsrs	r3, r3, #6
 800678a:	2200      	movs	r2, #0
 800678c:	4618      	mov	r0, r3
 800678e:	4611      	mov	r1, r2
 8006790:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006794:	653b      	str	r3, [r7, #80]	; 0x50
 8006796:	2300      	movs	r3, #0
 8006798:	657b      	str	r3, [r7, #84]	; 0x54
 800679a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800679e:	4642      	mov	r2, r8
 80067a0:	464b      	mov	r3, r9
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	0159      	lsls	r1, r3, #5
 80067ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067b0:	0150      	lsls	r0, r2, #5
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4641      	mov	r1, r8
 80067b8:	1a51      	subs	r1, r2, r1
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	4649      	mov	r1, r9
 80067be:	eb63 0301 	sbc.w	r3, r3, r1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80067d0:	4659      	mov	r1, fp
 80067d2:	018b      	lsls	r3, r1, #6
 80067d4:	4651      	mov	r1, sl
 80067d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067da:	4651      	mov	r1, sl
 80067dc:	018a      	lsls	r2, r1, #6
 80067de:	4651      	mov	r1, sl
 80067e0:	1a54      	subs	r4, r2, r1
 80067e2:	4659      	mov	r1, fp
 80067e4:	eb63 0501 	sbc.w	r5, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	00eb      	lsls	r3, r5, #3
 80067f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067f6:	00e2      	lsls	r2, r4, #3
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	4643      	mov	r3, r8
 80067fe:	18e3      	adds	r3, r4, r3
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	464b      	mov	r3, r9
 8006804:	eb45 0303 	adc.w	r3, r5, r3
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006816:	4629      	mov	r1, r5
 8006818:	028b      	lsls	r3, r1, #10
 800681a:	4621      	mov	r1, r4
 800681c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006820:	4621      	mov	r1, r4
 8006822:	028a      	lsls	r2, r1, #10
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800682c:	2200      	movs	r2, #0
 800682e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006830:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006832:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006836:	f7f9 fd43 	bl	80002c0 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4613      	mov	r3, r2
 8006840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <HAL_RCC_GetSysClockFreq+0x458>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	0f1b      	lsrs	r3, r3, #28
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800685a:	fbb2 f3f3 	udiv	r3, r2, r3
 800685e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006862:	e003      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800686a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800686c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006870:	4618      	mov	r0, r3
 8006872:	37b8      	adds	r7, #184	; 0xb8
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	00f42400 	.word	0x00f42400

08006884 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e28d      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8083 	beq.w	80069aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068a4:	4b94      	ldr	r3, [pc, #592]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 030c 	and.w	r3, r3, #12
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d019      	beq.n	80068e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068b0:	4b91      	ldr	r3, [pc, #580]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d106      	bne.n	80068ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068bc:	4b8e      	ldr	r3, [pc, #568]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c8:	d00c      	beq.n	80068e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ca:	4b8b      	ldr	r3, [pc, #556]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068d2:	2b0c      	cmp	r3, #12
 80068d4:	d112      	bne.n	80068fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068d6:	4b88      	ldr	r3, [pc, #544]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e2:	d10b      	bne.n	80068fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e4:	4b84      	ldr	r3, [pc, #528]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d05b      	beq.n	80069a8 <HAL_RCC_OscConfig+0x124>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d157      	bne.n	80069a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e25a      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006904:	d106      	bne.n	8006914 <HAL_RCC_OscConfig+0x90>
 8006906:	4b7c      	ldr	r3, [pc, #496]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7b      	ldr	r2, [pc, #492]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 800690c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e01d      	b.n	8006950 <HAL_RCC_OscConfig+0xcc>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800691c:	d10c      	bne.n	8006938 <HAL_RCC_OscConfig+0xb4>
 800691e:	4b76      	ldr	r3, [pc, #472]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a75      	ldr	r2, [pc, #468]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	4b73      	ldr	r3, [pc, #460]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a72      	ldr	r2, [pc, #456]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	e00b      	b.n	8006950 <HAL_RCC_OscConfig+0xcc>
 8006938:	4b6f      	ldr	r3, [pc, #444]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a6e      	ldr	r2, [pc, #440]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 800693e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	4b6c      	ldr	r3, [pc, #432]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a6b      	ldr	r2, [pc, #428]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 800694a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800694e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d013      	beq.n	8006980 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fb fb0e 	bl	8001f78 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006960:	f7fb fb0a 	bl	8001f78 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b64      	cmp	r3, #100	; 0x64
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e21f      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006972:	4b61      	ldr	r3, [pc, #388]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0xdc>
 800697e:	e014      	b.n	80069aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006980:	f7fb fafa 	bl	8001f78 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006988:	f7fb faf6 	bl	8001f78 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b64      	cmp	r3, #100	; 0x64
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e20b      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800699a:	4b57      	ldr	r3, [pc, #348]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x104>
 80069a6:	e000      	b.n	80069aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d06f      	beq.n	8006a96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069b6:	4b50      	ldr	r3, [pc, #320]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 030c 	and.w	r3, r3, #12
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d017      	beq.n	80069f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069c2:	4b4d      	ldr	r3, [pc, #308]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d105      	bne.n	80069da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069ce:	4b4a      	ldr	r3, [pc, #296]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069da:	4b47      	ldr	r3, [pc, #284]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069e2:	2b0c      	cmp	r3, #12
 80069e4:	d11c      	bne.n	8006a20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069e6:	4b44      	ldr	r3, [pc, #272]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d116      	bne.n	8006a20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f2:	4b41      	ldr	r3, [pc, #260]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_RCC_OscConfig+0x186>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d001      	beq.n	8006a0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e1d3      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0a:	4b3b      	ldr	r3, [pc, #236]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	4937      	ldr	r1, [pc, #220]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1e:	e03a      	b.n	8006a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d020      	beq.n	8006a6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a28:	4b34      	ldr	r3, [pc, #208]	; (8006afc <HAL_RCC_OscConfig+0x278>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2e:	f7fb faa3 	bl	8001f78 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a36:	f7fb fa9f 	bl	8001f78 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e1b4      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a48:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a54:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4925      	ldr	r1, [pc, #148]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	600b      	str	r3, [r1, #0]
 8006a68:	e015      	b.n	8006a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a6a:	4b24      	ldr	r3, [pc, #144]	; (8006afc <HAL_RCC_OscConfig+0x278>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fb fa82 	bl	8001f78 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a78:	f7fb fa7e 	bl	8001f78 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e193      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d036      	beq.n	8006b10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <HAL_RCC_OscConfig+0x27c>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab0:	f7fb fa62 	bl	8001f78 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ab8:	f7fb fa5e 	bl	8001f78 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e173      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <HAL_RCC_OscConfig+0x274>)
 8006acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f0      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x234>
 8006ad6:	e01b      	b.n	8006b10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ad8:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <HAL_RCC_OscConfig+0x27c>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ade:	f7fb fa4b 	bl	8001f78 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae4:	e00e      	b.n	8006b04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ae6:	f7fb fa47 	bl	8001f78 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d907      	bls.n	8006b04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e15c      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
 8006af8:	40023800 	.word	0x40023800
 8006afc:	42470000 	.word	0x42470000
 8006b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b04:	4b8a      	ldr	r3, [pc, #552]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ea      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8097 	beq.w	8006c4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b22:	4b83      	ldr	r3, [pc, #524]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10f      	bne.n	8006b4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	4b7f      	ldr	r3, [pc, #508]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	4a7e      	ldr	r2, [pc, #504]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3e:	4b7c      	ldr	r3, [pc, #496]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4e:	4b79      	ldr	r3, [pc, #484]	; (8006d34 <HAL_RCC_OscConfig+0x4b0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d118      	bne.n	8006b8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b5a:	4b76      	ldr	r3, [pc, #472]	; (8006d34 <HAL_RCC_OscConfig+0x4b0>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a75      	ldr	r2, [pc, #468]	; (8006d34 <HAL_RCC_OscConfig+0x4b0>)
 8006b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b66:	f7fb fa07 	bl	8001f78 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6e:	f7fb fa03 	bl	8001f78 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e118      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b80:	4b6c      	ldr	r3, [pc, #432]	; (8006d34 <HAL_RCC_OscConfig+0x4b0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d106      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x31e>
 8006b94:	4b66      	ldr	r3, [pc, #408]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	4a65      	ldr	r2, [pc, #404]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba0:	e01c      	b.n	8006bdc <HAL_RCC_OscConfig+0x358>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x340>
 8006baa:	4b61      	ldr	r3, [pc, #388]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	4a60      	ldr	r2, [pc, #384]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bb0:	f043 0304 	orr.w	r3, r3, #4
 8006bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb6:	4b5e      	ldr	r3, [pc, #376]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	4a5d      	ldr	r2, [pc, #372]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc2:	e00b      	b.n	8006bdc <HAL_RCC_OscConfig+0x358>
 8006bc4:	4b5a      	ldr	r3, [pc, #360]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	4a59      	ldr	r2, [pc, #356]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bca:	f023 0301 	bic.w	r3, r3, #1
 8006bce:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd0:	4b57      	ldr	r3, [pc, #348]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	4a56      	ldr	r2, [pc, #344]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006bd6:	f023 0304 	bic.w	r3, r3, #4
 8006bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d015      	beq.n	8006c10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be4:	f7fb f9c8 	bl	8001f78 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bea:	e00a      	b.n	8006c02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bec:	f7fb f9c4 	bl	8001f78 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e0d7      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c02:	4b4b      	ldr	r3, [pc, #300]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ee      	beq.n	8006bec <HAL_RCC_OscConfig+0x368>
 8006c0e:	e014      	b.n	8006c3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c10:	f7fb f9b2 	bl	8001f78 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c16:	e00a      	b.n	8006c2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c18:	f7fb f9ae 	bl	8001f78 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e0c1      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c2e:	4b40      	ldr	r3, [pc, #256]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1ee      	bne.n	8006c18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d105      	bne.n	8006c4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c40:	4b3b      	ldr	r3, [pc, #236]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	4a3a      	ldr	r2, [pc, #232]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80ad 	beq.w	8006db0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 030c 	and.w	r3, r3, #12
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d060      	beq.n	8006d24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d145      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c6a:	4b33      	ldr	r3, [pc, #204]	; (8006d38 <HAL_RCC_OscConfig+0x4b4>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fb f982 	bl	8001f78 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fb f97e 	bl	8001f78 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e093      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8a:	4b29      	ldr	r3, [pc, #164]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69da      	ldr	r2, [r3, #28]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	019b      	lsls	r3, r3, #6
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	061b      	lsls	r3, r3, #24
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	071b      	lsls	r3, r3, #28
 8006cc2:	491b      	ldr	r1, [pc, #108]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cc8:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <HAL_RCC_OscConfig+0x4b4>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cce:	f7fb f953 	bl	8001f78 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd6:	f7fb f94f 	bl	8001f78 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e064      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ce8:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0f0      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x452>
 8006cf4:	e05c      	b.n	8006db0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <HAL_RCC_OscConfig+0x4b4>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fb f93c 	bl	8001f78 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d04:	f7fb f938 	bl	8001f78 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e04d      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_RCC_OscConfig+0x4ac>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x480>
 8006d22:	e045      	b.n	8006db0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d107      	bne.n	8006d3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e040      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
 8006d30:	40023800 	.word	0x40023800
 8006d34:	40007000 	.word	0x40007000
 8006d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d3c:	4b1f      	ldr	r3, [pc, #124]	; (8006dbc <HAL_RCC_OscConfig+0x538>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d030      	beq.n	8006dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d129      	bne.n	8006dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d122      	bne.n	8006dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d119      	bne.n	8006dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	3b01      	subs	r3, #1
 8006d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d10f      	bne.n	8006dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d107      	bne.n	8006dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d001      	beq.n	8006db0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	40023800 	.word	0x40023800

08006dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e041      	b.n	8006e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fa fd20 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f000 fb40 	bl	8007484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e041      	b.n	8006ef4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fa fcaf 	bl	80017e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f000 faf1 	bl	8007484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <HAL_TIM_PWM_Start+0x24>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e022      	b.n	8006f66 <HAL_TIM_PWM_Start+0x6a>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d109      	bne.n	8006f3a <HAL_TIM_PWM_Start+0x3e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	e015      	b.n	8006f66 <HAL_TIM_PWM_Start+0x6a>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d109      	bne.n	8006f54 <HAL_TIM_PWM_Start+0x58>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e008      	b.n	8006f66 <HAL_TIM_PWM_Start+0x6a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e07c      	b.n	8007068 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x82>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f7c:	e013      	b.n	8006fa6 <HAL_TIM_PWM_Start+0xaa>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_PWM_Start+0x92>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8c:	e00b      	b.n	8006fa6 <HAL_TIM_PWM_Start+0xaa>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d104      	bne.n	8006f9e <HAL_TIM_PWM_Start+0xa2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f9c:	e003      	b.n	8006fa6 <HAL_TIM_PWM_Start+0xaa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2201      	movs	r2, #1
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fcb8 	bl	8007924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2d      	ldr	r2, [pc, #180]	; (8007070 <HAL_TIM_PWM_Start+0x174>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIM_PWM_Start+0xcc>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <HAL_TIM_PWM_Start+0x178>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIM_PWM_Start+0xd0>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <HAL_TIM_PWM_Start+0xd2>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a22      	ldr	r2, [pc, #136]	; (8007070 <HAL_TIM_PWM_Start+0x174>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <HAL_TIM_PWM_Start+0x136>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff4:	d01d      	beq.n	8007032 <HAL_TIM_PWM_Start+0x136>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1f      	ldr	r2, [pc, #124]	; (8007078 <HAL_TIM_PWM_Start+0x17c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_TIM_PWM_Start+0x136>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1d      	ldr	r2, [pc, #116]	; (800707c <HAL_TIM_PWM_Start+0x180>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_TIM_PWM_Start+0x136>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <HAL_TIM_PWM_Start+0x184>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_TIM_PWM_Start+0x136>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a16      	ldr	r2, [pc, #88]	; (8007074 <HAL_TIM_PWM_Start+0x178>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_TIM_PWM_Start+0x136>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a18      	ldr	r2, [pc, #96]	; (8007084 <HAL_TIM_PWM_Start+0x188>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_TIM_PWM_Start+0x136>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a16      	ldr	r2, [pc, #88]	; (8007088 <HAL_TIM_PWM_Start+0x18c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d111      	bne.n	8007056 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b06      	cmp	r3, #6
 8007042:	d010      	beq.n	8007066 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0201 	orr.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007054:	e007      	b.n	8007066 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	40010000 	.word	0x40010000
 8007074:	40010400 	.word	0x40010400
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40000c00 	.word	0x40000c00
 8007084:	40014000 	.word	0x40014000
 8007088:	40001800 	.word	0x40001800

0800708c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d122      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d11b      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0202 	mvn.w	r2, #2
 80070b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f9ba 	bl	8007448 <HAL_TIM_IC_CaptureCallback>
 80070d4:	e005      	b.n	80070e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f9ac 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9bd 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d122      	bne.n	800713c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d11b      	bne.n	800713c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0204 	mvn.w	r2, #4
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f990 	bl	8007448 <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f982 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f993 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b08      	cmp	r3, #8
 8007148:	d122      	bne.n	8007190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b08      	cmp	r3, #8
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0208 	mvn.w	r2, #8
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2204      	movs	r2, #4
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f966 	bl	8007448 <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f958 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f969 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d122      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d11b      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0210 	mvn.w	r2, #16
 80071b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2208      	movs	r2, #8
 80071ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f93c 	bl	8007448 <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f92e 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f93f 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10e      	bne.n	8007210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d107      	bne.n	8007210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0201 	mvn.w	r2, #1
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f908 	bl	8007420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d10e      	bne.n	800723c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007228:	2b80      	cmp	r3, #128	; 0x80
 800722a:	d107      	bne.n	800723c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fc72 	bl	8007b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d10e      	bne.n	8007268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b40      	cmp	r3, #64	; 0x40
 8007256:	d107      	bne.n	8007268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f904 	bl	8007470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b20      	cmp	r3, #32
 8007274:	d10e      	bne.n	8007294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b20      	cmp	r3, #32
 8007282:	d107      	bne.n	8007294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0220 	mvn.w	r2, #32
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fc3c 	bl	8007b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e0ae      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b0c      	cmp	r3, #12
 80072c6:	f200 809f 	bhi.w	8007408 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	08007305 	.word	0x08007305
 80072d4:	08007409 	.word	0x08007409
 80072d8:	08007409 	.word	0x08007409
 80072dc:	08007409 	.word	0x08007409
 80072e0:	08007345 	.word	0x08007345
 80072e4:	08007409 	.word	0x08007409
 80072e8:	08007409 	.word	0x08007409
 80072ec:	08007409 	.word	0x08007409
 80072f0:	08007387 	.word	0x08007387
 80072f4:	08007409 	.word	0x08007409
 80072f8:	08007409 	.word	0x08007409
 80072fc:	08007409 	.word	0x08007409
 8007300:	080073c7 	.word	0x080073c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f95a 	bl	80075c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0208 	orr.w	r2, r2, #8
 800731e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0204 	bic.w	r2, r2, #4
 800732e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6999      	ldr	r1, [r3, #24]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	619a      	str	r2, [r3, #24]
      break;
 8007342:	e064      	b.n	800740e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 f9aa 	bl	80076a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800735e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800736e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6999      	ldr	r1, [r3, #24]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	021a      	lsls	r2, r3, #8
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	619a      	str	r2, [r3, #24]
      break;
 8007384:	e043      	b.n	800740e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 f9ff 	bl	8007790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0208 	orr.w	r2, r2, #8
 80073a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0204 	bic.w	r2, r2, #4
 80073b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69d9      	ldr	r1, [r3, #28]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	61da      	str	r2, [r3, #28]
      break;
 80073c4:	e023      	b.n	800740e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fa53 	bl	8007878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69d9      	ldr	r1, [r3, #28]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	021a      	lsls	r2, r3, #8
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	61da      	str	r2, [r3, #28]
      break;
 8007406:	e002      	b.n	800740e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
      break;
 800740c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a40      	ldr	r2, [pc, #256]	; (8007598 <TIM_Base_SetConfig+0x114>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d013      	beq.n	80074c4 <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a2:	d00f      	beq.n	80074c4 <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a3d      	ldr	r2, [pc, #244]	; (800759c <TIM_Base_SetConfig+0x118>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00b      	beq.n	80074c4 <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a3c      	ldr	r2, [pc, #240]	; (80075a0 <TIM_Base_SetConfig+0x11c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d007      	beq.n	80074c4 <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3b      	ldr	r2, [pc, #236]	; (80075a4 <TIM_Base_SetConfig+0x120>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a3a      	ldr	r2, [pc, #232]	; (80075a8 <TIM_Base_SetConfig+0x124>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d108      	bne.n	80074d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2f      	ldr	r2, [pc, #188]	; (8007598 <TIM_Base_SetConfig+0x114>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d02b      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e4:	d027      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2c      	ldr	r2, [pc, #176]	; (800759c <TIM_Base_SetConfig+0x118>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d023      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2b      	ldr	r2, [pc, #172]	; (80075a0 <TIM_Base_SetConfig+0x11c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01f      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <TIM_Base_SetConfig+0x120>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01b      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a29      	ldr	r2, [pc, #164]	; (80075a8 <TIM_Base_SetConfig+0x124>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d017      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a28      	ldr	r2, [pc, #160]	; (80075ac <TIM_Base_SetConfig+0x128>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d013      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a27      	ldr	r2, [pc, #156]	; (80075b0 <TIM_Base_SetConfig+0x12c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00f      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a26      	ldr	r2, [pc, #152]	; (80075b4 <TIM_Base_SetConfig+0x130>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d00b      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a25      	ldr	r2, [pc, #148]	; (80075b8 <TIM_Base_SetConfig+0x134>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d007      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a24      	ldr	r2, [pc, #144]	; (80075bc <TIM_Base_SetConfig+0x138>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d003      	beq.n	8007536 <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a23      	ldr	r2, [pc, #140]	; (80075c0 <TIM_Base_SetConfig+0x13c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d108      	bne.n	8007548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800753c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <TIM_Base_SetConfig+0x114>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d003      	beq.n	800757c <TIM_Base_SetConfig+0xf8>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a0c      	ldr	r2, [pc, #48]	; (80075a8 <TIM_Base_SetConfig+0x124>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d103      	bne.n	8007584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	615a      	str	r2, [r3, #20]
}
 800758a:	bf00      	nop
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40010000 	.word	0x40010000
 800759c:	40000400 	.word	0x40000400
 80075a0:	40000800 	.word	0x40000800
 80075a4:	40000c00 	.word	0x40000c00
 80075a8:	40010400 	.word	0x40010400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800
 80075b8:	40001800 	.word	0x40001800
 80075bc:	40001c00 	.word	0x40001c00
 80075c0:	40002000 	.word	0x40002000

080075c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f023 0201 	bic.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0303 	bic.w	r3, r3, #3
 80075fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f023 0302 	bic.w	r3, r3, #2
 800760c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a20      	ldr	r2, [pc, #128]	; (800769c <TIM_OC1_SetConfig+0xd8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_OC1_SetConfig+0x64>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a1f      	ldr	r2, [pc, #124]	; (80076a0 <TIM_OC1_SetConfig+0xdc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d10c      	bne.n	8007642 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f023 0308 	bic.w	r3, r3, #8
 800762e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f023 0304 	bic.w	r3, r3, #4
 8007640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a15      	ldr	r2, [pc, #84]	; (800769c <TIM_OC1_SetConfig+0xd8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_OC1_SetConfig+0x8e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <TIM_OC1_SetConfig+0xdc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d111      	bne.n	8007676 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40010000 	.word	0x40010000
 80076a0:	40010400 	.word	0x40010400

080076a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f023 0210 	bic.w	r2, r3, #16
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0320 	bic.w	r3, r3, #32
 80076ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a22      	ldr	r2, [pc, #136]	; (8007788 <TIM_OC2_SetConfig+0xe4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_OC2_SetConfig+0x68>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a21      	ldr	r2, [pc, #132]	; (800778c <TIM_OC2_SetConfig+0xe8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d10d      	bne.n	8007728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <TIM_OC2_SetConfig+0xe4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_OC2_SetConfig+0x94>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a16      	ldr	r2, [pc, #88]	; (800778c <TIM_OC2_SetConfig+0xe8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d113      	bne.n	8007760 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800773e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000
 800778c:	40010400 	.word	0x40010400

08007790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a21      	ldr	r2, [pc, #132]	; (8007870 <TIM_OC3_SetConfig+0xe0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d003      	beq.n	80077f6 <TIM_OC3_SetConfig+0x66>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a20      	ldr	r2, [pc, #128]	; (8007874 <TIM_OC3_SetConfig+0xe4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d10d      	bne.n	8007812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a16      	ldr	r2, [pc, #88]	; (8007870 <TIM_OC3_SetConfig+0xe0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <TIM_OC3_SetConfig+0x92>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a15      	ldr	r2, [pc, #84]	; (8007874 <TIM_OC3_SetConfig+0xe4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d113      	bne.n	800784a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	621a      	str	r2, [r3, #32]
}
 8007864:	bf00      	nop
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	40010000 	.word	0x40010000
 8007874:	40010400 	.word	0x40010400

08007878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	031b      	lsls	r3, r3, #12
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a12      	ldr	r2, [pc, #72]	; (800791c <TIM_OC4_SetConfig+0xa4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_OC4_SetConfig+0x68>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a11      	ldr	r2, [pc, #68]	; (8007920 <TIM_OC4_SetConfig+0xa8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d109      	bne.n	80078f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40010400 	.word	0x40010400

08007924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 031f 	and.w	r3, r3, #31
 8007936:	2201      	movs	r2, #1
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	43db      	mvns	r3, r3
 8007946:	401a      	ands	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a1a      	ldr	r2, [r3, #32]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	fa01 f303 	lsl.w	r3, r1, r3
 800795c:	431a      	orrs	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
	...

08007970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007984:	2302      	movs	r3, #2
 8007986:	e05a      	b.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a21      	ldr	r2, [pc, #132]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d022      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d4:	d01d      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1d      	ldr	r2, [pc, #116]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d018      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1b      	ldr	r2, [pc, #108]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d013      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a1a      	ldr	r2, [pc, #104]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00e      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d009      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a17      	ldr	r2, [pc, #92]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d004      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a15      	ldr	r2, [pc, #84]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d10c      	bne.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	40010000 	.word	0x40010000
 8007a50:	40000400 	.word	0x40000400
 8007a54:	40000800 	.word	0x40000800
 8007a58:	40000c00 	.word	0x40000c00
 8007a5c:	40010400 	.word	0x40010400
 8007a60:	40014000 	.word	0x40014000
 8007a64:	40001800 	.word	0x40001800

08007a68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e03d      	b.n	8007b00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e03f      	b.n	8007bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7f9 fec8 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2224      	movs	r2, #36	; 0x24
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f82f 	bl	8008bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695a      	ldr	r2, [r3, #20]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08c      	sub	sp, #48	; 0x30
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d165      	bne.n	8007cb6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <HAL_UART_Transmit_DMA+0x26>
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e05e      	b.n	8007cb8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_UART_Transmit_DMA+0x38>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e057      	b.n	8007cb8 <HAL_UART_Transmit_DMA+0xe8>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	88fa      	ldrh	r2, [r7, #6]
 8007c1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	88fa      	ldrh	r2, [r7, #6]
 8007c20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2221      	movs	r2, #33	; 0x21
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c34:	4a22      	ldr	r2, [pc, #136]	; (8007cc0 <HAL_UART_Transmit_DMA+0xf0>)
 8007c36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3c:	4a21      	ldr	r2, [pc, #132]	; (8007cc4 <HAL_UART_Transmit_DMA+0xf4>)
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c44:	4a20      	ldr	r2, [pc, #128]	; (8007cc8 <HAL_UART_Transmit_DMA+0xf8>)
 8007c46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007c50:	f107 0308 	add.w	r3, r7, #8
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3304      	adds	r3, #4
 8007c64:	461a      	mov	r2, r3
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	f7fa fe3e 	bl	80028e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3314      	adds	r3, #20
 8007c84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3314      	adds	r3, #20
 8007c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8007ca0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca2:	6a39      	ldr	r1, [r7, #32]
 8007ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1e5      	bne.n	8007c7e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e000      	b.n	8007cb8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007cb6:	2302      	movs	r3, #2
  }
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3730      	adds	r7, #48	; 0x30
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	08008475 	.word	0x08008475
 8007cc4:	0800850f 	.word	0x0800850f
 8007cc8:	08008687 	.word	0x08008687

08007ccc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d11d      	bne.n	8007d22 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_UART_Receive_DMA+0x26>
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e016      	b.n	8007d24 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_UART_Receive_DMA+0x38>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e00f      	b.n	8007d24 <HAL_UART_Receive_DMA+0x58>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	461a      	mov	r2, r3
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fcff 	bl	800871c <UART_Start_Receive_DMA>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	e000      	b.n	8007d24 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d22:	2302      	movs	r3, #2
  }
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b0a0      	sub	sp, #128	; 0x80
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	330c      	adds	r3, #12
 8007d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d46:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8007d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d54:	66ba      	str	r2, [r7, #104]	; 0x68
 8007d56:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e5      	bne.n	8007d34 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3314      	adds	r3, #20
 8007d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d7a:	f023 0301 	bic.w	r3, r3, #1
 8007d7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3314      	adds	r3, #20
 8007d86:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d88:	657a      	str	r2, [r7, #84]	; 0x54
 8007d8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e5      	bne.n	8007d68 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d119      	bne.n	8007dd8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	f023 0310 	bic.w	r3, r3, #16
 8007dba:	677b      	str	r3, [r7, #116]	; 0x74
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007dc4:	643a      	str	r2, [r7, #64]	; 0x40
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b80      	cmp	r3, #128	; 0x80
 8007de4:	d136      	bne.n	8007e54 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3314      	adds	r3, #20
 8007dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dfc:	673b      	str	r3, [r7, #112]	; 0x70
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3314      	adds	r3, #20
 8007e04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e5      	bne.n	8007de6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d018      	beq.n	8007e54 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e26:	2200      	movs	r2, #0
 8007e28:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fa fdb2 	bl	8002998 <HAL_DMA_Abort>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00c      	beq.n	8007e54 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fa ffc6 	bl	8002dd0 <HAL_DMA_GetError>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	d104      	bne.n	8007e54 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e052      	b.n	8007efa <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d136      	bne.n	8007ed0 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3314      	adds	r3, #20
 8007e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3314      	adds	r3, #20
 8007e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e82:	61ba      	str	r2, [r7, #24]
 8007e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6979      	ldr	r1, [r7, #20]
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e5      	bne.n	8007e62 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d018      	beq.n	8007ed0 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fa fd74 	bl	8002998 <HAL_DMA_Abort>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00c      	beq.n	8007ed0 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fa ff88 	bl	8002dd0 <HAL_DMA_GetError>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d104      	bne.n	8007ed0 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2210      	movs	r2, #16
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e014      	b.n	8007efa <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3780      	adds	r7, #128	; 0x80
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b0ba      	sub	sp, #232	; 0xe8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10f      	bne.n	8007f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d009      	beq.n	8007f6a <HAL_UART_IRQHandler+0x66>
 8007f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fd7f 	bl	8008a66 <UART_Receive_IT>
      return;
 8007f68:	e256      	b.n	8008418 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80de 	beq.w	8008130 <HAL_UART_IRQHandler+0x22c>
 8007f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d106      	bne.n	8007f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 80d1 	beq.w	8008130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00b      	beq.n	8007fb2 <HAL_UART_IRQHandler+0xae>
 8007f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f043 0201 	orr.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xd2>
 8007fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	f043 0202 	orr.w	r2, r3, #2
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <HAL_UART_IRQHandler+0xf6>
 8007fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f043 0204 	orr.w	r2, r3, #4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f003 0308 	and.w	r3, r3, #8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d011      	beq.n	800802a <HAL_UART_IRQHandler+0x126>
 8008006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d105      	bne.n	800801e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f043 0208 	orr.w	r2, r3, #8
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 81ed 	beq.w	800840e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <HAL_UART_IRQHandler+0x14e>
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fd0a 	bl	8008a66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <HAL_UART_IRQHandler+0x17a>
 8008076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800807a:	2b00      	cmp	r3, #0
 800807c:	d04f      	beq.n	800811e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fc12 	bl	80088a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d141      	bne.n	8008116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3314      	adds	r3, #20
 8008098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3314      	adds	r3, #20
 80080ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1d9      	bne.n	8008092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	4a7d      	ldr	r2, [pc, #500]	; (80082e0 <HAL_UART_IRQHandler+0x3dc>)
 80080ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fa fcc0 	bl	8002a78 <HAL_DMA_Abort_IT>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d016      	beq.n	800812c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	e00e      	b.n	800812c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f99a 	bl	8008448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008114:	e00a      	b.n	800812c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f996 	bl	8008448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	e006      	b.n	800812c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f992 	bl	8008448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800812a:	e170      	b.n	800840e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812c:	bf00      	nop
    return;
 800812e:	e16e      	b.n	800840e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	2b01      	cmp	r3, #1
 8008136:	f040 814a 	bne.w	80083ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800813a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813e:	f003 0310 	and.w	r3, r3, #16
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 8143 	beq.w	80083ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 813c 	beq.w	80083ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008156:	2300      	movs	r3, #0
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	f040 80b4 	bne.w	80082e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8140 	beq.w	8008412 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800819a:	429a      	cmp	r2, r3
 800819c:	f080 8139 	bcs.w	8008412 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b2:	f000 8088 	beq.w	80082c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	330c      	adds	r3, #12
 80081de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80081e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1d9      	bne.n	80081b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3314      	adds	r3, #20
 8008208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800822a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800822e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e1      	bne.n	8008202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3314      	adds	r3, #20
 8008244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800824e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3314      	adds	r3, #20
 800825e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e3      	bne.n	800823e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	330c      	adds	r3, #12
 80082a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e3      	bne.n	8008284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fa fb69 	bl	8002998 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f8c0 	bl	800845c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082dc:	e099      	b.n	8008412 <HAL_UART_IRQHandler+0x50e>
 80082de:	bf00      	nop
 80082e0:	0800896f 	.word	0x0800896f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 808b 	beq.w	8008416 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 8086 	beq.w	8008416 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	330c      	adds	r3, #12
 8008310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800832e:	647a      	str	r2, [r7, #68]	; 0x44
 8008330:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e3      	bne.n	800830a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	623b      	str	r3, [r7, #32]
   return(result);
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3314      	adds	r3, #20
 8008362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008366:	633a      	str	r2, [r7, #48]	; 0x30
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800836c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e3      	bne.n	8008342 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2220      	movs	r2, #32
 800837e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	330c      	adds	r3, #12
 800838e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	60fb      	str	r3, [r7, #12]
   return(result);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0310 	bic.w	r3, r3, #16
 800839e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	330c      	adds	r3, #12
 80083a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083ac:	61fa      	str	r2, [r7, #28]
 80083ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	69b9      	ldr	r1, [r7, #24]
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	617b      	str	r3, [r7, #20]
   return(result);
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e3      	bne.n	8008388 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f848 	bl	800845c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083cc:	e023      	b.n	8008416 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d009      	beq.n	80083ee <HAL_UART_IRQHandler+0x4ea>
 80083da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fad5 	bl	8008996 <UART_Transmit_IT>
    return;
 80083ec:	e014      	b.n	8008418 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00e      	beq.n	8008418 <HAL_UART_IRQHandler+0x514>
 80083fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fb15 	bl	8008a36 <UART_EndTransmit_IT>
    return;
 800840c:	e004      	b.n	8008418 <HAL_UART_IRQHandler+0x514>
    return;
 800840e:	bf00      	nop
 8008410:	e002      	b.n	8008418 <HAL_UART_IRQHandler+0x514>
      return;
 8008412:	bf00      	nop
 8008414:	e000      	b.n	8008418 <HAL_UART_IRQHandler+0x514>
      return;
 8008416:	bf00      	nop
  }
}
 8008418:	37e8      	adds	r7, #232	; 0xe8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b090      	sub	sp, #64	; 0x40
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848c:	2b00      	cmp	r3, #0
 800848e:	d137      	bne.n	8008500 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008492:	2200      	movs	r2, #0
 8008494:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3314      	adds	r3, #20
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	623b      	str	r3, [r7, #32]
   return(result);
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80084ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b6:	633a      	str	r2, [r7, #48]	; 0x30
 80084b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e5      	bne.n	8008496 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	330c      	adds	r3, #12
 80084d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
 80084e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	330c      	adds	r3, #12
 80084e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ea:	61fa      	str	r2, [r7, #28]
 80084ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	69b9      	ldr	r1, [r7, #24]
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	617b      	str	r3, [r7, #20]
   return(result);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084fe:	e002      	b.n	8008506 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008500:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008502:	f7f8 f981 	bl	8000808 <HAL_UART_TxCpltCallback>
}
 8008506:	bf00      	nop
 8008508:	3740      	adds	r7, #64	; 0x40
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff ff7f 	bl	8008420 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b09c      	sub	sp, #112	; 0x70
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008542:	2b00      	cmp	r3, #0
 8008544:	d172      	bne.n	800862c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008548:	2200      	movs	r2, #0
 800854a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800854c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800855c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008562:	66bb      	str	r3, [r7, #104]	; 0x68
 8008564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	330c      	adds	r3, #12
 800856a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800856c:	65ba      	str	r2, [r7, #88]	; 0x58
 800856e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800857a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e5      	bne.n	800854c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3314      	adds	r3, #20
 8008586:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	f023 0301 	bic.w	r3, r3, #1
 8008596:	667b      	str	r3, [r7, #100]	; 0x64
 8008598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3314      	adds	r3, #20
 800859e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085a0:	647a      	str	r2, [r7, #68]	; 0x44
 80085a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e5      	bne.n	8008580 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3314      	adds	r3, #20
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	623b      	str	r3, [r7, #32]
   return(result);
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ca:	663b      	str	r3, [r7, #96]	; 0x60
 80085cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3314      	adds	r3, #20
 80085d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085d4:	633a      	str	r2, [r7, #48]	; 0x30
 80085d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e5      	bne.n	80085b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ea:	2220      	movs	r2, #32
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d119      	bne.n	800862c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	330c      	adds	r3, #12
 80085fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	60fb      	str	r3, [r7, #12]
   return(result);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0310 	bic.w	r3, r3, #16
 800860e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008618:	61fa      	str	r2, [r7, #28]
 800861a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	69b9      	ldr	r1, [r7, #24]
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	617b      	str	r3, [r7, #20]
   return(result);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e5      	bne.n	80085f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	2b01      	cmp	r3, #1
 8008632:	d106      	bne.n	8008642 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008636:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008638:	4619      	mov	r1, r3
 800863a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800863c:	f7ff ff0e 	bl	800845c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008640:	e002      	b.n	8008648 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008642:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008644:	f7f8 f8b0 	bl	80007a8 <HAL_UART_RxCpltCallback>
}
 8008648:	bf00      	nop
 800864a:	3770      	adds	r7, #112	; 0x70
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	2b01      	cmp	r3, #1
 8008664:	d108      	bne.n	8008678 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	4619      	mov	r1, r3
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7ff fef3 	bl	800845c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008676:	e002      	b.n	800867e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f7ff fedb 	bl	8008434 <HAL_UART_RxHalfCpltCallback>
}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a2:	2b80      	cmp	r3, #128	; 0x80
 80086a4:	bf0c      	ite	eq
 80086a6:	2301      	moveq	r3, #1
 80086a8:	2300      	movne	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b21      	cmp	r3, #33	; 0x21
 80086b8:	d108      	bne.n	80086cc <UART_DMAError+0x46>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80086c6:	68b8      	ldr	r0, [r7, #8]
 80086c8:	f000 f8c6 	bl	8008858 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	bf0c      	ite	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	2300      	movne	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b22      	cmp	r3, #34	; 0x22
 80086ec:	d108      	bne.n	8008700 <UART_DMAError+0x7a>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	f000 f8d4 	bl	80088a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	f043 0210 	orr.w	r2, r3, #16
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800870c:	68b8      	ldr	r0, [r7, #8]
 800870e:	f7ff fe9b 	bl	8008448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b098      	sub	sp, #96	; 0x60
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2222      	movs	r2, #34	; 0x22
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	4a40      	ldr	r2, [pc, #256]	; (800884c <UART_Start_Receive_DMA+0x130>)
 800874a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	4a3f      	ldr	r2, [pc, #252]	; (8008850 <UART_Start_Receive_DMA+0x134>)
 8008752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	4a3e      	ldr	r2, [pc, #248]	; (8008854 <UART_Start_Receive_DMA+0x138>)
 800875a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	2200      	movs	r2, #0
 8008762:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008764:	f107 0308 	add.w	r3, r7, #8
 8008768:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	f7fa f8b4 	bl	80028e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008780:	2300      	movs	r3, #0
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	613b      	str	r3, [r7, #16]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d019      	beq.n	80087da <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	330c      	adds	r3, #12
 80087ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	330c      	adds	r3, #12
 80087c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80087c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80087cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80087d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e5      	bne.n	80087a6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3314      	adds	r3, #20
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	f043 0301 	orr.w	r3, r3, #1
 80087f0:	657b      	str	r3, [r7, #84]	; 0x54
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3314      	adds	r3, #20
 80087f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3314      	adds	r3, #20
 8008814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	617b      	str	r3, [r7, #20]
   return(result);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008824:	653b      	str	r3, [r7, #80]	; 0x50
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3314      	adds	r3, #20
 800882c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800882e:	627a      	str	r2, [r7, #36]	; 0x24
 8008830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6a39      	ldr	r1, [r7, #32]
 8008834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	61fb      	str	r3, [r7, #28]
   return(result);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e5      	bne.n	800880e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3760      	adds	r7, #96	; 0x60
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	0800852b 	.word	0x0800852b
 8008850:	08008651 	.word	0x08008651
 8008854:	08008687 	.word	0x08008687

08008858 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008858:	b480      	push	{r7}
 800885a:	b089      	sub	sp, #36	; 0x24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	330c      	adds	r3, #12
 8008866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008876:	61fb      	str	r3, [r7, #28]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	330c      	adds	r3, #12
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	61ba      	str	r2, [r7, #24]
 8008882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6979      	ldr	r1, [r7, #20]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	613b      	str	r3, [r7, #16]
   return(result);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e5      	bne.n	8008860 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800889c:	bf00      	nop
 800889e:	3724      	adds	r7, #36	; 0x24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b095      	sub	sp, #84	; 0x54
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088d0:	643a      	str	r2, [r7, #64]	; 0x40
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3314      	adds	r3, #20
 80088ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f023 0301 	bic.w	r3, r3, #1
 80088fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800890a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e5      	bne.n	80088e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	2b01      	cmp	r3, #1
 800891e:	d119      	bne.n	8008954 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	330c      	adds	r3, #12
 8008926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f023 0310 	bic.w	r3, r3, #16
 8008936:	647b      	str	r3, [r7, #68]	; 0x44
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	330c      	adds	r3, #12
 800893e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008940:	61ba      	str	r2, [r7, #24]
 8008942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6979      	ldr	r1, [r7, #20]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	613b      	str	r3, [r7, #16]
   return(result);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e5      	bne.n	8008920 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008962:	bf00      	nop
 8008964:	3754      	adds	r7, #84	; 0x54
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff fd5d 	bl	8008448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b21      	cmp	r3, #33	; 0x21
 80089a8:	d13e      	bne.n	8008a28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b2:	d114      	bne.n	80089de <UART_Transmit_IT+0x48>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d110      	bne.n	80089de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	1c9a      	adds	r2, r3, #2
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	621a      	str	r2, [r3, #32]
 80089dc:	e008      	b.n	80089f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	1c59      	adds	r1, r3, #1
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6211      	str	r1, [r2, #32]
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4619      	mov	r1, r3
 80089fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10f      	bne.n	8008a24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e000      	b.n	8008a2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a28:	2302      	movs	r3, #2
  }
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7f7 fed6 	bl	8000808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b08c      	sub	sp, #48	; 0x30
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b22      	cmp	r3, #34	; 0x22
 8008a78:	f040 80ab 	bne.w	8008bd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a84:	d117      	bne.n	8008ab6 <UART_Receive_IT+0x50>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d113      	bne.n	8008ab6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aae:	1c9a      	adds	r2, r3, #2
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ab4:	e026      	b.n	8008b04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac8:	d007      	beq.n	8008ada <UART_Receive_IT+0x74>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <UART_Receive_IT+0x82>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d106      	bne.n	8008ae8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e008      	b.n	8008afa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	4619      	mov	r1, r3
 8008b12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d15a      	bne.n	8008bce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0220 	bic.w	r2, r2, #32
 8008b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695a      	ldr	r2, [r3, #20]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0201 	bic.w	r2, r2, #1
 8008b46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d135      	bne.n	8008bc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	330c      	adds	r3, #12
 8008b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b7e:	623a      	str	r2, [r7, #32]
 8008b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	69f9      	ldr	r1, [r7, #28]
 8008b84:	6a3a      	ldr	r2, [r7, #32]
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e5      	bne.n	8008b5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d10a      	bne.n	8008bb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff fc4d 	bl	800845c <HAL_UARTEx_RxEventCallback>
 8008bc2:	e002      	b.n	8008bca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7f7 fdef 	bl	80007a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e002      	b.n	8008bd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e000      	b.n	8008bd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
  }
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3730      	adds	r7, #48	; 0x30
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008be0:	b0c0      	sub	sp, #256	; 0x100
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf8:	68d9      	ldr	r1, [r3, #12]
 8008bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	ea40 0301 	orr.w	r3, r0, r1
 8008c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	431a      	orrs	r2, r3
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c34:	f021 010c 	bic.w	r1, r1, #12
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c42:	430b      	orrs	r3, r1
 8008c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c56:	6999      	ldr	r1, [r3, #24]
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	ea40 0301 	orr.w	r3, r0, r1
 8008c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	4b8f      	ldr	r3, [pc, #572]	; (8008ea8 <UART_SetConfig+0x2cc>)
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d005      	beq.n	8008c7c <UART_SetConfig+0xa0>
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b8d      	ldr	r3, [pc, #564]	; (8008eac <UART_SetConfig+0x2d0>)
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d104      	bne.n	8008c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c7c:	f7fd f894 	bl	8005da8 <HAL_RCC_GetPCLK2Freq>
 8008c80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c84:	e003      	b.n	8008c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c86:	f7fd f87b 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8008c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c98:	f040 810c 	bne.w	8008eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cae:	4622      	mov	r2, r4
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	1891      	adds	r1, r2, r2
 8008cb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cb6:	415b      	adcs	r3, r3
 8008cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	eb12 0801 	adds.w	r8, r2, r1
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	eb43 0901 	adc.w	r9, r3, r1
 8008cca:	f04f 0200 	mov.w	r2, #0
 8008cce:	f04f 0300 	mov.w	r3, #0
 8008cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cde:	4690      	mov	r8, r2
 8008ce0:	4699      	mov	r9, r3
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	eb18 0303 	adds.w	r3, r8, r3
 8008ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cec:	462b      	mov	r3, r5
 8008cee:	eb49 0303 	adc.w	r3, r9, r3
 8008cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	18db      	adds	r3, r3, r3
 8008d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d10:	4613      	mov	r3, r2
 8008d12:	eb42 0303 	adc.w	r3, r2, r3
 8008d16:	657b      	str	r3, [r7, #84]	; 0x54
 8008d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d20:	f7f7 face 	bl	80002c0 <__aeabi_uldivmod>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4b61      	ldr	r3, [pc, #388]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	011c      	lsls	r4, r3, #4
 8008d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	1891      	adds	r1, r2, r2
 8008d4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d54:	4641      	mov	r1, r8
 8008d56:	eb12 0a01 	adds.w	sl, r2, r1
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d74:	4692      	mov	sl, r2
 8008d76:	469b      	mov	fp, r3
 8008d78:	4643      	mov	r3, r8
 8008d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d82:	464b      	mov	r3, r9
 8008d84:	eb4b 0303 	adc.w	r3, fp, r3
 8008d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008da0:	460b      	mov	r3, r1
 8008da2:	18db      	adds	r3, r3, r3
 8008da4:	643b      	str	r3, [r7, #64]	; 0x40
 8008da6:	4613      	mov	r3, r2
 8008da8:	eb42 0303 	adc.w	r3, r2, r3
 8008dac:	647b      	str	r3, [r7, #68]	; 0x44
 8008dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008db6:	f7f7 fa83 	bl	80002c0 <__aeabi_uldivmod>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4b3b      	ldr	r3, [pc, #236]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8008dc6:	095b      	lsrs	r3, r3, #5
 8008dc8:	2264      	movs	r2, #100	; 0x64
 8008dca:	fb02 f303 	mul.w	r3, r2, r3
 8008dce:	1acb      	subs	r3, r1, r3
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dd6:	4b36      	ldr	r3, [pc, #216]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008de4:	441c      	add	r4, r3
 8008de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008df0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	1891      	adds	r1, r2, r2
 8008dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e00:	415b      	adcs	r3, r3
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e08:	4641      	mov	r1, r8
 8008e0a:	1851      	adds	r1, r2, r1
 8008e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8008e0e:	4649      	mov	r1, r9
 8008e10:	414b      	adcs	r3, r1
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	f04f 0300 	mov.w	r3, #0
 8008e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e20:	4659      	mov	r1, fp
 8008e22:	00cb      	lsls	r3, r1, #3
 8008e24:	4651      	mov	r1, sl
 8008e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e2a:	4651      	mov	r1, sl
 8008e2c:	00ca      	lsls	r2, r1, #3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	4619      	mov	r1, r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	4642      	mov	r2, r8
 8008e36:	189b      	adds	r3, r3, r2
 8008e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	460a      	mov	r2, r1
 8008e40:	eb42 0303 	adc.w	r3, r2, r3
 8008e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	18db      	adds	r3, r3, r3
 8008e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e62:	4613      	mov	r3, r2
 8008e64:	eb42 0303 	adc.w	r3, r2, r3
 8008e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e72:	f7f7 fa25 	bl	80002c0 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	2164      	movs	r1, #100	; 0x64
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	3332      	adds	r3, #50	; 0x32
 8008e8e:	4a08      	ldr	r2, [pc, #32]	; (8008eb0 <UART_SetConfig+0x2d4>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	f003 0207 	and.w	r2, r3, #7
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4422      	add	r2, r4
 8008ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ea4:	e106      	b.n	80090b4 <UART_SetConfig+0x4d8>
 8008ea6:	bf00      	nop
 8008ea8:	40011000 	.word	0x40011000
 8008eac:	40011400 	.word	0x40011400
 8008eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ec6:	4642      	mov	r2, r8
 8008ec8:	464b      	mov	r3, r9
 8008eca:	1891      	adds	r1, r2, r2
 8008ecc:	6239      	str	r1, [r7, #32]
 8008ece:	415b      	adcs	r3, r3
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	1854      	adds	r4, r2, r1
 8008eda:	4649      	mov	r1, r9
 8008edc:	eb43 0501 	adc.w	r5, r3, r1
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	f04f 0300 	mov.w	r3, #0
 8008ee8:	00eb      	lsls	r3, r5, #3
 8008eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eee:	00e2      	lsls	r2, r4, #3
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	461d      	mov	r5, r3
 8008ef4:	4643      	mov	r3, r8
 8008ef6:	18e3      	adds	r3, r4, r3
 8008ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008efc:	464b      	mov	r3, r9
 8008efe:	eb45 0303 	adc.w	r3, r5, r3
 8008f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f22:	4629      	mov	r1, r5
 8008f24:	008b      	lsls	r3, r1, #2
 8008f26:	4621      	mov	r1, r4
 8008f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	008a      	lsls	r2, r1, #2
 8008f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f34:	f7f7 f9c4 	bl	80002c0 <__aeabi_uldivmod>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4b60      	ldr	r3, [pc, #384]	; (80090c0 <UART_SetConfig+0x4e4>)
 8008f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	011c      	lsls	r4, r3, #4
 8008f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f58:	4642      	mov	r2, r8
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	1891      	adds	r1, r2, r2
 8008f5e:	61b9      	str	r1, [r7, #24]
 8008f60:	415b      	adcs	r3, r3
 8008f62:	61fb      	str	r3, [r7, #28]
 8008f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f68:	4641      	mov	r1, r8
 8008f6a:	1851      	adds	r1, r2, r1
 8008f6c:	6139      	str	r1, [r7, #16]
 8008f6e:	4649      	mov	r1, r9
 8008f70:	414b      	adcs	r3, r1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f80:	4659      	mov	r1, fp
 8008f82:	00cb      	lsls	r3, r1, #3
 8008f84:	4651      	mov	r1, sl
 8008f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	00ca      	lsls	r2, r1, #3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	4642      	mov	r2, r8
 8008f96:	189b      	adds	r3, r3, r2
 8008f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	eb42 0303 	adc.w	r3, r2, r3
 8008fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	008b      	lsls	r3, r1, #2
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fca:	4641      	mov	r1, r8
 8008fcc:	008a      	lsls	r2, r1, #2
 8008fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fd2:	f7f7 f975 	bl	80002c0 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4b38      	ldr	r3, [pc, #224]	; (80090c0 <UART_SetConfig+0x4e4>)
 8008fde:	fba3 2301 	umull	r2, r3, r3, r1
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	2264      	movs	r2, #100	; 0x64
 8008fe6:	fb02 f303 	mul.w	r3, r2, r3
 8008fea:	1acb      	subs	r3, r1, r3
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	3332      	adds	r3, #50	; 0x32
 8008ff0:	4a33      	ldr	r2, [pc, #204]	; (80090c0 <UART_SetConfig+0x4e4>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ffc:	441c      	add	r4, r3
 8008ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009002:	2200      	movs	r2, #0
 8009004:	673b      	str	r3, [r7, #112]	; 0x70
 8009006:	677a      	str	r2, [r7, #116]	; 0x74
 8009008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	1891      	adds	r1, r2, r2
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	415b      	adcs	r3, r3
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800901c:	4641      	mov	r1, r8
 800901e:	1851      	adds	r1, r2, r1
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	4649      	mov	r1, r9
 8009024:	414b      	adcs	r3, r1
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009034:	4659      	mov	r1, fp
 8009036:	00cb      	lsls	r3, r1, #3
 8009038:	4651      	mov	r1, sl
 800903a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800903e:	4651      	mov	r1, sl
 8009040:	00ca      	lsls	r2, r1, #3
 8009042:	4610      	mov	r0, r2
 8009044:	4619      	mov	r1, r3
 8009046:	4603      	mov	r3, r0
 8009048:	4642      	mov	r2, r8
 800904a:	189b      	adds	r3, r3, r2
 800904c:	66bb      	str	r3, [r7, #104]	; 0x68
 800904e:	464b      	mov	r3, r9
 8009050:	460a      	mov	r2, r1
 8009052:	eb42 0303 	adc.w	r3, r2, r3
 8009056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	663b      	str	r3, [r7, #96]	; 0x60
 8009062:	667a      	str	r2, [r7, #100]	; 0x64
 8009064:	f04f 0200 	mov.w	r2, #0
 8009068:	f04f 0300 	mov.w	r3, #0
 800906c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009070:	4649      	mov	r1, r9
 8009072:	008b      	lsls	r3, r1, #2
 8009074:	4641      	mov	r1, r8
 8009076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800907a:	4641      	mov	r1, r8
 800907c:	008a      	lsls	r2, r1, #2
 800907e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009082:	f7f7 f91d 	bl	80002c0 <__aeabi_uldivmod>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <UART_SetConfig+0x4e4>)
 800908c:	fba3 1302 	umull	r1, r3, r3, r2
 8009090:	095b      	lsrs	r3, r3, #5
 8009092:	2164      	movs	r1, #100	; 0x64
 8009094:	fb01 f303 	mul.w	r3, r1, r3
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	3332      	adds	r3, #50	; 0x32
 800909e:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <UART_SetConfig+0x4e4>)
 80090a0:	fba2 2303 	umull	r2, r3, r2, r3
 80090a4:	095b      	lsrs	r3, r3, #5
 80090a6:	f003 020f 	and.w	r2, r3, #15
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4422      	add	r2, r4
 80090b2:	609a      	str	r2, [r3, #8]
}
 80090b4:	bf00      	nop
 80090b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090ba:	46bd      	mov	sp, r7
 80090bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090c0:	51eb851f 	.word	0x51eb851f

080090c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090c4:	b084      	sub	sp, #16
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	f107 001c 	add.w	r0, r7, #28
 80090d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d122      	bne.n	8009122 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80090f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009106:	2b01      	cmp	r3, #1
 8009108:	d105      	bne.n	8009116 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa9c 	bl	8009654 <USB_CoreReset>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]
 8009120:	e01a      	b.n	8009158 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa90 	bl	8009654 <USB_CoreReset>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913a:	2b00      	cmp	r3, #0
 800913c:	d106      	bne.n	800914c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	639a      	str	r2, [r3, #56]	; 0x38
 800914a:	e005      	b.n	8009158 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	2b01      	cmp	r3, #1
 800915c:	d10b      	bne.n	8009176 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f043 0206 	orr.w	r2, r3, #6
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f043 0220 	orr.w	r2, r3, #32
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009182:	b004      	add	sp, #16
 8009184:	4770      	bx	lr

08009186 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f023 0201 	bic.w	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d115      	bne.n	80091f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091d6:	2001      	movs	r0, #1
 80091d8:	f7f8 feda 	bl	8001f90 <HAL_Delay>
      ms++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa28 	bl	8009638 <USB_GetMode>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d01e      	beq.n	800922c <USB_SetCurrentMode+0x84>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b31      	cmp	r3, #49	; 0x31
 80091f2:	d9f0      	bls.n	80091d6 <USB_SetCurrentMode+0x2e>
 80091f4:	e01a      	b.n	800922c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091f6:	78fb      	ldrb	r3, [r7, #3]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d115      	bne.n	8009228 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009208:	2001      	movs	r0, #1
 800920a:	f7f8 fec1 	bl	8001f90 <HAL_Delay>
      ms++;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fa0f 	bl	8009638 <USB_GetMode>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <USB_SetCurrentMode+0x84>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b31      	cmp	r3, #49	; 0x31
 8009224:	d9f0      	bls.n	8009208 <USB_SetCurrentMode+0x60>
 8009226:	e001      	b.n	800922c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e005      	b.n	8009238 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b32      	cmp	r3, #50	; 0x32
 8009230:	d101      	bne.n	8009236 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009240:	b084      	sub	sp, #16
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800924e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800925a:	2300      	movs	r3, #0
 800925c:	613b      	str	r3, [r7, #16]
 800925e:	e009      	b.n	8009274 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3340      	adds	r3, #64	; 0x40
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	2200      	movs	r2, #0
 800926c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3301      	adds	r3, #1
 8009272:	613b      	str	r3, [r7, #16]
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	2b0e      	cmp	r3, #14
 8009278:	d9f2      	bls.n	8009260 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800927a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d11c      	bne.n	80092ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800928e:	f043 0302 	orr.w	r3, r3, #2
 8009292:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	e005      	b.n	80092c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092cc:	461a      	mov	r2, r3
 80092ce:	2300      	movs	r3, #0
 80092d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d8:	4619      	mov	r1, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e0:	461a      	mov	r2, r3
 80092e2:	680b      	ldr	r3, [r1, #0]
 80092e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d10c      	bne.n	8009306 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d104      	bne.n	80092fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092f2:	2100      	movs	r1, #0
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f965 	bl	80095c4 <USB_SetDevSpeed>
 80092fa:	e008      	b.n	800930e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80092fc:	2101      	movs	r1, #1
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f960 	bl	80095c4 <USB_SetDevSpeed>
 8009304:	e003      	b.n	800930e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009306:	2103      	movs	r1, #3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f95b 	bl	80095c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800930e:	2110      	movs	r1, #16
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f8f3 	bl	80094fc <USB_FlushTxFifo>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f91f 	bl	8009564 <USB_FlushRxFifo>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	461a      	mov	r2, r3
 8009338:	2300      	movs	r3, #0
 800933a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	461a      	mov	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934e:	461a      	mov	r2, r3
 8009350:	2300      	movs	r3, #0
 8009352:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	e043      	b.n	80093e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800936c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009370:	d118      	bne.n	80093a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009384:	461a      	mov	r2, r3
 8009386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	e013      	b.n	80093b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939a:	461a      	mov	r2, r3
 800939c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	e008      	b.n	80093b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b0:	461a      	mov	r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c2:	461a      	mov	r2, r3
 80093c4:	2300      	movs	r3, #0
 80093c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d4:	461a      	mov	r2, r3
 80093d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	3301      	adds	r3, #1
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d3b7      	bcc.n	800935a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	e043      	b.n	8009478 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009406:	d118      	bne.n	800943a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941a:	461a      	mov	r2, r3
 800941c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	e013      	b.n	800944c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	461a      	mov	r2, r3
 8009432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e008      	b.n	800944c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	461a      	mov	r2, r3
 8009448:	2300      	movs	r3, #0
 800944a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009458:	461a      	mov	r2, r3
 800945a:	2300      	movs	r3, #0
 800945c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946a:	461a      	mov	r2, r3
 800946c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009470:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3301      	adds	r3, #1
 8009476:	613b      	str	r3, [r7, #16]
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	429a      	cmp	r2, r3
 800947e:	d3b7      	bcc.n	80093f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800948e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009492:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d105      	bne.n	80094b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f043 0210 	orr.w	r2, r3, #16
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <USB_DevInit+0x2b8>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f043 0208 	orr.w	r2, r3, #8
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d107      	bne.n	80094e8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094e0:	f043 0304 	orr.w	r3, r3, #4
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094f4:	b004      	add	sp, #16
 80094f6:	4770      	bx	lr
 80094f8:	803c3800 	.word	0x803c3800

080094fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3301      	adds	r3, #1
 800950e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4a13      	ldr	r2, [pc, #76]	; (8009560 <USB_FlushTxFifo+0x64>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d901      	bls.n	800951c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e01b      	b.n	8009554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	daf2      	bge.n	800950a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	019b      	lsls	r3, r3, #6
 800952c:	f043 0220 	orr.w	r2, r3, #32
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4a08      	ldr	r2, [pc, #32]	; (8009560 <USB_FlushTxFifo+0x64>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d901      	bls.n	8009546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e006      	b.n	8009554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	2b20      	cmp	r3, #32
 8009550:	d0f0      	beq.n	8009534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	00030d40 	.word	0x00030d40

08009564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4a11      	ldr	r2, [pc, #68]	; (80095c0 <USB_FlushRxFifo+0x5c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d901      	bls.n	8009582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e018      	b.n	80095b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	daf2      	bge.n	8009570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2210      	movs	r2, #16
 8009592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4a08      	ldr	r2, [pc, #32]	; (80095c0 <USB_FlushRxFifo+0x5c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d901      	bls.n	80095a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e006      	b.n	80095b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d0f0      	beq.n	8009594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	00030d40 	.word	0x00030d40

080095c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	68f9      	ldr	r1, [r7, #12]
 80095e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e4:	4313      	orrs	r3, r2
 80095e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009624:	f043 0302 	orr.w	r3, r3, #2
 8009628:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	f003 0301 	and.w	r3, r3, #1
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3301      	adds	r3, #1
 8009664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4a13      	ldr	r2, [pc, #76]	; (80096b8 <USB_CoreReset+0x64>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d901      	bls.n	8009672 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e01b      	b.n	80096aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	daf2      	bge.n	8009660 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f043 0201 	orr.w	r2, r3, #1
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3301      	adds	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <USB_CoreReset+0x64>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d901      	bls.n	800969c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e006      	b.n	80096aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d0f0      	beq.n	800968a <USB_CoreReset+0x36>

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	00030d40 	.word	0x00030d40

080096bc <siprintf>:
 80096bc:	b40e      	push	{r1, r2, r3}
 80096be:	b500      	push	{lr}
 80096c0:	b09c      	sub	sp, #112	; 0x70
 80096c2:	ab1d      	add	r3, sp, #116	; 0x74
 80096c4:	9002      	str	r0, [sp, #8]
 80096c6:	9006      	str	r0, [sp, #24]
 80096c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096cc:	4809      	ldr	r0, [pc, #36]	; (80096f4 <siprintf+0x38>)
 80096ce:	9107      	str	r1, [sp, #28]
 80096d0:	9104      	str	r1, [sp, #16]
 80096d2:	4909      	ldr	r1, [pc, #36]	; (80096f8 <siprintf+0x3c>)
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	a902      	add	r1, sp, #8
 80096e0:	f000 f89a 	bl	8009818 <_svfiprintf_r>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	b01c      	add	sp, #112	; 0x70
 80096ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f0:	b003      	add	sp, #12
 80096f2:	4770      	bx	lr
 80096f4:	20000068 	.word	0x20000068
 80096f8:	ffff0208 	.word	0xffff0208

080096fc <memset>:
 80096fc:	4402      	add	r2, r0
 80096fe:	4603      	mov	r3, r0
 8009700:	4293      	cmp	r3, r2
 8009702:	d100      	bne.n	8009706 <memset+0xa>
 8009704:	4770      	bx	lr
 8009706:	f803 1b01 	strb.w	r1, [r3], #1
 800970a:	e7f9      	b.n	8009700 <memset+0x4>

0800970c <__errno>:
 800970c:	4b01      	ldr	r3, [pc, #4]	; (8009714 <__errno+0x8>)
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	20000068 	.word	0x20000068

08009718 <__libc_init_array>:
 8009718:	b570      	push	{r4, r5, r6, lr}
 800971a:	4d0d      	ldr	r5, [pc, #52]	; (8009750 <__libc_init_array+0x38>)
 800971c:	4c0d      	ldr	r4, [pc, #52]	; (8009754 <__libc_init_array+0x3c>)
 800971e:	1b64      	subs	r4, r4, r5
 8009720:	10a4      	asrs	r4, r4, #2
 8009722:	2600      	movs	r6, #0
 8009724:	42a6      	cmp	r6, r4
 8009726:	d109      	bne.n	800973c <__libc_init_array+0x24>
 8009728:	4d0b      	ldr	r5, [pc, #44]	; (8009758 <__libc_init_array+0x40>)
 800972a:	4c0c      	ldr	r4, [pc, #48]	; (800975c <__libc_init_array+0x44>)
 800972c:	f000 fc6a 	bl	800a004 <_init>
 8009730:	1b64      	subs	r4, r4, r5
 8009732:	10a4      	asrs	r4, r4, #2
 8009734:	2600      	movs	r6, #0
 8009736:	42a6      	cmp	r6, r4
 8009738:	d105      	bne.n	8009746 <__libc_init_array+0x2e>
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009740:	4798      	blx	r3
 8009742:	3601      	adds	r6, #1
 8009744:	e7ee      	b.n	8009724 <__libc_init_array+0xc>
 8009746:	f855 3b04 	ldr.w	r3, [r5], #4
 800974a:	4798      	blx	r3
 800974c:	3601      	adds	r6, #1
 800974e:	e7f2      	b.n	8009736 <__libc_init_array+0x1e>
 8009750:	0800a304 	.word	0x0800a304
 8009754:	0800a304 	.word	0x0800a304
 8009758:	0800a304 	.word	0x0800a304
 800975c:	0800a308 	.word	0x0800a308

08009760 <__retarget_lock_acquire_recursive>:
 8009760:	4770      	bx	lr

08009762 <__retarget_lock_release_recursive>:
 8009762:	4770      	bx	lr

08009764 <__ssputs_r>:
 8009764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	688e      	ldr	r6, [r1, #8]
 800976a:	461f      	mov	r7, r3
 800976c:	42be      	cmp	r6, r7
 800976e:	680b      	ldr	r3, [r1, #0]
 8009770:	4682      	mov	sl, r0
 8009772:	460c      	mov	r4, r1
 8009774:	4690      	mov	r8, r2
 8009776:	d82c      	bhi.n	80097d2 <__ssputs_r+0x6e>
 8009778:	898a      	ldrh	r2, [r1, #12]
 800977a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800977e:	d026      	beq.n	80097ce <__ssputs_r+0x6a>
 8009780:	6965      	ldr	r5, [r4, #20]
 8009782:	6909      	ldr	r1, [r1, #16]
 8009784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009788:	eba3 0901 	sub.w	r9, r3, r1
 800978c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009790:	1c7b      	adds	r3, r7, #1
 8009792:	444b      	add	r3, r9
 8009794:	106d      	asrs	r5, r5, #1
 8009796:	429d      	cmp	r5, r3
 8009798:	bf38      	it	cc
 800979a:	461d      	movcc	r5, r3
 800979c:	0553      	lsls	r3, r2, #21
 800979e:	d527      	bpl.n	80097f0 <__ssputs_r+0x8c>
 80097a0:	4629      	mov	r1, r5
 80097a2:	f000 f957 	bl	8009a54 <_malloc_r>
 80097a6:	4606      	mov	r6, r0
 80097a8:	b360      	cbz	r0, 8009804 <__ssputs_r+0xa0>
 80097aa:	6921      	ldr	r1, [r4, #16]
 80097ac:	464a      	mov	r2, r9
 80097ae:	f000 fbc7 	bl	8009f40 <memcpy>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	6126      	str	r6, [r4, #16]
 80097c0:	6165      	str	r5, [r4, #20]
 80097c2:	444e      	add	r6, r9
 80097c4:	eba5 0509 	sub.w	r5, r5, r9
 80097c8:	6026      	str	r6, [r4, #0]
 80097ca:	60a5      	str	r5, [r4, #8]
 80097cc:	463e      	mov	r6, r7
 80097ce:	42be      	cmp	r6, r7
 80097d0:	d900      	bls.n	80097d4 <__ssputs_r+0x70>
 80097d2:	463e      	mov	r6, r7
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	4632      	mov	r2, r6
 80097d8:	4641      	mov	r1, r8
 80097da:	f000 fb86 	bl	8009eea <memmove>
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	1b9b      	subs	r3, r3, r6
 80097e2:	60a3      	str	r3, [r4, #8]
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	4433      	add	r3, r6
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	2000      	movs	r0, #0
 80097ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f0:	462a      	mov	r2, r5
 80097f2:	f000 fb4b 	bl	8009e8c <_realloc_r>
 80097f6:	4606      	mov	r6, r0
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d1e0      	bne.n	80097be <__ssputs_r+0x5a>
 80097fc:	6921      	ldr	r1, [r4, #16]
 80097fe:	4650      	mov	r0, sl
 8009800:	f000 fbac 	bl	8009f5c <_free_r>
 8009804:	230c      	movs	r3, #12
 8009806:	f8ca 3000 	str.w	r3, [sl]
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009816:	e7e9      	b.n	80097ec <__ssputs_r+0x88>

08009818 <_svfiprintf_r>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	4698      	mov	r8, r3
 800981e:	898b      	ldrh	r3, [r1, #12]
 8009820:	061b      	lsls	r3, r3, #24
 8009822:	b09d      	sub	sp, #116	; 0x74
 8009824:	4607      	mov	r7, r0
 8009826:	460d      	mov	r5, r1
 8009828:	4614      	mov	r4, r2
 800982a:	d50e      	bpl.n	800984a <_svfiprintf_r+0x32>
 800982c:	690b      	ldr	r3, [r1, #16]
 800982e:	b963      	cbnz	r3, 800984a <_svfiprintf_r+0x32>
 8009830:	2140      	movs	r1, #64	; 0x40
 8009832:	f000 f90f 	bl	8009a54 <_malloc_r>
 8009836:	6028      	str	r0, [r5, #0]
 8009838:	6128      	str	r0, [r5, #16]
 800983a:	b920      	cbnz	r0, 8009846 <_svfiprintf_r+0x2e>
 800983c:	230c      	movs	r3, #12
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009844:	e0d0      	b.n	80099e8 <_svfiprintf_r+0x1d0>
 8009846:	2340      	movs	r3, #64	; 0x40
 8009848:	616b      	str	r3, [r5, #20]
 800984a:	2300      	movs	r3, #0
 800984c:	9309      	str	r3, [sp, #36]	; 0x24
 800984e:	2320      	movs	r3, #32
 8009850:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009854:	f8cd 800c 	str.w	r8, [sp, #12]
 8009858:	2330      	movs	r3, #48	; 0x30
 800985a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a00 <_svfiprintf_r+0x1e8>
 800985e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009862:	f04f 0901 	mov.w	r9, #1
 8009866:	4623      	mov	r3, r4
 8009868:	469a      	mov	sl, r3
 800986a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800986e:	b10a      	cbz	r2, 8009874 <_svfiprintf_r+0x5c>
 8009870:	2a25      	cmp	r2, #37	; 0x25
 8009872:	d1f9      	bne.n	8009868 <_svfiprintf_r+0x50>
 8009874:	ebba 0b04 	subs.w	fp, sl, r4
 8009878:	d00b      	beq.n	8009892 <_svfiprintf_r+0x7a>
 800987a:	465b      	mov	r3, fp
 800987c:	4622      	mov	r2, r4
 800987e:	4629      	mov	r1, r5
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff ff6f 	bl	8009764 <__ssputs_r>
 8009886:	3001      	adds	r0, #1
 8009888:	f000 80a9 	beq.w	80099de <_svfiprintf_r+0x1c6>
 800988c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800988e:	445a      	add	r2, fp
 8009890:	9209      	str	r2, [sp, #36]	; 0x24
 8009892:	f89a 3000 	ldrb.w	r3, [sl]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 80a1 	beq.w	80099de <_svfiprintf_r+0x1c6>
 800989c:	2300      	movs	r3, #0
 800989e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a6:	f10a 0a01 	add.w	sl, sl, #1
 80098aa:	9304      	str	r3, [sp, #16]
 80098ac:	9307      	str	r3, [sp, #28]
 80098ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b2:	931a      	str	r3, [sp, #104]	; 0x68
 80098b4:	4654      	mov	r4, sl
 80098b6:	2205      	movs	r2, #5
 80098b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098bc:	4850      	ldr	r0, [pc, #320]	; (8009a00 <_svfiprintf_r+0x1e8>)
 80098be:	f7f6 fcaf 	bl	8000220 <memchr>
 80098c2:	9a04      	ldr	r2, [sp, #16]
 80098c4:	b9d8      	cbnz	r0, 80098fe <_svfiprintf_r+0xe6>
 80098c6:	06d0      	lsls	r0, r2, #27
 80098c8:	bf44      	itt	mi
 80098ca:	2320      	movmi	r3, #32
 80098cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d0:	0711      	lsls	r1, r2, #28
 80098d2:	bf44      	itt	mi
 80098d4:	232b      	movmi	r3, #43	; 0x2b
 80098d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098da:	f89a 3000 	ldrb.w	r3, [sl]
 80098de:	2b2a      	cmp	r3, #42	; 0x2a
 80098e0:	d015      	beq.n	800990e <_svfiprintf_r+0xf6>
 80098e2:	9a07      	ldr	r2, [sp, #28]
 80098e4:	4654      	mov	r4, sl
 80098e6:	2000      	movs	r0, #0
 80098e8:	f04f 0c0a 	mov.w	ip, #10
 80098ec:	4621      	mov	r1, r4
 80098ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f2:	3b30      	subs	r3, #48	; 0x30
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d94d      	bls.n	8009994 <_svfiprintf_r+0x17c>
 80098f8:	b1b0      	cbz	r0, 8009928 <_svfiprintf_r+0x110>
 80098fa:	9207      	str	r2, [sp, #28]
 80098fc:	e014      	b.n	8009928 <_svfiprintf_r+0x110>
 80098fe:	eba0 0308 	sub.w	r3, r0, r8
 8009902:	fa09 f303 	lsl.w	r3, r9, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	46a2      	mov	sl, r4
 800990c:	e7d2      	b.n	80098b4 <_svfiprintf_r+0x9c>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	1d19      	adds	r1, r3, #4
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	9103      	str	r1, [sp, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfbb      	ittet	lt
 800991a:	425b      	neglt	r3, r3
 800991c:	f042 0202 	orrlt.w	r2, r2, #2
 8009920:	9307      	strge	r3, [sp, #28]
 8009922:	9307      	strlt	r3, [sp, #28]
 8009924:	bfb8      	it	lt
 8009926:	9204      	strlt	r2, [sp, #16]
 8009928:	7823      	ldrb	r3, [r4, #0]
 800992a:	2b2e      	cmp	r3, #46	; 0x2e
 800992c:	d10c      	bne.n	8009948 <_svfiprintf_r+0x130>
 800992e:	7863      	ldrb	r3, [r4, #1]
 8009930:	2b2a      	cmp	r3, #42	; 0x2a
 8009932:	d134      	bne.n	800999e <_svfiprintf_r+0x186>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	1d1a      	adds	r2, r3, #4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	9203      	str	r2, [sp, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	bfb8      	it	lt
 8009940:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009944:	3402      	adds	r4, #2
 8009946:	9305      	str	r3, [sp, #20]
 8009948:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a10 <_svfiprintf_r+0x1f8>
 800994c:	7821      	ldrb	r1, [r4, #0]
 800994e:	2203      	movs	r2, #3
 8009950:	4650      	mov	r0, sl
 8009952:	f7f6 fc65 	bl	8000220 <memchr>
 8009956:	b138      	cbz	r0, 8009968 <_svfiprintf_r+0x150>
 8009958:	9b04      	ldr	r3, [sp, #16]
 800995a:	eba0 000a 	sub.w	r0, r0, sl
 800995e:	2240      	movs	r2, #64	; 0x40
 8009960:	4082      	lsls	r2, r0
 8009962:	4313      	orrs	r3, r2
 8009964:	3401      	adds	r4, #1
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996c:	4825      	ldr	r0, [pc, #148]	; (8009a04 <_svfiprintf_r+0x1ec>)
 800996e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009972:	2206      	movs	r2, #6
 8009974:	f7f6 fc54 	bl	8000220 <memchr>
 8009978:	2800      	cmp	r0, #0
 800997a:	d038      	beq.n	80099ee <_svfiprintf_r+0x1d6>
 800997c:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <_svfiprintf_r+0x1f0>)
 800997e:	bb1b      	cbnz	r3, 80099c8 <_svfiprintf_r+0x1b0>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	3307      	adds	r3, #7
 8009984:	f023 0307 	bic.w	r3, r3, #7
 8009988:	3308      	adds	r3, #8
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998e:	4433      	add	r3, r6
 8009990:	9309      	str	r3, [sp, #36]	; 0x24
 8009992:	e768      	b.n	8009866 <_svfiprintf_r+0x4e>
 8009994:	fb0c 3202 	mla	r2, ip, r2, r3
 8009998:	460c      	mov	r4, r1
 800999a:	2001      	movs	r0, #1
 800999c:	e7a6      	b.n	80098ec <_svfiprintf_r+0xd4>
 800999e:	2300      	movs	r3, #0
 80099a0:	3401      	adds	r4, #1
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	4619      	mov	r1, r3
 80099a6:	f04f 0c0a 	mov.w	ip, #10
 80099aa:	4620      	mov	r0, r4
 80099ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b0:	3a30      	subs	r2, #48	; 0x30
 80099b2:	2a09      	cmp	r2, #9
 80099b4:	d903      	bls.n	80099be <_svfiprintf_r+0x1a6>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0c6      	beq.n	8009948 <_svfiprintf_r+0x130>
 80099ba:	9105      	str	r1, [sp, #20]
 80099bc:	e7c4      	b.n	8009948 <_svfiprintf_r+0x130>
 80099be:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c2:	4604      	mov	r4, r0
 80099c4:	2301      	movs	r3, #1
 80099c6:	e7f0      	b.n	80099aa <_svfiprintf_r+0x192>
 80099c8:	ab03      	add	r3, sp, #12
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	462a      	mov	r2, r5
 80099ce:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <_svfiprintf_r+0x1f4>)
 80099d0:	a904      	add	r1, sp, #16
 80099d2:	4638      	mov	r0, r7
 80099d4:	f3af 8000 	nop.w
 80099d8:	1c42      	adds	r2, r0, #1
 80099da:	4606      	mov	r6, r0
 80099dc:	d1d6      	bne.n	800998c <_svfiprintf_r+0x174>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	065b      	lsls	r3, r3, #25
 80099e2:	f53f af2d 	bmi.w	8009840 <_svfiprintf_r+0x28>
 80099e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099e8:	b01d      	add	sp, #116	; 0x74
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	ab03      	add	r3, sp, #12
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	462a      	mov	r2, r5
 80099f4:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <_svfiprintf_r+0x1f4>)
 80099f6:	a904      	add	r1, sp, #16
 80099f8:	4638      	mov	r0, r7
 80099fa:	f000 f919 	bl	8009c30 <_printf_i>
 80099fe:	e7eb      	b.n	80099d8 <_svfiprintf_r+0x1c0>
 8009a00:	0800a2c8 	.word	0x0800a2c8
 8009a04:	0800a2d2 	.word	0x0800a2d2
 8009a08:	00000000 	.word	0x00000000
 8009a0c:	08009765 	.word	0x08009765
 8009a10:	0800a2ce 	.word	0x0800a2ce

08009a14 <sbrk_aligned>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	4e0e      	ldr	r6, [pc, #56]	; (8009a50 <sbrk_aligned+0x3c>)
 8009a18:	460c      	mov	r4, r1
 8009a1a:	6831      	ldr	r1, [r6, #0]
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	b911      	cbnz	r1, 8009a26 <sbrk_aligned+0x12>
 8009a20:	f000 fa7e 	bl	8009f20 <_sbrk_r>
 8009a24:	6030      	str	r0, [r6, #0]
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 fa79 	bl	8009f20 <_sbrk_r>
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	d00a      	beq.n	8009a48 <sbrk_aligned+0x34>
 8009a32:	1cc4      	adds	r4, r0, #3
 8009a34:	f024 0403 	bic.w	r4, r4, #3
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d007      	beq.n	8009a4c <sbrk_aligned+0x38>
 8009a3c:	1a21      	subs	r1, r4, r0
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f000 fa6e 	bl	8009f20 <_sbrk_r>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d101      	bne.n	8009a4c <sbrk_aligned+0x38>
 8009a48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	200191d8 	.word	0x200191d8

08009a54 <_malloc_r>:
 8009a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	1ccd      	adds	r5, r1, #3
 8009a5a:	f025 0503 	bic.w	r5, r5, #3
 8009a5e:	3508      	adds	r5, #8
 8009a60:	2d0c      	cmp	r5, #12
 8009a62:	bf38      	it	cc
 8009a64:	250c      	movcc	r5, #12
 8009a66:	2d00      	cmp	r5, #0
 8009a68:	4607      	mov	r7, r0
 8009a6a:	db01      	blt.n	8009a70 <_malloc_r+0x1c>
 8009a6c:	42a9      	cmp	r1, r5
 8009a6e:	d905      	bls.n	8009a7c <_malloc_r+0x28>
 8009a70:	230c      	movs	r3, #12
 8009a72:	603b      	str	r3, [r7, #0]
 8009a74:	2600      	movs	r6, #0
 8009a76:	4630      	mov	r0, r6
 8009a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b50 <_malloc_r+0xfc>
 8009a80:	f000 f9f8 	bl	8009e74 <__malloc_lock>
 8009a84:	f8d8 3000 	ldr.w	r3, [r8]
 8009a88:	461c      	mov	r4, r3
 8009a8a:	bb5c      	cbnz	r4, 8009ae4 <_malloc_r+0x90>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4638      	mov	r0, r7
 8009a90:	f7ff ffc0 	bl	8009a14 <sbrk_aligned>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	4604      	mov	r4, r0
 8009a98:	d155      	bne.n	8009b46 <_malloc_r+0xf2>
 8009a9a:	f8d8 4000 	ldr.w	r4, [r8]
 8009a9e:	4626      	mov	r6, r4
 8009aa0:	2e00      	cmp	r6, #0
 8009aa2:	d145      	bne.n	8009b30 <_malloc_r+0xdc>
 8009aa4:	2c00      	cmp	r4, #0
 8009aa6:	d048      	beq.n	8009b3a <_malloc_r+0xe6>
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4638      	mov	r0, r7
 8009aae:	eb04 0903 	add.w	r9, r4, r3
 8009ab2:	f000 fa35 	bl	8009f20 <_sbrk_r>
 8009ab6:	4581      	cmp	r9, r0
 8009ab8:	d13f      	bne.n	8009b3a <_malloc_r+0xe6>
 8009aba:	6821      	ldr	r1, [r4, #0]
 8009abc:	1a6d      	subs	r5, r5, r1
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f7ff ffa7 	bl	8009a14 <sbrk_aligned>
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d037      	beq.n	8009b3a <_malloc_r+0xe6>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	442b      	add	r3, r5
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d038      	beq.n	8009b4a <_malloc_r+0xf6>
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	42a2      	cmp	r2, r4
 8009adc:	d12b      	bne.n	8009b36 <_malloc_r+0xe2>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	605a      	str	r2, [r3, #4]
 8009ae2:	e00f      	b.n	8009b04 <_malloc_r+0xb0>
 8009ae4:	6822      	ldr	r2, [r4, #0]
 8009ae6:	1b52      	subs	r2, r2, r5
 8009ae8:	d41f      	bmi.n	8009b2a <_malloc_r+0xd6>
 8009aea:	2a0b      	cmp	r2, #11
 8009aec:	d917      	bls.n	8009b1e <_malloc_r+0xca>
 8009aee:	1961      	adds	r1, r4, r5
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	6025      	str	r5, [r4, #0]
 8009af4:	bf18      	it	ne
 8009af6:	6059      	strne	r1, [r3, #4]
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	bf08      	it	eq
 8009afc:	f8c8 1000 	streq.w	r1, [r8]
 8009b00:	5162      	str	r2, [r4, r5]
 8009b02:	604b      	str	r3, [r1, #4]
 8009b04:	4638      	mov	r0, r7
 8009b06:	f104 060b 	add.w	r6, r4, #11
 8009b0a:	f000 f9b9 	bl	8009e80 <__malloc_unlock>
 8009b0e:	f026 0607 	bic.w	r6, r6, #7
 8009b12:	1d23      	adds	r3, r4, #4
 8009b14:	1af2      	subs	r2, r6, r3
 8009b16:	d0ae      	beq.n	8009a76 <_malloc_r+0x22>
 8009b18:	1b9b      	subs	r3, r3, r6
 8009b1a:	50a3      	str	r3, [r4, r2]
 8009b1c:	e7ab      	b.n	8009a76 <_malloc_r+0x22>
 8009b1e:	42a3      	cmp	r3, r4
 8009b20:	6862      	ldr	r2, [r4, #4]
 8009b22:	d1dd      	bne.n	8009ae0 <_malloc_r+0x8c>
 8009b24:	f8c8 2000 	str.w	r2, [r8]
 8009b28:	e7ec      	b.n	8009b04 <_malloc_r+0xb0>
 8009b2a:	4623      	mov	r3, r4
 8009b2c:	6864      	ldr	r4, [r4, #4]
 8009b2e:	e7ac      	b.n	8009a8a <_malloc_r+0x36>
 8009b30:	4634      	mov	r4, r6
 8009b32:	6876      	ldr	r6, [r6, #4]
 8009b34:	e7b4      	b.n	8009aa0 <_malloc_r+0x4c>
 8009b36:	4613      	mov	r3, r2
 8009b38:	e7cc      	b.n	8009ad4 <_malloc_r+0x80>
 8009b3a:	230c      	movs	r3, #12
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f000 f99e 	bl	8009e80 <__malloc_unlock>
 8009b44:	e797      	b.n	8009a76 <_malloc_r+0x22>
 8009b46:	6025      	str	r5, [r4, #0]
 8009b48:	e7dc      	b.n	8009b04 <_malloc_r+0xb0>
 8009b4a:	605b      	str	r3, [r3, #4]
 8009b4c:	deff      	udf	#255	; 0xff
 8009b4e:	bf00      	nop
 8009b50:	200191d4 	.word	0x200191d4

08009b54 <_printf_common>:
 8009b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b58:	4616      	mov	r6, r2
 8009b5a:	4699      	mov	r9, r3
 8009b5c:	688a      	ldr	r2, [r1, #8]
 8009b5e:	690b      	ldr	r3, [r1, #16]
 8009b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	bfb8      	it	lt
 8009b68:	4613      	movlt	r3, r2
 8009b6a:	6033      	str	r3, [r6, #0]
 8009b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b70:	4607      	mov	r7, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	b10a      	cbz	r2, 8009b7a <_printf_common+0x26>
 8009b76:	3301      	adds	r3, #1
 8009b78:	6033      	str	r3, [r6, #0]
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	0699      	lsls	r1, r3, #26
 8009b7e:	bf42      	ittt	mi
 8009b80:	6833      	ldrmi	r3, [r6, #0]
 8009b82:	3302      	addmi	r3, #2
 8009b84:	6033      	strmi	r3, [r6, #0]
 8009b86:	6825      	ldr	r5, [r4, #0]
 8009b88:	f015 0506 	ands.w	r5, r5, #6
 8009b8c:	d106      	bne.n	8009b9c <_printf_common+0x48>
 8009b8e:	f104 0a19 	add.w	sl, r4, #25
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	6832      	ldr	r2, [r6, #0]
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dc26      	bgt.n	8009bea <_printf_common+0x96>
 8009b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ba0:	1e13      	subs	r3, r2, #0
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	bf18      	it	ne
 8009ba6:	2301      	movne	r3, #1
 8009ba8:	0692      	lsls	r2, r2, #26
 8009baa:	d42b      	bmi.n	8009c04 <_printf_common+0xb0>
 8009bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	47c0      	blx	r8
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d01e      	beq.n	8009bf8 <_printf_common+0xa4>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	6922      	ldr	r2, [r4, #16]
 8009bbe:	f003 0306 	and.w	r3, r3, #6
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	bf02      	ittt	eq
 8009bc6:	68e5      	ldreq	r5, [r4, #12]
 8009bc8:	6833      	ldreq	r3, [r6, #0]
 8009bca:	1aed      	subeq	r5, r5, r3
 8009bcc:	68a3      	ldr	r3, [r4, #8]
 8009bce:	bf0c      	ite	eq
 8009bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd4:	2500      	movne	r5, #0
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	bfc4      	itt	gt
 8009bda:	1a9b      	subgt	r3, r3, r2
 8009bdc:	18ed      	addgt	r5, r5, r3
 8009bde:	2600      	movs	r6, #0
 8009be0:	341a      	adds	r4, #26
 8009be2:	42b5      	cmp	r5, r6
 8009be4:	d11a      	bne.n	8009c1c <_printf_common+0xc8>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e008      	b.n	8009bfc <_printf_common+0xa8>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4652      	mov	r2, sl
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	47c0      	blx	r8
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d103      	bne.n	8009c00 <_printf_common+0xac>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c00:	3501      	adds	r5, #1
 8009c02:	e7c6      	b.n	8009b92 <_printf_common+0x3e>
 8009c04:	18e1      	adds	r1, r4, r3
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	2030      	movs	r0, #48	; 0x30
 8009c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c0e:	4422      	add	r2, r4
 8009c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c18:	3302      	adds	r3, #2
 8009c1a:	e7c7      	b.n	8009bac <_printf_common+0x58>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4622      	mov	r2, r4
 8009c20:	4649      	mov	r1, r9
 8009c22:	4638      	mov	r0, r7
 8009c24:	47c0      	blx	r8
 8009c26:	3001      	adds	r0, #1
 8009c28:	d0e6      	beq.n	8009bf8 <_printf_common+0xa4>
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	e7d9      	b.n	8009be2 <_printf_common+0x8e>
	...

08009c30 <_printf_i>:
 8009c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	7e0f      	ldrb	r7, [r1, #24]
 8009c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c38:	2f78      	cmp	r7, #120	; 0x78
 8009c3a:	4691      	mov	r9, r2
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	469a      	mov	sl, r3
 8009c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c46:	d807      	bhi.n	8009c58 <_printf_i+0x28>
 8009c48:	2f62      	cmp	r7, #98	; 0x62
 8009c4a:	d80a      	bhi.n	8009c62 <_printf_i+0x32>
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	f000 80d4 	beq.w	8009dfa <_printf_i+0x1ca>
 8009c52:	2f58      	cmp	r7, #88	; 0x58
 8009c54:	f000 80c0 	beq.w	8009dd8 <_printf_i+0x1a8>
 8009c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c60:	e03a      	b.n	8009cd8 <_printf_i+0xa8>
 8009c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c66:	2b15      	cmp	r3, #21
 8009c68:	d8f6      	bhi.n	8009c58 <_printf_i+0x28>
 8009c6a:	a101      	add	r1, pc, #4	; (adr r1, 8009c70 <_printf_i+0x40>)
 8009c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cdd 	.word	0x08009cdd
 8009c78:	08009c59 	.word	0x08009c59
 8009c7c:	08009c59 	.word	0x08009c59
 8009c80:	08009c59 	.word	0x08009c59
 8009c84:	08009c59 	.word	0x08009c59
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009c59 	.word	0x08009c59
 8009c90:	08009c59 	.word	0x08009c59
 8009c94:	08009c59 	.word	0x08009c59
 8009c98:	08009c59 	.word	0x08009c59
 8009c9c:	08009de1 	.word	0x08009de1
 8009ca0:	08009d09 	.word	0x08009d09
 8009ca4:	08009d9b 	.word	0x08009d9b
 8009ca8:	08009c59 	.word	0x08009c59
 8009cac:	08009c59 	.word	0x08009c59
 8009cb0:	08009e03 	.word	0x08009e03
 8009cb4:	08009c59 	.word	0x08009c59
 8009cb8:	08009d09 	.word	0x08009d09
 8009cbc:	08009c59 	.word	0x08009c59
 8009cc0:	08009c59 	.word	0x08009c59
 8009cc4:	08009da3 	.word	0x08009da3
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	1d1a      	adds	r2, r3, #4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	602a      	str	r2, [r5, #0]
 8009cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e09f      	b.n	8009e1c <_printf_i+0x1ec>
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	0607      	lsls	r7, r0, #24
 8009ce2:	f103 0104 	add.w	r1, r3, #4
 8009ce6:	6029      	str	r1, [r5, #0]
 8009ce8:	d501      	bpl.n	8009cee <_printf_i+0xbe>
 8009cea:	681e      	ldr	r6, [r3, #0]
 8009cec:	e003      	b.n	8009cf6 <_printf_i+0xc6>
 8009cee:	0646      	lsls	r6, r0, #25
 8009cf0:	d5fb      	bpl.n	8009cea <_printf_i+0xba>
 8009cf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009cf6:	2e00      	cmp	r6, #0
 8009cf8:	da03      	bge.n	8009d02 <_printf_i+0xd2>
 8009cfa:	232d      	movs	r3, #45	; 0x2d
 8009cfc:	4276      	negs	r6, r6
 8009cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d02:	485a      	ldr	r0, [pc, #360]	; (8009e6c <_printf_i+0x23c>)
 8009d04:	230a      	movs	r3, #10
 8009d06:	e012      	b.n	8009d2e <_printf_i+0xfe>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	1d19      	adds	r1, r3, #4
 8009d0e:	6029      	str	r1, [r5, #0]
 8009d10:	0605      	lsls	r5, r0, #24
 8009d12:	d501      	bpl.n	8009d18 <_printf_i+0xe8>
 8009d14:	681e      	ldr	r6, [r3, #0]
 8009d16:	e002      	b.n	8009d1e <_printf_i+0xee>
 8009d18:	0641      	lsls	r1, r0, #25
 8009d1a:	d5fb      	bpl.n	8009d14 <_printf_i+0xe4>
 8009d1c:	881e      	ldrh	r6, [r3, #0]
 8009d1e:	4853      	ldr	r0, [pc, #332]	; (8009e6c <_printf_i+0x23c>)
 8009d20:	2f6f      	cmp	r7, #111	; 0x6f
 8009d22:	bf0c      	ite	eq
 8009d24:	2308      	moveq	r3, #8
 8009d26:	230a      	movne	r3, #10
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d2e:	6865      	ldr	r5, [r4, #4]
 8009d30:	60a5      	str	r5, [r4, #8]
 8009d32:	2d00      	cmp	r5, #0
 8009d34:	bfa2      	ittt	ge
 8009d36:	6821      	ldrge	r1, [r4, #0]
 8009d38:	f021 0104 	bicge.w	r1, r1, #4
 8009d3c:	6021      	strge	r1, [r4, #0]
 8009d3e:	b90e      	cbnz	r6, 8009d44 <_printf_i+0x114>
 8009d40:	2d00      	cmp	r5, #0
 8009d42:	d04b      	beq.n	8009ddc <_printf_i+0x1ac>
 8009d44:	4615      	mov	r5, r2
 8009d46:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d4a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d4e:	5dc7      	ldrb	r7, [r0, r7]
 8009d50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d54:	4637      	mov	r7, r6
 8009d56:	42bb      	cmp	r3, r7
 8009d58:	460e      	mov	r6, r1
 8009d5a:	d9f4      	bls.n	8009d46 <_printf_i+0x116>
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	d10b      	bne.n	8009d78 <_printf_i+0x148>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	07de      	lsls	r6, r3, #31
 8009d64:	d508      	bpl.n	8009d78 <_printf_i+0x148>
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	6861      	ldr	r1, [r4, #4]
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	bfde      	ittt	le
 8009d6e:	2330      	movle	r3, #48	; 0x30
 8009d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d78:	1b52      	subs	r2, r2, r5
 8009d7a:	6122      	str	r2, [r4, #16]
 8009d7c:	f8cd a000 	str.w	sl, [sp]
 8009d80:	464b      	mov	r3, r9
 8009d82:	aa03      	add	r2, sp, #12
 8009d84:	4621      	mov	r1, r4
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7ff fee4 	bl	8009b54 <_printf_common>
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d14a      	bne.n	8009e26 <_printf_i+0x1f6>
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d94:	b004      	add	sp, #16
 8009d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	f043 0320 	orr.w	r3, r3, #32
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	4833      	ldr	r0, [pc, #204]	; (8009e70 <_printf_i+0x240>)
 8009da4:	2778      	movs	r7, #120	; 0x78
 8009da6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	6829      	ldr	r1, [r5, #0]
 8009dae:	061f      	lsls	r7, r3, #24
 8009db0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009db4:	d402      	bmi.n	8009dbc <_printf_i+0x18c>
 8009db6:	065f      	lsls	r7, r3, #25
 8009db8:	bf48      	it	mi
 8009dba:	b2b6      	uxthmi	r6, r6
 8009dbc:	07df      	lsls	r7, r3, #31
 8009dbe:	bf48      	it	mi
 8009dc0:	f043 0320 	orrmi.w	r3, r3, #32
 8009dc4:	6029      	str	r1, [r5, #0]
 8009dc6:	bf48      	it	mi
 8009dc8:	6023      	strmi	r3, [r4, #0]
 8009dca:	b91e      	cbnz	r6, 8009dd4 <_printf_i+0x1a4>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	f023 0320 	bic.w	r3, r3, #32
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	2310      	movs	r3, #16
 8009dd6:	e7a7      	b.n	8009d28 <_printf_i+0xf8>
 8009dd8:	4824      	ldr	r0, [pc, #144]	; (8009e6c <_printf_i+0x23c>)
 8009dda:	e7e4      	b.n	8009da6 <_printf_i+0x176>
 8009ddc:	4615      	mov	r5, r2
 8009dde:	e7bd      	b.n	8009d5c <_printf_i+0x12c>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	6826      	ldr	r6, [r4, #0]
 8009de4:	6961      	ldr	r1, [r4, #20]
 8009de6:	1d18      	adds	r0, r3, #4
 8009de8:	6028      	str	r0, [r5, #0]
 8009dea:	0635      	lsls	r5, r6, #24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	d501      	bpl.n	8009df4 <_printf_i+0x1c4>
 8009df0:	6019      	str	r1, [r3, #0]
 8009df2:	e002      	b.n	8009dfa <_printf_i+0x1ca>
 8009df4:	0670      	lsls	r0, r6, #25
 8009df6:	d5fb      	bpl.n	8009df0 <_printf_i+0x1c0>
 8009df8:	8019      	strh	r1, [r3, #0]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	6123      	str	r3, [r4, #16]
 8009dfe:	4615      	mov	r5, r2
 8009e00:	e7bc      	b.n	8009d7c <_printf_i+0x14c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	1d1a      	adds	r2, r3, #4
 8009e06:	602a      	str	r2, [r5, #0]
 8009e08:	681d      	ldr	r5, [r3, #0]
 8009e0a:	6862      	ldr	r2, [r4, #4]
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f7f6 fa06 	bl	8000220 <memchr>
 8009e14:	b108      	cbz	r0, 8009e1a <_printf_i+0x1ea>
 8009e16:	1b40      	subs	r0, r0, r5
 8009e18:	6060      	str	r0, [r4, #4]
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e24:	e7aa      	b.n	8009d7c <_printf_i+0x14c>
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4649      	mov	r1, r9
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	47d0      	blx	sl
 8009e30:	3001      	adds	r0, #1
 8009e32:	d0ad      	beq.n	8009d90 <_printf_i+0x160>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	079b      	lsls	r3, r3, #30
 8009e38:	d413      	bmi.n	8009e62 <_printf_i+0x232>
 8009e3a:	68e0      	ldr	r0, [r4, #12]
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	4298      	cmp	r0, r3
 8009e40:	bfb8      	it	lt
 8009e42:	4618      	movlt	r0, r3
 8009e44:	e7a6      	b.n	8009d94 <_printf_i+0x164>
 8009e46:	2301      	movs	r3, #1
 8009e48:	4632      	mov	r2, r6
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	47d0      	blx	sl
 8009e50:	3001      	adds	r0, #1
 8009e52:	d09d      	beq.n	8009d90 <_printf_i+0x160>
 8009e54:	3501      	adds	r5, #1
 8009e56:	68e3      	ldr	r3, [r4, #12]
 8009e58:	9903      	ldr	r1, [sp, #12]
 8009e5a:	1a5b      	subs	r3, r3, r1
 8009e5c:	42ab      	cmp	r3, r5
 8009e5e:	dcf2      	bgt.n	8009e46 <_printf_i+0x216>
 8009e60:	e7eb      	b.n	8009e3a <_printf_i+0x20a>
 8009e62:	2500      	movs	r5, #0
 8009e64:	f104 0619 	add.w	r6, r4, #25
 8009e68:	e7f5      	b.n	8009e56 <_printf_i+0x226>
 8009e6a:	bf00      	nop
 8009e6c:	0800a2d9 	.word	0x0800a2d9
 8009e70:	0800a2ea 	.word	0x0800a2ea

08009e74 <__malloc_lock>:
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <__malloc_lock+0x8>)
 8009e76:	f7ff bc73 	b.w	8009760 <__retarget_lock_acquire_recursive>
 8009e7a:	bf00      	nop
 8009e7c:	200191d0 	.word	0x200191d0

08009e80 <__malloc_unlock>:
 8009e80:	4801      	ldr	r0, [pc, #4]	; (8009e88 <__malloc_unlock+0x8>)
 8009e82:	f7ff bc6e 	b.w	8009762 <__retarget_lock_release_recursive>
 8009e86:	bf00      	nop
 8009e88:	200191d0 	.word	0x200191d0

08009e8c <_realloc_r>:
 8009e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e90:	4680      	mov	r8, r0
 8009e92:	4614      	mov	r4, r2
 8009e94:	460e      	mov	r6, r1
 8009e96:	b921      	cbnz	r1, 8009ea2 <_realloc_r+0x16>
 8009e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	f7ff bdd9 	b.w	8009a54 <_malloc_r>
 8009ea2:	b92a      	cbnz	r2, 8009eb0 <_realloc_r+0x24>
 8009ea4:	f000 f85a 	bl	8009f5c <_free_r>
 8009ea8:	4625      	mov	r5, r4
 8009eaa:	4628      	mov	r0, r5
 8009eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb0:	f000 f8a0 	bl	8009ff4 <_malloc_usable_size_r>
 8009eb4:	4284      	cmp	r4, r0
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	d802      	bhi.n	8009ec0 <_realloc_r+0x34>
 8009eba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ebe:	d812      	bhi.n	8009ee6 <_realloc_r+0x5a>
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	f7ff fdc6 	bl	8009a54 <_malloc_r>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d0ed      	beq.n	8009eaa <_realloc_r+0x1e>
 8009ece:	42bc      	cmp	r4, r7
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	bf28      	it	cs
 8009ed6:	463a      	movcs	r2, r7
 8009ed8:	f000 f832 	bl	8009f40 <memcpy>
 8009edc:	4631      	mov	r1, r6
 8009ede:	4640      	mov	r0, r8
 8009ee0:	f000 f83c 	bl	8009f5c <_free_r>
 8009ee4:	e7e1      	b.n	8009eaa <_realloc_r+0x1e>
 8009ee6:	4635      	mov	r5, r6
 8009ee8:	e7df      	b.n	8009eaa <_realloc_r+0x1e>

08009eea <memmove>:
 8009eea:	4288      	cmp	r0, r1
 8009eec:	b510      	push	{r4, lr}
 8009eee:	eb01 0402 	add.w	r4, r1, r2
 8009ef2:	d902      	bls.n	8009efa <memmove+0x10>
 8009ef4:	4284      	cmp	r4, r0
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	d807      	bhi.n	8009f0a <memmove+0x20>
 8009efa:	1e43      	subs	r3, r0, #1
 8009efc:	42a1      	cmp	r1, r4
 8009efe:	d008      	beq.n	8009f12 <memmove+0x28>
 8009f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f08:	e7f8      	b.n	8009efc <memmove+0x12>
 8009f0a:	4402      	add	r2, r0
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	428a      	cmp	r2, r1
 8009f10:	d100      	bne.n	8009f14 <memmove+0x2a>
 8009f12:	bd10      	pop	{r4, pc}
 8009f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f1c:	e7f7      	b.n	8009f0e <memmove+0x24>
	...

08009f20 <_sbrk_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d06      	ldr	r5, [pc, #24]	; (8009f3c <_sbrk_r+0x1c>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	602b      	str	r3, [r5, #0]
 8009f2c:	f7f7 ff4c 	bl	8001dc8 <_sbrk>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_sbrk_r+0x1a>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_sbrk_r+0x1a>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	200191dc 	.word	0x200191dc

08009f40 <memcpy>:
 8009f40:	440a      	add	r2, r1
 8009f42:	4291      	cmp	r1, r2
 8009f44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f48:	d100      	bne.n	8009f4c <memcpy+0xc>
 8009f4a:	4770      	bx	lr
 8009f4c:	b510      	push	{r4, lr}
 8009f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f56:	4291      	cmp	r1, r2
 8009f58:	d1f9      	bne.n	8009f4e <memcpy+0xe>
 8009f5a:	bd10      	pop	{r4, pc}

08009f5c <_free_r>:
 8009f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f5e:	2900      	cmp	r1, #0
 8009f60:	d044      	beq.n	8009fec <_free_r+0x90>
 8009f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f66:	9001      	str	r0, [sp, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f6e:	bfb8      	it	lt
 8009f70:	18e4      	addlt	r4, r4, r3
 8009f72:	f7ff ff7f 	bl	8009e74 <__malloc_lock>
 8009f76:	4a1e      	ldr	r2, [pc, #120]	; (8009ff0 <_free_r+0x94>)
 8009f78:	9801      	ldr	r0, [sp, #4]
 8009f7a:	6813      	ldr	r3, [r2, #0]
 8009f7c:	b933      	cbnz	r3, 8009f8c <_free_r+0x30>
 8009f7e:	6063      	str	r3, [r4, #4]
 8009f80:	6014      	str	r4, [r2, #0]
 8009f82:	b003      	add	sp, #12
 8009f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f88:	f7ff bf7a 	b.w	8009e80 <__malloc_unlock>
 8009f8c:	42a3      	cmp	r3, r4
 8009f8e:	d908      	bls.n	8009fa2 <_free_r+0x46>
 8009f90:	6825      	ldr	r5, [r4, #0]
 8009f92:	1961      	adds	r1, r4, r5
 8009f94:	428b      	cmp	r3, r1
 8009f96:	bf01      	itttt	eq
 8009f98:	6819      	ldreq	r1, [r3, #0]
 8009f9a:	685b      	ldreq	r3, [r3, #4]
 8009f9c:	1949      	addeq	r1, r1, r5
 8009f9e:	6021      	streq	r1, [r4, #0]
 8009fa0:	e7ed      	b.n	8009f7e <_free_r+0x22>
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	b10b      	cbz	r3, 8009fac <_free_r+0x50>
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	d9fa      	bls.n	8009fa2 <_free_r+0x46>
 8009fac:	6811      	ldr	r1, [r2, #0]
 8009fae:	1855      	adds	r5, r2, r1
 8009fb0:	42a5      	cmp	r5, r4
 8009fb2:	d10b      	bne.n	8009fcc <_free_r+0x70>
 8009fb4:	6824      	ldr	r4, [r4, #0]
 8009fb6:	4421      	add	r1, r4
 8009fb8:	1854      	adds	r4, r2, r1
 8009fba:	42a3      	cmp	r3, r4
 8009fbc:	6011      	str	r1, [r2, #0]
 8009fbe:	d1e0      	bne.n	8009f82 <_free_r+0x26>
 8009fc0:	681c      	ldr	r4, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	6053      	str	r3, [r2, #4]
 8009fc6:	440c      	add	r4, r1
 8009fc8:	6014      	str	r4, [r2, #0]
 8009fca:	e7da      	b.n	8009f82 <_free_r+0x26>
 8009fcc:	d902      	bls.n	8009fd4 <_free_r+0x78>
 8009fce:	230c      	movs	r3, #12
 8009fd0:	6003      	str	r3, [r0, #0]
 8009fd2:	e7d6      	b.n	8009f82 <_free_r+0x26>
 8009fd4:	6825      	ldr	r5, [r4, #0]
 8009fd6:	1961      	adds	r1, r4, r5
 8009fd8:	428b      	cmp	r3, r1
 8009fda:	bf04      	itt	eq
 8009fdc:	6819      	ldreq	r1, [r3, #0]
 8009fde:	685b      	ldreq	r3, [r3, #4]
 8009fe0:	6063      	str	r3, [r4, #4]
 8009fe2:	bf04      	itt	eq
 8009fe4:	1949      	addeq	r1, r1, r5
 8009fe6:	6021      	streq	r1, [r4, #0]
 8009fe8:	6054      	str	r4, [r2, #4]
 8009fea:	e7ca      	b.n	8009f82 <_free_r+0x26>
 8009fec:	b003      	add	sp, #12
 8009fee:	bd30      	pop	{r4, r5, pc}
 8009ff0:	200191d4 	.word	0x200191d4

08009ff4 <_malloc_usable_size_r>:
 8009ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ff8:	1f18      	subs	r0, r3, #4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	bfbc      	itt	lt
 8009ffe:	580b      	ldrlt	r3, [r1, r0]
 800a000:	18c0      	addlt	r0, r0, r3
 800a002:	4770      	bx	lr

0800a004 <_init>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	bf00      	nop
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr

0800a010 <_fini>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr
