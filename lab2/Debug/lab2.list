
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000494c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b78  08004b78  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b80  08004b80  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  2000005c  08004be4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08004be4  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb9c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002375  00000000  00000000  0002ec6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00030fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000915  00000000  00000000  00031bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235e2  00000000  00000000  000324cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4fd  00000000  00000000  00055aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8cb1  00000000  00000000  00064fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003644  00000000  00000000  0013dc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001412a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b04 	.word	0x08004b04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004b04 	.word	0x08004b04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fe0e 	bl	80041ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a28      	ldr	r2, [pc, #160]	; (800068c <SystemClock_Config+0xd0>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xd4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xd4>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fc55 	bl	8002ef4 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 fa00 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fdca 	bl	800220c <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800067e:	f000 f9e9 	bl	8000a54 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_ADC3_Init+0x98>)
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <MX_ADC3_Init+0x9c>)
 80006aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ADC3_Init+0x98>)
 80006ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_ADC3_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ADC3_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_ADC3_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_ADC3_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_ADC3_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ADC3_Init+0x98>)
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MX_ADC3_Init+0xa0>)
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_ADC3_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_ADC3_Init+0x98>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ADC3_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_ADC3_Init+0x98>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_ADC3_Init+0x98>)
 80006f6:	f000 fc7f 	bl	8000ff8 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 f9a8 	bl	8000a54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000704:	230f      	movs	r3, #15
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_ADC3_Init+0x98>)
 8000716:	f000 fe1d 	bl	8001354 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000720:	f000 f998 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000078 	.word	0x20000078
 8000730:	40012200 	.word	0x40012200
 8000734:	0f000001 	.word	0x0f000001

08000738 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_DAC_Init+0x4c>)
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MX_DAC_Init+0x50>)
 800074a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_DAC_Init+0x4c>)
 800074e:	f001 f940 	bl	80019d2 <HAL_DAC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000758:	f000 f97c 	bl	8000a54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_DAC_Init+0x4c>)
 800076c:	f001 f9ca 	bl	8001b04 <HAL_DAC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000776:	f000 f96d 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000c0 	.word	0x200000c0
 8000788:	40007400 	.word	0x40007400

0800078c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART3_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 8000798:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800079c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007c4:	f002 fe34 	bl	8003430 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f941 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000d4 	.word	0x200000d4
 80007dc:	40004800 	.word	0x40004800

080007e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2206      	movs	r2, #6
 80007f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2202      	movs	r2, #2
 8000802:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2201      	movs	r2, #1
 8000808:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2201      	movs	r2, #1
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	f001 fba9 	bl	8001f7a <HAL_PCD_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f911 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000118 	.word	0x20000118

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	4b70      	ldr	r3, [pc, #448]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a6f      	ldr	r2, [pc, #444]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b6d      	ldr	r3, [pc, #436]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	4b69      	ldr	r3, [pc, #420]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a68      	ldr	r2, [pc, #416]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b66      	ldr	r3, [pc, #408]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b62      	ldr	r3, [pc, #392]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a61      	ldr	r2, [pc, #388]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b5f      	ldr	r3, [pc, #380]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b5b      	ldr	r3, [pc, #364]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a5a      	ldr	r2, [pc, #360]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b58      	ldr	r3, [pc, #352]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b54      	ldr	r3, [pc, #336]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a53      	ldr	r2, [pc, #332]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b51      	ldr	r3, [pc, #324]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a4c      	ldr	r2, [pc, #304]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a45      	ldr	r2, [pc, #276]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b43      	ldr	r3, [pc, #268]	; (8000a18 <MX_GPIO_Init+0x1dc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f244 0181 	movw	r1, #16513	; 0x4081
 800091c:	483f      	ldr	r0, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x1e0>)
 800091e:	f001 fad5 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	483e      	ldr	r0, [pc, #248]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000928:	f001 fad0 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000932:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x1e8>)
 8000934:	f001 faca 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4835      	ldr	r0, [pc, #212]	; (8000a24 <MX_GPIO_Init+0x1e8>)
 8000950:	f001 f928 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000954:	f244 0381 	movw	r3, #16513	; 0x4081
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	482b      	ldr	r0, [pc, #172]	; (8000a1c <MX_GPIO_Init+0x1e0>)
 800096e:	f001 f919 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 800098a:	f001 f90b 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	481f      	ldr	r0, [pc, #124]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80009a2:	f001 f8ff 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 80009a6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <MX_GPIO_Init+0x1e8>)
 80009c0:	f001 f8f0 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 80009c4:	23f0      	movs	r3, #240	; 0xf0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ce:	2302      	movs	r3, #2
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <MX_GPIO_Init+0x1ec>)
 80009da:	f001 f8e3 	bl	8001ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 ffbf 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009e8:	200a      	movs	r0, #10
 80009ea:	f000 ffd8 	bl	800199e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2017      	movs	r0, #23
 80009f4:	f000 ffb7 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009f8:	2017      	movs	r0, #23
 80009fa:	f000 ffd0 	bl	800199e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2028      	movs	r0, #40	; 0x28
 8000a04:	f000 ffaf 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a08:	2028      	movs	r0, #40	; 0x28
 8000a0a:	f000 ffc8 	bl	800199e <HAL_NVIC_EnableIRQ>

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40021800 	.word	0x40021800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <print_msg>:

/* USER CODE BEGIN 4 */
void print_msg(char * msg) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fbeb 	bl	8000210 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <print_msg+0x24>)
 8000a44:	f002 fd41 	bl	80034ca <HAL_UART_Transmit>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000d4 	.word	0x200000d4

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <main>:
#include <stdio.h>
#include <math.h>


int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09a      	sub	sp, #104	; 0x68
 8000a64:	af00      	add	r7, sp, #0
  /* Reset of all peripherals. */
  HAL_Init();
 8000a66:	f000 fa31 	bl	8000ecc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f7ff fda7 	bl	80005bc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f7ff fee5 	bl	800083c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000a72:	f7ff fe0f 	bl	8000694 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000a76:	f7ff fe89 	bl	800078c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a7a:	f7ff feb1 	bl	80007e0 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000a7e:	f7ff fe5b 	bl	8000738 <MX_DAC_Init>

  uint16_t adc_res, mask = 0xff00;
 8000a82:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  char message[100];
  
  //  ADC example
  HAL_ADC_Start(&hadc3);
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <main+0x88>)
 8000a8c:	f000 faf8 	bl	8001080 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc3, 100);
 8000a90:	2164      	movs	r1, #100	; 0x64
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <main+0x88>)
 8000a94:	f000 fbc6 	bl	8001224 <HAL_ADC_PollForConversion>
  adc_res = HAL_ADC_GetValue(&hadc3);
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <main+0x88>)
 8000a9a:	f000 fc4e 	bl	800133a <HAL_ADC_GetValue>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  sprintf(message, "adc_res=%d\r\n", adc_res);
 8000aa4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4910      	ldr	r1, [pc, #64]	; (8000aec <main+0x8c>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 fb7d 	bl	80041ac <siprintf>
  print_msg(message);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffb9 	bl	8000a2c <print_msg>
  
  // DAC example
  HAL_DAC_Init(&hdac);
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <main+0x90>)
 8000abc:	f000 ff89 	bl	80019d2 <HAL_DAC_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <main+0x90>)
 8000ac4:	f000 ffa7 	bl	8001a16 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 255);
 8000ac8:	23ff      	movs	r3, #255	; 0xff
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <main+0x90>)
 8000ad0:	f000 fff3 	bl	8001aba <HAL_DAC_SetValue>

  while (1)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <main+0x94>)
 8000ad8:	f001 fa11 	bl	8001efe <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae0:	f000 fa66 	bl	8000fb0 <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ae4:	e7f6      	b.n	8000ad4 <main+0x74>
 8000ae6:	bf00      	nop
 8000ae8:	20000078 	.word	0x20000078
 8000aec:	08004b1c 	.word	0x08004b1c
 8000af0:	200000c0 	.word	0x200000c0
 8000af4:	40020400 	.word	0x40020400

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_ADC_MspInit+0x7c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d127      	bne.n	8000bba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b90:	f043 0320 	orr.w	r3, r3, #32
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0320 	and.w	r3, r3, #32
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_ADC_MspInit+0x84>)
 8000bb6:	f000 fff5 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012200 	.word	0x40012200
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40021400 	.word	0x40021400

08000bd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <HAL_DAC_MspInit+0x7c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d127      	bne.n	8000c42 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_DAC_MspInit+0x80>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <HAL_DAC_MspInit+0x80>)
 8000bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_DAC_MspInit+0x80>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_DAC_MspInit+0x80>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_DAC_MspInit+0x80>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_DAC_MspInit+0x80>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <HAL_DAC_MspInit+0x84>)
 8000c3e:	f000 ffb1 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40007400 	.word	0x40007400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12c      	bne.n	8000cd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000cd0:	f000 ff68 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020c00 	.word	0x40020c00

08000ce8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0a0      	sub	sp, #128	; 0x80
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	225c      	movs	r2, #92	; 0x5c
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 fa6f 	bl	80041ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d16:	d14e      	bne.n	8000db6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fb8a 	bl	8002440 <HAL_RCCEx_PeriphCLKConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000d32:	f7ff fe8f 	bl	8000a54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d52:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d64:	230a      	movs	r3, #10
 8000d66:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <HAL_PCD_MspInit+0xdc>)
 8000d70:	f000 ff18 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d78:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d86:	4619      	mov	r1, r3
 8000d88:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <HAL_PCD_MspInit+0xdc>)
 8000d8a:	f000 ff0b 	bl	8001ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6353      	str	r3, [r2, #52]	; 0x34
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_PCD_MspInit+0xd8>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3780      	adds	r7, #128	; 0x80
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8ac 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8000e20:	2010      	movs	r0, #16
 8000e22:	f001 f887 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 8000e2e:	2020      	movs	r0, #32
 8000e30:	f001 f880 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 8000e34:	2040      	movs	r0, #64	; 0x40
 8000e36:	f001 f87d 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	f001 f87a 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e4c:	f001 f872 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7e:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e94:	4c0b      	ldr	r4, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea2:	f7ff ffd7 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f003 f9a9 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fdd9 	bl	8000a60 <main>
  bx  lr    
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ebc:	08004b88 	.word	0x08004b88
  ldr r2, =_sbss
 8000ec0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ec4:	20000774 	.word	0x20000774

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 fd2b 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fdfa 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fd43 	bl	80019ba <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	f000 fd0b 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000624 	.word	0x20000624

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000624 	.word	0x20000624

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e033      	b.n	8001076 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fd96 	bl	8000b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d118      	bne.n	8001068 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800103e:	f023 0302 	bic.w	r3, r3, #2
 8001042:	f043 0202 	orr.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fab4 	bl	80015b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
 8001066:	e001      	b.n	800106c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_ADC_Start+0x1a>
 8001096:	2302      	movs	r3, #2
 8001098:	e0b2      	b.n	8001200 <HAL_ADC_Start+0x180>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d018      	beq.n	80010e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <HAL_ADC_Start+0x18c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a52      	ldr	r2, [pc, #328]	; (8001210 <HAL_ADC_Start+0x190>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9a      	lsrs	r2, r3, #18
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010d4:	e002      	b.n	80010dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	3b01      	subs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f9      	bne.n	80010d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d17a      	bne.n	80011e6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112e:	d106      	bne.n	800113e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f023 0206 	bic.w	r2, r3, #6
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_ADC_Start+0x194>)
 800114e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001158:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	2b00      	cmp	r3, #0
 8001164:	d12a      	bne.n	80011bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <HAL_ADC_Start+0x198>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d015      	beq.n	800119c <HAL_ADC_Start+0x11c>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a29      	ldr	r2, [pc, #164]	; (800121c <HAL_ADC_Start+0x19c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d105      	bne.n	8001186 <HAL_ADC_Start+0x106>
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_ADC_Start+0x194>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00a      	beq.n	800119c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a25      	ldr	r2, [pc, #148]	; (8001220 <HAL_ADC_Start+0x1a0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d136      	bne.n	80011fe <HAL_ADC_Start+0x17e>
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_ADC_Start+0x194>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	d130      	bne.n	80011fe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d129      	bne.n	80011fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e020      	b.n	80011fe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_ADC_Start+0x198>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d11b      	bne.n	80011fe <HAL_ADC_Start+0x17e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d114      	bne.n	80011fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e00b      	b.n	80011fe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f043 0210 	orr.w	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000000 	.word	0x20000000
 8001210:	431bde83 	.word	0x431bde83
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	40012100 	.word	0x40012100
 8001220:	40012200 	.word	0x40012200

08001224 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d113      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d10b      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f043 0220 	orr.w	r2, r3, #32
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e063      	b.n	8001332 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800126a:	f7ff fe95 	bl	8000f98 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001270:	e021      	b.n	80012b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d01d      	beq.n	80012b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
 8001280:	f7ff fe8a 	bl	8000f98 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d212      	bcs.n	80012b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b02      	cmp	r3, #2
 800129c:	d00b      	beq.n	80012b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f043 0204 	orr.w	r2, r3, #4
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e03d      	b.n	8001332 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d1d6      	bne.n	8001272 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f06f 0212 	mvn.w	r2, #18
 80012cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d123      	bne.n	8001330 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d11f      	bne.n	8001330 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001308:	2b00      	cmp	r3, #0
 800130a:	d111      	bne.n	8001330 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1c>
 800136c:	2302      	movs	r3, #2
 800136e:	e113      	b.n	8001598 <HAL_ADC_ConfigChannel+0x244>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b09      	cmp	r3, #9
 800137e:	d925      	bls.n	80013cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68d9      	ldr	r1, [r3, #12]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	3b1e      	subs	r3, #30
 8001396:	2207      	movs	r2, #7
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43da      	mvns	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	400a      	ands	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68d9      	ldr	r1, [r3, #12]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	4603      	mov	r3, r0
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4403      	add	r3, r0
 80013be:	3b1e      	subs	r3, #30
 80013c0:	409a      	lsls	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	e022      	b.n	8001412 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6919      	ldr	r1, [r3, #16]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	2207      	movs	r2, #7
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6919      	ldr	r1, [r3, #16]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	4603      	mov	r3, r0
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4403      	add	r3, r0
 8001408:	409a      	lsls	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b06      	cmp	r3, #6
 8001418:	d824      	bhi.n	8001464 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3b05      	subs	r3, #5
 800142c:	221f      	movs	r2, #31
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	400a      	ands	r2, r1
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	3b05      	subs	r3, #5
 8001456:	fa00 f203 	lsl.w	r2, r0, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
 8001462:	e04c      	b.n	80014fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d824      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	3b23      	subs	r3, #35	; 0x23
 800147e:	221f      	movs	r2, #31
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43da      	mvns	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	400a      	ands	r2, r1
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b23      	subs	r3, #35	; 0x23
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
 80014b4:	e023      	b.n	80014fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b41      	subs	r3, #65	; 0x41
 80014c8:	221f      	movs	r2, #31
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	400a      	ands	r2, r1
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b41      	subs	r3, #65	; 0x41
 80014f2:	fa00 f203 	lsl.w	r2, r0, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_ADC_ConfigChannel+0x250>)
 8001500:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <HAL_ADC_ConfigChannel+0x254>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d10f      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1d8>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b12      	cmp	r3, #18
 8001512:	d10b      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_ADC_ConfigChannel+0x254>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d12b      	bne.n	800158e <HAL_ADC_ConfigChannel+0x23a>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <HAL_ADC_ConfigChannel+0x258>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d003      	beq.n	8001548 <HAL_ADC_ConfigChannel+0x1f4>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b11      	cmp	r3, #17
 8001546:	d122      	bne.n	800158e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_ADC_ConfigChannel+0x258>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d111      	bne.n	800158e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_ADC_ConfigChannel+0x25c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_ADC_ConfigChannel+0x260>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9a      	lsrs	r2, r3, #18
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001580:	e002      	b.n	8001588 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3b01      	subs	r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f9      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40012300 	.word	0x40012300
 80015a8:	40012000 	.word	0x40012000
 80015ac:	10000012 	.word	0x10000012
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c0:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <ADC_Init+0x1f0>)
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	021a      	lsls	r2, r3, #8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	4a58      	ldr	r2, [pc, #352]	; (80017ac <ADC_Init+0x1f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d022      	beq.n	8001696 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800165e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6899      	ldr	r1, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e00f      	b.n	80016b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0202 	bic.w	r2, r2, #2
 80016c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e1b      	ldrb	r3, [r3, #24]
 80016d0:	005a      	lsls	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01b      	beq.n	800171c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001702:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6859      	ldr	r1, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	3b01      	subs	r3, #1
 8001710:	035a      	lsls	r2, r3, #13
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	e007      	b.n	800172c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	3b01      	subs	r3, #1
 8001748:	051a      	lsls	r2, r3, #20
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800176e:	025a      	lsls	r2, r3, #9
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	029a      	lsls	r2, r3, #10
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40012300 	.word	0x40012300
 80017ac:	0f000001 	.word	0x0f000001

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e014      	b.n	8001a0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f8eb 	bl	8000bd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2202      	movs	r2, #2
 80019fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	795b      	ldrb	r3, [r3, #5]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_DAC_Start+0x16>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e040      	b.n	8001aae <HAL_DAC_Start+0x98>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	2201      	movs	r2, #1
 8001a46:	409a      	lsls	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001a60:	2b3c      	cmp	r3, #60	; 0x3c
 8001a62:	d11d      	bne.n	8001aa0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	e014      	b.n	8001aa0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	213c      	movs	r1, #60	; 0x3c
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0202 	orr.w	r2, r2, #2
 8001a9e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b087      	sub	sp, #28
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	3308      	adds	r3, #8
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e004      	b.n	8001aee <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3314      	adds	r3, #20
 8001aec:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	461a      	mov	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	795b      	ldrb	r3, [r3, #5]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_DAC_ConfigChannel+0x18>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e03c      	b.n	8001b96 <HAL_DAC_ConfigChannel+0x92>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2202      	movs	r2, #2
 8001b26:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4013      	ands	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	22c0      	movs	r2, #192	; 0xc0
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e165      	b.n	8001e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8154 	bne.w	8001e86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d005      	beq.n	8001bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d130      	bne.n	8001c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 0201 	and.w	r2, r3, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d017      	beq.n	8001c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80ae 	beq.w	8001e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a5c      	ldr	r2, [pc, #368]	; (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a58      	ldr	r2, [pc, #352]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4f      	ldr	r2, [pc, #316]	; (8001eac <HAL_GPIO_Init+0x308>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x21a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4e      	ldr	r2, [pc, #312]	; (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x216>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4d      	ldr	r2, [pc, #308]	; (8001eb4 <HAL_GPIO_Init+0x310>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x212>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <HAL_GPIO_Init+0x314>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x20e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <HAL_GPIO_Init+0x318>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x20a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_GPIO_Init+0x31c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x206>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a49      	ldr	r2, [pc, #292]	; (8001ec4 <HAL_GPIO_Init+0x320>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x202>
 8001da2:	2306      	movs	r3, #6
 8001da4:	e00c      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e00a      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001daa:	2305      	movs	r3, #5
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001dae:	2304      	movs	r3, #4
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e32:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f ae96 	bls.w	8001bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40021800 	.word	0x40021800
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f10:	887a      	ldrh	r2, [r7, #2]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	400b      	ands	r3, r1
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f806 	bl	8001f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7c:	b08f      	sub	sp, #60	; 0x3c
 8001f7e:	af0a      	add	r7, sp, #40	; 0x28
 8001f80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e116      	b.n	80021ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fe9e 	bl	8000ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2203      	movs	r2, #3
 8001fb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 fe53 	bl	8003c76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	687e      	ldr	r6, [r7, #4]
 8001fd8:	466d      	mov	r5, sp
 8001fda:	f106 0410 	add.w	r4, r6, #16
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fee:	1d33      	adds	r3, r6, #4
 8001ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	f001 fdde 	bl	8003bb4 <USB_CoreInit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0d7      	b.n	80021ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fe41 	bl	8003c98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	e04a      	b.n	80020b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	333d      	adds	r3, #61	; 0x3d
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	333c      	adds	r3, #60	; 0x3c
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	b298      	uxth	r0, r3
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3344      	adds	r3, #68	; 0x44
 8002058:	4602      	mov	r2, r0
 800205a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3340      	adds	r3, #64	; 0x40
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3348      	adds	r3, #72	; 0x48
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	334c      	adds	r3, #76	; 0x4c
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3354      	adds	r3, #84	; 0x54
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	3301      	adds	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3af      	bcc.n	800201c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e044      	b.n	800214c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3301      	adds	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d3b5      	bcc.n	80020c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	687e      	ldr	r6, [r7, #4]
 800215e:	466d      	mov	r5, sp
 8002160:	f106 0410 	add.w	r4, r6, #16
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002170:	e885 0003 	stmia.w	r5, {r0, r1}
 8002174:	1d33      	adds	r3, r6, #4
 8002176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f001 fdd9 	bl	8003d30 <USB_DevInit>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e014      	b.n	80021ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d102      	bne.n	80021ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f80a 	bl	80021c2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 ff97 	bl	80040e6 <USB_DevDisconnect>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021c2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	f043 0303 	orr.w	r3, r3, #3
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0cc      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d90c      	bls.n	8002248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b8      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	494d      	ldr	r1, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d044      	beq.n	800232c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d119      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e067      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4934      	ldr	r1, [pc, #208]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fe4c 	bl	8000f98 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	e00a      	b.n	800231a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002304:	f7fe fe48 	bl	8000f98 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e04f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 020c 	and.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d1eb      	bne.n	8002304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d20c      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e032      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002392:	f000 fb7f 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490a      	ldr	r1, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fdac 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023c00 	.word	0x40023c00
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08004b2c 	.word	0x08004b2c
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_RCC_GetHCLKFreq+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023f4:	f7ff fff0 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0a9b      	lsrs	r3, r3, #10
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4903      	ldr	r1, [pc, #12]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	08004b3c 	.word	0x08004b3c

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800241c:	f7ff ffdc 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0b5b      	lsrs	r3, r3, #13
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	08004b3c 	.word	0x08004b3c

08002440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	; 0x30
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d010      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002478:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800247a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800247e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	496c      	ldr	r1, [pc, #432]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002496:	2301      	movs	r3, #1
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d010      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80024a6:	4b64      	ldr	r3, [pc, #400]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ac:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	4960      	ldr	r1, [pc, #384]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024c4:	2301      	movs	r3, #1
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d017      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d4:	4b58      	ldr	r3, [pc, #352]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4955      	ldr	r1, [pc, #340]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024f2:	d101      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80024f4:	2301      	movs	r3, #1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002500:	2301      	movs	r3, #1
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d017      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002510:	4b49      	ldr	r3, [pc, #292]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	4946      	ldr	r1, [pc, #280]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252e:	d101      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002530:	2301      	movs	r3, #1
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800253c:	2301      	movs	r3, #1
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 808a 	beq.w	8002662 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b39      	ldr	r3, [pc, #228]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a38      	ldr	r2, [pc, #224]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800256a:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a33      	ldr	r2, [pc, #204]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002576:	f7fe fd0f 	bl	8000f98 <HAL_GetTick>
 800257a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe fd0b 	bl	8000f98 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e278      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800259c:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d02f      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d028      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025c4:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d114      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fcd9 	bl	8000f98 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fcd5 	bl	8000f98 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e240      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002618:	d114      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800262a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262e:	4902      	ldr	r1, [pc, #8]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
 8002634:	e00c      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40007000 	.word	0x40007000
 8002640:	42470e40 	.word	0x42470e40
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a49      	ldr	r2, [pc, #292]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800264a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	4944      	ldr	r1, [pc, #272]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800265e:	4313      	orrs	r3, r2
 8002660:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002676:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4937      	ldr	r1, [pc, #220]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ac:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	492e      	ldr	r1, [pc, #184]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d011      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	4926      	ldr	r1, [pc, #152]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e6:	d101      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	491a      	ldr	r1, [pc, #104]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	2b00      	cmp	r3, #0
 8002718:	d011      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800271c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002720:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002728:	4911      	ldr	r1, [pc, #68]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002738:	d101      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800273a:	2301      	movs	r3, #1
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d005      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800274c:	f040 80ff 	bne.w	800294e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002756:	f7fe fc1f 	bl	8000f98 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800275c:	e00e      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800275e:	f7fe fc1b 	bl	8000f98 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d907      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e188      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002770:	40023800 	.word	0x40023800
 8002774:	424711e0 	.word	0x424711e0
 8002778:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800277c:	4b7e      	ldr	r3, [pc, #504]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ea      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d028      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d124      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027b0:	4b71      	ldr	r3, [pc, #452]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	3301      	adds	r3, #1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027c2:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c8:	0e1b      	lsrs	r3, r3, #24
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	431a      	orrs	r2, r3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	071b      	lsls	r3, r3, #28
 80027f2:	4961      	ldr	r1, [pc, #388]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002818:	2b00      	cmp	r3, #0
 800281a:	d035      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002824:	d130      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002826:	4b54      	ldr	r3, [pc, #336]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283e:	0f1b      	lsrs	r3, r3, #28
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	019b      	lsls	r3, r3, #6
 8002850:	431a      	orrs	r2, r3
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	071b      	lsls	r3, r3, #28
 8002868:	4943      	ldr	r1, [pc, #268]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002876:	f023 021f 	bic.w	r2, r3, #31
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	3b01      	subs	r3, #1
 8002880:	493d      	ldr	r1, [pc, #244]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d029      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800289c:	d124      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800289e:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028b0:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b6:	0f1b      	lsrs	r3, r3, #28
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	3b01      	subs	r3, #1
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	431a      	orrs	r2, r3
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	431a      	orrs	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	071b      	lsls	r3, r3, #28
 80028e0:	4925      	ldr	r1, [pc, #148]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	019b      	lsls	r3, r3, #6
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	071b      	lsls	r3, r3, #28
 800291a:	4917      	ldr	r1, [pc, #92]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002928:	f7fe fb36 	bl	8000f98 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002930:	f7fe fb32 	bl	8000f98 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e09f      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	2b01      	cmp	r3, #1
 8002952:	f040 8095 	bne.w	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800295c:	f7fe fb1c 	bl	8000f98 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002962:	e00f      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002964:	f7fe fb18 	bl	8000f98 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d908      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e085      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	42470068 	.word	0x42470068
 8002980:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002990:	d0e8      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d02b      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d127      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	3301      	adds	r3, #1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	431a      	orrs	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	3b01      	subs	r3, #1
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	4928      	ldr	r1, [pc, #160]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	3b01      	subs	r3, #1
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	4922      	ldr	r1, [pc, #136]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01d      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d118      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	0e1b      	lsrs	r3, r3, #24
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	019b      	lsls	r3, r3, #6
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	3b01      	subs	r3, #1
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	4910      	ldr	r1, [pc, #64]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fa9e 	bl	8000f98 <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a60:	f7fe fa9a 	bl	8000f98 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e007      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a7e:	d1ef      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3730      	adds	r7, #48	; 0x30
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	42470070 	.word	0x42470070

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a98:	b0ae      	sub	sp, #184	; 0xb8
 8002a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aba:	4bcb      	ldr	r3, [pc, #812]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	f200 8206 	bhi.w	8002ed4 <HAL_RCC_GetSysClockFreq+0x440>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002b05 	.word	0x08002b05
 8002ad4:	08002ed5 	.word	0x08002ed5
 8002ad8:	08002ed5 	.word	0x08002ed5
 8002adc:	08002ed5 	.word	0x08002ed5
 8002ae0:	08002b0d 	.word	0x08002b0d
 8002ae4:	08002ed5 	.word	0x08002ed5
 8002ae8:	08002ed5 	.word	0x08002ed5
 8002aec:	08002ed5 	.word	0x08002ed5
 8002af0:	08002b15 	.word	0x08002b15
 8002af4:	08002ed5 	.word	0x08002ed5
 8002af8:	08002ed5 	.word	0x08002ed5
 8002afc:	08002ed5 	.word	0x08002ed5
 8002b00:	08002d05 	.word	0x08002d05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4bb9      	ldr	r3, [pc, #740]	; (8002dec <HAL_RCC_GetSysClockFreq+0x358>)
 8002b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b0a:	e1e7      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0c:	4bb8      	ldr	r3, [pc, #736]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b12:	e1e3      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b14:	4bb4      	ldr	r3, [pc, #720]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b20:	4bb1      	ldr	r3, [pc, #708]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d071      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2c:	4bae      	ldr	r3, [pc, #696]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b38:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b52:	4622      	mov	r2, r4
 8002b54:	462b      	mov	r3, r5
 8002b56:	f04f 0000 	mov.w	r0, #0
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	0159      	lsls	r1, r3, #5
 8002b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b64:	0150      	lsls	r0, r2, #5
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	1a51      	subs	r1, r2, r1
 8002b6e:	6439      	str	r1, [r7, #64]	; 0x40
 8002b70:	4629      	mov	r1, r5
 8002b72:	eb63 0301 	sbc.w	r3, r3, r1
 8002b76:	647b      	str	r3, [r7, #68]	; 0x44
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b84:	4649      	mov	r1, r9
 8002b86:	018b      	lsls	r3, r1, #6
 8002b88:	4641      	mov	r1, r8
 8002b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b8e:	4641      	mov	r1, r8
 8002b90:	018a      	lsls	r2, r1, #6
 8002b92:	4641      	mov	r1, r8
 8002b94:	1a51      	subs	r1, r2, r1
 8002b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b98:	4649      	mov	r1, r9
 8002b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002bac:	4649      	mov	r1, r9
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc6:	462b      	mov	r3, r5
 8002bc8:	460a      	mov	r2, r1
 8002bca:	eb42 0303 	adc.w	r3, r2, r3
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bdc:	4629      	mov	r1, r5
 8002bde:	024b      	lsls	r3, r1, #9
 8002be0:	4621      	mov	r1, r4
 8002be2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be6:	4621      	mov	r1, r4
 8002be8:	024a      	lsls	r2, r1, #9
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c00:	f7fd fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c0e:	e067      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c32:	4622      	mov	r2, r4
 8002c34:	462b      	mov	r3, r5
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	0159      	lsls	r1, r3, #5
 8002c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c44:	0150      	lsls	r0, r2, #5
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	1a51      	subs	r1, r2, r1
 8002c4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c50:	4629      	mov	r1, r5
 8002c52:	eb63 0301 	sbc.w	r3, r3, r1
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c64:	4649      	mov	r1, r9
 8002c66:	018b      	lsls	r3, r1, #6
 8002c68:	4641      	mov	r1, r8
 8002c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c6e:	4641      	mov	r1, r8
 8002c70:	018a      	lsls	r2, r1, #6
 8002c72:	4641      	mov	r1, r8
 8002c74:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c78:	4649      	mov	r1, r9
 8002c7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c92:	4692      	mov	sl, r2
 8002c94:	469b      	mov	fp, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	eb1a 0303 	adds.w	r3, sl, r3
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	028b      	lsls	r3, r1, #10
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	028a      	lsls	r2, r1, #10
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cc8:	2200      	movs	r2, #0
 8002cca:	673b      	str	r3, [r7, #112]	; 0x70
 8002ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8002cce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cd2:	f7fd faf5 	bl	80002c0 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d02:	e0eb      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d06b      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	2200      	movs	r2, #0
 8002d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d30:	2300      	movs	r3, #0
 8002d32:	667b      	str	r3, [r7, #100]	; 0x64
 8002d34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	f04f 0000 	mov.w	r0, #0
 8002d40:	f04f 0100 	mov.w	r1, #0
 8002d44:	0159      	lsls	r1, r3, #5
 8002d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4a:	0150      	lsls	r0, r2, #5
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4621      	mov	r1, r4
 8002d52:	1a51      	subs	r1, r2, r1
 8002d54:	61b9      	str	r1, [r7, #24]
 8002d56:	4629      	mov	r1, r5
 8002d58:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	018b      	lsls	r3, r1, #6
 8002d6e:	4651      	mov	r1, sl
 8002d70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d74:	4651      	mov	r1, sl
 8002d76:	018a      	lsls	r2, r1, #6
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d7e:	4659      	mov	r1, fp
 8002d80:	eb63 0901 	sbc.w	r9, r3, r1
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d98:	4690      	mov	r8, r2
 8002d9a:	4699      	mov	r9, r3
 8002d9c:	4623      	mov	r3, r4
 8002d9e:	eb18 0303 	adds.w	r3, r8, r3
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	462b      	mov	r3, r5
 8002da6:	eb49 0303 	adc.w	r3, r9, r3
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002db8:	4629      	mov	r1, r5
 8002dba:	024b      	lsls	r3, r1, #9
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	024a      	lsls	r2, r1, #9
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dce:	2200      	movs	r2, #0
 8002dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dd8:	f7fd fa72 	bl	80002c0 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002de6:	e065      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x420>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_GetSysClockFreq+0x458>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4611      	mov	r1, r2
 8002e00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e04:	653b      	str	r3, [r7, #80]	; 0x50
 8002e06:	2300      	movs	r3, #0
 8002e08:	657b      	str	r3, [r7, #84]	; 0x54
 8002e0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e0e:	4642      	mov	r2, r8
 8002e10:	464b      	mov	r3, r9
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	0159      	lsls	r1, r3, #5
 8002e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e20:	0150      	lsls	r0, r2, #5
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4641      	mov	r1, r8
 8002e28:	1a51      	subs	r1, r2, r1
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e40:	4659      	mov	r1, fp
 8002e42:	018b      	lsls	r3, r1, #6
 8002e44:	4651      	mov	r1, sl
 8002e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	018a      	lsls	r2, r1, #6
 8002e4e:	4651      	mov	r1, sl
 8002e50:	1a54      	subs	r4, r2, r1
 8002e52:	4659      	mov	r1, fp
 8002e54:	eb63 0501 	sbc.w	r5, r3, r1
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	00eb      	lsls	r3, r5, #3
 8002e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e66:	00e2      	lsls	r2, r4, #3
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4643      	mov	r3, r8
 8002e6e:	18e3      	adds	r3, r4, r3
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	464b      	mov	r3, r9
 8002e74:	eb45 0303 	adc.w	r3, r5, r3
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e86:	4629      	mov	r1, r5
 8002e88:	028b      	lsls	r3, r1, #10
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e90:	4621      	mov	r1, r4
 8002e92:	028a      	lsls	r2, r1, #10
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ea2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ea6:	f7fd fa0b 	bl	80002c0 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCC_GetSysClockFreq+0x458>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	0f1b      	lsrs	r3, r3, #28
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ed2:	e003      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002edc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	37b8      	adds	r7, #184	; 0xb8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	00f42400 	.word	0x00f42400

08002ef4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e28d      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8083 	beq.w	800301a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f14:	4b94      	ldr	r3, [pc, #592]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f20:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f2c:	4b8e      	ldr	r3, [pc, #568]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f38:	d00c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d112      	bne.n	8002f6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d05b      	beq.n	8003018 <HAL_RCC_OscConfig+0x124>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d157      	bne.n	8003018 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e25a      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x90>
 8002f76:	4b7c      	ldr	r3, [pc, #496]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a7b      	ldr	r2, [pc, #492]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <HAL_RCC_OscConfig+0xcc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xb4>
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a75      	ldr	r2, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b73      	ldr	r3, [pc, #460]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a72      	ldr	r2, [pc, #456]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0xcc>
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6b      	ldr	r2, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fd ffe6 	bl	8000f98 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fd ffe2 	bl	8000f98 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e21f      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b61      	ldr	r3, [pc, #388]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xdc>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fd ffd2 	bl	8000f98 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fd ffce 	bl	8000f98 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e20b      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	4b57      	ldr	r3, [pc, #348]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x104>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d06f      	beq.n	8003106 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003026:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b00      	cmp	r3, #0
 8003030:	d017      	beq.n	8003062 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003032:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800303a:	2b08      	cmp	r3, #8
 800303c:	d105      	bne.n	800304a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x186>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1d3      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x278>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fd ff7b 	bl	8000f98 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fd ff77 	bl	8000f98 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1b4      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4925      	ldr	r1, [pc, #148]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x278>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd ff5a 	bl	8000f98 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fd ff56 	bl	8000f98 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e193      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d036      	beq.n	8003180 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_RCC_OscConfig+0x27c>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fd ff3a 	bl	8000f98 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003128:	f7fd ff36 	bl	8000f98 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e173      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800313c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x234>
 8003146:	e01b      	b.n	8003180 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x27c>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fd ff23 	bl	8000f98 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	e00e      	b.n	8003174 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003156:	f7fd ff1f 	bl	8000f98 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d907      	bls.n	8003174 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e15c      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b8a      	ldr	r3, [pc, #552]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ea      	bne.n	8003156 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8097 	beq.w	80032bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b83      	ldr	r3, [pc, #524]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b7f      	ldr	r3, [pc, #508]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a7e      	ldr	r2, [pc, #504]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b7c      	ldr	r3, [pc, #496]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b79      	ldr	r3, [pc, #484]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a75      	ldr	r2, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fd fedf 	bl	8000f98 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fd fedb 	bl	8000f98 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e118      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x31e>
 8003204:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a65      	ldr	r2, [pc, #404]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e01c      	b.n	800324c <HAL_RCC_OscConfig+0x358>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x340>
 800321a:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a60      	ldr	r2, [pc, #384]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a5d      	ldr	r2, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x358>
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a59      	ldr	r2, [pc, #356]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a56      	ldr	r2, [pc, #344]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003246:	f023 0304 	bic.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd fea0 	bl	8000f98 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fd fe9c 	bl	8000f98 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0d7      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ee      	beq.n	800325c <HAL_RCC_OscConfig+0x368>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fd fe8a 	bl	8000f98 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fd fe86 	bl	8000f98 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0c1      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ee      	bne.n	8003288 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80ad 	beq.w	8003420 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d060      	beq.n	8003394 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d145      	bne.n	8003366 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <HAL_RCC_OscConfig+0x4b4>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fd fe5a 	bl	8000f98 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fe56 	bl	8000f98 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e093      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	071b      	lsls	r3, r3, #28
 8003332:	491b      	ldr	r1, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x4b4>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fd fe2b 	bl	8000f98 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fd fe27 	bl	8000f98 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e064      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x452>
 8003364:	e05c      	b.n	8003420 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCC_OscConfig+0x4b4>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe14 	bl	8000f98 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fe10 	bl	8000f98 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04d      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x480>
 8003392:	e045      	b.n	8003420 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e040      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000
 80033a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d030      	beq.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d129      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d122      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d119      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	3b01      	subs	r3, #1
 80033f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d10f      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e03f      	b.n	80034c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fbfe 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f929 	bl	80036cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b08a      	sub	sp, #40	; 0x28
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d17c      	bne.n	80035e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_UART_Transmit+0x2c>
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e075      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_UART_Transmit+0x3e>
 8003504:	2302      	movs	r3, #2
 8003506:	e06e      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2221      	movs	r2, #33	; 0x21
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351e:	f7fd fd3b 	bl	8000f98 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d108      	bne.n	800354c <HAL_UART_Transmit+0x82>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e003      	b.n	8003554 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800355c:	e02a      	b.n	80035b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f840 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e036      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	3302      	adds	r3, #2
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e007      	b.n	80035a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1cf      	bne.n	800355e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f810 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e006      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b090      	sub	sp, #64	; 0x40
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	e050      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003606:	d04c      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0x30>
 800360e:	f7fd fcc3 	bl	8000f98 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800361a:	429a      	cmp	r2, r3
 800361c:	d241      	bcs.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	330c      	adds	r3, #12
 800363c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800363e:	637a      	str	r2, [r7, #52]	; 0x34
 8003640:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e5      	bne.n	800361e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	613b      	str	r3, [r7, #16]
   return(result);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003672:	623a      	str	r2, [r7, #32]
 8003674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e5      	bne.n	8003652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00f      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d09f      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3740      	adds	r7, #64	; 0x40
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d0:	b0c0      	sub	sp, #256	; 0x100
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	68d9      	ldr	r1, [r3, #12]
 80036ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	ea40 0301 	orr.w	r3, r0, r1
 80036f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	431a      	orrs	r2, r3
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	431a      	orrs	r2, r3
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003724:	f021 010c 	bic.w	r1, r1, #12
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003732:	430b      	orrs	r3, r1
 8003734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	6999      	ldr	r1, [r3, #24]
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	ea40 0301 	orr.w	r3, r0, r1
 8003752:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b8f      	ldr	r3, [pc, #572]	; (8003998 <UART_SetConfig+0x2cc>)
 800375c:	429a      	cmp	r2, r3
 800375e:	d005      	beq.n	800376c <UART_SetConfig+0xa0>
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b8d      	ldr	r3, [pc, #564]	; (800399c <UART_SetConfig+0x2d0>)
 8003768:	429a      	cmp	r2, r3
 800376a:	d104      	bne.n	8003776 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800376c:	f7fe fe54 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8003770:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003774:	e003      	b.n	800377e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003776:	f7fe fe3b 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 800377a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003788:	f040 810c 	bne.w	80039a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800378c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003796:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800379a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800379e:	4622      	mov	r2, r4
 80037a0:	462b      	mov	r3, r5
 80037a2:	1891      	adds	r1, r2, r2
 80037a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037a6:	415b      	adcs	r3, r3
 80037a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037ae:	4621      	mov	r1, r4
 80037b0:	eb12 0801 	adds.w	r8, r2, r1
 80037b4:	4629      	mov	r1, r5
 80037b6:	eb43 0901 	adc.w	r9, r3, r1
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ce:	4690      	mov	r8, r2
 80037d0:	4699      	mov	r9, r3
 80037d2:	4623      	mov	r3, r4
 80037d4:	eb18 0303 	adds.w	r3, r8, r3
 80037d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037dc:	462b      	mov	r3, r5
 80037de:	eb49 0303 	adc.w	r3, r9, r3
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037fa:	460b      	mov	r3, r1
 80037fc:	18db      	adds	r3, r3, r3
 80037fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003800:	4613      	mov	r3, r2
 8003802:	eb42 0303 	adc.w	r3, r2, r3
 8003806:	657b      	str	r3, [r7, #84]	; 0x54
 8003808:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800380c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003810:	f7fc fd56 	bl	80002c0 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <UART_SetConfig+0x2d4>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011c      	lsls	r4, r3, #4
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800382c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003830:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	1891      	adds	r1, r2, r2
 800383a:	64b9      	str	r1, [r7, #72]	; 0x48
 800383c:	415b      	adcs	r3, r3
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003840:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003844:	4641      	mov	r1, r8
 8003846:	eb12 0a01 	adds.w	sl, r2, r1
 800384a:	4649      	mov	r1, r9
 800384c:	eb43 0b01 	adc.w	fp, r3, r1
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800385c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003864:	4692      	mov	sl, r2
 8003866:	469b      	mov	fp, r3
 8003868:	4643      	mov	r3, r8
 800386a:	eb1a 0303 	adds.w	r3, sl, r3
 800386e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003872:	464b      	mov	r3, r9
 8003874:	eb4b 0303 	adc.w	r3, fp, r3
 8003878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003888:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800388c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003890:	460b      	mov	r3, r1
 8003892:	18db      	adds	r3, r3, r3
 8003894:	643b      	str	r3, [r7, #64]	; 0x40
 8003896:	4613      	mov	r3, r2
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	647b      	str	r3, [r7, #68]	; 0x44
 800389e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038a6:	f7fc fd0b 	bl	80002c0 <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <UART_SetConfig+0x2d4>)
 80038b2:	fba3 2301 	umull	r2, r3, r3, r1
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2264      	movs	r2, #100	; 0x64
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	1acb      	subs	r3, r1, r3
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <UART_SetConfig+0x2d4>)
 80038c8:	fba3 2302 	umull	r2, r3, r3, r2
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038d4:	441c      	add	r4, r3
 80038d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80038f0:	415b      	adcs	r3, r3
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038f8:	4641      	mov	r1, r8
 80038fa:	1851      	adds	r1, r2, r1
 80038fc:	6339      	str	r1, [r7, #48]	; 0x30
 80038fe:	4649      	mov	r1, r9
 8003900:	414b      	adcs	r3, r1
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003910:	4659      	mov	r1, fp
 8003912:	00cb      	lsls	r3, r1, #3
 8003914:	4651      	mov	r1, sl
 8003916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391a:	4651      	mov	r1, sl
 800391c:	00ca      	lsls	r2, r1, #3
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	4603      	mov	r3, r0
 8003924:	4642      	mov	r2, r8
 8003926:	189b      	adds	r3, r3, r2
 8003928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800392c:	464b      	mov	r3, r9
 800392e:	460a      	mov	r2, r1
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003944:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800394c:	460b      	mov	r3, r1
 800394e:	18db      	adds	r3, r3, r3
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	4613      	mov	r3, r2
 8003954:	eb42 0303 	adc.w	r3, r2, r3
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800395e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003962:	f7fc fcad 	bl	80002c0 <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <UART_SetConfig+0x2d4>)
 800396c:	fba3 1302 	umull	r1, r3, r3, r2
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	2164      	movs	r1, #100	; 0x64
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	3332      	adds	r3, #50	; 0x32
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <UART_SetConfig+0x2d4>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	f003 0207 	and.w	r2, r3, #7
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4422      	add	r2, r4
 8003992:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003994:	e106      	b.n	8003ba4 <UART_SetConfig+0x4d8>
 8003996:	bf00      	nop
 8003998:	40011000 	.word	0x40011000
 800399c:	40011400 	.word	0x40011400
 80039a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039b6:	4642      	mov	r2, r8
 80039b8:	464b      	mov	r3, r9
 80039ba:	1891      	adds	r1, r2, r2
 80039bc:	6239      	str	r1, [r7, #32]
 80039be:	415b      	adcs	r3, r3
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039c6:	4641      	mov	r1, r8
 80039c8:	1854      	adds	r4, r2, r1
 80039ca:	4649      	mov	r1, r9
 80039cc:	eb43 0501 	adc.w	r5, r3, r1
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	00eb      	lsls	r3, r5, #3
 80039da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039de:	00e2      	lsls	r2, r4, #3
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	4643      	mov	r3, r8
 80039e6:	18e3      	adds	r3, r4, r3
 80039e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039ec:	464b      	mov	r3, r9
 80039ee:	eb45 0303 	adc.w	r3, r5, r3
 80039f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a12:	4629      	mov	r1, r5
 8003a14:	008b      	lsls	r3, r1, #2
 8003a16:	4621      	mov	r1, r4
 8003a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	008a      	lsls	r2, r1, #2
 8003a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a24:	f7fc fc4c 	bl	80002c0 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b60      	ldr	r3, [pc, #384]	; (8003bb0 <UART_SetConfig+0x4e4>)
 8003a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	011c      	lsls	r4, r3, #4
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	61b9      	str	r1, [r7, #24]
 8003a50:	415b      	adcs	r3, r3
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a58:	4641      	mov	r1, r8
 8003a5a:	1851      	adds	r1, r2, r1
 8003a5c:	6139      	str	r1, [r7, #16]
 8003a5e:	4649      	mov	r1, r9
 8003a60:	414b      	adcs	r3, r1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a70:	4659      	mov	r1, fp
 8003a72:	00cb      	lsls	r3, r1, #3
 8003a74:	4651      	mov	r1, sl
 8003a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	00ca      	lsls	r2, r1, #3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	4642      	mov	r2, r8
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	460a      	mov	r2, r1
 8003a90:	eb42 0303 	adc.w	r3, r2, r3
 8003a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	008b      	lsls	r3, r1, #2
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aba:	4641      	mov	r1, r8
 8003abc:	008a      	lsls	r2, r1, #2
 8003abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ac2:	f7fc fbfd 	bl	80002c0 <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <UART_SetConfig+0x4e4>)
 8003ace:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2264      	movs	r2, #100	; 0x64
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	1acb      	subs	r3, r1, r3
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	3332      	adds	r3, #50	; 0x32
 8003ae0:	4a33      	ldr	r2, [pc, #204]	; (8003bb0 <UART_SetConfig+0x4e4>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aec:	441c      	add	r4, r3
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	673b      	str	r3, [r7, #112]	; 0x70
 8003af6:	677a      	str	r2, [r7, #116]	; 0x74
 8003af8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	415b      	adcs	r3, r3
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b3e:	464b      	mov	r3, r9
 8003b40:	460a      	mov	r2, r1
 8003b42:	eb42 0303 	adc.w	r3, r2, r3
 8003b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	663b      	str	r3, [r7, #96]	; 0x60
 8003b52:	667a      	str	r2, [r7, #100]	; 0x64
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b60:	4649      	mov	r1, r9
 8003b62:	008b      	lsls	r3, r1, #2
 8003b64:	4641      	mov	r1, r8
 8003b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	008a      	lsls	r2, r1, #2
 8003b6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b72:	f7fc fba5 	bl	80002c0 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <UART_SetConfig+0x4e4>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <UART_SetConfig+0x4e4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 020f 	and.w	r2, r3, #15
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4422      	add	r2, r4
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003baa:	46bd      	mov	sp, r7
 8003bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb0:	51eb851f 	.word	0x51eb851f

08003bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	f107 001c 	add.w	r0, r7, #28
 8003bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d122      	bne.n	8003c12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa9c 	bl	8004144 <USB_CoreReset>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	e01a      	b.n	8003c48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa90 	bl	8004144 <USB_CoreReset>
 8003c24:	4603      	mov	r3, r0
 8003c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
 8003c3a:	e005      	b.n	8003c48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10b      	bne.n	8003c66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f043 0206 	orr.w	r2, r3, #6
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c72:	b004      	add	sp, #16
 8003c74:	4770      	bx	lr

08003c76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d115      	bne.n	8003ce6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f7fd f972 	bl	8000fb0 <HAL_Delay>
      ms++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa28 	bl	8004128 <USB_GetMode>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d01e      	beq.n	8003d1c <USB_SetCurrentMode+0x84>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b31      	cmp	r3, #49	; 0x31
 8003ce2:	d9f0      	bls.n	8003cc6 <USB_SetCurrentMode+0x2e>
 8003ce4:	e01a      	b.n	8003d1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d115      	bne.n	8003d18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7fd f959 	bl	8000fb0 <HAL_Delay>
      ms++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3301      	adds	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa0f 	bl	8004128 <USB_GetMode>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <USB_SetCurrentMode+0x84>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b31      	cmp	r3, #49	; 0x31
 8003d14:	d9f0      	bls.n	8003cf8 <USB_SetCurrentMode+0x60>
 8003d16:	e001      	b.n	8003d1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e005      	b.n	8003d28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b32      	cmp	r3, #50	; 0x32
 8003d20:	d101      	bne.n	8003d26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d30:	b084      	sub	sp, #16
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b086      	sub	sp, #24
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e009      	b.n	8003d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3340      	adds	r3, #64	; 0x40
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	3301      	adds	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b0e      	cmp	r3, #14
 8003d68:	d9f2      	bls.n	8003d50 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11c      	bne.n	8003daa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7e:	f043 0302 	orr.w	r3, r3, #2
 8003d82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e005      	b.n	8003db6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc8:	4619      	mov	r1, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	680b      	ldr	r3, [r1, #0]
 8003dd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10c      	bne.n	8003df6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003de2:	2100      	movs	r1, #0
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f965 	bl	80040b4 <USB_SetDevSpeed>
 8003dea:	e008      	b.n	8003dfe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003dec:	2101      	movs	r1, #1
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f960 	bl	80040b4 <USB_SetDevSpeed>
 8003df4:	e003      	b.n	8003dfe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003df6:	2103      	movs	r1, #3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f95b 	bl	80040b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dfe:	2110      	movs	r1, #16
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8f3 	bl	8003fec <USB_FlushTxFifo>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f91f 	bl	8004054 <USB_FlushRxFifo>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	461a      	mov	r2, r3
 8003e34:	2300      	movs	r3, #0
 8003e36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2300      	movs	r3, #0
 8003e42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e043      	b.n	8003ed2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e60:	d118      	bne.n	8003e94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	461a      	mov	r2, r3
 8003e76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e013      	b.n	8003ea6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e008      	b.n	8003ea6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d3b7      	bcc.n	8003e4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	e043      	b.n	8003f68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef6:	d118      	bne.n	8003f2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e013      	b.n	8003f3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e008      	b.n	8003f3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f36:	461a      	mov	r2, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3301      	adds	r3, #1
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3b7      	bcc.n	8003ee0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f043 0210 	orr.w	r2, r3, #16
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <USB_DevInit+0x2b8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f043 0208 	orr.w	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd0:	f043 0304 	orr.w	r3, r3, #4
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fe4:	b004      	add	sp, #16
 8003fe6:	4770      	bx	lr
 8003fe8:	803c3800 	.word	0x803c3800

08003fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <USB_FlushTxFifo+0x64>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d901      	bls.n	800400c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e01b      	b.n	8004044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	daf2      	bge.n	8003ffa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	019b      	lsls	r3, r3, #6
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a08      	ldr	r2, [pc, #32]	; (8004050 <USB_FlushTxFifo+0x64>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e006      	b.n	8004044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d0f0      	beq.n	8004024 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	00030d40 	.word	0x00030d40

08004054 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3301      	adds	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <USB_FlushRxFifo+0x5c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e018      	b.n	80040a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	daf2      	bge.n	8004060 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2210      	movs	r2, #16
 8004082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <USB_FlushRxFifo+0x5c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e006      	b.n	80040a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d0f0      	beq.n	8004084 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	00030d40 	.word	0x00030d40

080040b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004100:	f023 0303 	bic.w	r3, r3, #3
 8004104:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0301 	and.w	r3, r3, #1
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <USB_CoreReset+0x64>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e01b      	b.n	800419a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	daf2      	bge.n	8004150 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <USB_CoreReset+0x64>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e006      	b.n	800419a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d0f0      	beq.n	800417a <USB_CoreReset+0x36>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	00030d40 	.word	0x00030d40

080041ac <siprintf>:
 80041ac:	b40e      	push	{r1, r2, r3}
 80041ae:	b500      	push	{lr}
 80041b0:	b09c      	sub	sp, #112	; 0x70
 80041b2:	ab1d      	add	r3, sp, #116	; 0x74
 80041b4:	9002      	str	r0, [sp, #8]
 80041b6:	9006      	str	r0, [sp, #24]
 80041b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041bc:	4809      	ldr	r0, [pc, #36]	; (80041e4 <siprintf+0x38>)
 80041be:	9107      	str	r1, [sp, #28]
 80041c0:	9104      	str	r1, [sp, #16]
 80041c2:	4909      	ldr	r1, [pc, #36]	; (80041e8 <siprintf+0x3c>)
 80041c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	6800      	ldr	r0, [r0, #0]
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	a902      	add	r1, sp, #8
 80041d0:	f000 f894 	bl	80042fc <_svfiprintf_r>
 80041d4:	9b02      	ldr	r3, [sp, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	b01c      	add	sp, #112	; 0x70
 80041dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e0:	b003      	add	sp, #12
 80041e2:	4770      	bx	lr
 80041e4:	20000058 	.word	0x20000058
 80041e8:	ffff0208 	.word	0xffff0208

080041ec <memset>:
 80041ec:	4402      	add	r2, r0
 80041ee:	4603      	mov	r3, r0
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d100      	bne.n	80041f6 <memset+0xa>
 80041f4:	4770      	bx	lr
 80041f6:	f803 1b01 	strb.w	r1, [r3], #1
 80041fa:	e7f9      	b.n	80041f0 <memset+0x4>

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4d0d      	ldr	r5, [pc, #52]	; (8004234 <__libc_init_array+0x38>)
 8004200:	4c0d      	ldr	r4, [pc, #52]	; (8004238 <__libc_init_array+0x3c>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	2600      	movs	r6, #0
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	4d0b      	ldr	r5, [pc, #44]	; (800423c <__libc_init_array+0x40>)
 800420e:	4c0c      	ldr	r4, [pc, #48]	; (8004240 <__libc_init_array+0x44>)
 8004210:	f000 fc78 	bl	8004b04 <_init>
 8004214:	1b64      	subs	r4, r4, r5
 8004216:	10a4      	asrs	r4, r4, #2
 8004218:	2600      	movs	r6, #0
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	08004b80 	.word	0x08004b80
 8004238:	08004b80 	.word	0x08004b80
 800423c:	08004b80 	.word	0x08004b80
 8004240:	08004b84 	.word	0x08004b84

08004244 <__retarget_lock_acquire_recursive>:
 8004244:	4770      	bx	lr

08004246 <__retarget_lock_release_recursive>:
 8004246:	4770      	bx	lr

08004248 <__ssputs_r>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	461f      	mov	r7, r3
 8004250:	42be      	cmp	r6, r7
 8004252:	680b      	ldr	r3, [r1, #0]
 8004254:	4682      	mov	sl, r0
 8004256:	460c      	mov	r4, r1
 8004258:	4690      	mov	r8, r2
 800425a:	d82c      	bhi.n	80042b6 <__ssputs_r+0x6e>
 800425c:	898a      	ldrh	r2, [r1, #12]
 800425e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004262:	d026      	beq.n	80042b2 <__ssputs_r+0x6a>
 8004264:	6965      	ldr	r5, [r4, #20]
 8004266:	6909      	ldr	r1, [r1, #16]
 8004268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800426c:	eba3 0901 	sub.w	r9, r3, r1
 8004270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004274:	1c7b      	adds	r3, r7, #1
 8004276:	444b      	add	r3, r9
 8004278:	106d      	asrs	r5, r5, #1
 800427a:	429d      	cmp	r5, r3
 800427c:	bf38      	it	cc
 800427e:	461d      	movcc	r5, r3
 8004280:	0553      	lsls	r3, r2, #21
 8004282:	d527      	bpl.n	80042d4 <__ssputs_r+0x8c>
 8004284:	4629      	mov	r1, r5
 8004286:	f000 f957 	bl	8004538 <_malloc_r>
 800428a:	4606      	mov	r6, r0
 800428c:	b360      	cbz	r0, 80042e8 <__ssputs_r+0xa0>
 800428e:	6921      	ldr	r1, [r4, #16]
 8004290:	464a      	mov	r2, r9
 8004292:	f000 fbc7 	bl	8004a24 <memcpy>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	6126      	str	r6, [r4, #16]
 80042a4:	6165      	str	r5, [r4, #20]
 80042a6:	444e      	add	r6, r9
 80042a8:	eba5 0509 	sub.w	r5, r5, r9
 80042ac:	6026      	str	r6, [r4, #0]
 80042ae:	60a5      	str	r5, [r4, #8]
 80042b0:	463e      	mov	r6, r7
 80042b2:	42be      	cmp	r6, r7
 80042b4:	d900      	bls.n	80042b8 <__ssputs_r+0x70>
 80042b6:	463e      	mov	r6, r7
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	4632      	mov	r2, r6
 80042bc:	4641      	mov	r1, r8
 80042be:	f000 fb86 	bl	80049ce <memmove>
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	1b9b      	subs	r3, r3, r6
 80042c6:	60a3      	str	r3, [r4, #8]
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	4433      	add	r3, r6
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	2000      	movs	r0, #0
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	462a      	mov	r2, r5
 80042d6:	f000 fb4b 	bl	8004970 <_realloc_r>
 80042da:	4606      	mov	r6, r0
 80042dc:	2800      	cmp	r0, #0
 80042de:	d1e0      	bne.n	80042a2 <__ssputs_r+0x5a>
 80042e0:	6921      	ldr	r1, [r4, #16]
 80042e2:	4650      	mov	r0, sl
 80042e4:	f000 fbac 	bl	8004a40 <_free_r>
 80042e8:	230c      	movs	r3, #12
 80042ea:	f8ca 3000 	str.w	r3, [sl]
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042fa:	e7e9      	b.n	80042d0 <__ssputs_r+0x88>

080042fc <_svfiprintf_r>:
 80042fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004300:	4698      	mov	r8, r3
 8004302:	898b      	ldrh	r3, [r1, #12]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	b09d      	sub	sp, #116	; 0x74
 8004308:	4607      	mov	r7, r0
 800430a:	460d      	mov	r5, r1
 800430c:	4614      	mov	r4, r2
 800430e:	d50e      	bpl.n	800432e <_svfiprintf_r+0x32>
 8004310:	690b      	ldr	r3, [r1, #16]
 8004312:	b963      	cbnz	r3, 800432e <_svfiprintf_r+0x32>
 8004314:	2140      	movs	r1, #64	; 0x40
 8004316:	f000 f90f 	bl	8004538 <_malloc_r>
 800431a:	6028      	str	r0, [r5, #0]
 800431c:	6128      	str	r0, [r5, #16]
 800431e:	b920      	cbnz	r0, 800432a <_svfiprintf_r+0x2e>
 8004320:	230c      	movs	r3, #12
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004328:	e0d0      	b.n	80044cc <_svfiprintf_r+0x1d0>
 800432a:	2340      	movs	r3, #64	; 0x40
 800432c:	616b      	str	r3, [r5, #20]
 800432e:	2300      	movs	r3, #0
 8004330:	9309      	str	r3, [sp, #36]	; 0x24
 8004332:	2320      	movs	r3, #32
 8004334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004338:	f8cd 800c 	str.w	r8, [sp, #12]
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044e4 <_svfiprintf_r+0x1e8>
 8004342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004346:	f04f 0901 	mov.w	r9, #1
 800434a:	4623      	mov	r3, r4
 800434c:	469a      	mov	sl, r3
 800434e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004352:	b10a      	cbz	r2, 8004358 <_svfiprintf_r+0x5c>
 8004354:	2a25      	cmp	r2, #37	; 0x25
 8004356:	d1f9      	bne.n	800434c <_svfiprintf_r+0x50>
 8004358:	ebba 0b04 	subs.w	fp, sl, r4
 800435c:	d00b      	beq.n	8004376 <_svfiprintf_r+0x7a>
 800435e:	465b      	mov	r3, fp
 8004360:	4622      	mov	r2, r4
 8004362:	4629      	mov	r1, r5
 8004364:	4638      	mov	r0, r7
 8004366:	f7ff ff6f 	bl	8004248 <__ssputs_r>
 800436a:	3001      	adds	r0, #1
 800436c:	f000 80a9 	beq.w	80044c2 <_svfiprintf_r+0x1c6>
 8004370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004372:	445a      	add	r2, fp
 8004374:	9209      	str	r2, [sp, #36]	; 0x24
 8004376:	f89a 3000 	ldrb.w	r3, [sl]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80a1 	beq.w	80044c2 <_svfiprintf_r+0x1c6>
 8004380:	2300      	movs	r3, #0
 8004382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800438a:	f10a 0a01 	add.w	sl, sl, #1
 800438e:	9304      	str	r3, [sp, #16]
 8004390:	9307      	str	r3, [sp, #28]
 8004392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004396:	931a      	str	r3, [sp, #104]	; 0x68
 8004398:	4654      	mov	r4, sl
 800439a:	2205      	movs	r2, #5
 800439c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a0:	4850      	ldr	r0, [pc, #320]	; (80044e4 <_svfiprintf_r+0x1e8>)
 80043a2:	f7fb ff3d 	bl	8000220 <memchr>
 80043a6:	9a04      	ldr	r2, [sp, #16]
 80043a8:	b9d8      	cbnz	r0, 80043e2 <_svfiprintf_r+0xe6>
 80043aa:	06d0      	lsls	r0, r2, #27
 80043ac:	bf44      	itt	mi
 80043ae:	2320      	movmi	r3, #32
 80043b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b4:	0711      	lsls	r1, r2, #28
 80043b6:	bf44      	itt	mi
 80043b8:	232b      	movmi	r3, #43	; 0x2b
 80043ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043be:	f89a 3000 	ldrb.w	r3, [sl]
 80043c2:	2b2a      	cmp	r3, #42	; 0x2a
 80043c4:	d015      	beq.n	80043f2 <_svfiprintf_r+0xf6>
 80043c6:	9a07      	ldr	r2, [sp, #28]
 80043c8:	4654      	mov	r4, sl
 80043ca:	2000      	movs	r0, #0
 80043cc:	f04f 0c0a 	mov.w	ip, #10
 80043d0:	4621      	mov	r1, r4
 80043d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043d6:	3b30      	subs	r3, #48	; 0x30
 80043d8:	2b09      	cmp	r3, #9
 80043da:	d94d      	bls.n	8004478 <_svfiprintf_r+0x17c>
 80043dc:	b1b0      	cbz	r0, 800440c <_svfiprintf_r+0x110>
 80043de:	9207      	str	r2, [sp, #28]
 80043e0:	e014      	b.n	800440c <_svfiprintf_r+0x110>
 80043e2:	eba0 0308 	sub.w	r3, r0, r8
 80043e6:	fa09 f303 	lsl.w	r3, r9, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	46a2      	mov	sl, r4
 80043f0:	e7d2      	b.n	8004398 <_svfiprintf_r+0x9c>
 80043f2:	9b03      	ldr	r3, [sp, #12]
 80043f4:	1d19      	adds	r1, r3, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	9103      	str	r1, [sp, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bfbb      	ittet	lt
 80043fe:	425b      	neglt	r3, r3
 8004400:	f042 0202 	orrlt.w	r2, r2, #2
 8004404:	9307      	strge	r3, [sp, #28]
 8004406:	9307      	strlt	r3, [sp, #28]
 8004408:	bfb8      	it	lt
 800440a:	9204      	strlt	r2, [sp, #16]
 800440c:	7823      	ldrb	r3, [r4, #0]
 800440e:	2b2e      	cmp	r3, #46	; 0x2e
 8004410:	d10c      	bne.n	800442c <_svfiprintf_r+0x130>
 8004412:	7863      	ldrb	r3, [r4, #1]
 8004414:	2b2a      	cmp	r3, #42	; 0x2a
 8004416:	d134      	bne.n	8004482 <_svfiprintf_r+0x186>
 8004418:	9b03      	ldr	r3, [sp, #12]
 800441a:	1d1a      	adds	r2, r3, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	9203      	str	r2, [sp, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	bfb8      	it	lt
 8004424:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004428:	3402      	adds	r4, #2
 800442a:	9305      	str	r3, [sp, #20]
 800442c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80044f4 <_svfiprintf_r+0x1f8>
 8004430:	7821      	ldrb	r1, [r4, #0]
 8004432:	2203      	movs	r2, #3
 8004434:	4650      	mov	r0, sl
 8004436:	f7fb fef3 	bl	8000220 <memchr>
 800443a:	b138      	cbz	r0, 800444c <_svfiprintf_r+0x150>
 800443c:	9b04      	ldr	r3, [sp, #16]
 800443e:	eba0 000a 	sub.w	r0, r0, sl
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	4082      	lsls	r2, r0
 8004446:	4313      	orrs	r3, r2
 8004448:	3401      	adds	r4, #1
 800444a:	9304      	str	r3, [sp, #16]
 800444c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004450:	4825      	ldr	r0, [pc, #148]	; (80044e8 <_svfiprintf_r+0x1ec>)
 8004452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004456:	2206      	movs	r2, #6
 8004458:	f7fb fee2 	bl	8000220 <memchr>
 800445c:	2800      	cmp	r0, #0
 800445e:	d038      	beq.n	80044d2 <_svfiprintf_r+0x1d6>
 8004460:	4b22      	ldr	r3, [pc, #136]	; (80044ec <_svfiprintf_r+0x1f0>)
 8004462:	bb1b      	cbnz	r3, 80044ac <_svfiprintf_r+0x1b0>
 8004464:	9b03      	ldr	r3, [sp, #12]
 8004466:	3307      	adds	r3, #7
 8004468:	f023 0307 	bic.w	r3, r3, #7
 800446c:	3308      	adds	r3, #8
 800446e:	9303      	str	r3, [sp, #12]
 8004470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004472:	4433      	add	r3, r6
 8004474:	9309      	str	r3, [sp, #36]	; 0x24
 8004476:	e768      	b.n	800434a <_svfiprintf_r+0x4e>
 8004478:	fb0c 3202 	mla	r2, ip, r2, r3
 800447c:	460c      	mov	r4, r1
 800447e:	2001      	movs	r0, #1
 8004480:	e7a6      	b.n	80043d0 <_svfiprintf_r+0xd4>
 8004482:	2300      	movs	r3, #0
 8004484:	3401      	adds	r4, #1
 8004486:	9305      	str	r3, [sp, #20]
 8004488:	4619      	mov	r1, r3
 800448a:	f04f 0c0a 	mov.w	ip, #10
 800448e:	4620      	mov	r0, r4
 8004490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004494:	3a30      	subs	r2, #48	; 0x30
 8004496:	2a09      	cmp	r2, #9
 8004498:	d903      	bls.n	80044a2 <_svfiprintf_r+0x1a6>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0c6      	beq.n	800442c <_svfiprintf_r+0x130>
 800449e:	9105      	str	r1, [sp, #20]
 80044a0:	e7c4      	b.n	800442c <_svfiprintf_r+0x130>
 80044a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a6:	4604      	mov	r4, r0
 80044a8:	2301      	movs	r3, #1
 80044aa:	e7f0      	b.n	800448e <_svfiprintf_r+0x192>
 80044ac:	ab03      	add	r3, sp, #12
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	462a      	mov	r2, r5
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <_svfiprintf_r+0x1f4>)
 80044b4:	a904      	add	r1, sp, #16
 80044b6:	4638      	mov	r0, r7
 80044b8:	f3af 8000 	nop.w
 80044bc:	1c42      	adds	r2, r0, #1
 80044be:	4606      	mov	r6, r0
 80044c0:	d1d6      	bne.n	8004470 <_svfiprintf_r+0x174>
 80044c2:	89ab      	ldrh	r3, [r5, #12]
 80044c4:	065b      	lsls	r3, r3, #25
 80044c6:	f53f af2d 	bmi.w	8004324 <_svfiprintf_r+0x28>
 80044ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044cc:	b01d      	add	sp, #116	; 0x74
 80044ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d2:	ab03      	add	r3, sp, #12
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	462a      	mov	r2, r5
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <_svfiprintf_r+0x1f4>)
 80044da:	a904      	add	r1, sp, #16
 80044dc:	4638      	mov	r0, r7
 80044de:	f000 f919 	bl	8004714 <_printf_i>
 80044e2:	e7eb      	b.n	80044bc <_svfiprintf_r+0x1c0>
 80044e4:	08004b44 	.word	0x08004b44
 80044e8:	08004b4e 	.word	0x08004b4e
 80044ec:	00000000 	.word	0x00000000
 80044f0:	08004249 	.word	0x08004249
 80044f4:	08004b4a 	.word	0x08004b4a

080044f8 <sbrk_aligned>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	4e0e      	ldr	r6, [pc, #56]	; (8004534 <sbrk_aligned+0x3c>)
 80044fc:	460c      	mov	r4, r1
 80044fe:	6831      	ldr	r1, [r6, #0]
 8004500:	4605      	mov	r5, r0
 8004502:	b911      	cbnz	r1, 800450a <sbrk_aligned+0x12>
 8004504:	f000 fa7e 	bl	8004a04 <_sbrk_r>
 8004508:	6030      	str	r0, [r6, #0]
 800450a:	4621      	mov	r1, r4
 800450c:	4628      	mov	r0, r5
 800450e:	f000 fa79 	bl	8004a04 <_sbrk_r>
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	d00a      	beq.n	800452c <sbrk_aligned+0x34>
 8004516:	1cc4      	adds	r4, r0, #3
 8004518:	f024 0403 	bic.w	r4, r4, #3
 800451c:	42a0      	cmp	r0, r4
 800451e:	d007      	beq.n	8004530 <sbrk_aligned+0x38>
 8004520:	1a21      	subs	r1, r4, r0
 8004522:	4628      	mov	r0, r5
 8004524:	f000 fa6e 	bl	8004a04 <_sbrk_r>
 8004528:	3001      	adds	r0, #1
 800452a:	d101      	bne.n	8004530 <sbrk_aligned+0x38>
 800452c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004530:	4620      	mov	r0, r4
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	20000768 	.word	0x20000768

08004538 <_malloc_r>:
 8004538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800453c:	1ccd      	adds	r5, r1, #3
 800453e:	f025 0503 	bic.w	r5, r5, #3
 8004542:	3508      	adds	r5, #8
 8004544:	2d0c      	cmp	r5, #12
 8004546:	bf38      	it	cc
 8004548:	250c      	movcc	r5, #12
 800454a:	2d00      	cmp	r5, #0
 800454c:	4607      	mov	r7, r0
 800454e:	db01      	blt.n	8004554 <_malloc_r+0x1c>
 8004550:	42a9      	cmp	r1, r5
 8004552:	d905      	bls.n	8004560 <_malloc_r+0x28>
 8004554:	230c      	movs	r3, #12
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	2600      	movs	r6, #0
 800455a:	4630      	mov	r0, r6
 800455c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004560:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004634 <_malloc_r+0xfc>
 8004564:	f000 f9f8 	bl	8004958 <__malloc_lock>
 8004568:	f8d8 3000 	ldr.w	r3, [r8]
 800456c:	461c      	mov	r4, r3
 800456e:	bb5c      	cbnz	r4, 80045c8 <_malloc_r+0x90>
 8004570:	4629      	mov	r1, r5
 8004572:	4638      	mov	r0, r7
 8004574:	f7ff ffc0 	bl	80044f8 <sbrk_aligned>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	4604      	mov	r4, r0
 800457c:	d155      	bne.n	800462a <_malloc_r+0xf2>
 800457e:	f8d8 4000 	ldr.w	r4, [r8]
 8004582:	4626      	mov	r6, r4
 8004584:	2e00      	cmp	r6, #0
 8004586:	d145      	bne.n	8004614 <_malloc_r+0xdc>
 8004588:	2c00      	cmp	r4, #0
 800458a:	d048      	beq.n	800461e <_malloc_r+0xe6>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	4631      	mov	r1, r6
 8004590:	4638      	mov	r0, r7
 8004592:	eb04 0903 	add.w	r9, r4, r3
 8004596:	f000 fa35 	bl	8004a04 <_sbrk_r>
 800459a:	4581      	cmp	r9, r0
 800459c:	d13f      	bne.n	800461e <_malloc_r+0xe6>
 800459e:	6821      	ldr	r1, [r4, #0]
 80045a0:	1a6d      	subs	r5, r5, r1
 80045a2:	4629      	mov	r1, r5
 80045a4:	4638      	mov	r0, r7
 80045a6:	f7ff ffa7 	bl	80044f8 <sbrk_aligned>
 80045aa:	3001      	adds	r0, #1
 80045ac:	d037      	beq.n	800461e <_malloc_r+0xe6>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	442b      	add	r3, r5
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	f8d8 3000 	ldr.w	r3, [r8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d038      	beq.n	800462e <_malloc_r+0xf6>
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	42a2      	cmp	r2, r4
 80045c0:	d12b      	bne.n	800461a <_malloc_r+0xe2>
 80045c2:	2200      	movs	r2, #0
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	e00f      	b.n	80045e8 <_malloc_r+0xb0>
 80045c8:	6822      	ldr	r2, [r4, #0]
 80045ca:	1b52      	subs	r2, r2, r5
 80045cc:	d41f      	bmi.n	800460e <_malloc_r+0xd6>
 80045ce:	2a0b      	cmp	r2, #11
 80045d0:	d917      	bls.n	8004602 <_malloc_r+0xca>
 80045d2:	1961      	adds	r1, r4, r5
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	6025      	str	r5, [r4, #0]
 80045d8:	bf18      	it	ne
 80045da:	6059      	strne	r1, [r3, #4]
 80045dc:	6863      	ldr	r3, [r4, #4]
 80045de:	bf08      	it	eq
 80045e0:	f8c8 1000 	streq.w	r1, [r8]
 80045e4:	5162      	str	r2, [r4, r5]
 80045e6:	604b      	str	r3, [r1, #4]
 80045e8:	4638      	mov	r0, r7
 80045ea:	f104 060b 	add.w	r6, r4, #11
 80045ee:	f000 f9b9 	bl	8004964 <__malloc_unlock>
 80045f2:	f026 0607 	bic.w	r6, r6, #7
 80045f6:	1d23      	adds	r3, r4, #4
 80045f8:	1af2      	subs	r2, r6, r3
 80045fa:	d0ae      	beq.n	800455a <_malloc_r+0x22>
 80045fc:	1b9b      	subs	r3, r3, r6
 80045fe:	50a3      	str	r3, [r4, r2]
 8004600:	e7ab      	b.n	800455a <_malloc_r+0x22>
 8004602:	42a3      	cmp	r3, r4
 8004604:	6862      	ldr	r2, [r4, #4]
 8004606:	d1dd      	bne.n	80045c4 <_malloc_r+0x8c>
 8004608:	f8c8 2000 	str.w	r2, [r8]
 800460c:	e7ec      	b.n	80045e8 <_malloc_r+0xb0>
 800460e:	4623      	mov	r3, r4
 8004610:	6864      	ldr	r4, [r4, #4]
 8004612:	e7ac      	b.n	800456e <_malloc_r+0x36>
 8004614:	4634      	mov	r4, r6
 8004616:	6876      	ldr	r6, [r6, #4]
 8004618:	e7b4      	b.n	8004584 <_malloc_r+0x4c>
 800461a:	4613      	mov	r3, r2
 800461c:	e7cc      	b.n	80045b8 <_malloc_r+0x80>
 800461e:	230c      	movs	r3, #12
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	4638      	mov	r0, r7
 8004624:	f000 f99e 	bl	8004964 <__malloc_unlock>
 8004628:	e797      	b.n	800455a <_malloc_r+0x22>
 800462a:	6025      	str	r5, [r4, #0]
 800462c:	e7dc      	b.n	80045e8 <_malloc_r+0xb0>
 800462e:	605b      	str	r3, [r3, #4]
 8004630:	deff      	udf	#255	; 0xff
 8004632:	bf00      	nop
 8004634:	20000764 	.word	0x20000764

08004638 <_printf_common>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	4616      	mov	r6, r2
 800463e:	4699      	mov	r9, r3
 8004640:	688a      	ldr	r2, [r1, #8]
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004648:	4293      	cmp	r3, r2
 800464a:	bfb8      	it	lt
 800464c:	4613      	movlt	r3, r2
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004654:	4607      	mov	r7, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b10a      	cbz	r2, 800465e <_printf_common+0x26>
 800465a:	3301      	adds	r3, #1
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0699      	lsls	r1, r3, #26
 8004662:	bf42      	ittt	mi
 8004664:	6833      	ldrmi	r3, [r6, #0]
 8004666:	3302      	addmi	r3, #2
 8004668:	6033      	strmi	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	f015 0506 	ands.w	r5, r5, #6
 8004670:	d106      	bne.n	8004680 <_printf_common+0x48>
 8004672:	f104 0a19 	add.w	sl, r4, #25
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dc26      	bgt.n	80046ce <_printf_common+0x96>
 8004680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004684:	1e13      	subs	r3, r2, #0
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
 800468c:	0692      	lsls	r2, r2, #26
 800468e:	d42b      	bmi.n	80046e8 <_printf_common+0xb0>
 8004690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004694:	4649      	mov	r1, r9
 8004696:	4638      	mov	r0, r7
 8004698:	47c0      	blx	r8
 800469a:	3001      	adds	r0, #1
 800469c:	d01e      	beq.n	80046dc <_printf_common+0xa4>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	f003 0306 	and.w	r3, r3, #6
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf02      	ittt	eq
 80046aa:	68e5      	ldreq	r5, [r4, #12]
 80046ac:	6833      	ldreq	r3, [r6, #0]
 80046ae:	1aed      	subeq	r5, r5, r3
 80046b0:	68a3      	ldr	r3, [r4, #8]
 80046b2:	bf0c      	ite	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	2500      	movne	r5, #0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfc4      	itt	gt
 80046be:	1a9b      	subgt	r3, r3, r2
 80046c0:	18ed      	addgt	r5, r5, r3
 80046c2:	2600      	movs	r6, #0
 80046c4:	341a      	adds	r4, #26
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d11a      	bne.n	8004700 <_printf_common+0xc8>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e008      	b.n	80046e0 <_printf_common+0xa8>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4649      	mov	r1, r9
 80046d4:	4638      	mov	r0, r7
 80046d6:	47c0      	blx	r8
 80046d8:	3001      	adds	r0, #1
 80046da:	d103      	bne.n	80046e4 <_printf_common+0xac>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7c6      	b.n	8004676 <_printf_common+0x3e>
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	2030      	movs	r0, #48	; 0x30
 80046ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046f2:	4422      	add	r2, r4
 80046f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046fc:	3302      	adds	r3, #2
 80046fe:	e7c7      	b.n	8004690 <_printf_common+0x58>
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4649      	mov	r1, r9
 8004706:	4638      	mov	r0, r7
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa4>
 800470e:	3601      	adds	r6, #1
 8004710:	e7d9      	b.n	80046c6 <_printf_common+0x8e>
	...

08004714 <_printf_i>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	7e0f      	ldrb	r7, [r1, #24]
 800471a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800471c:	2f78      	cmp	r7, #120	; 0x78
 800471e:	4691      	mov	r9, r2
 8004720:	4680      	mov	r8, r0
 8004722:	460c      	mov	r4, r1
 8004724:	469a      	mov	sl, r3
 8004726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800472a:	d807      	bhi.n	800473c <_printf_i+0x28>
 800472c:	2f62      	cmp	r7, #98	; 0x62
 800472e:	d80a      	bhi.n	8004746 <_printf_i+0x32>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f000 80d4 	beq.w	80048de <_printf_i+0x1ca>
 8004736:	2f58      	cmp	r7, #88	; 0x58
 8004738:	f000 80c0 	beq.w	80048bc <_printf_i+0x1a8>
 800473c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004744:	e03a      	b.n	80047bc <_printf_i+0xa8>
 8004746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800474a:	2b15      	cmp	r3, #21
 800474c:	d8f6      	bhi.n	800473c <_printf_i+0x28>
 800474e:	a101      	add	r1, pc, #4	; (adr r1, 8004754 <_printf_i+0x40>)
 8004750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047c1 	.word	0x080047c1
 800475c:	0800473d 	.word	0x0800473d
 8004760:	0800473d 	.word	0x0800473d
 8004764:	0800473d 	.word	0x0800473d
 8004768:	0800473d 	.word	0x0800473d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800473d 	.word	0x0800473d
 8004774:	0800473d 	.word	0x0800473d
 8004778:	0800473d 	.word	0x0800473d
 800477c:	0800473d 	.word	0x0800473d
 8004780:	080048c5 	.word	0x080048c5
 8004784:	080047ed 	.word	0x080047ed
 8004788:	0800487f 	.word	0x0800487f
 800478c:	0800473d 	.word	0x0800473d
 8004790:	0800473d 	.word	0x0800473d
 8004794:	080048e7 	.word	0x080048e7
 8004798:	0800473d 	.word	0x0800473d
 800479c:	080047ed 	.word	0x080047ed
 80047a0:	0800473d 	.word	0x0800473d
 80047a4:	0800473d 	.word	0x0800473d
 80047a8:	08004887 	.word	0x08004887
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	602a      	str	r2, [r5, #0]
 80047b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047bc:	2301      	movs	r3, #1
 80047be:	e09f      	b.n	8004900 <_printf_i+0x1ec>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	682b      	ldr	r3, [r5, #0]
 80047c4:	0607      	lsls	r7, r0, #24
 80047c6:	f103 0104 	add.w	r1, r3, #4
 80047ca:	6029      	str	r1, [r5, #0]
 80047cc:	d501      	bpl.n	80047d2 <_printf_i+0xbe>
 80047ce:	681e      	ldr	r6, [r3, #0]
 80047d0:	e003      	b.n	80047da <_printf_i+0xc6>
 80047d2:	0646      	lsls	r6, r0, #25
 80047d4:	d5fb      	bpl.n	80047ce <_printf_i+0xba>
 80047d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047da:	2e00      	cmp	r6, #0
 80047dc:	da03      	bge.n	80047e6 <_printf_i+0xd2>
 80047de:	232d      	movs	r3, #45	; 0x2d
 80047e0:	4276      	negs	r6, r6
 80047e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e6:	485a      	ldr	r0, [pc, #360]	; (8004950 <_printf_i+0x23c>)
 80047e8:	230a      	movs	r3, #10
 80047ea:	e012      	b.n	8004812 <_printf_i+0xfe>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	1d19      	adds	r1, r3, #4
 80047f2:	6029      	str	r1, [r5, #0]
 80047f4:	0605      	lsls	r5, r0, #24
 80047f6:	d501      	bpl.n	80047fc <_printf_i+0xe8>
 80047f8:	681e      	ldr	r6, [r3, #0]
 80047fa:	e002      	b.n	8004802 <_printf_i+0xee>
 80047fc:	0641      	lsls	r1, r0, #25
 80047fe:	d5fb      	bpl.n	80047f8 <_printf_i+0xe4>
 8004800:	881e      	ldrh	r6, [r3, #0]
 8004802:	4853      	ldr	r0, [pc, #332]	; (8004950 <_printf_i+0x23c>)
 8004804:	2f6f      	cmp	r7, #111	; 0x6f
 8004806:	bf0c      	ite	eq
 8004808:	2308      	moveq	r3, #8
 800480a:	230a      	movne	r3, #10
 800480c:	2100      	movs	r1, #0
 800480e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004812:	6865      	ldr	r5, [r4, #4]
 8004814:	60a5      	str	r5, [r4, #8]
 8004816:	2d00      	cmp	r5, #0
 8004818:	bfa2      	ittt	ge
 800481a:	6821      	ldrge	r1, [r4, #0]
 800481c:	f021 0104 	bicge.w	r1, r1, #4
 8004820:	6021      	strge	r1, [r4, #0]
 8004822:	b90e      	cbnz	r6, 8004828 <_printf_i+0x114>
 8004824:	2d00      	cmp	r5, #0
 8004826:	d04b      	beq.n	80048c0 <_printf_i+0x1ac>
 8004828:	4615      	mov	r5, r2
 800482a:	fbb6 f1f3 	udiv	r1, r6, r3
 800482e:	fb03 6711 	mls	r7, r3, r1, r6
 8004832:	5dc7      	ldrb	r7, [r0, r7]
 8004834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004838:	4637      	mov	r7, r6
 800483a:	42bb      	cmp	r3, r7
 800483c:	460e      	mov	r6, r1
 800483e:	d9f4      	bls.n	800482a <_printf_i+0x116>
 8004840:	2b08      	cmp	r3, #8
 8004842:	d10b      	bne.n	800485c <_printf_i+0x148>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	07de      	lsls	r6, r3, #31
 8004848:	d508      	bpl.n	800485c <_printf_i+0x148>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	6861      	ldr	r1, [r4, #4]
 800484e:	4299      	cmp	r1, r3
 8004850:	bfde      	ittt	le
 8004852:	2330      	movle	r3, #48	; 0x30
 8004854:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004858:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800485c:	1b52      	subs	r2, r2, r5
 800485e:	6122      	str	r2, [r4, #16]
 8004860:	f8cd a000 	str.w	sl, [sp]
 8004864:	464b      	mov	r3, r9
 8004866:	aa03      	add	r2, sp, #12
 8004868:	4621      	mov	r1, r4
 800486a:	4640      	mov	r0, r8
 800486c:	f7ff fee4 	bl	8004638 <_printf_common>
 8004870:	3001      	adds	r0, #1
 8004872:	d14a      	bne.n	800490a <_printf_i+0x1f6>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004878:	b004      	add	sp, #16
 800487a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f043 0320 	orr.w	r3, r3, #32
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	4833      	ldr	r0, [pc, #204]	; (8004954 <_printf_i+0x240>)
 8004888:	2778      	movs	r7, #120	; 0x78
 800488a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	6829      	ldr	r1, [r5, #0]
 8004892:	061f      	lsls	r7, r3, #24
 8004894:	f851 6b04 	ldr.w	r6, [r1], #4
 8004898:	d402      	bmi.n	80048a0 <_printf_i+0x18c>
 800489a:	065f      	lsls	r7, r3, #25
 800489c:	bf48      	it	mi
 800489e:	b2b6      	uxthmi	r6, r6
 80048a0:	07df      	lsls	r7, r3, #31
 80048a2:	bf48      	it	mi
 80048a4:	f043 0320 	orrmi.w	r3, r3, #32
 80048a8:	6029      	str	r1, [r5, #0]
 80048aa:	bf48      	it	mi
 80048ac:	6023      	strmi	r3, [r4, #0]
 80048ae:	b91e      	cbnz	r6, 80048b8 <_printf_i+0x1a4>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f023 0320 	bic.w	r3, r3, #32
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	2310      	movs	r3, #16
 80048ba:	e7a7      	b.n	800480c <_printf_i+0xf8>
 80048bc:	4824      	ldr	r0, [pc, #144]	; (8004950 <_printf_i+0x23c>)
 80048be:	e7e4      	b.n	800488a <_printf_i+0x176>
 80048c0:	4615      	mov	r5, r2
 80048c2:	e7bd      	b.n	8004840 <_printf_i+0x12c>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	6826      	ldr	r6, [r4, #0]
 80048c8:	6961      	ldr	r1, [r4, #20]
 80048ca:	1d18      	adds	r0, r3, #4
 80048cc:	6028      	str	r0, [r5, #0]
 80048ce:	0635      	lsls	r5, r6, #24
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	d501      	bpl.n	80048d8 <_printf_i+0x1c4>
 80048d4:	6019      	str	r1, [r3, #0]
 80048d6:	e002      	b.n	80048de <_printf_i+0x1ca>
 80048d8:	0670      	lsls	r0, r6, #25
 80048da:	d5fb      	bpl.n	80048d4 <_printf_i+0x1c0>
 80048dc:	8019      	strh	r1, [r3, #0]
 80048de:	2300      	movs	r3, #0
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	4615      	mov	r5, r2
 80048e4:	e7bc      	b.n	8004860 <_printf_i+0x14c>
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	1d1a      	adds	r2, r3, #4
 80048ea:	602a      	str	r2, [r5, #0]
 80048ec:	681d      	ldr	r5, [r3, #0]
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	2100      	movs	r1, #0
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7fb fc94 	bl	8000220 <memchr>
 80048f8:	b108      	cbz	r0, 80048fe <_printf_i+0x1ea>
 80048fa:	1b40      	subs	r0, r0, r5
 80048fc:	6060      	str	r0, [r4, #4]
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	2300      	movs	r3, #0
 8004904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004908:	e7aa      	b.n	8004860 <_printf_i+0x14c>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	462a      	mov	r2, r5
 800490e:	4649      	mov	r1, r9
 8004910:	4640      	mov	r0, r8
 8004912:	47d0      	blx	sl
 8004914:	3001      	adds	r0, #1
 8004916:	d0ad      	beq.n	8004874 <_printf_i+0x160>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	079b      	lsls	r3, r3, #30
 800491c:	d413      	bmi.n	8004946 <_printf_i+0x232>
 800491e:	68e0      	ldr	r0, [r4, #12]
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	4298      	cmp	r0, r3
 8004924:	bfb8      	it	lt
 8004926:	4618      	movlt	r0, r3
 8004928:	e7a6      	b.n	8004878 <_printf_i+0x164>
 800492a:	2301      	movs	r3, #1
 800492c:	4632      	mov	r2, r6
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	47d0      	blx	sl
 8004934:	3001      	adds	r0, #1
 8004936:	d09d      	beq.n	8004874 <_printf_i+0x160>
 8004938:	3501      	adds	r5, #1
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	9903      	ldr	r1, [sp, #12]
 800493e:	1a5b      	subs	r3, r3, r1
 8004940:	42ab      	cmp	r3, r5
 8004942:	dcf2      	bgt.n	800492a <_printf_i+0x216>
 8004944:	e7eb      	b.n	800491e <_printf_i+0x20a>
 8004946:	2500      	movs	r5, #0
 8004948:	f104 0619 	add.w	r6, r4, #25
 800494c:	e7f5      	b.n	800493a <_printf_i+0x226>
 800494e:	bf00      	nop
 8004950:	08004b55 	.word	0x08004b55
 8004954:	08004b66 	.word	0x08004b66

08004958 <__malloc_lock>:
 8004958:	4801      	ldr	r0, [pc, #4]	; (8004960 <__malloc_lock+0x8>)
 800495a:	f7ff bc73 	b.w	8004244 <__retarget_lock_acquire_recursive>
 800495e:	bf00      	nop
 8004960:	20000760 	.word	0x20000760

08004964 <__malloc_unlock>:
 8004964:	4801      	ldr	r0, [pc, #4]	; (800496c <__malloc_unlock+0x8>)
 8004966:	f7ff bc6e 	b.w	8004246 <__retarget_lock_release_recursive>
 800496a:	bf00      	nop
 800496c:	20000760 	.word	0x20000760

08004970 <_realloc_r>:
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	4680      	mov	r8, r0
 8004976:	4614      	mov	r4, r2
 8004978:	460e      	mov	r6, r1
 800497a:	b921      	cbnz	r1, 8004986 <_realloc_r+0x16>
 800497c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004980:	4611      	mov	r1, r2
 8004982:	f7ff bdd9 	b.w	8004538 <_malloc_r>
 8004986:	b92a      	cbnz	r2, 8004994 <_realloc_r+0x24>
 8004988:	f000 f85a 	bl	8004a40 <_free_r>
 800498c:	4625      	mov	r5, r4
 800498e:	4628      	mov	r0, r5
 8004990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004994:	f000 f8a0 	bl	8004ad8 <_malloc_usable_size_r>
 8004998:	4284      	cmp	r4, r0
 800499a:	4607      	mov	r7, r0
 800499c:	d802      	bhi.n	80049a4 <_realloc_r+0x34>
 800499e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049a2:	d812      	bhi.n	80049ca <_realloc_r+0x5a>
 80049a4:	4621      	mov	r1, r4
 80049a6:	4640      	mov	r0, r8
 80049a8:	f7ff fdc6 	bl	8004538 <_malloc_r>
 80049ac:	4605      	mov	r5, r0
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d0ed      	beq.n	800498e <_realloc_r+0x1e>
 80049b2:	42bc      	cmp	r4, r7
 80049b4:	4622      	mov	r2, r4
 80049b6:	4631      	mov	r1, r6
 80049b8:	bf28      	it	cs
 80049ba:	463a      	movcs	r2, r7
 80049bc:	f000 f832 	bl	8004a24 <memcpy>
 80049c0:	4631      	mov	r1, r6
 80049c2:	4640      	mov	r0, r8
 80049c4:	f000 f83c 	bl	8004a40 <_free_r>
 80049c8:	e7e1      	b.n	800498e <_realloc_r+0x1e>
 80049ca:	4635      	mov	r5, r6
 80049cc:	e7df      	b.n	800498e <_realloc_r+0x1e>

080049ce <memmove>:
 80049ce:	4288      	cmp	r0, r1
 80049d0:	b510      	push	{r4, lr}
 80049d2:	eb01 0402 	add.w	r4, r1, r2
 80049d6:	d902      	bls.n	80049de <memmove+0x10>
 80049d8:	4284      	cmp	r4, r0
 80049da:	4623      	mov	r3, r4
 80049dc:	d807      	bhi.n	80049ee <memmove+0x20>
 80049de:	1e43      	subs	r3, r0, #1
 80049e0:	42a1      	cmp	r1, r4
 80049e2:	d008      	beq.n	80049f6 <memmove+0x28>
 80049e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ec:	e7f8      	b.n	80049e0 <memmove+0x12>
 80049ee:	4402      	add	r2, r0
 80049f0:	4601      	mov	r1, r0
 80049f2:	428a      	cmp	r2, r1
 80049f4:	d100      	bne.n	80049f8 <memmove+0x2a>
 80049f6:	bd10      	pop	{r4, pc}
 80049f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a00:	e7f7      	b.n	80049f2 <memmove+0x24>
	...

08004a04 <_sbrk_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	; (8004a20 <_sbrk_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f000 f86a 	bl	8004ae8 <_sbrk>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_sbrk_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_sbrk_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	2000076c 	.word	0x2000076c

08004a24 <memcpy>:
 8004a24:	440a      	add	r2, r1
 8004a26:	4291      	cmp	r1, r2
 8004a28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	4770      	bx	lr
 8004a30:	b510      	push	{r4, lr}
 8004a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d1f9      	bne.n	8004a32 <memcpy+0xe>
 8004a3e:	bd10      	pop	{r4, pc}

08004a40 <_free_r>:
 8004a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a42:	2900      	cmp	r1, #0
 8004a44:	d044      	beq.n	8004ad0 <_free_r+0x90>
 8004a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a4a:	9001      	str	r0, [sp, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004a52:	bfb8      	it	lt
 8004a54:	18e4      	addlt	r4, r4, r3
 8004a56:	f7ff ff7f 	bl	8004958 <__malloc_lock>
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <_free_r+0x94>)
 8004a5c:	9801      	ldr	r0, [sp, #4]
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	b933      	cbnz	r3, 8004a70 <_free_r+0x30>
 8004a62:	6063      	str	r3, [r4, #4]
 8004a64:	6014      	str	r4, [r2, #0]
 8004a66:	b003      	add	sp, #12
 8004a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a6c:	f7ff bf7a 	b.w	8004964 <__malloc_unlock>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d908      	bls.n	8004a86 <_free_r+0x46>
 8004a74:	6825      	ldr	r5, [r4, #0]
 8004a76:	1961      	adds	r1, r4, r5
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	bf01      	itttt	eq
 8004a7c:	6819      	ldreq	r1, [r3, #0]
 8004a7e:	685b      	ldreq	r3, [r3, #4]
 8004a80:	1949      	addeq	r1, r1, r5
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	e7ed      	b.n	8004a62 <_free_r+0x22>
 8004a86:	461a      	mov	r2, r3
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b10b      	cbz	r3, 8004a90 <_free_r+0x50>
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d9fa      	bls.n	8004a86 <_free_r+0x46>
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	1855      	adds	r5, r2, r1
 8004a94:	42a5      	cmp	r5, r4
 8004a96:	d10b      	bne.n	8004ab0 <_free_r+0x70>
 8004a98:	6824      	ldr	r4, [r4, #0]
 8004a9a:	4421      	add	r1, r4
 8004a9c:	1854      	adds	r4, r2, r1
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	6011      	str	r1, [r2, #0]
 8004aa2:	d1e0      	bne.n	8004a66 <_free_r+0x26>
 8004aa4:	681c      	ldr	r4, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	6053      	str	r3, [r2, #4]
 8004aaa:	440c      	add	r4, r1
 8004aac:	6014      	str	r4, [r2, #0]
 8004aae:	e7da      	b.n	8004a66 <_free_r+0x26>
 8004ab0:	d902      	bls.n	8004ab8 <_free_r+0x78>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	6003      	str	r3, [r0, #0]
 8004ab6:	e7d6      	b.n	8004a66 <_free_r+0x26>
 8004ab8:	6825      	ldr	r5, [r4, #0]
 8004aba:	1961      	adds	r1, r4, r5
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf04      	itt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	6063      	str	r3, [r4, #4]
 8004ac6:	bf04      	itt	eq
 8004ac8:	1949      	addeq	r1, r1, r5
 8004aca:	6021      	streq	r1, [r4, #0]
 8004acc:	6054      	str	r4, [r2, #4]
 8004ace:	e7ca      	b.n	8004a66 <_free_r+0x26>
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bd30      	pop	{r4, r5, pc}
 8004ad4:	20000764 	.word	0x20000764

08004ad8 <_malloc_usable_size_r>:
 8004ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004adc:	1f18      	subs	r0, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfbc      	itt	lt
 8004ae2:	580b      	ldrlt	r3, [r1, r0]
 8004ae4:	18c0      	addlt	r0, r0, r3
 8004ae6:	4770      	bx	lr

08004ae8 <_sbrk>:
 8004ae8:	4a04      	ldr	r2, [pc, #16]	; (8004afc <_sbrk+0x14>)
 8004aea:	6811      	ldr	r1, [r2, #0]
 8004aec:	4603      	mov	r3, r0
 8004aee:	b909      	cbnz	r1, 8004af4 <_sbrk+0xc>
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <_sbrk+0x18>)
 8004af2:	6011      	str	r1, [r2, #0]
 8004af4:	6810      	ldr	r0, [r2, #0]
 8004af6:	4403      	add	r3, r0
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4770      	bx	lr
 8004afc:	20000770 	.word	0x20000770
 8004b00:	20000778 	.word	0x20000778

08004b04 <_init>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr

08004b10 <_fini>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr
