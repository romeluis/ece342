
lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08004f28  08004f28  00014f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005188  08005188  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005190  08005190  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000005c  080051f4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080051f4  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf4e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e72  00000000  00000000  0002c01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a2  00000000  00000000  0002eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002261b  00000000  00000000  0002f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e998  00000000  00000000  00051acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d21eb  00000000  00000000  00060465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d68  00000000  00000000  00132650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001363b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f10 	.word	0x08004f10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004f10 	.word	0x08004f10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b970 	b.w	8000d24 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	460d      	mov	r5, r1
 8000a64:	4604      	mov	r4, r0
 8000a66:	460f      	mov	r7, r1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14a      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0xe2>
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	b143      	cbz	r3, 8000a8a <__udivmoddi4+0x2e>
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	f1c3 0220 	rsb	r2, r3, #32
 8000a80:	409f      	lsls	r7, r3
 8000a82:	fa20 f202 	lsr.w	r2, r0, r2
 8000a86:	4317      	orrs	r7, r2
 8000a88:	409c      	lsls	r4, r3
 8000a8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a8e:	fa1f f58c 	uxth.w	r5, ip
 8000a92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a96:	0c22      	lsrs	r2, r4, #16
 8000a98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000aa0:	fb01 f005 	mul.w	r0, r1, r5
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x62>
 8000aa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aac:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ab0:	f080 811c 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ab4:	4290      	cmp	r0, r2
 8000ab6:	f240 8119 	bls.w	8000cec <__udivmoddi4+0x290>
 8000aba:	3902      	subs	r1, #2
 8000abc:	4462      	add	r2, ip
 8000abe:	1a12      	subs	r2, r2, r0
 8000ac0:	b2a4      	uxth	r4, r4
 8000ac2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ac6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ace:	fb00 f505 	mul.w	r5, r0, r5
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x90>
 8000ad6:	eb1c 0404 	adds.w	r4, ip, r4
 8000ada:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ade:	f080 8107 	bcs.w	8000cf0 <__udivmoddi4+0x294>
 8000ae2:	42a5      	cmp	r5, r4
 8000ae4:	f240 8104 	bls.w	8000cf0 <__udivmoddi4+0x294>
 8000ae8:	4464      	add	r4, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11e      	cbz	r6, 8000afe <__udivmoddi4+0xa2>
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	e9c6 4300 	strd	r4, r3, [r6]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0xbc>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80ed 	beq.w	8000ce6 <__udivmoddi4+0x28a>
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b12:	4608      	mov	r0, r1
 8000b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b18:	fab3 f183 	clz	r1, r3
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d149      	bne.n	8000bb4 <__udivmoddi4+0x158>
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0xce>
 8000b24:	4282      	cmp	r2, r0
 8000b26:	f200 80f8 	bhi.w	8000d1a <__udivmoddi4+0x2be>
 8000b2a:	1a84      	subs	r4, r0, r2
 8000b2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b30:	2001      	movs	r0, #1
 8000b32:	4617      	mov	r7, r2
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0e2      	beq.n	8000afe <__udivmoddi4+0xa2>
 8000b38:	e9c6 4700 	strd	r4, r7, [r6]
 8000b3c:	e7df      	b.n	8000afe <__udivmoddi4+0xa2>
 8000b3e:	b902      	cbnz	r2, 8000b42 <__udivmoddi4+0xe6>
 8000b40:	deff      	udf	#255	; 0xff
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2101      	movs	r1, #1
 8000b58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b60:	0c22      	lsrs	r2, r4, #16
 8000b62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b66:	fb0e f005 	mul.w	r0, lr, r5
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b72:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2b8>
 8000b7e:	4645      	mov	r5, r8
 8000b80:	1a12      	subs	r2, r2, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b88:	fb07 2210 	mls	r2, r7, r0, r2
 8000b8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x14e>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x14c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2c2>
 8000ba8:	4610      	mov	r0, r2
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bb2:	e79f      	b.n	8000af4 <__udivmoddi4+0x98>
 8000bb4:	f1c1 0720 	rsb	r7, r1, #32
 8000bb8:	408b      	lsls	r3, r1
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bca:	40fd      	lsrs	r5, r7
 8000bcc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd0:	4323      	orrs	r3, r4
 8000bd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	fb09 5518 	mls	r5, r9, r8, r5
 8000bde:	0c1c      	lsrs	r4, r3, #16
 8000be0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be4:	fb08 f50e 	mul.w	r5, r8, lr
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	fa00 f001 	lsl.w	r0, r0, r1
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2b4>
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2b4>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4464      	add	r4, ip
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	b29d      	uxth	r5, r3
 8000c10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c14:	fb09 4413 	mls	r4, r9, r3, r4
 8000c18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2ac>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2ac>
 8000c32:	3b02      	subs	r3, #2
 8000c34:	4464      	add	r4, ip
 8000c36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c3e:	eba4 040e 	sub.w	r4, r4, lr
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46ae      	mov	lr, r5
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x29c>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x298>
 8000c4c:	b156      	cbz	r6, 8000c64 <__udivmoddi4+0x208>
 8000c4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c52:	eb64 040e 	sbc.w	r4, r4, lr
 8000c56:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5a:	40ca      	lsrs	r2, r1
 8000c5c:	40cc      	lsrs	r4, r1
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	e9c6 7400 	strd	r7, r4, [r6]
 8000c64:	4618      	mov	r0, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	f1c3 0120 	rsb	r1, r3, #32
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	fa20 f201 	lsr.w	r2, r0, r1
 8000c78:	fa25 f101 	lsr.w	r1, r5, r1
 8000c7c:	409d      	lsls	r5, r3
 8000c7e:	432a      	orrs	r2, r5
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c96:	fb00 f50e 	mul.w	r5, r0, lr
 8000c9a:	428d      	cmp	r5, r1
 8000c9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x258>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cac:	428d      	cmp	r5, r1
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1b49      	subs	r1, r1, r5
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000cc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc8:	4291      	cmp	r1, r2
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x282>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2a8>
 8000cd6:	4291      	cmp	r1, r2
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2a8>
 8000cda:	3d02      	subs	r5, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a52      	subs	r2, r2, r1
 8000ce0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0xfc>
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xa2>
 8000cec:	4639      	mov	r1, r7
 8000cee:	e6e6      	b.n	8000abe <__udivmoddi4+0x62>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	e6fb      	b.n	8000aec <__udivmoddi4+0x90>
 8000cf4:	4548      	cmp	r0, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d00:	3b01      	subs	r3, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d04:	4645      	mov	r5, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x282>
 8000d08:	462b      	mov	r3, r5
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x258>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d14:	3d02      	subs	r5, #2
 8000d16:	4462      	add	r2, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e70a      	b.n	8000b34 <__udivmoddi4+0xd8>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x14e>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	2234      	movs	r2, #52	; 0x34
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fcd0 	bl	80036dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <SystemClock_Config+0xd4>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <SystemClock_Config+0xd4>)
 8000d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <SystemClock_Config+0xd4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <SystemClock_Config+0xd8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d74:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <SystemClock_Config+0xd8>)
 8000d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <SystemClock_Config+0xd8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2310      	movs	r3, #16
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2302      	movs	r3, #2
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fb63 	bl	8002480 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000dc0:	f000 f996 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2103      	movs	r1, #3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 f802 	bl	8001dec <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dee:	f000 f97f 	bl	80010f0 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3750      	adds	r7, #80	; 0x50
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40007000 	.word	0x40007000

08000e04 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_DAC_Init+0x4c>)
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <MX_DAC_Init+0x50>)
 8000e16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_DAC_Init+0x4c>)
 8000e1a:	f000 fd50 	bl	80018be <HAL_DAC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e24:	f000 f964 	bl	80010f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_DAC_Init+0x4c>)
 8000e38:	f000 fdda 	bl	80019f0 <HAL_DAC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e42:	f000 f955 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000078 	.word	0x20000078
 8000e54:	40007400 	.word	0x40007400

08000e58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_TIM6_Init+0x64>)
 8000e68:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <MX_TIM6_Init+0x68>)
 8000e6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_TIM6_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_TIM6_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_TIM6_Init+0x64>)
 8000e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_TIM6_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_TIM6_Init+0x64>)
 8000e88:	f001 fd98 	bl	80029bc <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e92:	f000 f92d 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_TIM6_Init+0x64>)
 8000ea4:	f001 ff0a 	bl	8002cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000eae:	f000 f91f 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000008c 	.word	0x2000008c
 8000ec0:	40001000 	.word	0x40001000

08000ec4 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_USART3_Init+0x50>)
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <MX_USART3_Init+0x54>)
 8000ecc:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 38400;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART3_Init+0x50>)
 8000ed0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed4:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_USART3_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_USART3_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART3_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <MX_USART3_Init+0x50>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART3_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_USART3_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART3_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_USART3_Init+0x50>)
 8000f02:	f001 ff57 	bl	8002db4 <HAL_USART_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 8000f0c:	f000 f8f0 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200000d4 	.word	0x200000d4
 8000f18:	40004800 	.word	0x40004800

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a57      	ldr	r2, [pc, #348]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b55      	ldr	r3, [pc, #340]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a3b      	ldr	r2, [pc, #236]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fe0:	4835      	ldr	r0, [pc, #212]	; (80010b8 <MX_GPIO_Init+0x19c>)
 8000fe2:	f000 fee9 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2140      	movs	r1, #64	; 0x40
 8000fea:	4834      	ldr	r0, [pc, #208]	; (80010bc <MX_GPIO_Init+0x1a0>)
 8000fec:	f000 fee4 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	482e      	ldr	r0, [pc, #184]	; (80010c0 <MX_GPIO_Init+0x1a4>)
 8001008:	f000 fd42 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800100c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4824      	ldr	r0, [pc, #144]	; (80010b8 <MX_GPIO_Init+0x19c>)
 8001026:	f000 fd33 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	481e      	ldr	r0, [pc, #120]	; (80010bc <MX_GPIO_Init+0x1a0>)
 8001042:	f000 fd25 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4818      	ldr	r0, [pc, #96]	; (80010bc <MX_GPIO_Init+0x1a0>)
 800105a:	f000 fd19 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800105e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001070:	230a      	movs	r3, #10
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_GPIO_Init+0x1a8>)
 800107c:	f000 fd08 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	480b      	ldr	r0, [pc, #44]	; (80010c4 <MX_GPIO_Init+0x1a8>)
 8001096:	f000 fcfb 	bl	8001a90 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2028      	movs	r0, #40	; 0x28
 80010a0:	f000 fbd7 	bl	8001852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a4:	2028      	movs	r0, #40	; 0x28
 80010a6:	f000 fbf0 	bl	800188a <HAL_NVIC_EnableIRQ>

}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020000 	.word	0x40020000

080010c8 <print_msg>:

/* USER CODE BEGIN 4 */
void print_msg(char * msg) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_USART_Transmit(&husart3, (uint8_t *)msg, strlen(msg), 100);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff f89d 	bl	8000210 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <print_msg+0x24>)
 80010e0:	f001 fea9 	bl	8002e36 <HAL_USART_Transmit>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000d4 	.word	0x200000d4

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <main>:
uint32_t timeEnd;


//MAIN
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f000 fa59 	bl	80015b8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f7ff fe0f 	bl	8000d28 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f7ff ff07 	bl	8000f1c <MX_GPIO_Init>
  MX_DAC_Init();
 800110e:	f7ff fe79 	bl	8000e04 <MX_DAC_Init>
  MX_TIM6_Init();
 8001112:	f7ff fea1 	bl	8000e58 <MX_TIM6_Init>
  MX_USART3_Init();
 8001116:	f7ff fed5 	bl	8000ec4 <MX_USART3_Init>

  //Set up DAC
  HAL_DAC_Init(&hdac);
 800111a:	4825      	ldr	r0, [pc, #148]	; (80011b0 <main+0xb4>)
 800111c:	f000 fbcf 	bl	80018be <HAL_DAC_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001120:	2100      	movs	r1, #0
 8001122:	4823      	ldr	r0, [pc, #140]	; (80011b0 <main+0xb4>)
 8001124:	f000 fbed 	bl	8001902 <HAL_DAC_Start>

  //PART 1
  timeStart = HAL_TIM_Base_Start(&htim6);
 8001128:	4822      	ldr	r0, [pc, #136]	; (80011b4 <main+0xb8>)
 800112a:	f001 fc97 	bl	8002a5c <HAL_TIM_Base_Start>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <main+0xbc>)
 8001134:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < 100; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e006      	b.n	800114a <main+0x4e>
	  printMessage("Current Index = ", i);
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	481f      	ldr	r0, [pc, #124]	; (80011bc <main+0xc0>)
 8001140:	f000 f848 	bl	80011d4 <printMessage>
  for (int i = 0; i < 100; i++) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b63      	cmp	r3, #99	; 0x63
 800114e:	ddf5      	ble.n	800113c <main+0x40>
  }

  timeEnd = __HAL_TIM_GET_COUNTER(&htim6);
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <main+0xb8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <main+0xc4>)
 8001158:	6013      	str	r3, [r2, #0]

  printMessage("Start: ", timeStart);
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <main+0xbc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	4818      	ldr	r0, [pc, #96]	; (80011c4 <main+0xc8>)
 8001162:	f000 f837 	bl	80011d4 <printMessage>
  printMessage("End: ", timeEnd);
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <main+0xc4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	4816      	ldr	r0, [pc, #88]	; (80011c8 <main+0xcc>)
 800116e:	f000 f831 	bl	80011d4 <printMessage>
  printMessage("Counting took: ", timeEnd - timeStart);
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <main+0xc4>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <main+0xbc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	4619      	mov	r1, r3
 800117e:	4813      	ldr	r0, [pc, #76]	; (80011cc <main+0xd0>)
 8001180:	f000 f828 	bl	80011d4 <printMessage>
  HAL_TIM_Base_Stop(&htim6);
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <main+0xb8>)
 8001186:	f001 fcd1 	bl	8002b2c <HAL_TIM_Base_Stop>

  //For Part 2
  sinValues = malloc(2 * 628);
 800118a:	f44f 609d 	mov.w	r0, #1256	; 0x4e8
 800118e:	f002 f9d1 	bl	8003534 <malloc>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <main+0xd4>)
 8001198:	601a      	str	r2, [r3, #0]
  calculateSin();
 800119a:	f000 f831 	bl	8001200 <calculateSin>

  while (1)
  {
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4000);
 800119e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <main+0xb4>)
 80011a8:	f000 fbfd 	bl	80019a6 <HAL_DAC_SetValue>
 80011ac:	e7f7      	b.n	800119e <main+0xa2>
 80011ae:	bf00      	nop
 80011b0:	20000078 	.word	0x20000078
 80011b4:	2000008c 	.word	0x2000008c
 80011b8:	20000180 	.word	0x20000180
 80011bc:	08004f28 	.word	0x08004f28
 80011c0:	20000184 	.word	0x20000184
 80011c4:	08004f3c 	.word	0x08004f3c
 80011c8:	08004f44 	.word	0x08004f44
 80011cc:	08004f4c 	.word	0x08004f4c
 80011d0:	2000017c 	.word	0x2000017c

080011d4 <printMessage>:
	  //partTwoViaSin();
	  //partTwoViaLUT();
  }
}

void printMessage(char* preface, int value) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	sprintf(message, "%s%d\r\n", preface, value);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4905      	ldr	r1, [pc, #20]	; (80011f8 <printMessage+0x24>)
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <printMessage+0x28>)
 80011e6:	f002 fa59 	bl	800369c <siprintf>
	print_msg(message);
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <printMessage+0x28>)
 80011ec:	f7ff ff6c 	bl	80010c8 <print_msg>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08004f5c 	.word	0x08004f5c
 80011fc:	20000118 	.word	0x20000118

08001200 <calculateSin>:
	//timeEnd = __HAL_TIM_GET_COUNTER(&htim6);
	//printMessage("Using LUT and outputting sin took: ", timeStart - timeEnd);
	//HAL_TIM_Base_Stop(&htim6);
}

void calculateSin() {
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	uint16_t currentRad = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	80bb      	strh	r3, [r7, #4]

	for (uint16_t index = 0; index < 628; index++) {
 800120a:	2300      	movs	r3, #0
 800120c:	80fb      	strh	r3, [r7, #6]
 800120e:	e034      	b.n	800127a <calculateSin+0x7a>
		 sinValues[index] = AMPLITUDE * sin(currentRad) + OFFSET;
 8001210:	2306      	movs	r3, #6
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fad0 	bl	80007b8 <__aeabi_i2d>
 8001218:	4604      	mov	r4, r0
 800121a:	460d      	mov	r5, r1
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff faba 	bl	8000798 <__aeabi_ui2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	ec43 2b10 	vmov	d0, r2, r3
 800122c:	f002 fe30 	bl	8003e90 <sin>
 8001230:	ec53 2b10 	vmov	r2, r3, d0
 8001234:	4620      	mov	r0, r4
 8001236:	4629      	mov	r1, r5
 8001238:	f7ff f842 	bl	80002c0 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	2303      	movs	r3, #3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fab6 	bl	80007b8 <__aeabi_i2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7ff f964 	bl	8000520 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <calculateSin+0x8c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	18d4      	adds	r4, r2, r3
 800126a:	f7ff fbbf 	bl	80009ec <__aeabi_d2uiz>
 800126e:	4603      	mov	r3, r0
 8001270:	b29b      	uxth	r3, r3
 8001272:	8023      	strh	r3, [r4, #0]
	for (uint16_t index = 0; index < 628; index++) {
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	3301      	adds	r3, #1
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 8001280:	d3c6      	bcc.n	8001210 <calculateSin+0x10>
	}
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bdb0      	pop	{r4, r5, r7, pc}
 800128c:	2000017c 	.word	0x2000017c

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_MspInit+0x4c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x4c>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_DAC_MspInit+0x7c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d127      	bne.n	8001352 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_DAC_MspInit+0x80>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_DAC_MspInit+0x80>)
 800130c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_DAC_MspInit+0x80>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_DAC_MspInit+0x80>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_DAC_MspInit+0x80>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_DAC_MspInit+0x80>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800133a:	2310      	movs	r3, #16
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_DAC_MspInit+0x84>)
 800134e:	f000 fb9f 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40007400 	.word	0x40007400
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10d      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_TIM_Base_MspInit+0x40>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_TIM_Base_MspInit+0x40>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_TIM_Base_MspInit+0x40>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40001000 	.word	0x40001000
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART3)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <HAL_USART_MspInit+0xc4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d14b      	bne.n	8001466 <HAL_USART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_USART_MspInit+0xc8>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_USART_MspInit+0xc8>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_USART_MspInit+0xc8>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_USART_MspInit+0xc8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a20      	ldr	r2, [pc, #128]	; (8001474 <HAL_USART_MspInit+0xc8>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_USART_MspInit+0xc8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_USART_MspInit+0xc8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_USART_MspInit+0xc8>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_USART_MspInit+0xc8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001434:	2307      	movs	r3, #7
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <HAL_USART_MspInit+0xcc>)
 8001440:	f000 fb26 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4806      	ldr	r0, [pc, #24]	; (800147c <HAL_USART_MspInit+0xd0>)
 8001462:	f000 fb15 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004800 	.word	0x40004800
 8001474:	40023800 	.word	0x40023800
 8001478:	40020400 	.word	0x40020400
 800147c:	40020c00 	.word	0x40020c00

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f8c6 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f002 f902 	bl	800370c <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20020000 	.word	0x20020000
 8001534:	00000400 	.word	0x00000400
 8001538:	20000188 	.word	0x20000188
 800153c:	200002d8 	.word	0x200002d8

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158e:	f7ff ffd7 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f002 f8c1 	bl	8003718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fdb1 	bl	80010fc <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015a8:	08005198 	.word	0x08005198
  ldr r2, =_sbss
 80015ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015b0:	200002d8 	.word	0x200002d8

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f92b 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fe50 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f943 	bl	80018a6 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 f90b 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	2000018c 	.word	0x2000018c

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000018c 	.word	0x2000018c

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <__NVIC_EnableIRQ+0x38>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181c:	f7ff ff8e 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff29 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff3e 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff8e 	bl	8001790 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5d 	bl	800173c <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff31 	bl	8001700 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e014      	b.n	80018fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fcfd 	bl	80012e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	795b      	ldrb	r3, [r3, #5]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_DAC_Start+0x16>
 8001914:	2302      	movs	r3, #2
 8001916:	e040      	b.n	800199a <HAL_DAC_Start+0x98>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2201      	movs	r2, #1
 8001932:	409a      	lsls	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10f      	bne.n	8001962 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800194c:	2b3c      	cmp	r3, #60	; 0x3c
 800194e:	d11d      	bne.n	800198c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	e014      	b.n	800198c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	213c      	movs	r1, #60	; 0x3c
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	429a      	cmp	r2, r3
 800197a:	d107      	bne.n	800198c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0202 	orr.w	r2, r2, #2
 800198a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b087      	sub	sp, #28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	3308      	adds	r3, #8
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e004      	b.n	80019da <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	3314      	adds	r3, #20
 80019d8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	461a      	mov	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	795b      	ldrb	r3, [r3, #5]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_DAC_ConfigChannel+0x18>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e03c      	b.n	8001a82 <HAL_DAC_ConfigChannel+0x92>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2202      	movs	r2, #2
 8001a12:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	22c0      	movs	r2, #192	; 0xc0
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e165      	b.n	8001d78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8154 	bne.w	8001d72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80ae 	beq.w	8001d72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a5c      	ldr	r2, [pc, #368]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b5a      	ldr	r3, [pc, #360]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_GPIO_Init+0x308>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <HAL_GPIO_Init+0x30c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x310>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x314>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_GPIO_Init+0x318>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x20a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_GPIO_Init+0x31c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_GPIO_Init+0x320>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x202>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00c      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x21c>
 8001caa:	2300      	movs	r3, #0
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a31      	ldr	r2, [pc, #196]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d42:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	f67f ae96 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40021400 	.word	0x40021400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0cc      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d90c      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b8      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	494d      	ldr	r1, [pc, #308]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d044      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d119      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e07f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d003      	beq.n	8001eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e067      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4934      	ldr	r1, [pc, #208]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7ff fbd2 	bl	8001684 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7ff fbce 	bl	8001684 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e04f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d20c      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e032      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f72:	f000 f855 	bl	8002020 <HAL_RCC_GetSysClockFreq>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	490a      	ldr	r1, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	5ccb      	ldrb	r3, [r1, r3]
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fb32 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08004f64 	.word	0x08004f64
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0a9b      	lsrs	r3, r3, #10
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08004f74 	.word	0x08004f74

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ffc:	f7ff ffdc 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0b5b      	lsrs	r3, r3, #13
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	08004f74 	.word	0x08004f74

08002020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002024:	b0ae      	sub	sp, #184	; 0xb8
 8002026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002046:	4bcb      	ldr	r3, [pc, #812]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b0c      	cmp	r3, #12
 8002050:	f200 8206 	bhi.w	8002460 <HAL_RCC_GetSysClockFreq+0x440>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	08002091 	.word	0x08002091
 8002060:	08002461 	.word	0x08002461
 8002064:	08002461 	.word	0x08002461
 8002068:	08002461 	.word	0x08002461
 800206c:	08002099 	.word	0x08002099
 8002070:	08002461 	.word	0x08002461
 8002074:	08002461 	.word	0x08002461
 8002078:	08002461 	.word	0x08002461
 800207c:	080020a1 	.word	0x080020a1
 8002080:	08002461 	.word	0x08002461
 8002084:	08002461 	.word	0x08002461
 8002088:	08002461 	.word	0x08002461
 800208c:	08002291 	.word	0x08002291
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4bb9      	ldr	r3, [pc, #740]	; (8002378 <HAL_RCC_GetSysClockFreq+0x358>)
 8002092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002096:	e1e7      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002098:	4bb8      	ldr	r3, [pc, #736]	; (800237c <HAL_RCC_GetSysClockFreq+0x35c>)
 800209a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800209e:	e1e3      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a0:	4bb4      	ldr	r3, [pc, #720]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ac:	4bb1      	ldr	r3, [pc, #708]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d071      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b8:	4bae      	ldr	r3, [pc, #696]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	2200      	movs	r2, #0
 80020c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020de:	4622      	mov	r2, r4
 80020e0:	462b      	mov	r3, r5
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	0159      	lsls	r1, r3, #5
 80020ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f0:	0150      	lsls	r0, r2, #5
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4621      	mov	r1, r4
 80020f8:	1a51      	subs	r1, r2, r1
 80020fa:	6439      	str	r1, [r7, #64]	; 0x40
 80020fc:	4629      	mov	r1, r5
 80020fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002110:	4649      	mov	r1, r9
 8002112:	018b      	lsls	r3, r1, #6
 8002114:	4641      	mov	r1, r8
 8002116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800211a:	4641      	mov	r1, r8
 800211c:	018a      	lsls	r2, r1, #6
 800211e:	4641      	mov	r1, r8
 8002120:	1a51      	subs	r1, r2, r1
 8002122:	63b9      	str	r1, [r7, #56]	; 0x38
 8002124:	4649      	mov	r1, r9
 8002126:	eb63 0301 	sbc.w	r3, r3, r1
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002138:	4649      	mov	r1, r9
 800213a:	00cb      	lsls	r3, r1, #3
 800213c:	4641      	mov	r1, r8
 800213e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002142:	4641      	mov	r1, r8
 8002144:	00ca      	lsls	r2, r1, #3
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	4603      	mov	r3, r0
 800214c:	4622      	mov	r2, r4
 800214e:	189b      	adds	r3, r3, r2
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
 8002152:	462b      	mov	r3, r5
 8002154:	460a      	mov	r2, r1
 8002156:	eb42 0303 	adc.w	r3, r2, r3
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002168:	4629      	mov	r1, r5
 800216a:	024b      	lsls	r3, r1, #9
 800216c:	4621      	mov	r1, r4
 800216e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002172:	4621      	mov	r1, r4
 8002174:	024a      	lsls	r2, r1, #9
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002188:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800218c:	f7fe fc4e 	bl	8000a2c <__aeabi_uldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4613      	mov	r3, r2
 8002196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800219a:	e067      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219c:	4b75      	ldr	r3, [pc, #468]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021b6:	2300      	movs	r3, #0
 80021b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80021be:	4622      	mov	r2, r4
 80021c0:	462b      	mov	r3, r5
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	0159      	lsls	r1, r3, #5
 80021cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d0:	0150      	lsls	r0, r2, #5
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4621      	mov	r1, r4
 80021d8:	1a51      	subs	r1, r2, r1
 80021da:	62b9      	str	r1, [r7, #40]	; 0x28
 80021dc:	4629      	mov	r1, r5
 80021de:	eb63 0301 	sbc.w	r3, r3, r1
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80021f0:	4649      	mov	r1, r9
 80021f2:	018b      	lsls	r3, r1, #6
 80021f4:	4641      	mov	r1, r8
 80021f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021fa:	4641      	mov	r1, r8
 80021fc:	018a      	lsls	r2, r1, #6
 80021fe:	4641      	mov	r1, r8
 8002200:	ebb2 0a01 	subs.w	sl, r2, r1
 8002204:	4649      	mov	r1, r9
 8002206:	eb63 0b01 	sbc.w	fp, r3, r1
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002216:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800221a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800221e:	4692      	mov	sl, r2
 8002220:	469b      	mov	fp, r3
 8002222:	4623      	mov	r3, r4
 8002224:	eb1a 0303 	adds.w	r3, sl, r3
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	462b      	mov	r3, r5
 800222c:	eb4b 0303 	adc.w	r3, fp, r3
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800223e:	4629      	mov	r1, r5
 8002240:	028b      	lsls	r3, r1, #10
 8002242:	4621      	mov	r1, r4
 8002244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002248:	4621      	mov	r1, r4
 800224a:	028a      	lsls	r2, r1, #10
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002254:	2200      	movs	r2, #0
 8002256:	673b      	str	r3, [r7, #112]	; 0x70
 8002258:	677a      	str	r2, [r7, #116]	; 0x74
 800225a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800225e:	f7fe fbe5 	bl	8000a2c <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4613      	mov	r3, r2
 8002268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800226c:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	3301      	adds	r3, #1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800227e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800228e:	e0eb      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002290:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d06b      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_RCC_GetSysClockFreq+0x354>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80022b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ba:	663b      	str	r3, [r7, #96]	; 0x60
 80022bc:	2300      	movs	r3, #0
 80022be:	667b      	str	r3, [r7, #100]	; 0x64
 80022c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022c4:	4622      	mov	r2, r4
 80022c6:	462b      	mov	r3, r5
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	0159      	lsls	r1, r3, #5
 80022d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d6:	0150      	lsls	r0, r2, #5
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4621      	mov	r1, r4
 80022de:	1a51      	subs	r1, r2, r1
 80022e0:	61b9      	str	r1, [r7, #24]
 80022e2:	4629      	mov	r1, r5
 80022e4:	eb63 0301 	sbc.w	r3, r3, r1
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022f6:	4659      	mov	r1, fp
 80022f8:	018b      	lsls	r3, r1, #6
 80022fa:	4651      	mov	r1, sl
 80022fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002300:	4651      	mov	r1, sl
 8002302:	018a      	lsls	r2, r1, #6
 8002304:	4651      	mov	r1, sl
 8002306:	ebb2 0801 	subs.w	r8, r2, r1
 800230a:	4659      	mov	r1, fp
 800230c:	eb63 0901 	sbc.w	r9, r3, r1
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800231c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002320:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002324:	4690      	mov	r8, r2
 8002326:	4699      	mov	r9, r3
 8002328:	4623      	mov	r3, r4
 800232a:	eb18 0303 	adds.w	r3, r8, r3
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	462b      	mov	r3, r5
 8002332:	eb49 0303 	adc.w	r3, r9, r3
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002344:	4629      	mov	r1, r5
 8002346:	024b      	lsls	r3, r1, #9
 8002348:	4621      	mov	r1, r4
 800234a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800234e:	4621      	mov	r1, r4
 8002350:	024a      	lsls	r2, r1, #9
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800235a:	2200      	movs	r2, #0
 800235c:	65bb      	str	r3, [r7, #88]	; 0x58
 800235e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002360:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002364:	f7fe fb62 	bl	8000a2c <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002372:	e065      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x420>
 8002374:	40023800 	.word	0x40023800
 8002378:	00f42400 	.word	0x00f42400
 800237c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002380:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_GetSysClockFreq+0x458>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	2200      	movs	r2, #0
 8002388:	4618      	mov	r0, r3
 800238a:	4611      	mov	r1, r2
 800238c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002390:	653b      	str	r3, [r7, #80]	; 0x50
 8002392:	2300      	movs	r3, #0
 8002394:	657b      	str	r3, [r7, #84]	; 0x54
 8002396:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800239a:	4642      	mov	r2, r8
 800239c:	464b      	mov	r3, r9
 800239e:	f04f 0000 	mov.w	r0, #0
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	0159      	lsls	r1, r3, #5
 80023a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ac:	0150      	lsls	r0, r2, #5
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4641      	mov	r1, r8
 80023b4:	1a51      	subs	r1, r2, r1
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	4649      	mov	r1, r9
 80023ba:	eb63 0301 	sbc.w	r3, r3, r1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023cc:	4659      	mov	r1, fp
 80023ce:	018b      	lsls	r3, r1, #6
 80023d0:	4651      	mov	r1, sl
 80023d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d6:	4651      	mov	r1, sl
 80023d8:	018a      	lsls	r2, r1, #6
 80023da:	4651      	mov	r1, sl
 80023dc:	1a54      	subs	r4, r2, r1
 80023de:	4659      	mov	r1, fp
 80023e0:	eb63 0501 	sbc.w	r5, r3, r1
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	00eb      	lsls	r3, r5, #3
 80023ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023f2:	00e2      	lsls	r2, r4, #3
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
 80023f8:	4643      	mov	r3, r8
 80023fa:	18e3      	adds	r3, r4, r3
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	464b      	mov	r3, r9
 8002400:	eb45 0303 	adc.w	r3, r5, r3
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002412:	4629      	mov	r1, r5
 8002414:	028b      	lsls	r3, r1, #10
 8002416:	4621      	mov	r1, r4
 8002418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800241c:	4621      	mov	r1, r4
 800241e:	028a      	lsls	r2, r1, #10
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002428:	2200      	movs	r2, #0
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
 800242c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800242e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002432:	f7fe fafb 	bl	8000a2c <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4613      	mov	r3, r2
 800243c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_GetSysClockFreq+0x458>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	0f1b      	lsrs	r3, r3, #28
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800244e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800245e:	e003      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002466:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800246c:	4618      	mov	r0, r3
 800246e:	37b8      	adds	r7, #184	; 0xb8
 8002470:	46bd      	mov	sp, r7
 8002472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	00f42400 	.word	0x00f42400

08002480 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e28d      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8083 	beq.w	80025a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024a0:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d019      	beq.n	80024e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ac:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024b8:	4b8e      	ldr	r3, [pc, #568]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c4:	d00c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b84      	ldr	r3, [pc, #528]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05b      	beq.n	80025a4 <HAL_RCC_OscConfig+0x124>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d157      	bne.n	80025a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e25a      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x90>
 8002502:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7b      	ldr	r2, [pc, #492]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xcc>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0xb4>
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a72      	ldr	r2, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xcc>
 8002534:	4b6f      	ldr	r3, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6e      	ldr	r2, [pc, #440]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6b      	ldr	r2, [pc, #428]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff f896 	bl	8001684 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f892 	bl	8001684 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e21f      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xdc>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7ff f882 	bl	8001684 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff f87e 	bl	8001684 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e20b      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x104>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d06f      	beq.n	8002692 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d017      	beq.n	80025ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025be:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x186>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e1d3      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4937      	ldr	r1, [pc, #220]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_RCC_OscConfig+0x278>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7ff f82b 	bl	8001684 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff f827 	bl	8001684 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1b4      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4925      	ldr	r1, [pc, #148]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x278>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff f80a 	bl	8001684 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002674:	f7ff f806 	bl	8001684 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e193      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d036      	beq.n	800270c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x27c>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe ffea 	bl	8001684 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b4:	f7fe ffe6 	bl	8001684 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e173      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80026c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x234>
 80026d2:	e01b      	b.n	800270c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x27c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fe ffd3 	bl	8001684 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	e00e      	b.n	8002700 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe ffcf 	bl	8001684 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d907      	bls.n	8002700 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e15c      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	42470000 	.word	0x42470000
 80026fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b8a      	ldr	r3, [pc, #552]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ea      	bne.n	80026e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8097 	beq.w	8002848 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b83      	ldr	r3, [pc, #524]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b7f      	ldr	r3, [pc, #508]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a7e      	ldr	r2, [pc, #504]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b7c      	ldr	r3, [pc, #496]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b79      	ldr	r3, [pc, #484]	; (8002930 <HAL_RCC_OscConfig+0x4b0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCC_OscConfig+0x4b0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a75      	ldr	r2, [pc, #468]	; (8002930 <HAL_RCC_OscConfig+0x4b0>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe ff8f 	bl	8001684 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe ff8b 	bl	8001684 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e118      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_RCC_OscConfig+0x4b0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x31e>
 8002790:	4b66      	ldr	r3, [pc, #408]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a65      	ldr	r2, [pc, #404]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x358>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x340>
 80027a6:	4b61      	ldr	r3, [pc, #388]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a60      	ldr	r2, [pc, #384]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	4b5e      	ldr	r3, [pc, #376]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a5d      	ldr	r2, [pc, #372]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0x358>
 80027c0:	4b5a      	ldr	r3, [pc, #360]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a59      	ldr	r2, [pc, #356]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b57      	ldr	r3, [pc, #348]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a56      	ldr	r2, [pc, #344]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe ff50 	bl	8001684 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe ff4c 	bl	8001684 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0d7      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	4b4b      	ldr	r3, [pc, #300]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ee      	beq.n	80027e8 <HAL_RCC_OscConfig+0x368>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7fe ff3a 	bl	8001684 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe ff36 	bl	8001684 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0c1      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282a:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ee      	bne.n	8002814 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a3a      	ldr	r2, [pc, #232]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80ad 	beq.w	80029ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b08      	cmp	r3, #8
 800285c:	d060      	beq.n	8002920 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d145      	bne.n	80028f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b33      	ldr	r3, [pc, #204]	; (8002934 <HAL_RCC_OscConfig+0x4b4>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe ff0a 	bl	8001684 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe ff06 	bl	8001684 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e093      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	071b      	lsls	r3, r3, #28
 80028be:	491b      	ldr	r1, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x4b4>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fedb 	bl	8001684 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe fed7 	bl	8001684 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e064      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x452>
 80028f0:	e05c      	b.n	80029ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_RCC_OscConfig+0x4b4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fec4 	bl	8001684 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fec0 	bl	8001684 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e04d      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_OscConfig+0x4ac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x480>
 800291e:	e045      	b.n	80029ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e040      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
 800292c:	40023800 	.word	0x40023800
 8002930:	40007000 	.word	0x40007000
 8002934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_RCC_OscConfig+0x538>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d030      	beq.n	80029a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d129      	bne.n	80029a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d122      	bne.n	80029a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002970:	4293      	cmp	r3, r2
 8002972:	d119      	bne.n	80029a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d10f      	bne.n	80029a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e041      	b.n	8002a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fcc0 	bl	8001368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 f8be 	bl	8002b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d001      	beq.n	8002a74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e046      	b.n	8002b02 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <HAL_TIM_Base_Start+0xb4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d022      	beq.n	8002acc <HAL_TIM_Base_Start+0x70>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d01d      	beq.n	8002acc <HAL_TIM_Base_Start+0x70>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_TIM_Base_Start+0xb8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d018      	beq.n	8002acc <HAL_TIM_Base_Start+0x70>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_TIM_Base_Start+0xbc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_TIM_Base_Start+0x70>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_TIM_Base_Start+0xc0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00e      	beq.n	8002acc <HAL_TIM_Base_Start+0x70>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_TIM_Base_Start+0xc4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_TIM_Base_Start+0x70>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_TIM_Base_Start+0xc8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_TIM_Base_Start+0x70>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_TIM_Base_Start+0xcc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d111      	bne.n	8002af0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d010      	beq.n	8002b00 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	e007      	b.n	8002b00 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40000800 	.word	0x40000800
 8002b1c:	40000c00 	.word	0x40000c00
 8002b20:	40010400 	.word	0x40010400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40001800 	.word	0x40001800

08002b2c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <HAL_TIM_Base_Stop+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a1a      	ldr	r2, [r3, #32]
 8002b4a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_Base_Stop+0x38>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a40      	ldr	r2, [pc, #256]	; (8002c90 <TIM_Base_SetConfig+0x114>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d013      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9a:	d00f      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3d      	ldr	r2, [pc, #244]	; (8002c94 <TIM_Base_SetConfig+0x118>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <TIM_Base_SetConfig+0x11c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <TIM_Base_SetConfig+0x120>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_Base_SetConfig+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <TIM_Base_SetConfig+0x124>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d108      	bne.n	8002bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2f      	ldr	r2, [pc, #188]	; (8002c90 <TIM_Base_SetConfig+0x114>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d02b      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d027      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <TIM_Base_SetConfig+0x118>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d023      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <TIM_Base_SetConfig+0x11c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <TIM_Base_SetConfig+0x120>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01b      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <TIM_Base_SetConfig+0x124>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d017      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a28      	ldr	r2, [pc, #160]	; (8002ca4 <TIM_Base_SetConfig+0x128>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <TIM_Base_SetConfig+0x12c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00f      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <TIM_Base_SetConfig+0x130>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <TIM_Base_SetConfig+0x134>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <TIM_Base_SetConfig+0x138>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <TIM_Base_SetConfig+0x13c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <TIM_Base_SetConfig+0x114>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_Base_SetConfig+0xf8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <TIM_Base_SetConfig+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	615a      	str	r2, [r3, #20]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40010400 	.word	0x40010400
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	40014400 	.word	0x40014400
 8002cac:	40014800 	.word	0x40014800
 8002cb0:	40001800 	.word	0x40001800
 8002cb4:	40001c00 	.word	0x40001c00
 8002cb8:	40002000 	.word	0x40002000

08002cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e05a      	b.n	8002d8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d01d      	beq.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d018      	beq.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00e      	beq.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10c      	bne.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40000c00 	.word	0x40000c00
 8002da8:	40010400 	.word	0x40010400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40001800 	.word	0x40001800

08002db4 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e033      	b.n	8002e2e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fae6 	bl	80013ac <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f90b 	bl	8003004 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e0c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08a      	sub	sp, #40	; 0x28
 8002e3a:	af02      	add	r7, sp, #8
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d17c      	bne.n	8002f4c <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_USART_Transmit+0x28>
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e075      	b.n	8002f4e <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_USART_Transmit+0x3a>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e06e      	b.n	8002f4e <HAL_USART_Transmit+0x118>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2212      	movs	r2, #18
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e86:	f7fe fbfd 	bl	8001684 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_USART_Transmit+0x7e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e003      	b.n	8002ebc <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8002ebc:	e02a      	b.n	8002f14 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f844 	bl	8002f56 <USART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e03a      	b.n	8002f4e <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10b      	bne.n	8002ef6 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eec:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	e007      	b.n	8002f06 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1cf      	bne.n	8002ebe <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2140      	movs	r1, #64	; 0x40
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f814 	bl	8002f56 <USART_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e00a      	b.n	8002f4e <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002f66:	e038      	b.n	8002fda <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6e:	d034      	beq.n	8002fda <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <USART_WaitOnFlagUntilTimeout+0x30>
 8002f76:	f7fe fb85 	bl	8001684 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d229      	bcs.n	8002fda <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f94:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0220 	bic.w	r2, r2, #32
 8002fa4:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb4:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00f      	b.n	8002ffa <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0b7      	beq.n	8002f68 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003008:	b0c6      	sub	sp, #280	; 0x118
 800300a:	af00      	add	r7, sp, #0
 800300c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68d9      	ldr	r1, [r3, #12]
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f021 030c 	bic.w	r3, r1, #12
 8003028:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800302a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800303e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003046:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304c:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800304e:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800305e:	431a      	orrs	r2, r3
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003064:	4313      	orrs	r3, r2
 8003066:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800306a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003078:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800307a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800308a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800308e:	f023 030c 	bic.w	r3, r3, #12
 8003092:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80030ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c4:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80030c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6959      	ldr	r1, [r3, #20]
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80030d8:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80030da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b8b      	ldr	r3, [pc, #556]	; (8003310 <USART_SetConfig+0x30c>)
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d006      	beq.n	80030f4 <USART_SetConfig+0xf0>
 80030e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b89      	ldr	r3, [pc, #548]	; (8003314 <USART_SetConfig+0x310>)
 80030ee:	429a      	cmp	r2, r3
 80030f0:	f040 8114 	bne.w	800331c <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030f4:	f7fe ff80 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 80030f8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80030fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003106:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800310a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	1891      	adds	r1, r2, r2
 8003114:	6739      	str	r1, [r7, #112]	; 0x70
 8003116:	415b      	adcs	r3, r3
 8003118:	677b      	str	r3, [r7, #116]	; 0x74
 800311a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800311e:	4621      	mov	r1, r4
 8003120:	eb12 0801 	adds.w	r8, r2, r1
 8003124:	4629      	mov	r1, r5
 8003126:	eb43 0901 	adc.w	r9, r3, r1
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313e:	4690      	mov	r8, r2
 8003140:	4699      	mov	r9, r3
 8003142:	4623      	mov	r3, r4
 8003144:	eb18 0303 	adds.w	r3, r8, r3
 8003148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800314c:	462b      	mov	r3, r5
 800314e:	eb49 0303 	adc.w	r3, r9, r3
 8003152:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003162:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003166:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800316a:	460b      	mov	r3, r1
 800316c:	18db      	adds	r3, r3, r3
 800316e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003170:	4613      	mov	r3, r2
 8003172:	eb42 0303 	adc.w	r3, r2, r3
 8003176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003178:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800317c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003180:	f7fd fc54 	bl	8000a2c <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b63      	ldr	r3, [pc, #396]	; (8003318 <USART_SetConfig+0x314>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800319c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	6639      	str	r1, [r7, #96]	; 0x60
 80031ac:	415b      	adcs	r3, r3
 80031ae:	667b      	str	r3, [r7, #100]	; 0x64
 80031b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80031b4:	4641      	mov	r1, r8
 80031b6:	1851      	adds	r1, r2, r1
 80031b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80031ba:	4649      	mov	r1, r9
 80031bc:	414b      	adcs	r3, r1
 80031be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80031cc:	4659      	mov	r1, fp
 80031ce:	00cb      	lsls	r3, r1, #3
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d6:	4651      	mov	r1, sl
 80031d8:	00ca      	lsls	r2, r1, #3
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	4642      	mov	r2, r8
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031e8:	464b      	mov	r3, r9
 80031ea:	460a      	mov	r2, r1
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003200:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003204:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003208:	460b      	mov	r3, r1
 800320a:	18db      	adds	r3, r3, r3
 800320c:	653b      	str	r3, [r7, #80]	; 0x50
 800320e:	4613      	mov	r3, r2
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	657b      	str	r3, [r7, #84]	; 0x54
 8003216:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800321a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800321e:	f7fd fc05 	bl	8000a2c <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4611      	mov	r1, r2
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <USART_SetConfig+0x314>)
 800322a:	fba3 2301 	umull	r2, r3, r3, r1
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2264      	movs	r2, #100	; 0x64
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	1acb      	subs	r3, r1, r3
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <USART_SetConfig+0x314>)
 8003240:	fba3 2302 	umull	r2, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800324c:	441c      	add	r4, r3
 800324e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800325c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	64b9      	str	r1, [r7, #72]	; 0x48
 8003268:	415b      	adcs	r3, r3
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800326c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6439      	str	r1, [r7, #64]	; 0x40
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c4:	460b      	mov	r3, r1
 80032c6:	18db      	adds	r3, r3, r3
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ca:	4613      	mov	r3, r2
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032da:	f7fd fba7 	bl	8000a2c <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <USART_SetConfig+0x314>)
 80032e4:	fba3 1302 	umull	r1, r3, r3, r2
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	2164      	movs	r1, #100	; 0x64
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	3332      	adds	r3, #50	; 0x32
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <USART_SetConfig+0x314>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4422      	add	r2, r4
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e109      	b.n	8003522 <USART_SetConfig+0x51e>
 800330e:	bf00      	nop
 8003310:	40011000 	.word	0x40011000
 8003314:	40011400 	.word	0x40011400
 8003318:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe fe58 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8003320:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003324:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800332e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003332:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003336:	4642      	mov	r2, r8
 8003338:	464b      	mov	r3, r9
 800333a:	1891      	adds	r1, r2, r2
 800333c:	6339      	str	r1, [r7, #48]	; 0x30
 800333e:	415b      	adcs	r3, r3
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
 8003342:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003346:	4641      	mov	r1, r8
 8003348:	1854      	adds	r4, r2, r1
 800334a:	4649      	mov	r1, r9
 800334c:	eb43 0501 	adc.w	r5, r3, r1
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	00eb      	lsls	r3, r5, #3
 800335a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335e:	00e2      	lsls	r2, r4, #3
 8003360:	4614      	mov	r4, r2
 8003362:	461d      	mov	r5, r3
 8003364:	4643      	mov	r3, r8
 8003366:	18e3      	adds	r3, r4, r3
 8003368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800336c:	464b      	mov	r3, r9
 800336e:	eb45 0303 	adc.w	r3, r5, r3
 8003372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003382:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003386:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800338a:	460b      	mov	r3, r1
 800338c:	18db      	adds	r3, r3, r3
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003390:	4613      	mov	r3, r2
 8003392:	eb42 0303 	adc.w	r3, r2, r3
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800339c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033a0:	f7fd fb44 	bl	8000a2c <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4b61      	ldr	r3, [pc, #388]	; (8003530 <USART_SetConfig+0x52c>)
 80033aa:	fba3 2302 	umull	r2, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	011c      	lsls	r4, r3, #4
 80033b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033bc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033c0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	1891      	adds	r1, r2, r2
 80033ca:	6239      	str	r1, [r7, #32]
 80033cc:	415b      	adcs	r3, r3
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033d4:	4641      	mov	r1, r8
 80033d6:	eb12 0a01 	adds.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb43 0b01 	adc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f4:	4692      	mov	sl, r2
 80033f6:	469b      	mov	fp, r3
 80033f8:	4643      	mov	r3, r8
 80033fa:	eb1a 0303 	adds.w	r3, sl, r3
 80033fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003402:	464b      	mov	r3, r9
 8003404:	eb4b 0303 	adc.w	r3, fp, r3
 8003408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800340c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003418:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800341c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003420:	460b      	mov	r3, r1
 8003422:	18db      	adds	r3, r3, r3
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	4613      	mov	r3, r2
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003432:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003436:	f7fd faf9 	bl	8000a2c <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4611      	mov	r1, r2
 8003440:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <USART_SetConfig+0x52c>)
 8003442:	fba3 2301 	umull	r2, r3, r3, r1
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2264      	movs	r2, #100	; 0x64
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	1acb      	subs	r3, r1, r3
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <USART_SetConfig+0x52c>)
 8003458:	fba3 2302 	umull	r2, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003464:	441c      	add	r4, r3
 8003466:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003470:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	1891      	adds	r1, r2, r2
 800347e:	6139      	str	r1, [r7, #16]
 8003480:	415b      	adcs	r3, r3
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003488:	4641      	mov	r1, r8
 800348a:	1851      	adds	r1, r2, r1
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4649      	mov	r1, r9
 8003490:	414b      	adcs	r3, r1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034a0:	4659      	mov	r1, fp
 80034a2:	00cb      	lsls	r3, r1, #3
 80034a4:	4651      	mov	r1, sl
 80034a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034aa:	4651      	mov	r1, sl
 80034ac:	00ca      	lsls	r2, r1, #3
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	4642      	mov	r2, r8
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034bc:	464b      	mov	r3, r9
 80034be:	460a      	mov	r2, r1
 80034c0:	eb42 0303 	adc.w	r3, r2, r3
 80034c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80034d8:	460b      	mov	r3, r1
 80034da:	18db      	adds	r3, r3, r3
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4613      	mov	r3, r2
 80034e0:	eb42 0303 	adc.w	r3, r2, r3
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034ee:	f7fd fa9d 	bl	8000a2c <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <USART_SetConfig+0x52c>)
 80034f8:	fba3 1302 	umull	r1, r3, r3, r2
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	2164      	movs	r1, #100	; 0x64
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	3332      	adds	r3, #50	; 0x32
 800350a:	4a09      	ldr	r2, [pc, #36]	; (8003530 <USART_SetConfig+0x52c>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	f003 0207 	and.w	r2, r3, #7
 8003516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4422      	add	r2, r4
 800351e:	609a      	str	r2, [r3, #8]
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352e:	bf00      	nop
 8003530:	51eb851f 	.word	0x51eb851f

08003534 <malloc>:
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <malloc+0xc>)
 8003536:	4601      	mov	r1, r0
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f000 b823 	b.w	8003584 <_malloc_r>
 800353e:	bf00      	nop
 8003540:	20000058 	.word	0x20000058

08003544 <sbrk_aligned>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4e0e      	ldr	r6, [pc, #56]	; (8003580 <sbrk_aligned+0x3c>)
 8003548:	460c      	mov	r4, r1
 800354a:	6831      	ldr	r1, [r6, #0]
 800354c:	4605      	mov	r5, r0
 800354e:	b911      	cbnz	r1, 8003556 <sbrk_aligned+0x12>
 8003550:	f000 f8cc 	bl	80036ec <_sbrk_r>
 8003554:	6030      	str	r0, [r6, #0]
 8003556:	4621      	mov	r1, r4
 8003558:	4628      	mov	r0, r5
 800355a:	f000 f8c7 	bl	80036ec <_sbrk_r>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d00a      	beq.n	8003578 <sbrk_aligned+0x34>
 8003562:	1cc4      	adds	r4, r0, #3
 8003564:	f024 0403 	bic.w	r4, r4, #3
 8003568:	42a0      	cmp	r0, r4
 800356a:	d007      	beq.n	800357c <sbrk_aligned+0x38>
 800356c:	1a21      	subs	r1, r4, r0
 800356e:	4628      	mov	r0, r5
 8003570:	f000 f8bc 	bl	80036ec <_sbrk_r>
 8003574:	3001      	adds	r0, #1
 8003576:	d101      	bne.n	800357c <sbrk_aligned+0x38>
 8003578:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800357c:	4620      	mov	r0, r4
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	20000194 	.word	0x20000194

08003584 <_malloc_r>:
 8003584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003588:	1ccd      	adds	r5, r1, #3
 800358a:	f025 0503 	bic.w	r5, r5, #3
 800358e:	3508      	adds	r5, #8
 8003590:	2d0c      	cmp	r5, #12
 8003592:	bf38      	it	cc
 8003594:	250c      	movcc	r5, #12
 8003596:	2d00      	cmp	r5, #0
 8003598:	4607      	mov	r7, r0
 800359a:	db01      	blt.n	80035a0 <_malloc_r+0x1c>
 800359c:	42a9      	cmp	r1, r5
 800359e:	d905      	bls.n	80035ac <_malloc_r+0x28>
 80035a0:	230c      	movs	r3, #12
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	2600      	movs	r6, #0
 80035a6:	4630      	mov	r0, r6
 80035a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003680 <_malloc_r+0xfc>
 80035b0:	f000 f868 	bl	8003684 <__malloc_lock>
 80035b4:	f8d8 3000 	ldr.w	r3, [r8]
 80035b8:	461c      	mov	r4, r3
 80035ba:	bb5c      	cbnz	r4, 8003614 <_malloc_r+0x90>
 80035bc:	4629      	mov	r1, r5
 80035be:	4638      	mov	r0, r7
 80035c0:	f7ff ffc0 	bl	8003544 <sbrk_aligned>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	4604      	mov	r4, r0
 80035c8:	d155      	bne.n	8003676 <_malloc_r+0xf2>
 80035ca:	f8d8 4000 	ldr.w	r4, [r8]
 80035ce:	4626      	mov	r6, r4
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	d145      	bne.n	8003660 <_malloc_r+0xdc>
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d048      	beq.n	800366a <_malloc_r+0xe6>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	4631      	mov	r1, r6
 80035dc:	4638      	mov	r0, r7
 80035de:	eb04 0903 	add.w	r9, r4, r3
 80035e2:	f000 f883 	bl	80036ec <_sbrk_r>
 80035e6:	4581      	cmp	r9, r0
 80035e8:	d13f      	bne.n	800366a <_malloc_r+0xe6>
 80035ea:	6821      	ldr	r1, [r4, #0]
 80035ec:	1a6d      	subs	r5, r5, r1
 80035ee:	4629      	mov	r1, r5
 80035f0:	4638      	mov	r0, r7
 80035f2:	f7ff ffa7 	bl	8003544 <sbrk_aligned>
 80035f6:	3001      	adds	r0, #1
 80035f8:	d037      	beq.n	800366a <_malloc_r+0xe6>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	442b      	add	r3, r5
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	f8d8 3000 	ldr.w	r3, [r8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d038      	beq.n	800367a <_malloc_r+0xf6>
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	42a2      	cmp	r2, r4
 800360c:	d12b      	bne.n	8003666 <_malloc_r+0xe2>
 800360e:	2200      	movs	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e00f      	b.n	8003634 <_malloc_r+0xb0>
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	1b52      	subs	r2, r2, r5
 8003618:	d41f      	bmi.n	800365a <_malloc_r+0xd6>
 800361a:	2a0b      	cmp	r2, #11
 800361c:	d917      	bls.n	800364e <_malloc_r+0xca>
 800361e:	1961      	adds	r1, r4, r5
 8003620:	42a3      	cmp	r3, r4
 8003622:	6025      	str	r5, [r4, #0]
 8003624:	bf18      	it	ne
 8003626:	6059      	strne	r1, [r3, #4]
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	bf08      	it	eq
 800362c:	f8c8 1000 	streq.w	r1, [r8]
 8003630:	5162      	str	r2, [r4, r5]
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	4638      	mov	r0, r7
 8003636:	f104 060b 	add.w	r6, r4, #11
 800363a:	f000 f829 	bl	8003690 <__malloc_unlock>
 800363e:	f026 0607 	bic.w	r6, r6, #7
 8003642:	1d23      	adds	r3, r4, #4
 8003644:	1af2      	subs	r2, r6, r3
 8003646:	d0ae      	beq.n	80035a6 <_malloc_r+0x22>
 8003648:	1b9b      	subs	r3, r3, r6
 800364a:	50a3      	str	r3, [r4, r2]
 800364c:	e7ab      	b.n	80035a6 <_malloc_r+0x22>
 800364e:	42a3      	cmp	r3, r4
 8003650:	6862      	ldr	r2, [r4, #4]
 8003652:	d1dd      	bne.n	8003610 <_malloc_r+0x8c>
 8003654:	f8c8 2000 	str.w	r2, [r8]
 8003658:	e7ec      	b.n	8003634 <_malloc_r+0xb0>
 800365a:	4623      	mov	r3, r4
 800365c:	6864      	ldr	r4, [r4, #4]
 800365e:	e7ac      	b.n	80035ba <_malloc_r+0x36>
 8003660:	4634      	mov	r4, r6
 8003662:	6876      	ldr	r6, [r6, #4]
 8003664:	e7b4      	b.n	80035d0 <_malloc_r+0x4c>
 8003666:	4613      	mov	r3, r2
 8003668:	e7cc      	b.n	8003604 <_malloc_r+0x80>
 800366a:	230c      	movs	r3, #12
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4638      	mov	r0, r7
 8003670:	f000 f80e 	bl	8003690 <__malloc_unlock>
 8003674:	e797      	b.n	80035a6 <_malloc_r+0x22>
 8003676:	6025      	str	r5, [r4, #0]
 8003678:	e7dc      	b.n	8003634 <_malloc_r+0xb0>
 800367a:	605b      	str	r3, [r3, #4]
 800367c:	deff      	udf	#255	; 0xff
 800367e:	bf00      	nop
 8003680:	20000190 	.word	0x20000190

08003684 <__malloc_lock>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <__malloc_lock+0x8>)
 8003686:	f000 b86b 	b.w	8003760 <__retarget_lock_acquire_recursive>
 800368a:	bf00      	nop
 800368c:	200002d0 	.word	0x200002d0

08003690 <__malloc_unlock>:
 8003690:	4801      	ldr	r0, [pc, #4]	; (8003698 <__malloc_unlock+0x8>)
 8003692:	f000 b866 	b.w	8003762 <__retarget_lock_release_recursive>
 8003696:	bf00      	nop
 8003698:	200002d0 	.word	0x200002d0

0800369c <siprintf>:
 800369c:	b40e      	push	{r1, r2, r3}
 800369e:	b500      	push	{lr}
 80036a0:	b09c      	sub	sp, #112	; 0x70
 80036a2:	ab1d      	add	r3, sp, #116	; 0x74
 80036a4:	9002      	str	r0, [sp, #8]
 80036a6:	9006      	str	r0, [sp, #24]
 80036a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036ac:	4809      	ldr	r0, [pc, #36]	; (80036d4 <siprintf+0x38>)
 80036ae:	9107      	str	r1, [sp, #28]
 80036b0:	9104      	str	r1, [sp, #16]
 80036b2:	4909      	ldr	r1, [pc, #36]	; (80036d8 <siprintf+0x3c>)
 80036b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036b8:	9105      	str	r1, [sp, #20]
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	a902      	add	r1, sp, #8
 80036c0:	f000 f8f6 	bl	80038b0 <_svfiprintf_r>
 80036c4:	9b02      	ldr	r3, [sp, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	b01c      	add	sp, #112	; 0x70
 80036cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d0:	b003      	add	sp, #12
 80036d2:	4770      	bx	lr
 80036d4:	20000058 	.word	0x20000058
 80036d8:	ffff0208 	.word	0xffff0208

080036dc <memset>:
 80036dc:	4402      	add	r2, r0
 80036de:	4603      	mov	r3, r0
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d100      	bne.n	80036e6 <memset+0xa>
 80036e4:	4770      	bx	lr
 80036e6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ea:	e7f9      	b.n	80036e0 <memset+0x4>

080036ec <_sbrk_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d06      	ldr	r5, [pc, #24]	; (8003708 <_sbrk_r+0x1c>)
 80036f0:	2300      	movs	r3, #0
 80036f2:	4604      	mov	r4, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	f7fd feec 	bl	80014d4 <_sbrk>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_sbrk_r+0x1a>
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	b103      	cbz	r3, 8003706 <_sbrk_r+0x1a>
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	200002d4 	.word	0x200002d4

0800370c <__errno>:
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <__errno+0x8>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000058 	.word	0x20000058

08003718 <__libc_init_array>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	4d0d      	ldr	r5, [pc, #52]	; (8003750 <__libc_init_array+0x38>)
 800371c:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <__libc_init_array+0x3c>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	2600      	movs	r6, #0
 8003724:	42a6      	cmp	r6, r4
 8003726:	d109      	bne.n	800373c <__libc_init_array+0x24>
 8003728:	4d0b      	ldr	r5, [pc, #44]	; (8003758 <__libc_init_array+0x40>)
 800372a:	4c0c      	ldr	r4, [pc, #48]	; (800375c <__libc_init_array+0x44>)
 800372c:	f001 fbf0 	bl	8004f10 <_init>
 8003730:	1b64      	subs	r4, r4, r5
 8003732:	10a4      	asrs	r4, r4, #2
 8003734:	2600      	movs	r6, #0
 8003736:	42a6      	cmp	r6, r4
 8003738:	d105      	bne.n	8003746 <__libc_init_array+0x2e>
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003740:	4798      	blx	r3
 8003742:	3601      	adds	r6, #1
 8003744:	e7ee      	b.n	8003724 <__libc_init_array+0xc>
 8003746:	f855 3b04 	ldr.w	r3, [r5], #4
 800374a:	4798      	blx	r3
 800374c:	3601      	adds	r6, #1
 800374e:	e7f2      	b.n	8003736 <__libc_init_array+0x1e>
 8003750:	08005190 	.word	0x08005190
 8003754:	08005190 	.word	0x08005190
 8003758:	08005190 	.word	0x08005190
 800375c:	08005194 	.word	0x08005194

08003760 <__retarget_lock_acquire_recursive>:
 8003760:	4770      	bx	lr

08003762 <__retarget_lock_release_recursive>:
 8003762:	4770      	bx	lr

08003764 <_free_r>:
 8003764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003766:	2900      	cmp	r1, #0
 8003768:	d044      	beq.n	80037f4 <_free_r+0x90>
 800376a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800376e:	9001      	str	r0, [sp, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f1a1 0404 	sub.w	r4, r1, #4
 8003776:	bfb8      	it	lt
 8003778:	18e4      	addlt	r4, r4, r3
 800377a:	f7ff ff83 	bl	8003684 <__malloc_lock>
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <_free_r+0x94>)
 8003780:	9801      	ldr	r0, [sp, #4]
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	b933      	cbnz	r3, 8003794 <_free_r+0x30>
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	6014      	str	r4, [r2, #0]
 800378a:	b003      	add	sp, #12
 800378c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003790:	f7ff bf7e 	b.w	8003690 <__malloc_unlock>
 8003794:	42a3      	cmp	r3, r4
 8003796:	d908      	bls.n	80037aa <_free_r+0x46>
 8003798:	6825      	ldr	r5, [r4, #0]
 800379a:	1961      	adds	r1, r4, r5
 800379c:	428b      	cmp	r3, r1
 800379e:	bf01      	itttt	eq
 80037a0:	6819      	ldreq	r1, [r3, #0]
 80037a2:	685b      	ldreq	r3, [r3, #4]
 80037a4:	1949      	addeq	r1, r1, r5
 80037a6:	6021      	streq	r1, [r4, #0]
 80037a8:	e7ed      	b.n	8003786 <_free_r+0x22>
 80037aa:	461a      	mov	r2, r3
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b10b      	cbz	r3, 80037b4 <_free_r+0x50>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d9fa      	bls.n	80037aa <_free_r+0x46>
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	1855      	adds	r5, r2, r1
 80037b8:	42a5      	cmp	r5, r4
 80037ba:	d10b      	bne.n	80037d4 <_free_r+0x70>
 80037bc:	6824      	ldr	r4, [r4, #0]
 80037be:	4421      	add	r1, r4
 80037c0:	1854      	adds	r4, r2, r1
 80037c2:	42a3      	cmp	r3, r4
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	d1e0      	bne.n	800378a <_free_r+0x26>
 80037c8:	681c      	ldr	r4, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	6053      	str	r3, [r2, #4]
 80037ce:	440c      	add	r4, r1
 80037d0:	6014      	str	r4, [r2, #0]
 80037d2:	e7da      	b.n	800378a <_free_r+0x26>
 80037d4:	d902      	bls.n	80037dc <_free_r+0x78>
 80037d6:	230c      	movs	r3, #12
 80037d8:	6003      	str	r3, [r0, #0]
 80037da:	e7d6      	b.n	800378a <_free_r+0x26>
 80037dc:	6825      	ldr	r5, [r4, #0]
 80037de:	1961      	adds	r1, r4, r5
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf04      	itt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	6063      	str	r3, [r4, #4]
 80037ea:	bf04      	itt	eq
 80037ec:	1949      	addeq	r1, r1, r5
 80037ee:	6021      	streq	r1, [r4, #0]
 80037f0:	6054      	str	r4, [r2, #4]
 80037f2:	e7ca      	b.n	800378a <_free_r+0x26>
 80037f4:	b003      	add	sp, #12
 80037f6:	bd30      	pop	{r4, r5, pc}
 80037f8:	20000190 	.word	0x20000190

080037fc <__ssputs_r>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	688e      	ldr	r6, [r1, #8]
 8003802:	461f      	mov	r7, r3
 8003804:	42be      	cmp	r6, r7
 8003806:	680b      	ldr	r3, [r1, #0]
 8003808:	4682      	mov	sl, r0
 800380a:	460c      	mov	r4, r1
 800380c:	4690      	mov	r8, r2
 800380e:	d82c      	bhi.n	800386a <__ssputs_r+0x6e>
 8003810:	898a      	ldrh	r2, [r1, #12]
 8003812:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003816:	d026      	beq.n	8003866 <__ssputs_r+0x6a>
 8003818:	6965      	ldr	r5, [r4, #20]
 800381a:	6909      	ldr	r1, [r1, #16]
 800381c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003820:	eba3 0901 	sub.w	r9, r3, r1
 8003824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003828:	1c7b      	adds	r3, r7, #1
 800382a:	444b      	add	r3, r9
 800382c:	106d      	asrs	r5, r5, #1
 800382e:	429d      	cmp	r5, r3
 8003830:	bf38      	it	cc
 8003832:	461d      	movcc	r5, r3
 8003834:	0553      	lsls	r3, r2, #21
 8003836:	d527      	bpl.n	8003888 <__ssputs_r+0x8c>
 8003838:	4629      	mov	r1, r5
 800383a:	f7ff fea3 	bl	8003584 <_malloc_r>
 800383e:	4606      	mov	r6, r0
 8003840:	b360      	cbz	r0, 800389c <__ssputs_r+0xa0>
 8003842:	6921      	ldr	r1, [r4, #16]
 8003844:	464a      	mov	r2, r9
 8003846:	f000 fb0a 	bl	8003e5e <memcpy>
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	6126      	str	r6, [r4, #16]
 8003858:	6165      	str	r5, [r4, #20]
 800385a:	444e      	add	r6, r9
 800385c:	eba5 0509 	sub.w	r5, r5, r9
 8003860:	6026      	str	r6, [r4, #0]
 8003862:	60a5      	str	r5, [r4, #8]
 8003864:	463e      	mov	r6, r7
 8003866:	42be      	cmp	r6, r7
 8003868:	d900      	bls.n	800386c <__ssputs_r+0x70>
 800386a:	463e      	mov	r6, r7
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	4632      	mov	r2, r6
 8003870:	4641      	mov	r1, r8
 8003872:	f000 fada 	bl	8003e2a <memmove>
 8003876:	68a3      	ldr	r3, [r4, #8]
 8003878:	1b9b      	subs	r3, r3, r6
 800387a:	60a3      	str	r3, [r4, #8]
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	4433      	add	r3, r6
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	2000      	movs	r0, #0
 8003884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003888:	462a      	mov	r2, r5
 800388a:	f000 fa9f 	bl	8003dcc <_realloc_r>
 800388e:	4606      	mov	r6, r0
 8003890:	2800      	cmp	r0, #0
 8003892:	d1e0      	bne.n	8003856 <__ssputs_r+0x5a>
 8003894:	6921      	ldr	r1, [r4, #16]
 8003896:	4650      	mov	r0, sl
 8003898:	f7ff ff64 	bl	8003764 <_free_r>
 800389c:	230c      	movs	r3, #12
 800389e:	f8ca 3000 	str.w	r3, [sl]
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ae:	e7e9      	b.n	8003884 <__ssputs_r+0x88>

080038b0 <_svfiprintf_r>:
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	4698      	mov	r8, r3
 80038b6:	898b      	ldrh	r3, [r1, #12]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	b09d      	sub	sp, #116	; 0x74
 80038bc:	4607      	mov	r7, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	4614      	mov	r4, r2
 80038c2:	d50e      	bpl.n	80038e2 <_svfiprintf_r+0x32>
 80038c4:	690b      	ldr	r3, [r1, #16]
 80038c6:	b963      	cbnz	r3, 80038e2 <_svfiprintf_r+0x32>
 80038c8:	2140      	movs	r1, #64	; 0x40
 80038ca:	f7ff fe5b 	bl	8003584 <_malloc_r>
 80038ce:	6028      	str	r0, [r5, #0]
 80038d0:	6128      	str	r0, [r5, #16]
 80038d2:	b920      	cbnz	r0, 80038de <_svfiprintf_r+0x2e>
 80038d4:	230c      	movs	r3, #12
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038dc:	e0d0      	b.n	8003a80 <_svfiprintf_r+0x1d0>
 80038de:	2340      	movs	r3, #64	; 0x40
 80038e0:	616b      	str	r3, [r5, #20]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9309      	str	r3, [sp, #36]	; 0x24
 80038e6:	2320      	movs	r3, #32
 80038e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80038f0:	2330      	movs	r3, #48	; 0x30
 80038f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a98 <_svfiprintf_r+0x1e8>
 80038f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038fa:	f04f 0901 	mov.w	r9, #1
 80038fe:	4623      	mov	r3, r4
 8003900:	469a      	mov	sl, r3
 8003902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003906:	b10a      	cbz	r2, 800390c <_svfiprintf_r+0x5c>
 8003908:	2a25      	cmp	r2, #37	; 0x25
 800390a:	d1f9      	bne.n	8003900 <_svfiprintf_r+0x50>
 800390c:	ebba 0b04 	subs.w	fp, sl, r4
 8003910:	d00b      	beq.n	800392a <_svfiprintf_r+0x7a>
 8003912:	465b      	mov	r3, fp
 8003914:	4622      	mov	r2, r4
 8003916:	4629      	mov	r1, r5
 8003918:	4638      	mov	r0, r7
 800391a:	f7ff ff6f 	bl	80037fc <__ssputs_r>
 800391e:	3001      	adds	r0, #1
 8003920:	f000 80a9 	beq.w	8003a76 <_svfiprintf_r+0x1c6>
 8003924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003926:	445a      	add	r2, fp
 8003928:	9209      	str	r2, [sp, #36]	; 0x24
 800392a:	f89a 3000 	ldrb.w	r3, [sl]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80a1 	beq.w	8003a76 <_svfiprintf_r+0x1c6>
 8003934:	2300      	movs	r3, #0
 8003936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800393a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800393e:	f10a 0a01 	add.w	sl, sl, #1
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	9307      	str	r3, [sp, #28]
 8003946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800394a:	931a      	str	r3, [sp, #104]	; 0x68
 800394c:	4654      	mov	r4, sl
 800394e:	2205      	movs	r2, #5
 8003950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003954:	4850      	ldr	r0, [pc, #320]	; (8003a98 <_svfiprintf_r+0x1e8>)
 8003956:	f7fc fc63 	bl	8000220 <memchr>
 800395a:	9a04      	ldr	r2, [sp, #16]
 800395c:	b9d8      	cbnz	r0, 8003996 <_svfiprintf_r+0xe6>
 800395e:	06d0      	lsls	r0, r2, #27
 8003960:	bf44      	itt	mi
 8003962:	2320      	movmi	r3, #32
 8003964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003968:	0711      	lsls	r1, r2, #28
 800396a:	bf44      	itt	mi
 800396c:	232b      	movmi	r3, #43	; 0x2b
 800396e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003972:	f89a 3000 	ldrb.w	r3, [sl]
 8003976:	2b2a      	cmp	r3, #42	; 0x2a
 8003978:	d015      	beq.n	80039a6 <_svfiprintf_r+0xf6>
 800397a:	9a07      	ldr	r2, [sp, #28]
 800397c:	4654      	mov	r4, sl
 800397e:	2000      	movs	r0, #0
 8003980:	f04f 0c0a 	mov.w	ip, #10
 8003984:	4621      	mov	r1, r4
 8003986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800398a:	3b30      	subs	r3, #48	; 0x30
 800398c:	2b09      	cmp	r3, #9
 800398e:	d94d      	bls.n	8003a2c <_svfiprintf_r+0x17c>
 8003990:	b1b0      	cbz	r0, 80039c0 <_svfiprintf_r+0x110>
 8003992:	9207      	str	r2, [sp, #28]
 8003994:	e014      	b.n	80039c0 <_svfiprintf_r+0x110>
 8003996:	eba0 0308 	sub.w	r3, r0, r8
 800399a:	fa09 f303 	lsl.w	r3, r9, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	9304      	str	r3, [sp, #16]
 80039a2:	46a2      	mov	sl, r4
 80039a4:	e7d2      	b.n	800394c <_svfiprintf_r+0x9c>
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	1d19      	adds	r1, r3, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	9103      	str	r1, [sp, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bfbb      	ittet	lt
 80039b2:	425b      	neglt	r3, r3
 80039b4:	f042 0202 	orrlt.w	r2, r2, #2
 80039b8:	9307      	strge	r3, [sp, #28]
 80039ba:	9307      	strlt	r3, [sp, #28]
 80039bc:	bfb8      	it	lt
 80039be:	9204      	strlt	r2, [sp, #16]
 80039c0:	7823      	ldrb	r3, [r4, #0]
 80039c2:	2b2e      	cmp	r3, #46	; 0x2e
 80039c4:	d10c      	bne.n	80039e0 <_svfiprintf_r+0x130>
 80039c6:	7863      	ldrb	r3, [r4, #1]
 80039c8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ca:	d134      	bne.n	8003a36 <_svfiprintf_r+0x186>
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	9203      	str	r2, [sp, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bfb8      	it	lt
 80039d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039dc:	3402      	adds	r4, #2
 80039de:	9305      	str	r3, [sp, #20]
 80039e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003aa8 <_svfiprintf_r+0x1f8>
 80039e4:	7821      	ldrb	r1, [r4, #0]
 80039e6:	2203      	movs	r2, #3
 80039e8:	4650      	mov	r0, sl
 80039ea:	f7fc fc19 	bl	8000220 <memchr>
 80039ee:	b138      	cbz	r0, 8003a00 <_svfiprintf_r+0x150>
 80039f0:	9b04      	ldr	r3, [sp, #16]
 80039f2:	eba0 000a 	sub.w	r0, r0, sl
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	4082      	lsls	r2, r0
 80039fa:	4313      	orrs	r3, r2
 80039fc:	3401      	adds	r4, #1
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a04:	4825      	ldr	r0, [pc, #148]	; (8003a9c <_svfiprintf_r+0x1ec>)
 8003a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a0a:	2206      	movs	r2, #6
 8003a0c:	f7fc fc08 	bl	8000220 <memchr>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d038      	beq.n	8003a86 <_svfiprintf_r+0x1d6>
 8003a14:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <_svfiprintf_r+0x1f0>)
 8003a16:	bb1b      	cbnz	r3, 8003a60 <_svfiprintf_r+0x1b0>
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	3307      	adds	r3, #7
 8003a1c:	f023 0307 	bic.w	r3, r3, #7
 8003a20:	3308      	adds	r3, #8
 8003a22:	9303      	str	r3, [sp, #12]
 8003a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a26:	4433      	add	r3, r6
 8003a28:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2a:	e768      	b.n	80038fe <_svfiprintf_r+0x4e>
 8003a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a30:	460c      	mov	r4, r1
 8003a32:	2001      	movs	r0, #1
 8003a34:	e7a6      	b.n	8003984 <_svfiprintf_r+0xd4>
 8003a36:	2300      	movs	r3, #0
 8003a38:	3401      	adds	r4, #1
 8003a3a:	9305      	str	r3, [sp, #20]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f04f 0c0a 	mov.w	ip, #10
 8003a42:	4620      	mov	r0, r4
 8003a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a48:	3a30      	subs	r2, #48	; 0x30
 8003a4a:	2a09      	cmp	r2, #9
 8003a4c:	d903      	bls.n	8003a56 <_svfiprintf_r+0x1a6>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0c6      	beq.n	80039e0 <_svfiprintf_r+0x130>
 8003a52:	9105      	str	r1, [sp, #20]
 8003a54:	e7c4      	b.n	80039e0 <_svfiprintf_r+0x130>
 8003a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e7f0      	b.n	8003a42 <_svfiprintf_r+0x192>
 8003a60:	ab03      	add	r3, sp, #12
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	462a      	mov	r2, r5
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <_svfiprintf_r+0x1f4>)
 8003a68:	a904      	add	r1, sp, #16
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	f3af 8000 	nop.w
 8003a70:	1c42      	adds	r2, r0, #1
 8003a72:	4606      	mov	r6, r0
 8003a74:	d1d6      	bne.n	8003a24 <_svfiprintf_r+0x174>
 8003a76:	89ab      	ldrh	r3, [r5, #12]
 8003a78:	065b      	lsls	r3, r3, #25
 8003a7a:	f53f af2d 	bmi.w	80038d8 <_svfiprintf_r+0x28>
 8003a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a80:	b01d      	add	sp, #116	; 0x74
 8003a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a86:	ab03      	add	r3, sp, #12
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	462a      	mov	r2, r5
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <_svfiprintf_r+0x1f4>)
 8003a8e:	a904      	add	r1, sp, #16
 8003a90:	4638      	mov	r0, r7
 8003a92:	f000 f879 	bl	8003b88 <_printf_i>
 8003a96:	e7eb      	b.n	8003a70 <_svfiprintf_r+0x1c0>
 8003a98:	08004f7c 	.word	0x08004f7c
 8003a9c:	08004f86 	.word	0x08004f86
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	080037fd 	.word	0x080037fd
 8003aa8:	08004f82 	.word	0x08004f82

08003aac <_printf_common>:
 8003aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab0:	4616      	mov	r6, r2
 8003ab2:	4699      	mov	r9, r3
 8003ab4:	688a      	ldr	r2, [r1, #8]
 8003ab6:	690b      	ldr	r3, [r1, #16]
 8003ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	bfb8      	it	lt
 8003ac0:	4613      	movlt	r3, r2
 8003ac2:	6033      	str	r3, [r6, #0]
 8003ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ac8:	4607      	mov	r7, r0
 8003aca:	460c      	mov	r4, r1
 8003acc:	b10a      	cbz	r2, 8003ad2 <_printf_common+0x26>
 8003ace:	3301      	adds	r3, #1
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	0699      	lsls	r1, r3, #26
 8003ad6:	bf42      	ittt	mi
 8003ad8:	6833      	ldrmi	r3, [r6, #0]
 8003ada:	3302      	addmi	r3, #2
 8003adc:	6033      	strmi	r3, [r6, #0]
 8003ade:	6825      	ldr	r5, [r4, #0]
 8003ae0:	f015 0506 	ands.w	r5, r5, #6
 8003ae4:	d106      	bne.n	8003af4 <_printf_common+0x48>
 8003ae6:	f104 0a19 	add.w	sl, r4, #25
 8003aea:	68e3      	ldr	r3, [r4, #12]
 8003aec:	6832      	ldr	r2, [r6, #0]
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	dc26      	bgt.n	8003b42 <_printf_common+0x96>
 8003af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003af8:	1e13      	subs	r3, r2, #0
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	bf18      	it	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	0692      	lsls	r2, r2, #26
 8003b02:	d42b      	bmi.n	8003b5c <_printf_common+0xb0>
 8003b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b08:	4649      	mov	r1, r9
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	47c0      	blx	r8
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d01e      	beq.n	8003b50 <_printf_common+0xa4>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	6922      	ldr	r2, [r4, #16]
 8003b16:	f003 0306 	and.w	r3, r3, #6
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	bf02      	ittt	eq
 8003b1e:	68e5      	ldreq	r5, [r4, #12]
 8003b20:	6833      	ldreq	r3, [r6, #0]
 8003b22:	1aed      	subeq	r5, r5, r3
 8003b24:	68a3      	ldr	r3, [r4, #8]
 8003b26:	bf0c      	ite	eq
 8003b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b2c:	2500      	movne	r5, #0
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	bfc4      	itt	gt
 8003b32:	1a9b      	subgt	r3, r3, r2
 8003b34:	18ed      	addgt	r5, r5, r3
 8003b36:	2600      	movs	r6, #0
 8003b38:	341a      	adds	r4, #26
 8003b3a:	42b5      	cmp	r5, r6
 8003b3c:	d11a      	bne.n	8003b74 <_printf_common+0xc8>
 8003b3e:	2000      	movs	r0, #0
 8003b40:	e008      	b.n	8003b54 <_printf_common+0xa8>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4652      	mov	r2, sl
 8003b46:	4649      	mov	r1, r9
 8003b48:	4638      	mov	r0, r7
 8003b4a:	47c0      	blx	r8
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d103      	bne.n	8003b58 <_printf_common+0xac>
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b58:	3501      	adds	r5, #1
 8003b5a:	e7c6      	b.n	8003aea <_printf_common+0x3e>
 8003b5c:	18e1      	adds	r1, r4, r3
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	2030      	movs	r0, #48	; 0x30
 8003b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b66:	4422      	add	r2, r4
 8003b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b70:	3302      	adds	r3, #2
 8003b72:	e7c7      	b.n	8003b04 <_printf_common+0x58>
 8003b74:	2301      	movs	r3, #1
 8003b76:	4622      	mov	r2, r4
 8003b78:	4649      	mov	r1, r9
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	47c0      	blx	r8
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d0e6      	beq.n	8003b50 <_printf_common+0xa4>
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7d9      	b.n	8003b3a <_printf_common+0x8e>
	...

08003b88 <_printf_i>:
 8003b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8c:	7e0f      	ldrb	r7, [r1, #24]
 8003b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b90:	2f78      	cmp	r7, #120	; 0x78
 8003b92:	4691      	mov	r9, r2
 8003b94:	4680      	mov	r8, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	469a      	mov	sl, r3
 8003b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b9e:	d807      	bhi.n	8003bb0 <_printf_i+0x28>
 8003ba0:	2f62      	cmp	r7, #98	; 0x62
 8003ba2:	d80a      	bhi.n	8003bba <_printf_i+0x32>
 8003ba4:	2f00      	cmp	r7, #0
 8003ba6:	f000 80d4 	beq.w	8003d52 <_printf_i+0x1ca>
 8003baa:	2f58      	cmp	r7, #88	; 0x58
 8003bac:	f000 80c0 	beq.w	8003d30 <_printf_i+0x1a8>
 8003bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bb8:	e03a      	b.n	8003c30 <_printf_i+0xa8>
 8003bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bbe:	2b15      	cmp	r3, #21
 8003bc0:	d8f6      	bhi.n	8003bb0 <_printf_i+0x28>
 8003bc2:	a101      	add	r1, pc, #4	; (adr r1, 8003bc8 <_printf_i+0x40>)
 8003bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc8:	08003c21 	.word	0x08003c21
 8003bcc:	08003c35 	.word	0x08003c35
 8003bd0:	08003bb1 	.word	0x08003bb1
 8003bd4:	08003bb1 	.word	0x08003bb1
 8003bd8:	08003bb1 	.word	0x08003bb1
 8003bdc:	08003bb1 	.word	0x08003bb1
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003bb1 	.word	0x08003bb1
 8003be8:	08003bb1 	.word	0x08003bb1
 8003bec:	08003bb1 	.word	0x08003bb1
 8003bf0:	08003bb1 	.word	0x08003bb1
 8003bf4:	08003d39 	.word	0x08003d39
 8003bf8:	08003c61 	.word	0x08003c61
 8003bfc:	08003cf3 	.word	0x08003cf3
 8003c00:	08003bb1 	.word	0x08003bb1
 8003c04:	08003bb1 	.word	0x08003bb1
 8003c08:	08003d5b 	.word	0x08003d5b
 8003c0c:	08003bb1 	.word	0x08003bb1
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003bb1 	.word	0x08003bb1
 8003c18:	08003bb1 	.word	0x08003bb1
 8003c1c:	08003cfb 	.word	0x08003cfb
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	1d1a      	adds	r2, r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	602a      	str	r2, [r5, #0]
 8003c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c30:	2301      	movs	r3, #1
 8003c32:	e09f      	b.n	8003d74 <_printf_i+0x1ec>
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	0607      	lsls	r7, r0, #24
 8003c3a:	f103 0104 	add.w	r1, r3, #4
 8003c3e:	6029      	str	r1, [r5, #0]
 8003c40:	d501      	bpl.n	8003c46 <_printf_i+0xbe>
 8003c42:	681e      	ldr	r6, [r3, #0]
 8003c44:	e003      	b.n	8003c4e <_printf_i+0xc6>
 8003c46:	0646      	lsls	r6, r0, #25
 8003c48:	d5fb      	bpl.n	8003c42 <_printf_i+0xba>
 8003c4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c4e:	2e00      	cmp	r6, #0
 8003c50:	da03      	bge.n	8003c5a <_printf_i+0xd2>
 8003c52:	232d      	movs	r3, #45	; 0x2d
 8003c54:	4276      	negs	r6, r6
 8003c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5a:	485a      	ldr	r0, [pc, #360]	; (8003dc4 <_printf_i+0x23c>)
 8003c5c:	230a      	movs	r3, #10
 8003c5e:	e012      	b.n	8003c86 <_printf_i+0xfe>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	6820      	ldr	r0, [r4, #0]
 8003c64:	1d19      	adds	r1, r3, #4
 8003c66:	6029      	str	r1, [r5, #0]
 8003c68:	0605      	lsls	r5, r0, #24
 8003c6a:	d501      	bpl.n	8003c70 <_printf_i+0xe8>
 8003c6c:	681e      	ldr	r6, [r3, #0]
 8003c6e:	e002      	b.n	8003c76 <_printf_i+0xee>
 8003c70:	0641      	lsls	r1, r0, #25
 8003c72:	d5fb      	bpl.n	8003c6c <_printf_i+0xe4>
 8003c74:	881e      	ldrh	r6, [r3, #0]
 8003c76:	4853      	ldr	r0, [pc, #332]	; (8003dc4 <_printf_i+0x23c>)
 8003c78:	2f6f      	cmp	r7, #111	; 0x6f
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2308      	moveq	r3, #8
 8003c7e:	230a      	movne	r3, #10
 8003c80:	2100      	movs	r1, #0
 8003c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c86:	6865      	ldr	r5, [r4, #4]
 8003c88:	60a5      	str	r5, [r4, #8]
 8003c8a:	2d00      	cmp	r5, #0
 8003c8c:	bfa2      	ittt	ge
 8003c8e:	6821      	ldrge	r1, [r4, #0]
 8003c90:	f021 0104 	bicge.w	r1, r1, #4
 8003c94:	6021      	strge	r1, [r4, #0]
 8003c96:	b90e      	cbnz	r6, 8003c9c <_printf_i+0x114>
 8003c98:	2d00      	cmp	r5, #0
 8003c9a:	d04b      	beq.n	8003d34 <_printf_i+0x1ac>
 8003c9c:	4615      	mov	r5, r2
 8003c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ca6:	5dc7      	ldrb	r7, [r0, r7]
 8003ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cac:	4637      	mov	r7, r6
 8003cae:	42bb      	cmp	r3, r7
 8003cb0:	460e      	mov	r6, r1
 8003cb2:	d9f4      	bls.n	8003c9e <_printf_i+0x116>
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d10b      	bne.n	8003cd0 <_printf_i+0x148>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	07de      	lsls	r6, r3, #31
 8003cbc:	d508      	bpl.n	8003cd0 <_printf_i+0x148>
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	6861      	ldr	r1, [r4, #4]
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	bfde      	ittt	le
 8003cc6:	2330      	movle	r3, #48	; 0x30
 8003cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ccc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cd0:	1b52      	subs	r2, r2, r5
 8003cd2:	6122      	str	r2, [r4, #16]
 8003cd4:	f8cd a000 	str.w	sl, [sp]
 8003cd8:	464b      	mov	r3, r9
 8003cda:	aa03      	add	r2, sp, #12
 8003cdc:	4621      	mov	r1, r4
 8003cde:	4640      	mov	r0, r8
 8003ce0:	f7ff fee4 	bl	8003aac <_printf_common>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d14a      	bne.n	8003d7e <_printf_i+0x1f6>
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cec:	b004      	add	sp, #16
 8003cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f043 0320 	orr.w	r3, r3, #32
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	4833      	ldr	r0, [pc, #204]	; (8003dc8 <_printf_i+0x240>)
 8003cfc:	2778      	movs	r7, #120	; 0x78
 8003cfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	6829      	ldr	r1, [r5, #0]
 8003d06:	061f      	lsls	r7, r3, #24
 8003d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d0c:	d402      	bmi.n	8003d14 <_printf_i+0x18c>
 8003d0e:	065f      	lsls	r7, r3, #25
 8003d10:	bf48      	it	mi
 8003d12:	b2b6      	uxthmi	r6, r6
 8003d14:	07df      	lsls	r7, r3, #31
 8003d16:	bf48      	it	mi
 8003d18:	f043 0320 	orrmi.w	r3, r3, #32
 8003d1c:	6029      	str	r1, [r5, #0]
 8003d1e:	bf48      	it	mi
 8003d20:	6023      	strmi	r3, [r4, #0]
 8003d22:	b91e      	cbnz	r6, 8003d2c <_printf_i+0x1a4>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	f023 0320 	bic.w	r3, r3, #32
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	e7a7      	b.n	8003c80 <_printf_i+0xf8>
 8003d30:	4824      	ldr	r0, [pc, #144]	; (8003dc4 <_printf_i+0x23c>)
 8003d32:	e7e4      	b.n	8003cfe <_printf_i+0x176>
 8003d34:	4615      	mov	r5, r2
 8003d36:	e7bd      	b.n	8003cb4 <_printf_i+0x12c>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	6826      	ldr	r6, [r4, #0]
 8003d3c:	6961      	ldr	r1, [r4, #20]
 8003d3e:	1d18      	adds	r0, r3, #4
 8003d40:	6028      	str	r0, [r5, #0]
 8003d42:	0635      	lsls	r5, r6, #24
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	d501      	bpl.n	8003d4c <_printf_i+0x1c4>
 8003d48:	6019      	str	r1, [r3, #0]
 8003d4a:	e002      	b.n	8003d52 <_printf_i+0x1ca>
 8003d4c:	0670      	lsls	r0, r6, #25
 8003d4e:	d5fb      	bpl.n	8003d48 <_printf_i+0x1c0>
 8003d50:	8019      	strh	r1, [r3, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	6123      	str	r3, [r4, #16]
 8003d56:	4615      	mov	r5, r2
 8003d58:	e7bc      	b.n	8003cd4 <_printf_i+0x14c>
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	602a      	str	r2, [r5, #0]
 8003d60:	681d      	ldr	r5, [r3, #0]
 8003d62:	6862      	ldr	r2, [r4, #4]
 8003d64:	2100      	movs	r1, #0
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7fc fa5a 	bl	8000220 <memchr>
 8003d6c:	b108      	cbz	r0, 8003d72 <_printf_i+0x1ea>
 8003d6e:	1b40      	subs	r0, r0, r5
 8003d70:	6060      	str	r0, [r4, #4]
 8003d72:	6863      	ldr	r3, [r4, #4]
 8003d74:	6123      	str	r3, [r4, #16]
 8003d76:	2300      	movs	r3, #0
 8003d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d7c:	e7aa      	b.n	8003cd4 <_printf_i+0x14c>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	462a      	mov	r2, r5
 8003d82:	4649      	mov	r1, r9
 8003d84:	4640      	mov	r0, r8
 8003d86:	47d0      	blx	sl
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d0ad      	beq.n	8003ce8 <_printf_i+0x160>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	079b      	lsls	r3, r3, #30
 8003d90:	d413      	bmi.n	8003dba <_printf_i+0x232>
 8003d92:	68e0      	ldr	r0, [r4, #12]
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	4298      	cmp	r0, r3
 8003d98:	bfb8      	it	lt
 8003d9a:	4618      	movlt	r0, r3
 8003d9c:	e7a6      	b.n	8003cec <_printf_i+0x164>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4632      	mov	r2, r6
 8003da2:	4649      	mov	r1, r9
 8003da4:	4640      	mov	r0, r8
 8003da6:	47d0      	blx	sl
 8003da8:	3001      	adds	r0, #1
 8003daa:	d09d      	beq.n	8003ce8 <_printf_i+0x160>
 8003dac:	3501      	adds	r5, #1
 8003dae:	68e3      	ldr	r3, [r4, #12]
 8003db0:	9903      	ldr	r1, [sp, #12]
 8003db2:	1a5b      	subs	r3, r3, r1
 8003db4:	42ab      	cmp	r3, r5
 8003db6:	dcf2      	bgt.n	8003d9e <_printf_i+0x216>
 8003db8:	e7eb      	b.n	8003d92 <_printf_i+0x20a>
 8003dba:	2500      	movs	r5, #0
 8003dbc:	f104 0619 	add.w	r6, r4, #25
 8003dc0:	e7f5      	b.n	8003dae <_printf_i+0x226>
 8003dc2:	bf00      	nop
 8003dc4:	08004f8d 	.word	0x08004f8d
 8003dc8:	08004f9e 	.word	0x08004f9e

08003dcc <_realloc_r>:
 8003dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd0:	4680      	mov	r8, r0
 8003dd2:	4614      	mov	r4, r2
 8003dd4:	460e      	mov	r6, r1
 8003dd6:	b921      	cbnz	r1, 8003de2 <_realloc_r+0x16>
 8003dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ddc:	4611      	mov	r1, r2
 8003dde:	f7ff bbd1 	b.w	8003584 <_malloc_r>
 8003de2:	b92a      	cbnz	r2, 8003df0 <_realloc_r+0x24>
 8003de4:	f7ff fcbe 	bl	8003764 <_free_r>
 8003de8:	4625      	mov	r5, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df0:	f000 f843 	bl	8003e7a <_malloc_usable_size_r>
 8003df4:	4284      	cmp	r4, r0
 8003df6:	4607      	mov	r7, r0
 8003df8:	d802      	bhi.n	8003e00 <_realloc_r+0x34>
 8003dfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dfe:	d812      	bhi.n	8003e26 <_realloc_r+0x5a>
 8003e00:	4621      	mov	r1, r4
 8003e02:	4640      	mov	r0, r8
 8003e04:	f7ff fbbe 	bl	8003584 <_malloc_r>
 8003e08:	4605      	mov	r5, r0
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d0ed      	beq.n	8003dea <_realloc_r+0x1e>
 8003e0e:	42bc      	cmp	r4, r7
 8003e10:	4622      	mov	r2, r4
 8003e12:	4631      	mov	r1, r6
 8003e14:	bf28      	it	cs
 8003e16:	463a      	movcs	r2, r7
 8003e18:	f000 f821 	bl	8003e5e <memcpy>
 8003e1c:	4631      	mov	r1, r6
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f7ff fca0 	bl	8003764 <_free_r>
 8003e24:	e7e1      	b.n	8003dea <_realloc_r+0x1e>
 8003e26:	4635      	mov	r5, r6
 8003e28:	e7df      	b.n	8003dea <_realloc_r+0x1e>

08003e2a <memmove>:
 8003e2a:	4288      	cmp	r0, r1
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	eb01 0402 	add.w	r4, r1, r2
 8003e32:	d902      	bls.n	8003e3a <memmove+0x10>
 8003e34:	4284      	cmp	r4, r0
 8003e36:	4623      	mov	r3, r4
 8003e38:	d807      	bhi.n	8003e4a <memmove+0x20>
 8003e3a:	1e43      	subs	r3, r0, #1
 8003e3c:	42a1      	cmp	r1, r4
 8003e3e:	d008      	beq.n	8003e52 <memmove+0x28>
 8003e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e48:	e7f8      	b.n	8003e3c <memmove+0x12>
 8003e4a:	4402      	add	r2, r0
 8003e4c:	4601      	mov	r1, r0
 8003e4e:	428a      	cmp	r2, r1
 8003e50:	d100      	bne.n	8003e54 <memmove+0x2a>
 8003e52:	bd10      	pop	{r4, pc}
 8003e54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e5c:	e7f7      	b.n	8003e4e <memmove+0x24>

08003e5e <memcpy>:
 8003e5e:	440a      	add	r2, r1
 8003e60:	4291      	cmp	r1, r2
 8003e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e66:	d100      	bne.n	8003e6a <memcpy+0xc>
 8003e68:	4770      	bx	lr
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e74:	4291      	cmp	r1, r2
 8003e76:	d1f9      	bne.n	8003e6c <memcpy+0xe>
 8003e78:	bd10      	pop	{r4, pc}

08003e7a <_malloc_usable_size_r>:
 8003e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e7e:	1f18      	subs	r0, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bfbc      	itt	lt
 8003e84:	580b      	ldrlt	r3, [r1, r0]
 8003e86:	18c0      	addlt	r0, r0, r3
 8003e88:	4770      	bx	lr
 8003e8a:	0000      	movs	r0, r0
 8003e8c:	0000      	movs	r0, r0
	...

08003e90 <sin>:
 8003e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e92:	ec53 2b10 	vmov	r2, r3, d0
 8003e96:	4828      	ldr	r0, [pc, #160]	; (8003f38 <sin+0xa8>)
 8003e98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e9c:	4281      	cmp	r1, r0
 8003e9e:	dc07      	bgt.n	8003eb0 <sin+0x20>
 8003ea0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003f30 <sin+0xa0>
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	b005      	add	sp, #20
 8003ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eac:	f000 be68 	b.w	8004b80 <__kernel_sin>
 8003eb0:	4822      	ldr	r0, [pc, #136]	; (8003f3c <sin+0xac>)
 8003eb2:	4281      	cmp	r1, r0
 8003eb4:	dd09      	ble.n	8003eca <sin+0x3a>
 8003eb6:	ee10 0a10 	vmov	r0, s0
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7fc fb2e 	bl	800051c <__aeabi_dsub>
 8003ec0:	ec41 0b10 	vmov	d0, r0, r1
 8003ec4:	b005      	add	sp, #20
 8003ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003eca:	4668      	mov	r0, sp
 8003ecc:	f000 f838 	bl	8003f40 <__ieee754_rem_pio2>
 8003ed0:	f000 0003 	and.w	r0, r0, #3
 8003ed4:	2801      	cmp	r0, #1
 8003ed6:	d00c      	beq.n	8003ef2 <sin+0x62>
 8003ed8:	2802      	cmp	r0, #2
 8003eda:	d011      	beq.n	8003f00 <sin+0x70>
 8003edc:	b9f0      	cbnz	r0, 8003f1c <sin+0x8c>
 8003ede:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ee2:	ed9d 0b00 	vldr	d0, [sp]
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f000 fe4a 	bl	8004b80 <__kernel_sin>
 8003eec:	ec51 0b10 	vmov	r0, r1, d0
 8003ef0:	e7e6      	b.n	8003ec0 <sin+0x30>
 8003ef2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ef6:	ed9d 0b00 	vldr	d0, [sp]
 8003efa:	f000 fd79 	bl	80049f0 <__kernel_cos>
 8003efe:	e7f5      	b.n	8003eec <sin+0x5c>
 8003f00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f04:	ed9d 0b00 	vldr	d0, [sp]
 8003f08:	2001      	movs	r0, #1
 8003f0a:	f000 fe39 	bl	8004b80 <__kernel_sin>
 8003f0e:	ec53 2b10 	vmov	r2, r3, d0
 8003f12:	ee10 0a10 	vmov	r0, s0
 8003f16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003f1a:	e7d1      	b.n	8003ec0 <sin+0x30>
 8003f1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f20:	ed9d 0b00 	vldr	d0, [sp]
 8003f24:	f000 fd64 	bl	80049f0 <__kernel_cos>
 8003f28:	e7f1      	b.n	8003f0e <sin+0x7e>
 8003f2a:	bf00      	nop
 8003f2c:	f3af 8000 	nop.w
	...
 8003f38:	3fe921fb 	.word	0x3fe921fb
 8003f3c:	7fefffff 	.word	0x7fefffff

08003f40 <__ieee754_rem_pio2>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	ed2d 8b02 	vpush	{d8}
 8003f48:	ec55 4b10 	vmov	r4, r5, d0
 8003f4c:	4bca      	ldr	r3, [pc, #808]	; (8004278 <__ieee754_rem_pio2+0x338>)
 8003f4e:	b08b      	sub	sp, #44	; 0x2c
 8003f50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003f54:	4598      	cmp	r8, r3
 8003f56:	4682      	mov	sl, r0
 8003f58:	9502      	str	r5, [sp, #8]
 8003f5a:	dc08      	bgt.n	8003f6e <__ieee754_rem_pio2+0x2e>
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2300      	movs	r3, #0
 8003f60:	ed80 0b00 	vstr	d0, [r0]
 8003f64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003f68:	f04f 0b00 	mov.w	fp, #0
 8003f6c:	e028      	b.n	8003fc0 <__ieee754_rem_pio2+0x80>
 8003f6e:	4bc3      	ldr	r3, [pc, #780]	; (800427c <__ieee754_rem_pio2+0x33c>)
 8003f70:	4598      	cmp	r8, r3
 8003f72:	dc78      	bgt.n	8004066 <__ieee754_rem_pio2+0x126>
 8003f74:	9b02      	ldr	r3, [sp, #8]
 8003f76:	4ec2      	ldr	r6, [pc, #776]	; (8004280 <__ieee754_rem_pio2+0x340>)
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	ee10 0a10 	vmov	r0, s0
 8003f7e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004240 <__ieee754_rem_pio2+0x300>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	4629      	mov	r1, r5
 8003f86:	dd39      	ble.n	8003ffc <__ieee754_rem_pio2+0xbc>
 8003f88:	f7fc fac8 	bl	800051c <__aeabi_dsub>
 8003f8c:	45b0      	cmp	r8, r6
 8003f8e:	4604      	mov	r4, r0
 8003f90:	460d      	mov	r5, r1
 8003f92:	d01b      	beq.n	8003fcc <__ieee754_rem_pio2+0x8c>
 8003f94:	a3ac      	add	r3, pc, #688	; (adr r3, 8004248 <__ieee754_rem_pio2+0x308>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f7fc fabf 	bl	800051c <__aeabi_dsub>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	e9ca 2300 	strd	r2, r3, [sl]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7fc fab7 	bl	800051c <__aeabi_dsub>
 8003fae:	a3a6      	add	r3, pc, #664	; (adr r3, 8004248 <__ieee754_rem_pio2+0x308>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc fab2 	bl	800051c <__aeabi_dsub>
 8003fb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003fbc:	f04f 0b01 	mov.w	fp, #1
 8003fc0:	4658      	mov	r0, fp
 8003fc2:	b00b      	add	sp, #44	; 0x2c
 8003fc4:	ecbd 8b02 	vpop	{d8}
 8003fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fcc:	a3a0      	add	r3, pc, #640	; (adr r3, 8004250 <__ieee754_rem_pio2+0x310>)
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	f7fc faa3 	bl	800051c <__aeabi_dsub>
 8003fd6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004258 <__ieee754_rem_pio2+0x318>)
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	4604      	mov	r4, r0
 8003fde:	460d      	mov	r5, r1
 8003fe0:	f7fc fa9c 	bl	800051c <__aeabi_dsub>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	e9ca 2300 	strd	r2, r3, [sl]
 8003fec:	4620      	mov	r0, r4
 8003fee:	4629      	mov	r1, r5
 8003ff0:	f7fc fa94 	bl	800051c <__aeabi_dsub>
 8003ff4:	a398      	add	r3, pc, #608	; (adr r3, 8004258 <__ieee754_rem_pio2+0x318>)
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	e7db      	b.n	8003fb4 <__ieee754_rem_pio2+0x74>
 8003ffc:	f7fc fa90 	bl	8000520 <__adddf3>
 8004000:	45b0      	cmp	r8, r6
 8004002:	4604      	mov	r4, r0
 8004004:	460d      	mov	r5, r1
 8004006:	d016      	beq.n	8004036 <__ieee754_rem_pio2+0xf6>
 8004008:	a38f      	add	r3, pc, #572	; (adr r3, 8004248 <__ieee754_rem_pio2+0x308>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc fa87 	bl	8000520 <__adddf3>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	e9ca 2300 	strd	r2, r3, [sl]
 800401a:	4620      	mov	r0, r4
 800401c:	4629      	mov	r1, r5
 800401e:	f7fc fa7d 	bl	800051c <__aeabi_dsub>
 8004022:	a389      	add	r3, pc, #548	; (adr r3, 8004248 <__ieee754_rem_pio2+0x308>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc fa7a 	bl	8000520 <__adddf3>
 800402c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004030:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004034:	e7c4      	b.n	8003fc0 <__ieee754_rem_pio2+0x80>
 8004036:	a386      	add	r3, pc, #536	; (adr r3, 8004250 <__ieee754_rem_pio2+0x310>)
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f7fc fa70 	bl	8000520 <__adddf3>
 8004040:	a385      	add	r3, pc, #532	; (adr r3, 8004258 <__ieee754_rem_pio2+0x318>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	4604      	mov	r4, r0
 8004048:	460d      	mov	r5, r1
 800404a:	f7fc fa69 	bl	8000520 <__adddf3>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	e9ca 2300 	strd	r2, r3, [sl]
 8004056:	4620      	mov	r0, r4
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc fa5f 	bl	800051c <__aeabi_dsub>
 800405e:	a37e      	add	r3, pc, #504	; (adr r3, 8004258 <__ieee754_rem_pio2+0x318>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	e7e0      	b.n	8004028 <__ieee754_rem_pio2+0xe8>
 8004066:	4b87      	ldr	r3, [pc, #540]	; (8004284 <__ieee754_rem_pio2+0x344>)
 8004068:	4598      	cmp	r8, r3
 800406a:	f300 80d8 	bgt.w	800421e <__ieee754_rem_pio2+0x2de>
 800406e:	f000 fe45 	bl	8004cfc <fabs>
 8004072:	ec55 4b10 	vmov	r4, r5, d0
 8004076:	ee10 0a10 	vmov	r0, s0
 800407a:	a379      	add	r3, pc, #484	; (adr r3, 8004260 <__ieee754_rem_pio2+0x320>)
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	4629      	mov	r1, r5
 8004082:	f7fc f91d 	bl	80002c0 <__aeabi_dmul>
 8004086:	4b80      	ldr	r3, [pc, #512]	; (8004288 <__ieee754_rem_pio2+0x348>)
 8004088:	2200      	movs	r2, #0
 800408a:	f7fc fa49 	bl	8000520 <__adddf3>
 800408e:	f7fc fc85 	bl	800099c <__aeabi_d2iz>
 8004092:	4683      	mov	fp, r0
 8004094:	f7fc fb90 	bl	80007b8 <__aeabi_i2d>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	ec43 2b18 	vmov	d8, r2, r3
 80040a0:	a367      	add	r3, pc, #412	; (adr r3, 8004240 <__ieee754_rem_pio2+0x300>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc f90b 	bl	80002c0 <__aeabi_dmul>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4620      	mov	r0, r4
 80040b0:	4629      	mov	r1, r5
 80040b2:	f7fc fa33 	bl	800051c <__aeabi_dsub>
 80040b6:	a364      	add	r3, pc, #400	; (adr r3, 8004248 <__ieee754_rem_pio2+0x308>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	4606      	mov	r6, r0
 80040be:	460f      	mov	r7, r1
 80040c0:	ec51 0b18 	vmov	r0, r1, d8
 80040c4:	f7fc f8fc 	bl	80002c0 <__aeabi_dmul>
 80040c8:	f1bb 0f1f 	cmp.w	fp, #31
 80040cc:	4604      	mov	r4, r0
 80040ce:	460d      	mov	r5, r1
 80040d0:	dc0d      	bgt.n	80040ee <__ieee754_rem_pio2+0x1ae>
 80040d2:	4b6e      	ldr	r3, [pc, #440]	; (800428c <__ieee754_rem_pio2+0x34c>)
 80040d4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	4543      	cmp	r3, r8
 80040de:	d006      	beq.n	80040ee <__ieee754_rem_pio2+0x1ae>
 80040e0:	4622      	mov	r2, r4
 80040e2:	462b      	mov	r3, r5
 80040e4:	4630      	mov	r0, r6
 80040e6:	4639      	mov	r1, r7
 80040e8:	f7fc fa18 	bl	800051c <__aeabi_dsub>
 80040ec:	e00e      	b.n	800410c <__ieee754_rem_pio2+0x1cc>
 80040ee:	462b      	mov	r3, r5
 80040f0:	4622      	mov	r2, r4
 80040f2:	4630      	mov	r0, r6
 80040f4:	4639      	mov	r1, r7
 80040f6:	f7fc fa11 	bl	800051c <__aeabi_dsub>
 80040fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80040fe:	9303      	str	r3, [sp, #12]
 8004100:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004104:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004108:	2b10      	cmp	r3, #16
 800410a:	dc02      	bgt.n	8004112 <__ieee754_rem_pio2+0x1d2>
 800410c:	e9ca 0100 	strd	r0, r1, [sl]
 8004110:	e039      	b.n	8004186 <__ieee754_rem_pio2+0x246>
 8004112:	a34f      	add	r3, pc, #316	; (adr r3, 8004250 <__ieee754_rem_pio2+0x310>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	ec51 0b18 	vmov	r0, r1, d8
 800411c:	f7fc f8d0 	bl	80002c0 <__aeabi_dmul>
 8004120:	4604      	mov	r4, r0
 8004122:	460d      	mov	r5, r1
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4630      	mov	r0, r6
 800412a:	4639      	mov	r1, r7
 800412c:	f7fc f9f6 	bl	800051c <__aeabi_dsub>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4680      	mov	r8, r0
 8004136:	4689      	mov	r9, r1
 8004138:	4630      	mov	r0, r6
 800413a:	4639      	mov	r1, r7
 800413c:	f7fc f9ee 	bl	800051c <__aeabi_dsub>
 8004140:	4622      	mov	r2, r4
 8004142:	462b      	mov	r3, r5
 8004144:	f7fc f9ea 	bl	800051c <__aeabi_dsub>
 8004148:	a343      	add	r3, pc, #268	; (adr r3, 8004258 <__ieee754_rem_pio2+0x318>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	4604      	mov	r4, r0
 8004150:	460d      	mov	r5, r1
 8004152:	ec51 0b18 	vmov	r0, r1, d8
 8004156:	f7fc f8b3 	bl	80002c0 <__aeabi_dmul>
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f7fc f9dd 	bl	800051c <__aeabi_dsub>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4604      	mov	r4, r0
 8004168:	460d      	mov	r5, r1
 800416a:	4640      	mov	r0, r8
 800416c:	4649      	mov	r1, r9
 800416e:	f7fc f9d5 	bl	800051c <__aeabi_dsub>
 8004172:	9a03      	ldr	r2, [sp, #12]
 8004174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b31      	cmp	r3, #49	; 0x31
 800417c:	dc24      	bgt.n	80041c8 <__ieee754_rem_pio2+0x288>
 800417e:	e9ca 0100 	strd	r0, r1, [sl]
 8004182:	4646      	mov	r6, r8
 8004184:	464f      	mov	r7, r9
 8004186:	e9da 8900 	ldrd	r8, r9, [sl]
 800418a:	4630      	mov	r0, r6
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	4639      	mov	r1, r7
 8004192:	f7fc f9c3 	bl	800051c <__aeabi_dsub>
 8004196:	462b      	mov	r3, r5
 8004198:	4622      	mov	r2, r4
 800419a:	f7fc f9bf 	bl	800051c <__aeabi_dsub>
 800419e:	9b02      	ldr	r3, [sp, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80041a6:	f6bf af0b 	bge.w	8003fc0 <__ieee754_rem_pio2+0x80>
 80041aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80041ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80041b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041b6:	f8ca 8000 	str.w	r8, [sl]
 80041ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80041be:	f8ca 300c 	str.w	r3, [sl, #12]
 80041c2:	f1cb 0b00 	rsb	fp, fp, #0
 80041c6:	e6fb      	b.n	8003fc0 <__ieee754_rem_pio2+0x80>
 80041c8:	a327      	add	r3, pc, #156	; (adr r3, 8004268 <__ieee754_rem_pio2+0x328>)
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	ec51 0b18 	vmov	r0, r1, d8
 80041d2:	f7fc f875 	bl	80002c0 <__aeabi_dmul>
 80041d6:	4604      	mov	r4, r0
 80041d8:	460d      	mov	r5, r1
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f7fc f99b 	bl	800051c <__aeabi_dsub>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4606      	mov	r6, r0
 80041ec:	460f      	mov	r7, r1
 80041ee:	4640      	mov	r0, r8
 80041f0:	4649      	mov	r1, r9
 80041f2:	f7fc f993 	bl	800051c <__aeabi_dsub>
 80041f6:	4622      	mov	r2, r4
 80041f8:	462b      	mov	r3, r5
 80041fa:	f7fc f98f 	bl	800051c <__aeabi_dsub>
 80041fe:	a31c      	add	r3, pc, #112	; (adr r3, 8004270 <__ieee754_rem_pio2+0x330>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	4604      	mov	r4, r0
 8004206:	460d      	mov	r5, r1
 8004208:	ec51 0b18 	vmov	r0, r1, d8
 800420c:	f7fc f858 	bl	80002c0 <__aeabi_dmul>
 8004210:	4622      	mov	r2, r4
 8004212:	462b      	mov	r3, r5
 8004214:	f7fc f982 	bl	800051c <__aeabi_dsub>
 8004218:	4604      	mov	r4, r0
 800421a:	460d      	mov	r5, r1
 800421c:	e760      	b.n	80040e0 <__ieee754_rem_pio2+0x1a0>
 800421e:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <__ieee754_rem_pio2+0x350>)
 8004220:	4598      	cmp	r8, r3
 8004222:	dd37      	ble.n	8004294 <__ieee754_rem_pio2+0x354>
 8004224:	ee10 2a10 	vmov	r2, s0
 8004228:	462b      	mov	r3, r5
 800422a:	4620      	mov	r0, r4
 800422c:	4629      	mov	r1, r5
 800422e:	f7fc f975 	bl	800051c <__aeabi_dsub>
 8004232:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004236:	e9ca 0100 	strd	r0, r1, [sl]
 800423a:	e695      	b.n	8003f68 <__ieee754_rem_pio2+0x28>
 800423c:	f3af 8000 	nop.w
 8004240:	54400000 	.word	0x54400000
 8004244:	3ff921fb 	.word	0x3ff921fb
 8004248:	1a626331 	.word	0x1a626331
 800424c:	3dd0b461 	.word	0x3dd0b461
 8004250:	1a600000 	.word	0x1a600000
 8004254:	3dd0b461 	.word	0x3dd0b461
 8004258:	2e037073 	.word	0x2e037073
 800425c:	3ba3198a 	.word	0x3ba3198a
 8004260:	6dc9c883 	.word	0x6dc9c883
 8004264:	3fe45f30 	.word	0x3fe45f30
 8004268:	2e000000 	.word	0x2e000000
 800426c:	3ba3198a 	.word	0x3ba3198a
 8004270:	252049c1 	.word	0x252049c1
 8004274:	397b839a 	.word	0x397b839a
 8004278:	3fe921fb 	.word	0x3fe921fb
 800427c:	4002d97b 	.word	0x4002d97b
 8004280:	3ff921fb 	.word	0x3ff921fb
 8004284:	413921fb 	.word	0x413921fb
 8004288:	3fe00000 	.word	0x3fe00000
 800428c:	08004fb0 	.word	0x08004fb0
 8004290:	7fefffff 	.word	0x7fefffff
 8004294:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004298:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800429c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80042a0:	4620      	mov	r0, r4
 80042a2:	460d      	mov	r5, r1
 80042a4:	f7fc fb7a 	bl	800099c <__aeabi_d2iz>
 80042a8:	f7fc fa86 	bl	80007b8 <__aeabi_i2d>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4620      	mov	r0, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042b8:	f7fc f930 	bl	800051c <__aeabi_dsub>
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <__ieee754_rem_pio2+0x404>)
 80042be:	2200      	movs	r2, #0
 80042c0:	f7fb fffe 	bl	80002c0 <__aeabi_dmul>
 80042c4:	460d      	mov	r5, r1
 80042c6:	4604      	mov	r4, r0
 80042c8:	f7fc fb68 	bl	800099c <__aeabi_d2iz>
 80042cc:	f7fc fa74 	bl	80007b8 <__aeabi_i2d>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4620      	mov	r0, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80042dc:	f7fc f91e 	bl	800051c <__aeabi_dsub>
 80042e0:	4b18      	ldr	r3, [pc, #96]	; (8004344 <__ieee754_rem_pio2+0x404>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	f7fb ffec 	bl	80002c0 <__aeabi_dmul>
 80042e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80042ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80042f0:	2703      	movs	r7, #3
 80042f2:	2400      	movs	r4, #0
 80042f4:	2500      	movs	r5, #0
 80042f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	46b9      	mov	r9, r7
 8004300:	3f01      	subs	r7, #1
 8004302:	f7fc fb19 	bl	8000938 <__aeabi_dcmpeq>
 8004306:	2800      	cmp	r0, #0
 8004308:	d1f5      	bne.n	80042f6 <__ieee754_rem_pio2+0x3b6>
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <__ieee754_rem_pio2+0x408>)
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2302      	movs	r3, #2
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4632      	mov	r2, r6
 8004314:	464b      	mov	r3, r9
 8004316:	4651      	mov	r1, sl
 8004318:	a804      	add	r0, sp, #16
 800431a:	f000 f819 	bl	8004350 <__kernel_rem_pio2>
 800431e:	9b02      	ldr	r3, [sp, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	4683      	mov	fp, r0
 8004324:	f6bf ae4c 	bge.w	8003fc0 <__ieee754_rem_pio2+0x80>
 8004328:	e9da 2100 	ldrd	r2, r1, [sl]
 800432c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004330:	e9ca 2300 	strd	r2, r3, [sl]
 8004334:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800433c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004340:	e73f      	b.n	80041c2 <__ieee754_rem_pio2+0x282>
 8004342:	bf00      	nop
 8004344:	41700000 	.word	0x41700000
 8004348:	08005030 	.word	0x08005030
 800434c:	00000000 	.word	0x00000000

08004350 <__kernel_rem_pio2>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	ed2d 8b02 	vpush	{d8}
 8004358:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800435c:	f112 0f14 	cmn.w	r2, #20
 8004360:	9306      	str	r3, [sp, #24]
 8004362:	9104      	str	r1, [sp, #16]
 8004364:	4bc2      	ldr	r3, [pc, #776]	; (8004670 <__kernel_rem_pio2+0x320>)
 8004366:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004368:	9009      	str	r0, [sp, #36]	; 0x24
 800436a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	9b06      	ldr	r3, [sp, #24]
 8004372:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004376:	bfa8      	it	ge
 8004378:	1ed4      	subge	r4, r2, #3
 800437a:	9305      	str	r3, [sp, #20]
 800437c:	bfb2      	itee	lt
 800437e:	2400      	movlt	r4, #0
 8004380:	2318      	movge	r3, #24
 8004382:	fb94 f4f3 	sdivge	r4, r4, r3
 8004386:	f06f 0317 	mvn.w	r3, #23
 800438a:	fb04 3303 	mla	r3, r4, r3, r3
 800438e:	eb03 0a02 	add.w	sl, r3, r2
 8004392:	9b00      	ldr	r3, [sp, #0]
 8004394:	9a05      	ldr	r2, [sp, #20]
 8004396:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004660 <__kernel_rem_pio2+0x310>
 800439a:	eb03 0802 	add.w	r8, r3, r2
 800439e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80043a0:	1aa7      	subs	r7, r4, r2
 80043a2:	ae20      	add	r6, sp, #128	; 0x80
 80043a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80043a8:	2500      	movs	r5, #0
 80043aa:	4545      	cmp	r5, r8
 80043ac:	dd13      	ble.n	80043d6 <__kernel_rem_pio2+0x86>
 80043ae:	9b06      	ldr	r3, [sp, #24]
 80043b0:	aa20      	add	r2, sp, #128	; 0x80
 80043b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80043b6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80043ba:	f04f 0800 	mov.w	r8, #0
 80043be:	9b00      	ldr	r3, [sp, #0]
 80043c0:	4598      	cmp	r8, r3
 80043c2:	dc31      	bgt.n	8004428 <__kernel_rem_pio2+0xd8>
 80043c4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004660 <__kernel_rem_pio2+0x310>
 80043c8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80043cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80043d0:	462f      	mov	r7, r5
 80043d2:	2600      	movs	r6, #0
 80043d4:	e01b      	b.n	800440e <__kernel_rem_pio2+0xbe>
 80043d6:	42ef      	cmn	r7, r5
 80043d8:	d407      	bmi.n	80043ea <__kernel_rem_pio2+0x9a>
 80043da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80043de:	f7fc f9eb 	bl	80007b8 <__aeabi_i2d>
 80043e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80043e6:	3501      	adds	r5, #1
 80043e8:	e7df      	b.n	80043aa <__kernel_rem_pio2+0x5a>
 80043ea:	ec51 0b18 	vmov	r0, r1, d8
 80043ee:	e7f8      	b.n	80043e2 <__kernel_rem_pio2+0x92>
 80043f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80043f8:	f7fb ff62 	bl	80002c0 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004404:	f7fc f88c 	bl	8000520 <__adddf3>
 8004408:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800440c:	3601      	adds	r6, #1
 800440e:	9b05      	ldr	r3, [sp, #20]
 8004410:	429e      	cmp	r6, r3
 8004412:	f1a7 0708 	sub.w	r7, r7, #8
 8004416:	ddeb      	ble.n	80043f0 <__kernel_rem_pio2+0xa0>
 8004418:	ed9d 7b02 	vldr	d7, [sp, #8]
 800441c:	f108 0801 	add.w	r8, r8, #1
 8004420:	ecab 7b02 	vstmia	fp!, {d7}
 8004424:	3508      	adds	r5, #8
 8004426:	e7ca      	b.n	80043be <__kernel_rem_pio2+0x6e>
 8004428:	9b00      	ldr	r3, [sp, #0]
 800442a:	aa0c      	add	r2, sp, #48	; 0x30
 800442c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004430:	930b      	str	r3, [sp, #44]	; 0x2c
 8004432:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004434:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004438:	9c00      	ldr	r4, [sp, #0]
 800443a:	930a      	str	r3, [sp, #40]	; 0x28
 800443c:	00e3      	lsls	r3, r4, #3
 800443e:	9308      	str	r3, [sp, #32]
 8004440:	ab98      	add	r3, sp, #608	; 0x260
 8004442:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004446:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800444a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800444e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004450:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004454:	46c3      	mov	fp, r8
 8004456:	46a1      	mov	r9, r4
 8004458:	f1b9 0f00 	cmp.w	r9, #0
 800445c:	f1a5 0508 	sub.w	r5, r5, #8
 8004460:	dc77      	bgt.n	8004552 <__kernel_rem_pio2+0x202>
 8004462:	ec47 6b10 	vmov	d0, r6, r7
 8004466:	4650      	mov	r0, sl
 8004468:	f000 fc52 	bl	8004d10 <scalbn>
 800446c:	ec57 6b10 	vmov	r6, r7, d0
 8004470:	2200      	movs	r2, #0
 8004472:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004476:	ee10 0a10 	vmov	r0, s0
 800447a:	4639      	mov	r1, r7
 800447c:	f7fb ff20 	bl	80002c0 <__aeabi_dmul>
 8004480:	ec41 0b10 	vmov	d0, r0, r1
 8004484:	f000 fcc4 	bl	8004e10 <floor>
 8004488:	4b7a      	ldr	r3, [pc, #488]	; (8004674 <__kernel_rem_pio2+0x324>)
 800448a:	ec51 0b10 	vmov	r0, r1, d0
 800448e:	2200      	movs	r2, #0
 8004490:	f7fb ff16 	bl	80002c0 <__aeabi_dmul>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4630      	mov	r0, r6
 800449a:	4639      	mov	r1, r7
 800449c:	f7fc f83e 	bl	800051c <__aeabi_dsub>
 80044a0:	460f      	mov	r7, r1
 80044a2:	4606      	mov	r6, r0
 80044a4:	f7fc fa7a 	bl	800099c <__aeabi_d2iz>
 80044a8:	9002      	str	r0, [sp, #8]
 80044aa:	f7fc f985 	bl	80007b8 <__aeabi_i2d>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4630      	mov	r0, r6
 80044b4:	4639      	mov	r1, r7
 80044b6:	f7fc f831 	bl	800051c <__aeabi_dsub>
 80044ba:	f1ba 0f00 	cmp.w	sl, #0
 80044be:	4606      	mov	r6, r0
 80044c0:	460f      	mov	r7, r1
 80044c2:	dd6d      	ble.n	80045a0 <__kernel_rem_pio2+0x250>
 80044c4:	1e61      	subs	r1, r4, #1
 80044c6:	ab0c      	add	r3, sp, #48	; 0x30
 80044c8:	9d02      	ldr	r5, [sp, #8]
 80044ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044ce:	f1ca 0018 	rsb	r0, sl, #24
 80044d2:	fa43 f200 	asr.w	r2, r3, r0
 80044d6:	4415      	add	r5, r2
 80044d8:	4082      	lsls	r2, r0
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	aa0c      	add	r2, sp, #48	; 0x30
 80044de:	9502      	str	r5, [sp, #8]
 80044e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80044e4:	f1ca 0217 	rsb	r2, sl, #23
 80044e8:	fa43 fb02 	asr.w	fp, r3, r2
 80044ec:	f1bb 0f00 	cmp.w	fp, #0
 80044f0:	dd65      	ble.n	80045be <__kernel_rem_pio2+0x26e>
 80044f2:	9b02      	ldr	r3, [sp, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	3301      	adds	r3, #1
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	4615      	mov	r5, r2
 80044fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004500:	4294      	cmp	r4, r2
 8004502:	f300 809f 	bgt.w	8004644 <__kernel_rem_pio2+0x2f4>
 8004506:	f1ba 0f00 	cmp.w	sl, #0
 800450a:	dd07      	ble.n	800451c <__kernel_rem_pio2+0x1cc>
 800450c:	f1ba 0f01 	cmp.w	sl, #1
 8004510:	f000 80c1 	beq.w	8004696 <__kernel_rem_pio2+0x346>
 8004514:	f1ba 0f02 	cmp.w	sl, #2
 8004518:	f000 80c7 	beq.w	80046aa <__kernel_rem_pio2+0x35a>
 800451c:	f1bb 0f02 	cmp.w	fp, #2
 8004520:	d14d      	bne.n	80045be <__kernel_rem_pio2+0x26e>
 8004522:	4632      	mov	r2, r6
 8004524:	463b      	mov	r3, r7
 8004526:	4954      	ldr	r1, [pc, #336]	; (8004678 <__kernel_rem_pio2+0x328>)
 8004528:	2000      	movs	r0, #0
 800452a:	f7fb fff7 	bl	800051c <__aeabi_dsub>
 800452e:	4606      	mov	r6, r0
 8004530:	460f      	mov	r7, r1
 8004532:	2d00      	cmp	r5, #0
 8004534:	d043      	beq.n	80045be <__kernel_rem_pio2+0x26e>
 8004536:	4650      	mov	r0, sl
 8004538:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004668 <__kernel_rem_pio2+0x318>
 800453c:	f000 fbe8 	bl	8004d10 <scalbn>
 8004540:	4630      	mov	r0, r6
 8004542:	4639      	mov	r1, r7
 8004544:	ec53 2b10 	vmov	r2, r3, d0
 8004548:	f7fb ffe8 	bl	800051c <__aeabi_dsub>
 800454c:	4606      	mov	r6, r0
 800454e:	460f      	mov	r7, r1
 8004550:	e035      	b.n	80045be <__kernel_rem_pio2+0x26e>
 8004552:	4b4a      	ldr	r3, [pc, #296]	; (800467c <__kernel_rem_pio2+0x32c>)
 8004554:	2200      	movs	r2, #0
 8004556:	4630      	mov	r0, r6
 8004558:	4639      	mov	r1, r7
 800455a:	f7fb feb1 	bl	80002c0 <__aeabi_dmul>
 800455e:	f7fc fa1d 	bl	800099c <__aeabi_d2iz>
 8004562:	f7fc f929 	bl	80007b8 <__aeabi_i2d>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	ec43 2b18 	vmov	d8, r2, r3
 800456e:	4b44      	ldr	r3, [pc, #272]	; (8004680 <__kernel_rem_pio2+0x330>)
 8004570:	2200      	movs	r2, #0
 8004572:	f7fb fea5 	bl	80002c0 <__aeabi_dmul>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4630      	mov	r0, r6
 800457c:	4639      	mov	r1, r7
 800457e:	f7fb ffcd 	bl	800051c <__aeabi_dsub>
 8004582:	f7fc fa0b 	bl	800099c <__aeabi_d2iz>
 8004586:	e9d5 2300 	ldrd	r2, r3, [r5]
 800458a:	f84b 0b04 	str.w	r0, [fp], #4
 800458e:	ec51 0b18 	vmov	r0, r1, d8
 8004592:	f7fb ffc5 	bl	8000520 <__adddf3>
 8004596:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800459a:	4606      	mov	r6, r0
 800459c:	460f      	mov	r7, r1
 800459e:	e75b      	b.n	8004458 <__kernel_rem_pio2+0x108>
 80045a0:	d106      	bne.n	80045b0 <__kernel_rem_pio2+0x260>
 80045a2:	1e63      	subs	r3, r4, #1
 80045a4:	aa0c      	add	r2, sp, #48	; 0x30
 80045a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045aa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80045ae:	e79d      	b.n	80044ec <__kernel_rem_pio2+0x19c>
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <__kernel_rem_pio2+0x334>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	f7fc f9de 	bl	8000974 <__aeabi_dcmpge>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d140      	bne.n	800463e <__kernel_rem_pio2+0x2ee>
 80045bc:	4683      	mov	fp, r0
 80045be:	2200      	movs	r2, #0
 80045c0:	2300      	movs	r3, #0
 80045c2:	4630      	mov	r0, r6
 80045c4:	4639      	mov	r1, r7
 80045c6:	f7fc f9b7 	bl	8000938 <__aeabi_dcmpeq>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	f000 80c1 	beq.w	8004752 <__kernel_rem_pio2+0x402>
 80045d0:	1e65      	subs	r5, r4, #1
 80045d2:	462b      	mov	r3, r5
 80045d4:	2200      	movs	r2, #0
 80045d6:	9900      	ldr	r1, [sp, #0]
 80045d8:	428b      	cmp	r3, r1
 80045da:	da6d      	bge.n	80046b8 <__kernel_rem_pio2+0x368>
 80045dc:	2a00      	cmp	r2, #0
 80045de:	f000 808a 	beq.w	80046f6 <__kernel_rem_pio2+0x3a6>
 80045e2:	ab0c      	add	r3, sp, #48	; 0x30
 80045e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80045e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80ae 	beq.w	800474e <__kernel_rem_pio2+0x3fe>
 80045f2:	4650      	mov	r0, sl
 80045f4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004668 <__kernel_rem_pio2+0x318>
 80045f8:	f000 fb8a 	bl	8004d10 <scalbn>
 80045fc:	1c6b      	adds	r3, r5, #1
 80045fe:	00da      	lsls	r2, r3, #3
 8004600:	9205      	str	r2, [sp, #20]
 8004602:	ec57 6b10 	vmov	r6, r7, d0
 8004606:	aa70      	add	r2, sp, #448	; 0x1c0
 8004608:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800467c <__kernel_rem_pio2+0x32c>
 800460c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004610:	462c      	mov	r4, r5
 8004612:	f04f 0800 	mov.w	r8, #0
 8004616:	2c00      	cmp	r4, #0
 8004618:	f280 80d4 	bge.w	80047c4 <__kernel_rem_pio2+0x474>
 800461c:	462c      	mov	r4, r5
 800461e:	2c00      	cmp	r4, #0
 8004620:	f2c0 8102 	blt.w	8004828 <__kernel_rem_pio2+0x4d8>
 8004624:	4b18      	ldr	r3, [pc, #96]	; (8004688 <__kernel_rem_pio2+0x338>)
 8004626:	461e      	mov	r6, r3
 8004628:	ab70      	add	r3, sp, #448	; 0x1c0
 800462a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800462e:	1b2b      	subs	r3, r5, r4
 8004630:	f04f 0900 	mov.w	r9, #0
 8004634:	f04f 0a00 	mov.w	sl, #0
 8004638:	2700      	movs	r7, #0
 800463a:	9306      	str	r3, [sp, #24]
 800463c:	e0e6      	b.n	800480c <__kernel_rem_pio2+0x4bc>
 800463e:	f04f 0b02 	mov.w	fp, #2
 8004642:	e756      	b.n	80044f2 <__kernel_rem_pio2+0x1a2>
 8004644:	f8d8 3000 	ldr.w	r3, [r8]
 8004648:	bb05      	cbnz	r5, 800468c <__kernel_rem_pio2+0x33c>
 800464a:	b123      	cbz	r3, 8004656 <__kernel_rem_pio2+0x306>
 800464c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004650:	f8c8 3000 	str.w	r3, [r8]
 8004654:	2301      	movs	r3, #1
 8004656:	3201      	adds	r2, #1
 8004658:	f108 0804 	add.w	r8, r8, #4
 800465c:	461d      	mov	r5, r3
 800465e:	e74f      	b.n	8004500 <__kernel_rem_pio2+0x1b0>
	...
 800466c:	3ff00000 	.word	0x3ff00000
 8004670:	08005178 	.word	0x08005178
 8004674:	40200000 	.word	0x40200000
 8004678:	3ff00000 	.word	0x3ff00000
 800467c:	3e700000 	.word	0x3e700000
 8004680:	41700000 	.word	0x41700000
 8004684:	3fe00000 	.word	0x3fe00000
 8004688:	08005138 	.word	0x08005138
 800468c:	1acb      	subs	r3, r1, r3
 800468e:	f8c8 3000 	str.w	r3, [r8]
 8004692:	462b      	mov	r3, r5
 8004694:	e7df      	b.n	8004656 <__kernel_rem_pio2+0x306>
 8004696:	1e62      	subs	r2, r4, #1
 8004698:	ab0c      	add	r3, sp, #48	; 0x30
 800469a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800469e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80046a2:	a90c      	add	r1, sp, #48	; 0x30
 80046a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80046a8:	e738      	b.n	800451c <__kernel_rem_pio2+0x1cc>
 80046aa:	1e62      	subs	r2, r4, #1
 80046ac:	ab0c      	add	r3, sp, #48	; 0x30
 80046ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80046b6:	e7f4      	b.n	80046a2 <__kernel_rem_pio2+0x352>
 80046b8:	a90c      	add	r1, sp, #48	; 0x30
 80046ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80046be:	3b01      	subs	r3, #1
 80046c0:	430a      	orrs	r2, r1
 80046c2:	e788      	b.n	80045d6 <__kernel_rem_pio2+0x286>
 80046c4:	3301      	adds	r3, #1
 80046c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80046ca:	2900      	cmp	r1, #0
 80046cc:	d0fa      	beq.n	80046c4 <__kernel_rem_pio2+0x374>
 80046ce:	9a08      	ldr	r2, [sp, #32]
 80046d0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80046d4:	446a      	add	r2, sp
 80046d6:	3a98      	subs	r2, #152	; 0x98
 80046d8:	9208      	str	r2, [sp, #32]
 80046da:	9a06      	ldr	r2, [sp, #24]
 80046dc:	a920      	add	r1, sp, #128	; 0x80
 80046de:	18a2      	adds	r2, r4, r2
 80046e0:	18e3      	adds	r3, r4, r3
 80046e2:	f104 0801 	add.w	r8, r4, #1
 80046e6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80046ea:	9302      	str	r3, [sp, #8]
 80046ec:	9b02      	ldr	r3, [sp, #8]
 80046ee:	4543      	cmp	r3, r8
 80046f0:	da04      	bge.n	80046fc <__kernel_rem_pio2+0x3ac>
 80046f2:	461c      	mov	r4, r3
 80046f4:	e6a2      	b.n	800443c <__kernel_rem_pio2+0xec>
 80046f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046f8:	2301      	movs	r3, #1
 80046fa:	e7e4      	b.n	80046c6 <__kernel_rem_pio2+0x376>
 80046fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004702:	f7fc f859 	bl	80007b8 <__aeabi_i2d>
 8004706:	e8e5 0102 	strd	r0, r1, [r5], #8
 800470a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470c:	46ab      	mov	fp, r5
 800470e:	461c      	mov	r4, r3
 8004710:	f04f 0900 	mov.w	r9, #0
 8004714:	2600      	movs	r6, #0
 8004716:	2700      	movs	r7, #0
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	4599      	cmp	r9, r3
 800471c:	dd06      	ble.n	800472c <__kernel_rem_pio2+0x3dc>
 800471e:	9b08      	ldr	r3, [sp, #32]
 8004720:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004724:	f108 0801 	add.w	r8, r8, #1
 8004728:	9308      	str	r3, [sp, #32]
 800472a:	e7df      	b.n	80046ec <__kernel_rem_pio2+0x39c>
 800472c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004730:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004734:	f7fb fdc4 	bl	80002c0 <__aeabi_dmul>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4630      	mov	r0, r6
 800473e:	4639      	mov	r1, r7
 8004740:	f7fb feee 	bl	8000520 <__adddf3>
 8004744:	f109 0901 	add.w	r9, r9, #1
 8004748:	4606      	mov	r6, r0
 800474a:	460f      	mov	r7, r1
 800474c:	e7e4      	b.n	8004718 <__kernel_rem_pio2+0x3c8>
 800474e:	3d01      	subs	r5, #1
 8004750:	e747      	b.n	80045e2 <__kernel_rem_pio2+0x292>
 8004752:	ec47 6b10 	vmov	d0, r6, r7
 8004756:	f1ca 0000 	rsb	r0, sl, #0
 800475a:	f000 fad9 	bl	8004d10 <scalbn>
 800475e:	ec57 6b10 	vmov	r6, r7, d0
 8004762:	4ba0      	ldr	r3, [pc, #640]	; (80049e4 <__kernel_rem_pio2+0x694>)
 8004764:	ee10 0a10 	vmov	r0, s0
 8004768:	2200      	movs	r2, #0
 800476a:	4639      	mov	r1, r7
 800476c:	f7fc f902 	bl	8000974 <__aeabi_dcmpge>
 8004770:	b1f8      	cbz	r0, 80047b2 <__kernel_rem_pio2+0x462>
 8004772:	4b9d      	ldr	r3, [pc, #628]	; (80049e8 <__kernel_rem_pio2+0x698>)
 8004774:	2200      	movs	r2, #0
 8004776:	4630      	mov	r0, r6
 8004778:	4639      	mov	r1, r7
 800477a:	f7fb fda1 	bl	80002c0 <__aeabi_dmul>
 800477e:	f7fc f90d 	bl	800099c <__aeabi_d2iz>
 8004782:	4680      	mov	r8, r0
 8004784:	f7fc f818 	bl	80007b8 <__aeabi_i2d>
 8004788:	4b96      	ldr	r3, [pc, #600]	; (80049e4 <__kernel_rem_pio2+0x694>)
 800478a:	2200      	movs	r2, #0
 800478c:	f7fb fd98 	bl	80002c0 <__aeabi_dmul>
 8004790:	460b      	mov	r3, r1
 8004792:	4602      	mov	r2, r0
 8004794:	4639      	mov	r1, r7
 8004796:	4630      	mov	r0, r6
 8004798:	f7fb fec0 	bl	800051c <__aeabi_dsub>
 800479c:	f7fc f8fe 	bl	800099c <__aeabi_d2iz>
 80047a0:	1c65      	adds	r5, r4, #1
 80047a2:	ab0c      	add	r3, sp, #48	; 0x30
 80047a4:	f10a 0a18 	add.w	sl, sl, #24
 80047a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80047ac:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80047b0:	e71f      	b.n	80045f2 <__kernel_rem_pio2+0x2a2>
 80047b2:	4630      	mov	r0, r6
 80047b4:	4639      	mov	r1, r7
 80047b6:	f7fc f8f1 	bl	800099c <__aeabi_d2iz>
 80047ba:	ab0c      	add	r3, sp, #48	; 0x30
 80047bc:	4625      	mov	r5, r4
 80047be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80047c2:	e716      	b.n	80045f2 <__kernel_rem_pio2+0x2a2>
 80047c4:	ab0c      	add	r3, sp, #48	; 0x30
 80047c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047ca:	f7fb fff5 	bl	80007b8 <__aeabi_i2d>
 80047ce:	4632      	mov	r2, r6
 80047d0:	463b      	mov	r3, r7
 80047d2:	f7fb fd75 	bl	80002c0 <__aeabi_dmul>
 80047d6:	4642      	mov	r2, r8
 80047d8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80047dc:	464b      	mov	r3, r9
 80047de:	4630      	mov	r0, r6
 80047e0:	4639      	mov	r1, r7
 80047e2:	f7fb fd6d 	bl	80002c0 <__aeabi_dmul>
 80047e6:	3c01      	subs	r4, #1
 80047e8:	4606      	mov	r6, r0
 80047ea:	460f      	mov	r7, r1
 80047ec:	e713      	b.n	8004616 <__kernel_rem_pio2+0x2c6>
 80047ee:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80047f2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80047f6:	f7fb fd63 	bl	80002c0 <__aeabi_dmul>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4648      	mov	r0, r9
 8004800:	4651      	mov	r1, sl
 8004802:	f7fb fe8d 	bl	8000520 <__adddf3>
 8004806:	3701      	adds	r7, #1
 8004808:	4681      	mov	r9, r0
 800480a:	468a      	mov	sl, r1
 800480c:	9b00      	ldr	r3, [sp, #0]
 800480e:	429f      	cmp	r7, r3
 8004810:	dc02      	bgt.n	8004818 <__kernel_rem_pio2+0x4c8>
 8004812:	9b06      	ldr	r3, [sp, #24]
 8004814:	429f      	cmp	r7, r3
 8004816:	ddea      	ble.n	80047ee <__kernel_rem_pio2+0x49e>
 8004818:	9a06      	ldr	r2, [sp, #24]
 800481a:	ab48      	add	r3, sp, #288	; 0x120
 800481c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004820:	e9c6 9a00 	strd	r9, sl, [r6]
 8004824:	3c01      	subs	r4, #1
 8004826:	e6fa      	b.n	800461e <__kernel_rem_pio2+0x2ce>
 8004828:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800482a:	2b02      	cmp	r3, #2
 800482c:	dc0b      	bgt.n	8004846 <__kernel_rem_pio2+0x4f6>
 800482e:	2b00      	cmp	r3, #0
 8004830:	dc39      	bgt.n	80048a6 <__kernel_rem_pio2+0x556>
 8004832:	d05d      	beq.n	80048f0 <__kernel_rem_pio2+0x5a0>
 8004834:	9b02      	ldr	r3, [sp, #8]
 8004836:	f003 0007 	and.w	r0, r3, #7
 800483a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800483e:	ecbd 8b02 	vpop	{d8}
 8004842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004846:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004848:	2b03      	cmp	r3, #3
 800484a:	d1f3      	bne.n	8004834 <__kernel_rem_pio2+0x4e4>
 800484c:	9b05      	ldr	r3, [sp, #20]
 800484e:	9500      	str	r5, [sp, #0]
 8004850:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004854:	eb0d 0403 	add.w	r4, sp, r3
 8004858:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800485c:	46a2      	mov	sl, r4
 800485e:	9b00      	ldr	r3, [sp, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f1aa 0a08 	sub.w	sl, sl, #8
 8004866:	dc69      	bgt.n	800493c <__kernel_rem_pio2+0x5ec>
 8004868:	46aa      	mov	sl, r5
 800486a:	f1ba 0f01 	cmp.w	sl, #1
 800486e:	f1a4 0408 	sub.w	r4, r4, #8
 8004872:	f300 8083 	bgt.w	800497c <__kernel_rem_pio2+0x62c>
 8004876:	9c05      	ldr	r4, [sp, #20]
 8004878:	ab48      	add	r3, sp, #288	; 0x120
 800487a:	441c      	add	r4, r3
 800487c:	2000      	movs	r0, #0
 800487e:	2100      	movs	r1, #0
 8004880:	2d01      	cmp	r5, #1
 8004882:	f300 809a 	bgt.w	80049ba <__kernel_rem_pio2+0x66a>
 8004886:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800488a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800488e:	f1bb 0f00 	cmp.w	fp, #0
 8004892:	f040 8098 	bne.w	80049c6 <__kernel_rem_pio2+0x676>
 8004896:	9b04      	ldr	r3, [sp, #16]
 8004898:	e9c3 7800 	strd	r7, r8, [r3]
 800489c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80048a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80048a4:	e7c6      	b.n	8004834 <__kernel_rem_pio2+0x4e4>
 80048a6:	9e05      	ldr	r6, [sp, #20]
 80048a8:	ab48      	add	r3, sp, #288	; 0x120
 80048aa:	441e      	add	r6, r3
 80048ac:	462c      	mov	r4, r5
 80048ae:	2000      	movs	r0, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	2c00      	cmp	r4, #0
 80048b4:	da33      	bge.n	800491e <__kernel_rem_pio2+0x5ce>
 80048b6:	f1bb 0f00 	cmp.w	fp, #0
 80048ba:	d036      	beq.n	800492a <__kernel_rem_pio2+0x5da>
 80048bc:	4602      	mov	r2, r0
 80048be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048c2:	9c04      	ldr	r4, [sp, #16]
 80048c4:	e9c4 2300 	strd	r2, r3, [r4]
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80048d0:	f7fb fe24 	bl	800051c <__aeabi_dsub>
 80048d4:	ae4a      	add	r6, sp, #296	; 0x128
 80048d6:	2401      	movs	r4, #1
 80048d8:	42a5      	cmp	r5, r4
 80048da:	da29      	bge.n	8004930 <__kernel_rem_pio2+0x5e0>
 80048dc:	f1bb 0f00 	cmp.w	fp, #0
 80048e0:	d002      	beq.n	80048e8 <__kernel_rem_pio2+0x598>
 80048e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048e6:	4619      	mov	r1, r3
 80048e8:	9b04      	ldr	r3, [sp, #16]
 80048ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80048ee:	e7a1      	b.n	8004834 <__kernel_rem_pio2+0x4e4>
 80048f0:	9c05      	ldr	r4, [sp, #20]
 80048f2:	ab48      	add	r3, sp, #288	; 0x120
 80048f4:	441c      	add	r4, r3
 80048f6:	2000      	movs	r0, #0
 80048f8:	2100      	movs	r1, #0
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	da09      	bge.n	8004912 <__kernel_rem_pio2+0x5c2>
 80048fe:	f1bb 0f00 	cmp.w	fp, #0
 8004902:	d002      	beq.n	800490a <__kernel_rem_pio2+0x5ba>
 8004904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004908:	4619      	mov	r1, r3
 800490a:	9b04      	ldr	r3, [sp, #16]
 800490c:	e9c3 0100 	strd	r0, r1, [r3]
 8004910:	e790      	b.n	8004834 <__kernel_rem_pio2+0x4e4>
 8004912:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004916:	f7fb fe03 	bl	8000520 <__adddf3>
 800491a:	3d01      	subs	r5, #1
 800491c:	e7ed      	b.n	80048fa <__kernel_rem_pio2+0x5aa>
 800491e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004922:	f7fb fdfd 	bl	8000520 <__adddf3>
 8004926:	3c01      	subs	r4, #1
 8004928:	e7c3      	b.n	80048b2 <__kernel_rem_pio2+0x562>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	e7c8      	b.n	80048c2 <__kernel_rem_pio2+0x572>
 8004930:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004934:	f7fb fdf4 	bl	8000520 <__adddf3>
 8004938:	3401      	adds	r4, #1
 800493a:	e7cd      	b.n	80048d8 <__kernel_rem_pio2+0x588>
 800493c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004940:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004944:	9b00      	ldr	r3, [sp, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4632      	mov	r2, r6
 800494c:	463b      	mov	r3, r7
 800494e:	4640      	mov	r0, r8
 8004950:	4649      	mov	r1, r9
 8004952:	f7fb fde5 	bl	8000520 <__adddf3>
 8004956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	f7fb fddb 	bl	800051c <__aeabi_dsub>
 8004966:	4632      	mov	r2, r6
 8004968:	463b      	mov	r3, r7
 800496a:	f7fb fdd9 	bl	8000520 <__adddf3>
 800496e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004972:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004976:	ed8a 7b00 	vstr	d7, [sl]
 800497a:	e770      	b.n	800485e <__kernel_rem_pio2+0x50e>
 800497c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004980:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004984:	4640      	mov	r0, r8
 8004986:	4632      	mov	r2, r6
 8004988:	463b      	mov	r3, r7
 800498a:	4649      	mov	r1, r9
 800498c:	f7fb fdc8 	bl	8000520 <__adddf3>
 8004990:	e9cd 0100 	strd	r0, r1, [sp]
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4640      	mov	r0, r8
 800499a:	4649      	mov	r1, r9
 800499c:	f7fb fdbe 	bl	800051c <__aeabi_dsub>
 80049a0:	4632      	mov	r2, r6
 80049a2:	463b      	mov	r3, r7
 80049a4:	f7fb fdbc 	bl	8000520 <__adddf3>
 80049a8:	ed9d 7b00 	vldr	d7, [sp]
 80049ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049b0:	ed84 7b00 	vstr	d7, [r4]
 80049b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80049b8:	e757      	b.n	800486a <__kernel_rem_pio2+0x51a>
 80049ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80049be:	f7fb fdaf 	bl	8000520 <__adddf3>
 80049c2:	3d01      	subs	r5, #1
 80049c4:	e75c      	b.n	8004880 <__kernel_rem_pio2+0x530>
 80049c6:	9b04      	ldr	r3, [sp, #16]
 80049c8:	9a04      	ldr	r2, [sp, #16]
 80049ca:	601f      	str	r7, [r3, #0]
 80049cc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80049d0:	605c      	str	r4, [r3, #4]
 80049d2:	609d      	str	r5, [r3, #8]
 80049d4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80049d8:	60d3      	str	r3, [r2, #12]
 80049da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049de:	6110      	str	r0, [r2, #16]
 80049e0:	6153      	str	r3, [r2, #20]
 80049e2:	e727      	b.n	8004834 <__kernel_rem_pio2+0x4e4>
 80049e4:	41700000 	.word	0x41700000
 80049e8:	3e700000 	.word	0x3e700000
 80049ec:	00000000 	.word	0x00000000

080049f0 <__kernel_cos>:
 80049f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	ec57 6b10 	vmov	r6, r7, d0
 80049f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80049fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004a00:	ed8d 1b00 	vstr	d1, [sp]
 8004a04:	da07      	bge.n	8004a16 <__kernel_cos+0x26>
 8004a06:	ee10 0a10 	vmov	r0, s0
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	f7fb ffc6 	bl	800099c <__aeabi_d2iz>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f000 8088 	beq.w	8004b26 <__kernel_cos+0x136>
 8004a16:	4632      	mov	r2, r6
 8004a18:	463b      	mov	r3, r7
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	f7fb fc4f 	bl	80002c0 <__aeabi_dmul>
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <__kernel_cos+0x178>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	460d      	mov	r5, r1
 8004a2a:	f7fb fc49 	bl	80002c0 <__aeabi_dmul>
 8004a2e:	a340      	add	r3, pc, #256	; (adr r3, 8004b30 <__kernel_cos+0x140>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	4682      	mov	sl, r0
 8004a36:	468b      	mov	fp, r1
 8004a38:	4620      	mov	r0, r4
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	f7fb fc40 	bl	80002c0 <__aeabi_dmul>
 8004a40:	a33d      	add	r3, pc, #244	; (adr r3, 8004b38 <__kernel_cos+0x148>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fd6b 	bl	8000520 <__adddf3>
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	f7fb fc37 	bl	80002c0 <__aeabi_dmul>
 8004a52:	a33b      	add	r3, pc, #236	; (adr r3, 8004b40 <__kernel_cos+0x150>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fd60 	bl	800051c <__aeabi_dsub>
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	462b      	mov	r3, r5
 8004a60:	f7fb fc2e 	bl	80002c0 <__aeabi_dmul>
 8004a64:	a338      	add	r3, pc, #224	; (adr r3, 8004b48 <__kernel_cos+0x158>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fb fd59 	bl	8000520 <__adddf3>
 8004a6e:	4622      	mov	r2, r4
 8004a70:	462b      	mov	r3, r5
 8004a72:	f7fb fc25 	bl	80002c0 <__aeabi_dmul>
 8004a76:	a336      	add	r3, pc, #216	; (adr r3, 8004b50 <__kernel_cos+0x160>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fd4e 	bl	800051c <__aeabi_dsub>
 8004a80:	4622      	mov	r2, r4
 8004a82:	462b      	mov	r3, r5
 8004a84:	f7fb fc1c 	bl	80002c0 <__aeabi_dmul>
 8004a88:	a333      	add	r3, pc, #204	; (adr r3, 8004b58 <__kernel_cos+0x168>)
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f7fb fd47 	bl	8000520 <__adddf3>
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	f7fb fc13 	bl	80002c0 <__aeabi_dmul>
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	f7fb fc0f 	bl	80002c0 <__aeabi_dmul>
 8004aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	4630      	mov	r0, r6
 8004aac:	4639      	mov	r1, r7
 8004aae:	f7fb fc07 	bl	80002c0 <__aeabi_dmul>
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f7fb fd2f 	bl	800051c <__aeabi_dsub>
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <__kernel_cos+0x17c>)
 8004ac0:	4598      	cmp	r8, r3
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460f      	mov	r7, r1
 8004ac6:	dc10      	bgt.n	8004aea <__kernel_cos+0xfa>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4650      	mov	r0, sl
 8004ace:	4659      	mov	r1, fp
 8004ad0:	f7fb fd24 	bl	800051c <__aeabi_dsub>
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4926      	ldr	r1, [pc, #152]	; (8004b70 <__kernel_cos+0x180>)
 8004ad8:	4602      	mov	r2, r0
 8004ada:	2000      	movs	r0, #0
 8004adc:	f7fb fd1e 	bl	800051c <__aeabi_dsub>
 8004ae0:	ec41 0b10 	vmov	d0, r0, r1
 8004ae4:	b003      	add	sp, #12
 8004ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aea:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <__kernel_cos+0x184>)
 8004aec:	4920      	ldr	r1, [pc, #128]	; (8004b70 <__kernel_cos+0x180>)
 8004aee:	4598      	cmp	r8, r3
 8004af0:	bfcc      	ite	gt
 8004af2:	4d21      	ldrgt	r5, [pc, #132]	; (8004b78 <__kernel_cos+0x188>)
 8004af4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004af8:	2400      	movs	r4, #0
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7fb fd0c 	bl	800051c <__aeabi_dsub>
 8004b04:	4622      	mov	r2, r4
 8004b06:	4680      	mov	r8, r0
 8004b08:	4689      	mov	r9, r1
 8004b0a:	462b      	mov	r3, r5
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	4659      	mov	r1, fp
 8004b10:	f7fb fd04 	bl	800051c <__aeabi_dsub>
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	f7fb fd00 	bl	800051c <__aeabi_dsub>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4640      	mov	r0, r8
 8004b22:	4649      	mov	r1, r9
 8004b24:	e7da      	b.n	8004adc <__kernel_cos+0xec>
 8004b26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004b60 <__kernel_cos+0x170>
 8004b2a:	e7db      	b.n	8004ae4 <__kernel_cos+0xf4>
 8004b2c:	f3af 8000 	nop.w
 8004b30:	be8838d4 	.word	0xbe8838d4
 8004b34:	bda8fae9 	.word	0xbda8fae9
 8004b38:	bdb4b1c4 	.word	0xbdb4b1c4
 8004b3c:	3e21ee9e 	.word	0x3e21ee9e
 8004b40:	809c52ad 	.word	0x809c52ad
 8004b44:	3e927e4f 	.word	0x3e927e4f
 8004b48:	19cb1590 	.word	0x19cb1590
 8004b4c:	3efa01a0 	.word	0x3efa01a0
 8004b50:	16c15177 	.word	0x16c15177
 8004b54:	3f56c16c 	.word	0x3f56c16c
 8004b58:	5555554c 	.word	0x5555554c
 8004b5c:	3fa55555 	.word	0x3fa55555
 8004b60:	00000000 	.word	0x00000000
 8004b64:	3ff00000 	.word	0x3ff00000
 8004b68:	3fe00000 	.word	0x3fe00000
 8004b6c:	3fd33332 	.word	0x3fd33332
 8004b70:	3ff00000 	.word	0x3ff00000
 8004b74:	3fe90000 	.word	0x3fe90000
 8004b78:	3fd20000 	.word	0x3fd20000
 8004b7c:	00000000 	.word	0x00000000

08004b80 <__kernel_sin>:
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	ed2d 8b04 	vpush	{d8-d9}
 8004b88:	eeb0 8a41 	vmov.f32	s16, s2
 8004b8c:	eef0 8a61 	vmov.f32	s17, s3
 8004b90:	ec55 4b10 	vmov	r4, r5, d0
 8004b94:	b083      	sub	sp, #12
 8004b96:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b9a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004b9e:	9001      	str	r0, [sp, #4]
 8004ba0:	da06      	bge.n	8004bb0 <__kernel_sin+0x30>
 8004ba2:	ee10 0a10 	vmov	r0, s0
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	f7fb fef8 	bl	800099c <__aeabi_d2iz>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d051      	beq.n	8004c54 <__kernel_sin+0xd4>
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	f7fb fb82 	bl	80002c0 <__aeabi_dmul>
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	468b      	mov	fp, r1
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f7fb fb7a 	bl	80002c0 <__aeabi_dmul>
 8004bcc:	a341      	add	r3, pc, #260	; (adr r3, 8004cd4 <__kernel_sin+0x154>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	4680      	mov	r8, r0
 8004bd4:	4689      	mov	r9, r1
 8004bd6:	4650      	mov	r0, sl
 8004bd8:	4659      	mov	r1, fp
 8004bda:	f7fb fb71 	bl	80002c0 <__aeabi_dmul>
 8004bde:	a33f      	add	r3, pc, #252	; (adr r3, 8004cdc <__kernel_sin+0x15c>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fc9a 	bl	800051c <__aeabi_dsub>
 8004be8:	4652      	mov	r2, sl
 8004bea:	465b      	mov	r3, fp
 8004bec:	f7fb fb68 	bl	80002c0 <__aeabi_dmul>
 8004bf0:	a33c      	add	r3, pc, #240	; (adr r3, 8004ce4 <__kernel_sin+0x164>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fc93 	bl	8000520 <__adddf3>
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	465b      	mov	r3, fp
 8004bfe:	f7fb fb5f 	bl	80002c0 <__aeabi_dmul>
 8004c02:	a33a      	add	r3, pc, #232	; (adr r3, 8004cec <__kernel_sin+0x16c>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fc88 	bl	800051c <__aeabi_dsub>
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	465b      	mov	r3, fp
 8004c10:	f7fb fb56 	bl	80002c0 <__aeabi_dmul>
 8004c14:	a337      	add	r3, pc, #220	; (adr r3, 8004cf4 <__kernel_sin+0x174>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fc81 	bl	8000520 <__adddf3>
 8004c1e:	9b01      	ldr	r3, [sp, #4]
 8004c20:	4606      	mov	r6, r0
 8004c22:	460f      	mov	r7, r1
 8004c24:	b9eb      	cbnz	r3, 8004c62 <__kernel_sin+0xe2>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	f7fb fb47 	bl	80002c0 <__aeabi_dmul>
 8004c32:	a325      	add	r3, pc, #148	; (adr r3, 8004cc8 <__kernel_sin+0x148>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f7fb fc70 	bl	800051c <__aeabi_dsub>
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	f7fb fb3e 	bl	80002c0 <__aeabi_dmul>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4620      	mov	r0, r4
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	f7fb fc68 	bl	8000520 <__adddf3>
 8004c50:	4604      	mov	r4, r0
 8004c52:	460d      	mov	r5, r1
 8004c54:	ec45 4b10 	vmov	d0, r4, r5
 8004c58:	b003      	add	sp, #12
 8004c5a:	ecbd 8b04 	vpop	{d8-d9}
 8004c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c62:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <__kernel_sin+0x150>)
 8004c64:	ec51 0b18 	vmov	r0, r1, d8
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f7fb fb29 	bl	80002c0 <__aeabi_dmul>
 8004c6e:	4632      	mov	r2, r6
 8004c70:	ec41 0b19 	vmov	d9, r0, r1
 8004c74:	463b      	mov	r3, r7
 8004c76:	4640      	mov	r0, r8
 8004c78:	4649      	mov	r1, r9
 8004c7a:	f7fb fb21 	bl	80002c0 <__aeabi_dmul>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	ec51 0b19 	vmov	r0, r1, d9
 8004c86:	f7fb fc49 	bl	800051c <__aeabi_dsub>
 8004c8a:	4652      	mov	r2, sl
 8004c8c:	465b      	mov	r3, fp
 8004c8e:	f7fb fb17 	bl	80002c0 <__aeabi_dmul>
 8004c92:	ec53 2b18 	vmov	r2, r3, d8
 8004c96:	f7fb fc41 	bl	800051c <__aeabi_dsub>
 8004c9a:	a30b      	add	r3, pc, #44	; (adr r3, 8004cc8 <__kernel_sin+0x148>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	460f      	mov	r7, r1
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	f7fb fb0a 	bl	80002c0 <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	f7fb fc34 	bl	8000520 <__adddf3>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7fb fc2c 	bl	800051c <__aeabi_dsub>
 8004cc4:	e7c4      	b.n	8004c50 <__kernel_sin+0xd0>
 8004cc6:	bf00      	nop
 8004cc8:	55555549 	.word	0x55555549
 8004ccc:	3fc55555 	.word	0x3fc55555
 8004cd0:	3fe00000 	.word	0x3fe00000
 8004cd4:	5acfd57c 	.word	0x5acfd57c
 8004cd8:	3de5d93a 	.word	0x3de5d93a
 8004cdc:	8a2b9ceb 	.word	0x8a2b9ceb
 8004ce0:	3e5ae5e6 	.word	0x3e5ae5e6
 8004ce4:	57b1fe7d 	.word	0x57b1fe7d
 8004ce8:	3ec71de3 	.word	0x3ec71de3
 8004cec:	19c161d5 	.word	0x19c161d5
 8004cf0:	3f2a01a0 	.word	0x3f2a01a0
 8004cf4:	1110f8a6 	.word	0x1110f8a6
 8004cf8:	3f811111 	.word	0x3f811111

08004cfc <fabs>:
 8004cfc:	ec51 0b10 	vmov	r0, r1, d0
 8004d00:	ee10 2a10 	vmov	r2, s0
 8004d04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d08:	ec43 2b10 	vmov	d0, r2, r3
 8004d0c:	4770      	bx	lr
	...

08004d10 <scalbn>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	ec55 4b10 	vmov	r4, r5, d0
 8004d16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	b999      	cbnz	r1, 8004d48 <scalbn+0x38>
 8004d20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004d24:	4323      	orrs	r3, r4
 8004d26:	d03f      	beq.n	8004da8 <scalbn+0x98>
 8004d28:	4b35      	ldr	r3, [pc, #212]	; (8004e00 <scalbn+0xf0>)
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	ee10 0a10 	vmov	r0, s0
 8004d30:	2200      	movs	r2, #0
 8004d32:	f7fb fac5 	bl	80002c0 <__aeabi_dmul>
 8004d36:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <scalbn+0xf4>)
 8004d38:	429e      	cmp	r6, r3
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	da10      	bge.n	8004d62 <scalbn+0x52>
 8004d40:	a327      	add	r3, pc, #156	; (adr r3, 8004de0 <scalbn+0xd0>)
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	e01f      	b.n	8004d88 <scalbn+0x78>
 8004d48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d4c:	4291      	cmp	r1, r2
 8004d4e:	d10c      	bne.n	8004d6a <scalbn+0x5a>
 8004d50:	ee10 2a10 	vmov	r2, s0
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb fbe2 	bl	8000520 <__adddf3>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	460d      	mov	r5, r1
 8004d60:	e022      	b.n	8004da8 <scalbn+0x98>
 8004d62:	460b      	mov	r3, r1
 8004d64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004d68:	3936      	subs	r1, #54	; 0x36
 8004d6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004d6e:	4296      	cmp	r6, r2
 8004d70:	dd0d      	ble.n	8004d8e <scalbn+0x7e>
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	a11c      	add	r1, pc, #112	; (adr r1, 8004de8 <scalbn+0xd8>)
 8004d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d7a:	da02      	bge.n	8004d82 <scalbn+0x72>
 8004d7c:	a11c      	add	r1, pc, #112	; (adr r1, 8004df0 <scalbn+0xe0>)
 8004d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d82:	a319      	add	r3, pc, #100	; (adr r3, 8004de8 <scalbn+0xd8>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f7fb fa9a 	bl	80002c0 <__aeabi_dmul>
 8004d8c:	e7e6      	b.n	8004d5c <scalbn+0x4c>
 8004d8e:	1872      	adds	r2, r6, r1
 8004d90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004d94:	428a      	cmp	r2, r1
 8004d96:	dcec      	bgt.n	8004d72 <scalbn+0x62>
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	dd08      	ble.n	8004dae <scalbn+0x9e>
 8004d9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004da0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004da4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004da8:	ec45 4b10 	vmov	d0, r4, r5
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004db2:	da08      	bge.n	8004dc6 <scalbn+0xb6>
 8004db4:	2d00      	cmp	r5, #0
 8004db6:	a10a      	add	r1, pc, #40	; (adr r1, 8004de0 <scalbn+0xd0>)
 8004db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dbc:	dac0      	bge.n	8004d40 <scalbn+0x30>
 8004dbe:	a10e      	add	r1, pc, #56	; (adr r1, 8004df8 <scalbn+0xe8>)
 8004dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dc4:	e7bc      	b.n	8004d40 <scalbn+0x30>
 8004dc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004dca:	3236      	adds	r2, #54	; 0x36
 8004dcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <scalbn+0xf8>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	e7d5      	b.n	8004d88 <scalbn+0x78>
 8004ddc:	f3af 8000 	nop.w
 8004de0:	c2f8f359 	.word	0xc2f8f359
 8004de4:	01a56e1f 	.word	0x01a56e1f
 8004de8:	8800759c 	.word	0x8800759c
 8004dec:	7e37e43c 	.word	0x7e37e43c
 8004df0:	8800759c 	.word	0x8800759c
 8004df4:	fe37e43c 	.word	0xfe37e43c
 8004df8:	c2f8f359 	.word	0xc2f8f359
 8004dfc:	81a56e1f 	.word	0x81a56e1f
 8004e00:	43500000 	.word	0x43500000
 8004e04:	ffff3cb0 	.word	0xffff3cb0
 8004e08:	3c900000 	.word	0x3c900000
 8004e0c:	00000000 	.word	0x00000000

08004e10 <floor>:
 8004e10:	ec51 0b10 	vmov	r0, r1, d0
 8004e14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004e20:	2e13      	cmp	r6, #19
 8004e22:	ee10 5a10 	vmov	r5, s0
 8004e26:	ee10 8a10 	vmov	r8, s0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	dc31      	bgt.n	8004e92 <floor+0x82>
 8004e2e:	2e00      	cmp	r6, #0
 8004e30:	da14      	bge.n	8004e5c <floor+0x4c>
 8004e32:	a333      	add	r3, pc, #204	; (adr r3, 8004f00 <floor+0xf0>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f7fb fb72 	bl	8000520 <__adddf3>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f7fb fda2 	bl	8000988 <__aeabi_dcmpgt>
 8004e44:	b138      	cbz	r0, 8004e56 <floor+0x46>
 8004e46:	2c00      	cmp	r4, #0
 8004e48:	da53      	bge.n	8004ef2 <floor+0xe2>
 8004e4a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004e4e:	4325      	orrs	r5, r4
 8004e50:	d052      	beq.n	8004ef8 <floor+0xe8>
 8004e52:	4c2d      	ldr	r4, [pc, #180]	; (8004f08 <floor+0xf8>)
 8004e54:	2500      	movs	r5, #0
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	e024      	b.n	8004ea6 <floor+0x96>
 8004e5c:	4f2b      	ldr	r7, [pc, #172]	; (8004f0c <floor+0xfc>)
 8004e5e:	4137      	asrs	r7, r6
 8004e60:	ea01 0307 	and.w	r3, r1, r7
 8004e64:	4303      	orrs	r3, r0
 8004e66:	d01e      	beq.n	8004ea6 <floor+0x96>
 8004e68:	a325      	add	r3, pc, #148	; (adr r3, 8004f00 <floor+0xf0>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fb57 	bl	8000520 <__adddf3>
 8004e72:	2200      	movs	r2, #0
 8004e74:	2300      	movs	r3, #0
 8004e76:	f7fb fd87 	bl	8000988 <__aeabi_dcmpgt>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d0eb      	beq.n	8004e56 <floor+0x46>
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	bfbe      	ittt	lt
 8004e82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004e86:	4133      	asrlt	r3, r6
 8004e88:	18e4      	addlt	r4, r4, r3
 8004e8a:	ea24 0407 	bic.w	r4, r4, r7
 8004e8e:	2500      	movs	r5, #0
 8004e90:	e7e1      	b.n	8004e56 <floor+0x46>
 8004e92:	2e33      	cmp	r6, #51	; 0x33
 8004e94:	dd0b      	ble.n	8004eae <floor+0x9e>
 8004e96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004e9a:	d104      	bne.n	8004ea6 <floor+0x96>
 8004e9c:	ee10 2a10 	vmov	r2, s0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	f7fb fb3d 	bl	8000520 <__adddf3>
 8004ea6:	ec41 0b10 	vmov	d0, r0, r1
 8004eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004eb2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004eb6:	40df      	lsrs	r7, r3
 8004eb8:	4238      	tst	r0, r7
 8004eba:	d0f4      	beq.n	8004ea6 <floor+0x96>
 8004ebc:	a310      	add	r3, pc, #64	; (adr r3, 8004f00 <floor+0xf0>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb fb2d 	bl	8000520 <__adddf3>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f7fb fd5d 	bl	8000988 <__aeabi_dcmpgt>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d0c1      	beq.n	8004e56 <floor+0x46>
 8004ed2:	2c00      	cmp	r4, #0
 8004ed4:	da0a      	bge.n	8004eec <floor+0xdc>
 8004ed6:	2e14      	cmp	r6, #20
 8004ed8:	d101      	bne.n	8004ede <floor+0xce>
 8004eda:	3401      	adds	r4, #1
 8004edc:	e006      	b.n	8004eec <floor+0xdc>
 8004ede:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	40b3      	lsls	r3, r6
 8004ee6:	441d      	add	r5, r3
 8004ee8:	45a8      	cmp	r8, r5
 8004eea:	d8f6      	bhi.n	8004eda <floor+0xca>
 8004eec:	ea25 0507 	bic.w	r5, r5, r7
 8004ef0:	e7b1      	b.n	8004e56 <floor+0x46>
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	462c      	mov	r4, r5
 8004ef6:	e7ae      	b.n	8004e56 <floor+0x46>
 8004ef8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004efc:	e7ab      	b.n	8004e56 <floor+0x46>
 8004efe:	bf00      	nop
 8004f00:	8800759c 	.word	0x8800759c
 8004f04:	7e37e43c 	.word	0x7e37e43c
 8004f08:	bff00000 	.word	0xbff00000
 8004f0c:	000fffff 	.word	0x000fffff

08004f10 <_init>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr

08004f1c <_fini>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr
