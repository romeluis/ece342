
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc4  08004cc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ccc  08004ccc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  2000000c  08004ce0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08004ce0  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7f5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ff  00000000  00000000  0002d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d4  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e84  00000000  00000000  00030dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dba8  00000000  00000000  00051c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7356  00000000  00000000  0005f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f34  00000000  00000000  00126b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00129a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004c8c 	.word	0x08004c8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004c8c 	.word	0x08004c8c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 f804 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f8d6 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9b8 	bl	8000880 <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f996 	bl	8000840 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f93c 	bl	8000790 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f964 	bl	80007e4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  vehicleStop();
 800051c:	f000 fafd 	bl	8000b1a <vehicleStop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000520:	e002      	b.n	8000528 <main+0x28>
	  HAL_Delay(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f001 f866 	bl	80015f4 <HAL_Delay>
  while(!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	485d      	ldr	r0, [pc, #372]	; (80006a4 <main+0x1a4>)
 800052e:	f001 fea7 	bl	8002280 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f4      	beq.n	8000522 <main+0x22>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Continue forward until obstacle detected
	  vehicleForwardUntilUnClear();
 8000538:	f000 fada 	bl	8000af0 <vehicleForwardUntilUnClear>

	  //***OBSTACLE DETECTED***//
	  currentObstacleTime = HAL_GetTick();
 800053c:	f001 f84e 	bl	80015dc <HAL_GetTick>
 8000540:	4603      	mov	r3, r0
 8000542:	4a59      	ldr	r2, [pc, #356]	; (80006a8 <main+0x1a8>)
 8000544:	6013      	str	r3, [r2, #0]
	  //Determine Location of obstacle
	  findObstacle();
 8000546:	f000 fcf1 	bl	8000f2c <findObstacle>
	  previousObstacle = currentObstacle;
 800054a:	4b58      	ldr	r3, [pc, #352]	; (80006ac <main+0x1ac>)
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4b58      	ldr	r3, [pc, #352]	; (80006b0 <main+0x1b0>)
 8000550:	701a      	strb	r2, [r3, #0]

	  //Feedback loop escape
	  if (currentObstacleTime - previousObstacleTime <= TIME_THRESHOLD) {
 8000552:	4b55      	ldr	r3, [pc, #340]	; (80006a8 <main+0x1a8>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b57      	ldr	r3, [pc, #348]	; (80006b4 <main+0x1b4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000560:	d816      	bhi.n	8000590 <main+0x90>
		  vehicleReverse();
 8000562:	f000 faf6 	bl	8000b52 <vehicleReverse>
		  HAL_Delay(LONG_REVERSE);
 8000566:	20c8      	movs	r0, #200	; 0xc8
 8000568:	f001 f844 	bl	80015f4 <HAL_Delay>
		  vehicleStop();
 800056c:	f000 fad5 	bl	8000b1a <vehicleStop>
		  if (HAL_GetTick() % 2 == 0) {
 8000570:	f001 f834 	bl	80015dc <HAL_GetTick>
 8000574:	4603      	mov	r3, r0
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <main+0x84>
			  vehicleLeft();
 800057e:	f000 faf4 	bl	8000b6a <vehicleLeft>
 8000582:	e001      	b.n	8000588 <main+0x88>
		  } else {
			  vehicleRight();
 8000584:	f000 fb14 	bl	8000bb0 <vehicleRight>
		  }
		  HAL_Delay(HALF_TURN);
 8000588:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800058c:	f001 f832 	bl	80015f4 <HAL_Delay>
	  }
	  previousObstacleTime = currentObstacleTime;
 8000590:	4b45      	ldr	r3, [pc, #276]	; (80006a8 <main+0x1a8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a47      	ldr	r2, [pc, #284]	; (80006b4 <main+0x1b4>)
 8000596:	6013      	str	r3, [r2, #0]
	  //Navigate Obstacle
	  if (currentObstacle == NONE) { //Nothing detected
 8000598:	4b44      	ldr	r3, [pc, #272]	; (80006ac <main+0x1ac>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d079      	beq.n	8000694 <main+0x194>
		  //do nothing
		  //Error_Handler();
	  } else if (currentObstacle == NORTH) {
 80005a0:	4b42      	ldr	r3, [pc, #264]	; (80006ac <main+0x1ac>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d113      	bne.n	80005d0 <main+0xd0>
		  vehicleReverse();
 80005a8:	f000 fad3 	bl	8000b52 <vehicleReverse>
		  HAL_Delay(SHORT_REVERSE);
 80005ac:	2096      	movs	r0, #150	; 0x96
 80005ae:	f001 f821 	bl	80015f4 <HAL_Delay>
		  vehicleStop();
 80005b2:	f000 fab2 	bl	8000b1a <vehicleStop>
		  if (HAL_GetTick() % 2 == 0) {
 80005b6:	f001 f811 	bl	80015dc <HAL_GetTick>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <main+0xca>
			  vehicleLeftUntilClear();
 80005c4:	f000 fadd 	bl	8000b82 <vehicleLeftUntilClear>
 80005c8:	e064      	b.n	8000694 <main+0x194>
		  } else {
			  vehicleRightUntilClear();
 80005ca:	f000 fafd 	bl	8000bc8 <vehicleRightUntilClear>
 80005ce:	e061      	b.n	8000694 <main+0x194>
		  }
	  } else if (currentObstacle == NORTHWEST) {
 80005d0:	4b36      	ldr	r3, [pc, #216]	; (80006ac <main+0x1ac>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d102      	bne.n	80005de <main+0xde>
		  vehicleRightUntilClear();
 80005d8:	f000 faf6 	bl	8000bc8 <vehicleRightUntilClear>
 80005dc:	e05a      	b.n	8000694 <main+0x194>
	  } else if (currentObstacle == NORTHEAST) {
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <main+0x1ac>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d102      	bne.n	80005ec <main+0xec>
		  vehicleLeftUntilClear();
 80005e6:	f000 facc 	bl	8000b82 <vehicleLeftUntilClear>
 80005ea:	e053      	b.n	8000694 <main+0x194>
	  } else if (currentObstacle == WEST) {
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <main+0x1ac>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b05      	cmp	r3, #5
 80005f2:	d10d      	bne.n	8000610 <main+0x110>
		  vehicleReverse();
 80005f4:	f000 faad 	bl	8000b52 <vehicleReverse>
		  HAL_Delay(SHORT_REVERSE);
 80005f8:	2096      	movs	r0, #150	; 0x96
 80005fa:	f000 fffb 	bl	80015f4 <HAL_Delay>
		  vehicleStop();
 80005fe:	f000 fa8c 	bl	8000b1a <vehicleStop>

		  vehicleRight();
 8000602:	f000 fad5 	bl	8000bb0 <vehicleRight>
		  HAL_Delay(QUARTER_TURN);
 8000606:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800060a:	f000 fff3 	bl	80015f4 <HAL_Delay>
 800060e:	e041      	b.n	8000694 <main+0x194>
	  } else if (currentObstacle == EAST) {
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <main+0x1ac>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b04      	cmp	r3, #4
 8000616:	d10d      	bne.n	8000634 <main+0x134>
		  vehicleReverse();
 8000618:	f000 fa9b 	bl	8000b52 <vehicleReverse>
		  HAL_Delay(SHORT_REVERSE);
 800061c:	2096      	movs	r0, #150	; 0x96
 800061e:	f000 ffe9 	bl	80015f4 <HAL_Delay>
		  vehicleStop();
 8000622:	f000 fa7a 	bl	8000b1a <vehicleStop>

		  vehicleLeft();
 8000626:	f000 faa0 	bl	8000b6a <vehicleLeft>
		  HAL_Delay(QUARTER_TURN);
 800062a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800062e:	f000 ffe1 	bl	80015f4 <HAL_Delay>
 8000632:	e02f      	b.n	8000694 <main+0x194>
	  } else if (currentObstacle == SURROUNDLEFT) {
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <main+0x1ac>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b06      	cmp	r3, #6
 800063a:	d108      	bne.n	800064e <main+0x14e>
		  vehicleReverseUntilClear();
 800063c:	f000 fadb 	bl	8000bf6 <vehicleReverseUntilClear>

		  vehicleRight();
 8000640:	f000 fab6 	bl	8000bb0 <vehicleRight>
		  HAL_Delay(QUARTER_TURN);
 8000644:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000648:	f000 ffd4 	bl	80015f4 <HAL_Delay>
 800064c:	e022      	b.n	8000694 <main+0x194>
	  } else if (currentObstacle == SURROUNDRIGHT) {
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x1ac>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b07      	cmp	r3, #7
 8000654:	d108      	bne.n	8000668 <main+0x168>
		  vehicleReverseUntilClear();
 8000656:	f000 face 	bl	8000bf6 <vehicleReverseUntilClear>

		  vehicleLeft();
 800065a:	f000 fa86 	bl	8000b6a <vehicleLeft>
		  HAL_Delay(QUARTER_TURN);
 800065e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000662:	f000 ffc7 	bl	80015f4 <HAL_Delay>
 8000666:	e015      	b.n	8000694 <main+0x194>
	  } else if (currentObstacle == SURROUND) {
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0x1ac>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b08      	cmp	r3, #8
 800066e:	d111      	bne.n	8000694 <main+0x194>
		  vehicleReverseUntilClear();
 8000670:	f000 fac1 	bl	8000bf6 <vehicleReverseUntilClear>

		  if (HAL_GetTick() % 2 == 0) {
 8000674:	f000 ffb2 	bl	80015dc <HAL_GetTick>
 8000678:	4603      	mov	r3, r0
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <main+0x188>
			  vehicleLeft();
 8000682:	f000 fa72 	bl	8000b6a <vehicleLeft>
 8000686:	e001      	b.n	800068c <main+0x18c>
		  } else {
			  vehicleRight();
 8000688:	f000 fa92 	bl	8000bb0 <vehicleRight>
		  }
		  HAL_Delay(QUARTER_TURN);
 800068c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000690:	f000 ffb0 	bl	80015f4 <HAL_Delay>

	  }

	  //Small delay before continuing
	  vehicleStop();
 8000694:	f000 fa41 	bl	8000b1a <vehicleStop>
	  HAL_Delay(500);
 8000698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069c:	f000 ffaa 	bl	80015f4 <HAL_Delay>
	  vehicleForwardUntilUnClear();
 80006a0:	e74a      	b.n	8000538 <main+0x38>
 80006a2:	bf00      	nop
 80006a4:	40020800 	.word	0x40020800
 80006a8:	200005e0 	.word	0x200005e0
 80006ac:	200005dd 	.word	0x200005dd
 80006b0:	200005de 	.word	0x200005de
 80006b4:	200005e4 	.word	0x200005e4

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fab4 	bl	8004c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <SystemClock_Config+0xd0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a28      	ldr	r2, [pc, #160]	; (8000788 <SystemClock_Config+0xd0>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xd4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemClock_Config+0xd4>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000718:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800071c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800072c:	23a8      	movs	r3, #168	; 0xa8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fdc9 	bl	80032d8 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800074c:	f000 fd1c 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff3e 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800077a:	f000 fd05 	bl	8001188 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART3_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007c8:	f003 f824 	bl	8003814 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 fcd9 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028
 80007e0:	40004800 	.word	0x40004800

080007e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2206      	movs	r2, #6
 80007f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2201      	movs	r2, #1
 800080c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2201      	movs	r2, #1
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	f001 fd99 	bl	800235e <HAL_PCD_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 fca9 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000cc 	.word	0x200000cc

08000840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA_Init+0x3c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <MX_DMA_Init+0x3c>)
 8000850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DMA_Init+0x3c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	200e      	movs	r0, #14
 8000868:	f000 ffc3 	bl	80017f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800086c:	200e      	movs	r0, #14
 800086e:	f000 ffdc 	bl	800182a <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <MX_GPIO_Init+0x240>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a88      	ldr	r2, [pc, #544]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	623b      	str	r3, [r7, #32]
 80008b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a81      	ldr	r2, [pc, #516]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008bc:	f043 0320 	orr.w	r3, r3, #32
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b7f      	ldr	r3, [pc, #508]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0320 	and.w	r3, r3, #32
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b7b      	ldr	r3, [pc, #492]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a7a      	ldr	r2, [pc, #488]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a73      	ldr	r2, [pc, #460]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <MX_GPIO_Init+0x240>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <MX_GPIO_Init+0x240>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a6c      	ldr	r2, [pc, #432]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b6a      	ldr	r3, [pc, #424]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a65      	ldr	r2, [pc, #404]	; (8000ac0 <MX_GPIO_Init+0x240>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b5f      	ldr	r3, [pc, #380]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5e      	ldr	r2, [pc, #376]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b58      	ldr	r3, [pc, #352]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a57      	ldr	r2, [pc, #348]	; (8000ac0 <MX_GPIO_Init+0x240>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b55      	ldr	r3, [pc, #340]	; (8000ac0 <MX_GPIO_Init+0x240>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_1_OUT_1_Pin|MOTOR_1_OUT_2_Pin|MOTOR_2_OUT_1_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2138      	movs	r1, #56	; 0x38
 800097a:	4852      	ldr	r0, [pc, #328]	; (8000ac4 <MX_GPIO_Init+0x244>)
 800097c:	f001 fc98 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f244 0181 	movw	r1, #16513	; 0x4081
 8000986:	4850      	ldr	r0, [pc, #320]	; (8000ac8 <MX_GPIO_Init+0x248>)
 8000988:	f001 fc92 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_2_OUT_2_GPIO_Port, MOTOR_2_OUT_2_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	484e      	ldr	r0, [pc, #312]	; (8000acc <MX_GPIO_Init+0x24c>)
 8000992:	f001 fc8d 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_3_OUT_1_Pin|MOTOR_3_OUT_2_Pin|MOTOR_4_OUT_1_Pin|MOTOR_4_OUT_2_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800099c:	484c      	ldr	r0, [pc, #304]	; (8000ad0 <MX_GPIO_Init+0x250>)
 800099e:	f001 fc87 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4849      	ldr	r0, [pc, #292]	; (8000acc <MX_GPIO_Init+0x24c>)
 80009a8:	f001 fc82 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4844      	ldr	r0, [pc, #272]	; (8000ad4 <MX_GPIO_Init+0x254>)
 80009c4:	f001 fac8 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_1_OUT_1_Pin MOTOR_2_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_OUT_1_Pin|MOTOR_2_OUT_1_Pin;
 80009c8:	2328      	movs	r3, #40	; 0x28
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4839      	ldr	r0, [pc, #228]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80009e0:	f001 faba 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_1_OUT_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_OUT_2_Pin;
 80009e4:	2310      	movs	r3, #16
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_1_OUT_2_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80009fc:	f001 faac 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a00:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	482b      	ldr	r0, [pc, #172]	; (8000ac8 <MX_GPIO_Init+0x248>)
 8000a1a:	f001 fa9d 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_2_OUT_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_2_OUT_2_Pin;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_2_OUT_2_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4825      	ldr	r0, [pc, #148]	; (8000acc <MX_GPIO_Init+0x24c>)
 8000a36:	f001 fa8f 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_SENSOR_IN_SIDE_RIGHT_Pin IR_SENSOR_IN_LEFT_Pin IR_SENSOR_IN_RIGHT_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_IN_SIDE_RIGHT_Pin|IR_SENSOR_IN_LEFT_Pin|IR_SENSOR_IN_RIGHT_Pin|USB_OverCurrent_Pin;
 8000a3a:	238e      	movs	r3, #142	; 0x8e
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481f      	ldr	r0, [pc, #124]	; (8000acc <MX_GPIO_Init+0x24c>)
 8000a4e:	f001 fa83 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_3_OUT_1_Pin MOTOR_3_OUT_2_Pin MOTOR_4_OUT_1_Pin MOTOR_4_OUT_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_OUT_1_Pin|MOTOR_3_OUT_2_Pin|MOTOR_4_OUT_1_Pin|MOTOR_4_OUT_2_Pin;
 8000a52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <MX_GPIO_Init+0x250>)
 8000a6c:	f001 fa74 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_SENSOR_IN_FRONT_Pin IR_SENSOR_IN_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_IN_FRONT_Pin|IR_SENSOR_IN_SIDE_LEFT_Pin;
 8000a70:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0x250>)
 8000a86:	f001 fa67 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <MX_GPIO_Init+0x24c>)
 8000aa2:	f001 fa59 	bl	8001f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f000 fea1 	bl	80017f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab0:	2028      	movs	r0, #40	; 0x28
 8000ab2:	f000 feba 	bl	800182a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3738      	adds	r7, #56	; 0x38
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021400 	.word	0x40021400
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <vehicleForward>:

/* USER CODE BEGIN 4 */
//VEHICLE HELPER
void vehicleForward() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	motor1CCW();
 8000adc:	f000 f8b2 	bl	8000c44 <motor1CCW>
	motor3CCW();
 8000ae0:	f000 f8d8 	bl	8000c94 <motor3CCW>
	motor2CW();
 8000ae4:	f000 f8b8 	bl	8000c58 <motor2CW>
	motor4CW();
 8000ae8:	f000 f8de 	bl	8000ca8 <motor4CW>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <vehicleForwardUntilUnClear>:
void vehicleForwardUntilUnClear() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	refreshSensorStatus();
 8000af4:	f000 f97c 	bl	8000df0 <refreshSensorStatus>
	while(canContinueForward()) {
 8000af8:	e006      	b.n	8000b08 <vehicleForwardUntilUnClear+0x18>
		vehicleForward();
 8000afa:	f7ff ffed 	bl	8000ad8 <vehicleForward>
		HAL_Delay(10);
 8000afe:	200a      	movs	r0, #10
 8000b00:	f000 fd78 	bl	80015f4 <HAL_Delay>
		refreshSensorStatus();
 8000b04:	f000 f974 	bl	8000df0 <refreshSensorStatus>
	while(canContinueForward()) {
 8000b08:	f000 f9fa 	bl	8000f00 <canContinueForward>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f3      	bne.n	8000afa <vehicleForwardUntilUnClear+0xa>
	}
	vehicleStop();
 8000b12:	f000 f802 	bl	8000b1a <vehicleStop>

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <vehicleStop>:
void vehicleStop() {
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
	writeMotor1Pin1(OFF);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f8d6 	bl	8000cd0 <writeMotor1Pin1>
	writeMotor1Pin2(OFF);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f8e5 	bl	8000cf4 <writeMotor1Pin2>
	writeMotor2Pin1(OFF);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 f8f4 	bl	8000d18 <writeMotor2Pin1>
	writeMotor2Pin2(OFF);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f000 f903 	bl	8000d3c <writeMotor2Pin2>
	writeMotor3Pin1(OFF);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f912 	bl	8000d60 <writeMotor3Pin1>
	writeMotor3Pin2(OFF);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f921 	bl	8000d84 <writeMotor3Pin2>
	writeMotor4Pin1(OFF);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f930 	bl	8000da8 <writeMotor4Pin1>
	writeMotor4Pin2(OFF);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f93f 	bl	8000dcc <writeMotor4Pin2>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <vehicleReverse>:
void vehicleReverse() {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
	motor1CW();
 8000b56:	f000 f86b 	bl	8000c30 <motor1CW>
	motor3CW();
 8000b5a:	f000 f891 	bl	8000c80 <motor3CW>
	motor2CCW();
 8000b5e:	f000 f885 	bl	8000c6c <motor2CCW>
	motor4CCW();
 8000b62:	f000 f8ab 	bl	8000cbc <motor4CCW>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <vehicleLeft>:
void vehicleLeft() {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
	motor1CW();
 8000b6e:	f000 f85f 	bl	8000c30 <motor1CW>
	motor3CW();
 8000b72:	f000 f885 	bl	8000c80 <motor3CW>
	motor2CW();
 8000b76:	f000 f86f 	bl	8000c58 <motor2CW>
	motor4CW();
 8000b7a:	f000 f895 	bl	8000ca8 <motor4CW>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <vehicleLeftUntilClear>:
void vehicleLeftUntilClear() {
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
	while(isRightBlocked()) {
 8000b86:	e006      	b.n	8000b96 <vehicleLeftUntilClear+0x14>
		vehicleLeft();
 8000b88:	f7ff ffef 	bl	8000b6a <vehicleLeft>
		HAL_Delay(10);
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f000 fd31 	bl	80015f4 <HAL_Delay>
		refreshSensorStatus();
 8000b92:	f000 f92d 	bl	8000df0 <refreshSensorStatus>
	while(isRightBlocked()) {
 8000b96:	f000 f983 	bl	8000ea0 <isRightBlocked>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f3      	bne.n	8000b88 <vehicleLeftUntilClear+0x6>
	}
	HAL_Delay(SHORT_TURN); //Some additional radius
 8000ba0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ba4:	f000 fd26 	bl	80015f4 <HAL_Delay>
	vehicleStop();
 8000ba8:	f7ff ffb7 	bl	8000b1a <vehicleStop>

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <vehicleRight>:
void vehicleRight() {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	motor2CCW();
 8000bb4:	f000 f85a 	bl	8000c6c <motor2CCW>
	motor4CCW();
 8000bb8:	f000 f880 	bl	8000cbc <motor4CCW>
	motor1CCW();
 8000bbc:	f000 f842 	bl	8000c44 <motor1CCW>
	motor3CCW();
 8000bc0:	f000 f868 	bl	8000c94 <motor3CCW>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <vehicleRightUntilClear>:
void vehicleRightUntilClear() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	while(isLeftBlocked()) {
 8000bcc:	e006      	b.n	8000bdc <vehicleRightUntilClear+0x14>
		vehicleRight();
 8000bce:	f7ff ffef 	bl	8000bb0 <vehicleRight>
		HAL_Delay(10);
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f000 fd0e 	bl	80015f4 <HAL_Delay>
		refreshSensorStatus();
 8000bd8:	f000 f90a 	bl	8000df0 <refreshSensorStatus>
	while(isLeftBlocked()) {
 8000bdc:	f000 f954 	bl	8000e88 <isLeftBlocked>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f3      	bne.n	8000bce <vehicleRightUntilClear+0x6>
	}
	HAL_Delay(SHORT_TURN); //Some additional radius
 8000be6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bea:	f000 fd03 	bl	80015f4 <HAL_Delay>
	vehicleStop();
 8000bee:	f7ff ff94 	bl	8000b1a <vehicleStop>

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <vehicleReverseUntilClear>:
void vehicleReverseUntilClear() {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
	while(!canContinueForward() && isSideRightBlocked() && isSideLeftBlocked()) {
 8000bfa:	e006      	b.n	8000c0a <vehicleReverseUntilClear+0x14>
		vehicleReverse();
 8000bfc:	f7ff ffa9 	bl	8000b52 <vehicleReverse>
		HAL_Delay(10);
 8000c00:	200a      	movs	r0, #10
 8000c02:	f000 fcf7 	bl	80015f4 <HAL_Delay>
		refreshSensorStatus();
 8000c06:	f000 f8f3 	bl	8000df0 <refreshSensorStatus>
	while(!canContinueForward() && isSideRightBlocked() && isSideLeftBlocked()) {
 8000c0a:	f000 f979 	bl	8000f00 <canContinueForward>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d109      	bne.n	8000c28 <vehicleReverseUntilClear+0x32>
 8000c14:	f000 f968 	bl	8000ee8 <isSideRightBlocked>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d004      	beq.n	8000c28 <vehicleReverseUntilClear+0x32>
 8000c1e:	f000 f957 	bl	8000ed0 <isSideLeftBlocked>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1e9      	bne.n	8000bfc <vehicleReverseUntilClear+0x6>
	}
	vehicleStop();
 8000c28:	f7ff ff77 	bl	8000b1a <vehicleStop>

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <motor1CW>:
//MOTOR HELPER
void motor1CW() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	writeMotor1Pin1(ON);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f84b 	bl	8000cd0 <writeMotor1Pin1>
	writeMotor1Pin2(OFF);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f85a 	bl	8000cf4 <writeMotor1Pin2>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <motor1CCW>:
void motor1CCW() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	writeMotor1Pin1(OFF);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 f841 	bl	8000cd0 <writeMotor1Pin1>
	writeMotor1Pin2(ON);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f000 f850 	bl	8000cf4 <writeMotor1Pin2>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <motor2CW>:
void motor2CW() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	writeMotor2Pin1(ON);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f000 f85b 	bl	8000d18 <writeMotor2Pin1>
	writeMotor2Pin2(OFF);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f86a 	bl	8000d3c <writeMotor2Pin2>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <motor2CCW>:
void motor2CCW() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	writeMotor2Pin1(OFF);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f851 	bl	8000d18 <writeMotor2Pin1>
	writeMotor2Pin2(ON);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 f860 	bl	8000d3c <writeMotor2Pin2>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <motor3CW>:
void motor3CW() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	writeMotor3Pin1(ON);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 f86b 	bl	8000d60 <writeMotor3Pin1>
	writeMotor3Pin2(OFF);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f87a 	bl	8000d84 <writeMotor3Pin2>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <motor3CCW>:
void motor3CCW() {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	writeMotor3Pin1(OFF);
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f861 	bl	8000d60 <writeMotor3Pin1>
	writeMotor3Pin2(ON);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f000 f870 	bl	8000d84 <writeMotor3Pin2>
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <motor4CW>:
void motor4CW() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	writeMotor4Pin1(ON);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f87b 	bl	8000da8 <writeMotor4Pin1>
	writeMotor4Pin2(OFF);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f88a 	bl	8000dcc <writeMotor4Pin2>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <motor4CCW>:
void motor4CCW() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	writeMotor4Pin1(OFF);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f871 	bl	8000da8 <writeMotor4Pin1>
	writeMotor4Pin2(ON);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f000 f880 	bl	8000dcc <writeMotor4Pin2>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <writeMotor1Pin1>:
//Motor Pin Output
void writeMotor1Pin1(PIN_VALUE state) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, MOTOR_1_OUT_1_Pin, state);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <writeMotor1Pin1+0x20>)
 8000ce2:	f001 fae5 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021400 	.word	0x40021400

08000cf4 <writeMotor1Pin2>:
void writeMotor1Pin2(PIN_VALUE state) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, MOTOR_1_OUT_2_Pin, state);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	461a      	mov	r2, r3
 8000d02:	2110      	movs	r1, #16
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <writeMotor1Pin2+0x20>)
 8000d06:	f001 fad3 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021400 	.word	0x40021400

08000d18 <writeMotor2Pin1>:
void writeMotor2Pin1(PIN_VALUE state) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, MOTOR_2_OUT_1_Pin, state);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2120      	movs	r1, #32
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <writeMotor2Pin1+0x20>)
 8000d2a:	f001 fac1 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021400 	.word	0x40021400

08000d3c <writeMotor2Pin2>:
void writeMotor2Pin2(PIN_VALUE state) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MOTOR_2_OUT_2_GPIO_Port, MOTOR_2_OUT_2_Pin, state);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <writeMotor2Pin2+0x20>)
 8000d4e:	f001 faaf 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021800 	.word	0x40021800

08000d60 <writeMotor3Pin1>:
void writeMotor3Pin1(PIN_VALUE state) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, MOTOR_3_OUT_1_Pin, state);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <writeMotor3Pin1+0x20>)
 8000d74:	f001 fa9c 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <writeMotor3Pin2>:
void writeMotor3Pin2(PIN_VALUE state) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOE, MOTOR_3_OUT_2_Pin, state);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	461a      	mov	r2, r3
 8000d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <writeMotor3Pin2+0x20>)
 8000d98:	f001 fa8a 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000

08000da8 <writeMotor4Pin1>:
void writeMotor4Pin1(PIN_VALUE state) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, MOTOR_4_OUT_1_Pin, state);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	461a      	mov	r2, r3
 8000db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <writeMotor4Pin1+0x20>)
 8000dbc:	f001 fa78 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000

08000dcc <writeMotor4Pin2>:
void writeMotor4Pin2(PIN_VALUE state) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, MOTOR_4_OUT_2_Pin, state);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <writeMotor4Pin2+0x20>)
 8000de0:	f001 fa66 	bl	80022b0 <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000

08000df0 <refreshSensorStatus>:
//Sensor Helper
void refreshSensorStatus() {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	sensorStatus.IR_Left = !HAL_GPIO_ReadPin(IR_SENSOR_IN_LEFT_GPIO_Port, IR_SENSOR_IN_LEFT_Pin);
 8000df4:	2104      	movs	r1, #4
 8000df6:	4821      	ldr	r0, [pc, #132]	; (8000e7c <refreshSensorStatus+0x8c>)
 8000df8:	f001 fa42 	bl	8002280 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <refreshSensorStatus+0x90>)
 8000e0c:	705a      	strb	r2, [r3, #1]
	sensorStatus.IR_Right = !HAL_GPIO_ReadPin(IR_SENSOR_IN_RIGHT_GPIO_Port, IR_SENSOR_IN_RIGHT_Pin);
 8000e0e:	2108      	movs	r1, #8
 8000e10:	481a      	ldr	r0, [pc, #104]	; (8000e7c <refreshSensorStatus+0x8c>)
 8000e12:	f001 fa35 	bl	8002280 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <refreshSensorStatus+0x90>)
 8000e26:	709a      	strb	r2, [r3, #2]
	sensorStatus.IR_Front = !HAL_GPIO_ReadPin(IR_SENSOR_IN_FRONT_GPIO_Port, IR_SENSOR_IN_FRONT_Pin);
 8000e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2c:	4815      	ldr	r0, [pc, #84]	; (8000e84 <refreshSensorStatus+0x94>)
 8000e2e:	f001 fa27 	bl	8002280 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf0c      	ite	eq
 8000e38:	2301      	moveq	r3, #1
 8000e3a:	2300      	movne	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <refreshSensorStatus+0x90>)
 8000e42:	701a      	strb	r2, [r3, #0]
	sensorStatus.IR_Side_Left = !HAL_GPIO_ReadPin(IR_SENSOR_IN_SIDE_LEFT_GPIO_Port, IR_SENSOR_IN_SIDE_LEFT_Pin);
 8000e44:	2101      	movs	r1, #1
 8000e46:	480f      	ldr	r0, [pc, #60]	; (8000e84 <refreshSensorStatus+0x94>)
 8000e48:	f001 fa1a 	bl	8002280 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <refreshSensorStatus+0x90>)
 8000e5c:	70da      	strb	r2, [r3, #3]
	sensorStatus.IR_Side_Right = !HAL_GPIO_ReadPin(IR_SENSOR_IN_SIDE_RIGHT_GPIO_Port, IR_SENSOR_IN_SIDE_RIGHT_Pin);
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <refreshSensorStatus+0x8c>)
 8000e62:	f001 fa0d 	bl	8002280 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <refreshSensorStatus+0x90>)
 8000e76:	711a      	strb	r2, [r3, #4]
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021800 	.word	0x40021800
 8000e80:	200005d8 	.word	0x200005d8
 8000e84:	40021000 	.word	0x40021000

08000e88 <isLeftBlocked>:
int isLeftBlocked() {
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Left;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <isLeftBlocked+0x14>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200005d8 	.word	0x200005d8

08000ea0 <isRightBlocked>:
int isRightBlocked() {
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Right;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <isRightBlocked+0x14>)
 8000ea6:	789b      	ldrb	r3, [r3, #2]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200005d8 	.word	0x200005d8

08000eb8 <isFrontBlocked>:
int isFrontBlocked() {
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Front;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <isFrontBlocked+0x14>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200005d8 	.word	0x200005d8

08000ed0 <isSideLeftBlocked>:
int isSideLeftBlocked() {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Side_Left;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <isSideLeftBlocked+0x14>)
 8000ed6:	78db      	ldrb	r3, [r3, #3]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200005d8 	.word	0x200005d8

08000ee8 <isSideRightBlocked>:
int isSideRightBlocked() {
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	return sensorStatus.IR_Side_Right;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <isSideRightBlocked+0x14>)
 8000eee:	791b      	ldrb	r3, [r3, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200005d8 	.word	0x200005d8

08000f00 <canContinueForward>:
int canContinueForward() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	return !(isRightBlocked() || isLeftBlocked() || isFrontBlocked());
 8000f04:	f7ff ffcc 	bl	8000ea0 <isRightBlocked>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10b      	bne.n	8000f26 <canContinueForward+0x26>
 8000f0e:	f7ff ffbb 	bl	8000e88 <isLeftBlocked>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <canContinueForward+0x26>
 8000f18:	f7ff ffce 	bl	8000eb8 <isFrontBlocked>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <canContinueForward+0x26>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <canContinueForward+0x28>
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <findObstacle>:
//OBSTACLE HELPER
void findObstacle() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	refreshSensorStatus();
 8000f30:	f7ff ff5e 	bl	8000df0 <refreshSensorStatus>

	//Check Front (north)
	if ((isFrontBlocked() && !isRightBlocked() && !isLeftBlocked()) || (isFrontBlocked() && isRightBlocked() && isLeftBlocked()) || (!isFrontBlocked() && isRightBlocked() && isLeftBlocked())) {
 8000f34:	f7ff ffc0 	bl	8000eb8 <isFrontBlocked>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d009      	beq.n	8000f52 <findObstacle+0x26>
 8000f3e:	f7ff ffaf 	bl	8000ea0 <isRightBlocked>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <findObstacle+0x26>
 8000f48:	f7ff ff9e 	bl	8000e88 <isLeftBlocked>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d01d      	beq.n	8000f8e <findObstacle+0x62>
 8000f52:	f7ff ffb1 	bl	8000eb8 <isFrontBlocked>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d009      	beq.n	8000f70 <findObstacle+0x44>
 8000f5c:	f7ff ffa0 	bl	8000ea0 <isRightBlocked>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <findObstacle+0x44>
 8000f66:	f7ff ff8f 	bl	8000e88 <isLeftBlocked>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10e      	bne.n	8000f8e <findObstacle+0x62>
 8000f70:	f7ff ffa2 	bl	8000eb8 <isFrontBlocked>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d151      	bne.n	800101e <findObstacle+0xf2>
 8000f7a:	f7ff ff91 	bl	8000ea0 <isRightBlocked>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d04c      	beq.n	800101e <findObstacle+0xf2>
 8000f84:	f7ff ff80 	bl	8000e88 <isLeftBlocked>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d047      	beq.n	800101e <findObstacle+0xf2>
		//Check sides
		if (!isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle is directly in front
 8000f8e:	f7ff ffab 	bl	8000ee8 <isSideRightBlocked>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d108      	bne.n	8000faa <findObstacle+0x7e>
 8000f98:	f7ff ff9a 	bl	8000ed0 <isSideLeftBlocked>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <findObstacle+0x7e>
			currentObstacle = NORTH;
 8000fa2:	4b77      	ldr	r3, [pc, #476]	; (8001180 <findObstacle+0x254>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
			return;
 8000fa8:	e0e8      	b.n	800117c <findObstacle+0x250>
		}
		if (isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle completely surrounded
 8000faa:	f7ff ff9d 	bl	8000ee8 <isSideRightBlocked>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d008      	beq.n	8000fc6 <findObstacle+0x9a>
 8000fb4:	f7ff ff8c 	bl	8000ed0 <isSideLeftBlocked>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <findObstacle+0x9a>
			currentObstacle = SURROUND;
 8000fbe:	4b70      	ldr	r3, [pc, #448]	; (8001180 <findObstacle+0x254>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	701a      	strb	r2, [r3, #0]
			return;
 8000fc4:	e0da      	b.n	800117c <findObstacle+0x250>
		}
		if (!isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle in front and left
 8000fc6:	f7ff ff8f 	bl	8000ee8 <isSideRightBlocked>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d110      	bne.n	8000ff2 <findObstacle+0xc6>
 8000fd0:	f7ff ff7e 	bl	8000ed0 <isSideLeftBlocked>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <findObstacle+0xc6>
			if (previousObstacle == SURROUNDRIGHT) {
 8000fda:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <findObstacle+0x258>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	d103      	bne.n	8000fea <findObstacle+0xbe>
				currentObstacle = SURROUND;
 8000fe2:	4b67      	ldr	r3, [pc, #412]	; (8001180 <findObstacle+0x254>)
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	701a      	strb	r2, [r3, #0]
			} else {
				currentObstacle = SURROUNDLEFT;
			}
			return;
 8000fe8:	e0c8      	b.n	800117c <findObstacle+0x250>
				currentObstacle = SURROUNDLEFT;
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <findObstacle+0x254>)
 8000fec:	2206      	movs	r2, #6
 8000fee:	701a      	strb	r2, [r3, #0]
			return;
 8000ff0:	e0c4      	b.n	800117c <findObstacle+0x250>
		}
		if (isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle in front and right
 8000ff2:	f7ff ff79 	bl	8000ee8 <isSideRightBlocked>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d010      	beq.n	800101e <findObstacle+0xf2>
 8000ffc:	f7ff ff68 	bl	8000ed0 <isSideLeftBlocked>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10b      	bne.n	800101e <findObstacle+0xf2>
			if (previousObstacle == SURROUNDLEFT) {
 8001006:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <findObstacle+0x258>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b06      	cmp	r3, #6
 800100c:	d103      	bne.n	8001016 <findObstacle+0xea>
				currentObstacle = SURROUND;
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <findObstacle+0x254>)
 8001010:	2208      	movs	r2, #8
 8001012:	701a      	strb	r2, [r3, #0]
			} else {
				currentObstacle = SURROUNDRIGHT;
			}
			return;
 8001014:	e0b2      	b.n	800117c <findObstacle+0x250>
				currentObstacle = SURROUNDRIGHT;
 8001016:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <findObstacle+0x254>)
 8001018:	2207      	movs	r2, #7
 800101a:	701a      	strb	r2, [r3, #0]
			return;
 800101c:	e0ae      	b.n	800117c <findObstacle+0x250>
		}
	}
	//Check right (east)
	if ((isFrontBlocked() && isRightBlocked() && !isLeftBlocked()) || (!isFrontBlocked() && isRightBlocked() && !isLeftBlocked())) {
 800101e:	f7ff ff4b 	bl	8000eb8 <isFrontBlocked>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d009      	beq.n	800103c <findObstacle+0x110>
 8001028:	f7ff ff3a 	bl	8000ea0 <isRightBlocked>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <findObstacle+0x110>
 8001032:	f7ff ff29 	bl	8000e88 <isLeftBlocked>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00e      	beq.n	800105a <findObstacle+0x12e>
 800103c:	f7ff ff3c 	bl	8000eb8 <isFrontBlocked>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d141      	bne.n	80010ca <findObstacle+0x19e>
 8001046:	f7ff ff2b 	bl	8000ea0 <isRightBlocked>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d03c      	beq.n	80010ca <findObstacle+0x19e>
 8001050:	f7ff ff1a 	bl	8000e88 <isLeftBlocked>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d137      	bne.n	80010ca <findObstacle+0x19e>
		//Check sides
		if (!isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle right in front slightly to the right
 800105a:	f7ff ff45 	bl	8000ee8 <isSideRightBlocked>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d108      	bne.n	8001076 <findObstacle+0x14a>
 8001064:	f7ff ff34 	bl	8000ed0 <isSideLeftBlocked>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d103      	bne.n	8001076 <findObstacle+0x14a>
			currentObstacle = NORTHEAST;
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <findObstacle+0x254>)
 8001070:	2203      	movs	r2, #3
 8001072:	701a      	strb	r2, [r3, #0]
			return;
 8001074:	e082      	b.n	800117c <findObstacle+0x250>
		}
		if (isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle completely surrounds
 8001076:	f7ff ff37 	bl	8000ee8 <isSideRightBlocked>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <findObstacle+0x166>
 8001080:	f7ff ff26 	bl	8000ed0 <isSideLeftBlocked>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <findObstacle+0x166>
			currentObstacle = SURROUND;
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <findObstacle+0x254>)
 800108c:	2208      	movs	r2, #8
 800108e:	701a      	strb	r2, [r3, #0]
			return;
 8001090:	e074      	b.n	800117c <findObstacle+0x250>
		}
		if (!isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle weirdly surrounds
 8001092:	f7ff ff29 	bl	8000ee8 <isSideRightBlocked>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d108      	bne.n	80010ae <findObstacle+0x182>
 800109c:	f7ff ff18 	bl	8000ed0 <isSideLeftBlocked>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <findObstacle+0x182>
			currentObstacle = SURROUND;
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <findObstacle+0x254>)
 80010a8:	2208      	movs	r2, #8
 80010aa:	701a      	strb	r2, [r3, #0]
			return;
 80010ac:	e066      	b.n	800117c <findObstacle+0x250>
		}
		if (isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle in front and right
 80010ae:	f7ff ff1b 	bl	8000ee8 <isSideRightBlocked>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <findObstacle+0x19e>
 80010b8:	f7ff ff0a 	bl	8000ed0 <isSideLeftBlocked>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <findObstacle+0x19e>
			currentObstacle = EAST;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <findObstacle+0x254>)
 80010c4:	2204      	movs	r2, #4
 80010c6:	701a      	strb	r2, [r3, #0]
			return;
 80010c8:	e058      	b.n	800117c <findObstacle+0x250>
		}
	}
	//Check left (west)
	if ((isFrontBlocked() && !isRightBlocked() && isLeftBlocked()) || (!isFrontBlocked() && !isRightBlocked() && isLeftBlocked())) {
 80010ca:	f7ff fef5 	bl	8000eb8 <isFrontBlocked>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d009      	beq.n	80010e8 <findObstacle+0x1bc>
 80010d4:	f7ff fee4 	bl	8000ea0 <isRightBlocked>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d104      	bne.n	80010e8 <findObstacle+0x1bc>
 80010de:	f7ff fed3 	bl	8000e88 <isLeftBlocked>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10e      	bne.n	8001106 <findObstacle+0x1da>
 80010e8:	f7ff fee6 	bl	8000eb8 <isFrontBlocked>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d141      	bne.n	8001176 <findObstacle+0x24a>
 80010f2:	f7ff fed5 	bl	8000ea0 <isRightBlocked>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d13c      	bne.n	8001176 <findObstacle+0x24a>
 80010fc:	f7ff fec4 	bl	8000e88 <isLeftBlocked>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d037      	beq.n	8001176 <findObstacle+0x24a>
		//Check sides
		if (!isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle right in front and slightly to the left
 8001106:	f7ff feef 	bl	8000ee8 <isSideRightBlocked>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d108      	bne.n	8001122 <findObstacle+0x1f6>
 8001110:	f7ff fede 	bl	8000ed0 <isSideLeftBlocked>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <findObstacle+0x1f6>
			currentObstacle = NORTHWEST;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <findObstacle+0x254>)
 800111c:	2202      	movs	r2, #2
 800111e:	701a      	strb	r2, [r3, #0]
			return;
 8001120:	e02c      	b.n	800117c <findObstacle+0x250>
		}
		if (isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle completely surrounds
 8001122:	f7ff fee1 	bl	8000ee8 <isSideRightBlocked>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <findObstacle+0x212>
 800112c:	f7ff fed0 	bl	8000ed0 <isSideLeftBlocked>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <findObstacle+0x212>
			currentObstacle = SURROUND;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <findObstacle+0x254>)
 8001138:	2208      	movs	r2, #8
 800113a:	701a      	strb	r2, [r3, #0]
			return;
 800113c:	e01e      	b.n	800117c <findObstacle+0x250>
		}
		if (!isSideRightBlocked() && isSideLeftBlocked()) { //Obstacle in front and left
 800113e:	f7ff fed3 	bl	8000ee8 <isSideRightBlocked>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d108      	bne.n	800115a <findObstacle+0x22e>
 8001148:	f7ff fec2 	bl	8000ed0 <isSideLeftBlocked>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <findObstacle+0x22e>
			currentObstacle = WEST;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <findObstacle+0x254>)
 8001154:	2205      	movs	r2, #5
 8001156:	701a      	strb	r2, [r3, #0]
			return;
 8001158:	e010      	b.n	800117c <findObstacle+0x250>
		}
		if (isSideRightBlocked() && !isSideLeftBlocked()) { //Obstacle weirdly surrounds
 800115a:	f7ff fec5 	bl	8000ee8 <isSideRightBlocked>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <findObstacle+0x24a>
 8001164:	f7ff feb4 	bl	8000ed0 <isSideLeftBlocked>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <findObstacle+0x24a>
			currentObstacle = SURROUND;
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <findObstacle+0x254>)
 8001170:	2208      	movs	r2, #8
 8001172:	701a      	strb	r2, [r3, #0]
			return;
 8001174:	e002      	b.n	800117c <findObstacle+0x250>
		}
	}
	currentObstacle = NONE;
 8001176:	4b02      	ldr	r3, [pc, #8]	; (8001180 <findObstacle+0x254>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200005dd 	.word	0x200005dd
 8001184:	200005de 	.word	0x200005de

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <Error_Handler+0x14>)
 8001194:	f001 f8a5 	bl	80022e2 <HAL_GPIO_TogglePin>
  while (1)
 8001198:	e7fe      	b.n	8001198 <Error_Handler+0x10>
 800119a:	bf00      	nop
 800119c:	40020400 	.word	0x40020400

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a39      	ldr	r2, [pc, #228]	; (80012f4 <HAL_UART_MspInit+0x104>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d16b      	bne.n	80012ea <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <HAL_UART_MspInit+0x108>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <HAL_UART_MspInit+0x108>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HAL_UART_MspInit+0x108>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <HAL_UART_MspInit+0x108>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a30      	ldr	r2, [pc, #192]	; (80012f8 <HAL_UART_MspInit+0x108>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_UART_MspInit+0x108>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800124a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125c:	2307      	movs	r3, #7
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4825      	ldr	r0, [pc, #148]	; (80012fc <HAL_UART_MspInit+0x10c>)
 8001268:	f000 fe76 	bl	8001f58 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_UART_MspInit+0x110>)
 800126e:	4a25      	ldr	r2, [pc, #148]	; (8001304 <HAL_UART_MspInit+0x114>)
 8001270:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_UART_MspInit+0x110>)
 8001274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001278:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_UART_MspInit+0x110>)
 800127c:	2240      	movs	r2, #64	; 0x40
 800127e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_UART_MspInit+0x110>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_UART_MspInit+0x110>)
 8001288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_UART_MspInit+0x110>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_UART_MspInit+0x110>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_UART_MspInit+0x110>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012a8:	2204      	movs	r2, #4
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012ae:	2203      	movs	r2, #3
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012c0:	f000 face 	bl	8001860 <HAL_DMA_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80012ca:	f7ff ff5d 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_UART_MspInit+0x110>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2027      	movs	r0, #39	; 0x27
 80012e0:	f000 fa87 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012e4:	2027      	movs	r0, #39	; 0x27
 80012e6:	f000 faa0 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40004800 	.word	0x40004800
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	2000006c 	.word	0x2000006c
 8001304:	40026058 	.word	0x40026058

08001308 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a0      	sub	sp, #128	; 0x80
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	225c      	movs	r2, #92	; 0x5c
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fc83 	bl	8004c34 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001336:	d14e      	bne.n	80013d6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800133e:	2300      	movs	r3, #0
 8001340:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fa6c 	bl	8002824 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001352:	f7ff ff19 	bl	8001188 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001372:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001376:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001384:	230a      	movs	r3, #10
 8001386:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800138c:	4619      	mov	r1, r3
 800138e:	4815      	ldr	r0, [pc, #84]	; (80013e4 <HAL_PCD_MspInit+0xdc>)
 8001390:	f000 fde2 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013a6:	4619      	mov	r1, r3
 80013a8:	480e      	ldr	r0, [pc, #56]	; (80013e4 <HAL_PCD_MspInit+0xdc>)
 80013aa:	f000 fdd5 	bl	8001f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	6353      	str	r3, [r2, #52]	; 0x34
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_PCD_MspInit+0xd8>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3780      	adds	r7, #128	; 0x80
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f8be 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <DMA1_Stream3_IRQHandler+0x10>)
 8001442:	f000 fb4d 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000006c 	.word	0x2000006c

08001450 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USART3_IRQHandler+0x10>)
 8001456:	f002 fa2b 	bl	80038b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000028 	.word	0x20000028

08001464 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <EXTI15_10_IRQHandler+0x30>)
 8001470:	f000 ff1e 	bl	80022b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2101      	movs	r1, #1
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <EXTI15_10_IRQHandler+0x30>)
 800147a:	f000 ff19 	bl	80022b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <EXTI15_10_IRQHandler+0x30>)
 8001484:	f000 ff14 	bl	80022b0 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001488:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800148c:	f000 ff44 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40020400 	.word	0x40020400

08001498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e6:	f7ff ffd7 	bl	8001498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f003 fbab 	bl	8004c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff f807 	bl	8000500 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001500:	08004cd4 	.word	0x08004cd4
  ldr r2, =_sbss
 8001504:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001508:	200005ec 	.word	0x200005ec

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f94f 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fe2c 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f967 	bl	8001846 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001590:	f000 f92f 	bl	80017f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	200005e8 	.word	0x200005e8

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200005e8 	.word	0x200005e8

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff29 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff3e 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff31 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff feb6 	bl	80015dc <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e099      	b.n	80019b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189c:	e00f      	b.n	80018be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800189e:	f7ff fe9d 	bl	80015dc <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d908      	bls.n	80018be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2220      	movs	r2, #32
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e078      	b.n	80019b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1e8      	bne.n	800189e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_DMA_Init+0x158>)
 80018d8:	4013      	ands	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	2b04      	cmp	r3, #4
 8001916:	d107      	bne.n	8001928 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4313      	orrs	r3, r2
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f023 0307 	bic.w	r3, r3, #7
 800193e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	2b04      	cmp	r3, #4
 8001950:	d117      	bne.n	8001982 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00e      	beq.n	8001982 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fa7b 	bl	8001e60 <DMA_CheckFifoParam>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2240      	movs	r2, #64	; 0x40
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800197e:	2301      	movs	r3, #1
 8001980:	e016      	b.n	80019b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fa32 	bl	8001df4 <DMA_CalcBaseAndBitshift>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	223f      	movs	r2, #63	; 0x3f
 800199a:	409a      	lsls	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	f010803f 	.word	0xf010803f

080019bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ca:	f7ff fe07 	bl	80015dc <HAL_GetTick>
 80019ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e052      	b.n	8001a94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0216 	bic.w	r2, r2, #22
 80019fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <HAL_DMA_Abort+0x62>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0208 	bic.w	r2, r2, #8
 8001a2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3e:	e013      	b.n	8001a68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a40:	f7ff fdcc 	bl	80015dc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d90c      	bls.n	8001a68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2203      	movs	r2, #3
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e015      	b.n	8001a94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1e4      	bne.n	8001a40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	223f      	movs	r2, #63	; 0x3f
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d004      	beq.n	8001aba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00c      	b.n	8001ad4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2205      	movs	r2, #5
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aec:	4b8e      	ldr	r3, [pc, #568]	; (8001d28 <HAL_DMA_IRQHandler+0x248>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a8e      	ldr	r2, [pc, #568]	; (8001d2c <HAL_DMA_IRQHandler+0x24c>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2208      	movs	r2, #8
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2201      	movs	r2, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d012      	beq.n	8001b82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	409a      	lsls	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	2204      	movs	r2, #4
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f043 0204 	orr.w	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d043      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03c      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	2210      	movs	r2, #16
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d018      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d024      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
 8001c0e:	e01f      	b.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01b      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
 8001c20:	e016      	b.n	8001c50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0208 	bic.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2220      	movs	r2, #32
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 808f 	beq.w	8001d80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8087 	beq.w	8001d80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2220      	movs	r2, #32
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d136      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0216 	bic.w	r2, r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_DMA_IRQHandler+0x1da>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0208 	bic.w	r2, r2, #8
 8001cc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	223f      	movs	r2, #63	; 0x3f
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d07e      	beq.n	8001dec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
        }
        return;
 8001cf6:	e079      	b.n	8001dec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01d      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10d      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d031      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e02c      	b.n	8001d80 <HAL_DMA_IRQHandler+0x2a0>
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
 8001d40:	e01e      	b.n	8001d80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10f      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0210 	bic.w	r2, r2, #16
 8001d5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d032      	beq.n	8001dee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d022      	beq.n	8001dda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2205      	movs	r2, #5
 8001d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3301      	adds	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d307      	bcc.n	8001dc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f2      	bne.n	8001dac <HAL_DMA_IRQHandler+0x2cc>
 8001dc6:	e000      	b.n	8001dca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	4798      	blx	r3
 8001dea:	e000      	b.n	8001dee <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dec:	bf00      	nop
    }
  }
}
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3b10      	subs	r3, #16
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <DMA_CalcBaseAndBitshift+0x64>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e0e:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <DMA_CalcBaseAndBitshift+0x68>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d909      	bls.n	8001e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	1d1a      	adds	r2, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	659a      	str	r2, [r3, #88]	; 0x58
 8001e34:	e007      	b.n	8001e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e3e:	f023 0303 	bic.w	r3, r3, #3
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	aaaaaaab 	.word	0xaaaaaaab
 8001e5c:	08004cbc 	.word	0x08004cbc

08001e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11f      	bne.n	8001eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d856      	bhi.n	8001f2e <DMA_CheckFifoParam+0xce>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <DMA_CheckFifoParam+0x28>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001eab 	.word	0x08001eab
 8001e90:	08001e99 	.word	0x08001e99
 8001e94:	08001f2f 	.word	0x08001f2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d046      	beq.n	8001f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea8:	e043      	b.n	8001f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eb2:	d140      	bne.n	8001f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb8:	e03d      	b.n	8001f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec2:	d121      	bne.n	8001f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d837      	bhi.n	8001f3a <DMA_CheckFifoParam+0xda>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <DMA_CheckFifoParam+0x70>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001ee7 	.word	0x08001ee7
 8001ed8:	08001ee1 	.word	0x08001ee1
 8001edc:	08001ef9 	.word	0x08001ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e030      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d025      	beq.n	8001f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef6:	e022      	b.n	8001f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f00:	d11f      	bne.n	8001f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f06:	e01c      	b.n	8001f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d903      	bls.n	8001f16 <DMA_CheckFifoParam+0xb6>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d003      	beq.n	8001f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f14:	e018      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1a:	e015      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00e      	beq.n	8001f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2c:	e00b      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;
 8001f2e:	bf00      	nop
 8001f30:	e00a      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f32:	bf00      	nop
 8001f34:	e008      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f36:	bf00      	nop
 8001f38:	e006      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e004      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e002      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f42:	bf00      	nop
 8001f44:	e000      	b.n	8001f48 <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
    }
  } 
  
  return status; 
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	e165      	b.n	8002240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f040 8154 	bne.w	800223a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d005      	beq.n	8001faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d130      	bne.n	800200c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 0201 	and.w	r2, r3, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b03      	cmp	r3, #3
 8002016:	d017      	beq.n	8002048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d123      	bne.n	800209c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	08da      	lsrs	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3208      	adds	r2, #8
 800205c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	220f      	movs	r2, #15
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	08da      	lsrs	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3208      	adds	r2, #8
 8002096:	69b9      	ldr	r1, [r7, #24]
 8002098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0203 	and.w	r2, r3, #3
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80ae 	beq.w	800223a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_GPIO_Init+0x300>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a5c      	ldr	r2, [pc, #368]	; (8002258 <HAL_GPIO_Init+0x300>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_GPIO_Init+0x300>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020fa:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_GPIO_Init+0x304>)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4f      	ldr	r2, [pc, #316]	; (8002260 <HAL_GPIO_Init+0x308>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x21a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4e      	ldr	r2, [pc, #312]	; (8002264 <HAL_GPIO_Init+0x30c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x216>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_GPIO_Init+0x310>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x212>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_GPIO_Init+0x314>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x20e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <HAL_GPIO_Init+0x318>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x20a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4a      	ldr	r2, [pc, #296]	; (8002274 <HAL_GPIO_Init+0x31c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x206>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_GPIO_Init+0x320>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x202>
 8002156:	2306      	movs	r3, #6
 8002158:	e00c      	b.n	8002174 <HAL_GPIO_Init+0x21c>
 800215a:	2307      	movs	r3, #7
 800215c:	e00a      	b.n	8002174 <HAL_GPIO_Init+0x21c>
 800215e:	2305      	movs	r3, #5
 8002160:	e008      	b.n	8002174 <HAL_GPIO_Init+0x21c>
 8002162:	2304      	movs	r3, #4
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x21c>
 8002166:	2303      	movs	r3, #3
 8002168:	e004      	b.n	8002174 <HAL_GPIO_Init+0x21c>
 800216a:	2302      	movs	r3, #2
 800216c:	e002      	b.n	8002174 <HAL_GPIO_Init+0x21c>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x21c>
 8002172:	2300      	movs	r3, #0
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	f002 0203 	and.w	r2, r2, #3
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	4093      	lsls	r3, r2
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002184:	4935      	ldr	r1, [pc, #212]	; (800225c <HAL_GPIO_Init+0x304>)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002192:	4b3a      	ldr	r3, [pc, #232]	; (800227c <HAL_GPIO_Init+0x324>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b6:	4a31      	ldr	r2, [pc, #196]	; (800227c <HAL_GPIO_Init+0x324>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021bc:	4b2f      	ldr	r3, [pc, #188]	; (800227c <HAL_GPIO_Init+0x324>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e0:	4a26      	ldr	r2, [pc, #152]	; (800227c <HAL_GPIO_Init+0x324>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_GPIO_Init+0x324>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_GPIO_Init+0x324>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_GPIO_Init+0x324>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_GPIO_Init+0x324>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3301      	adds	r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	f67f ae96 	bls.w	8001f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40021400 	.word	0x40021400
 8002278:	40021800 	.word	0x40021800
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e001      	b.n	80022a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
 80022bc:	4613      	mov	r3, r2
 80022be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c0:	787b      	ldrb	r3, [r7, #1]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022cc:	e003      	b.n	80022d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	041a      	lsls	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	619a      	str	r2, [r3, #24]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022f4:	887a      	ldrh	r2, [r7, #2]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	041a      	lsls	r2, r3, #16
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43d9      	mvns	r1, r3
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	400b      	ands	r3, r1
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f806 	bl	8002348 <HAL_GPIO_EXTI_Callback>
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40013c00 	.word	0x40013c00

08002348 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002360:	b08f      	sub	sp, #60	; 0x3c
 8002362:	af0a      	add	r7, sp, #40	; 0x28
 8002364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e116      	b.n	800259e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe ffbc 	bl	8001308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 f9a5 	bl	80046fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	687e      	ldr	r6, [r7, #4]
 80023bc:	466d      	mov	r5, sp
 80023be:	f106 0410 	add.w	r4, r6, #16
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d2:	1d33      	adds	r3, r6, #4
 80023d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d6:	6838      	ldr	r0, [r7, #0]
 80023d8:	f002 f930 	bl	800463c <USB_CoreInit>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0d7      	b.n	800259e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 f993 	bl	8004720 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e04a      	b.n	8002496 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	333d      	adds	r3, #61	; 0x3d
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	333c      	adds	r3, #60	; 0x3c
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	b298      	uxth	r0, r3
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3344      	adds	r3, #68	; 0x44
 800243c:	4602      	mov	r2, r0
 800243e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3340      	adds	r3, #64	; 0x40
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3348      	adds	r3, #72	; 0x48
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334c      	adds	r3, #76	; 0x4c
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3354      	adds	r3, #84	; 0x54
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3301      	adds	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d3af      	bcc.n	8002400 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e044      	b.n	8002530 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	3301      	adds	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d3b5      	bcc.n	80024a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	687e      	ldr	r6, [r7, #4]
 8002542:	466d      	mov	r5, sp
 8002544:	f106 0410 	add.w	r4, r6, #16
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002554:	e885 0003 	stmia.w	r5, {r0, r1}
 8002558:	1d33      	adds	r3, r6, #4
 800255a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255c:	6838      	ldr	r0, [r7, #0]
 800255e:	f002 f92b 	bl	80047b8 <USB_DevInit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e014      	b.n	800259e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f80a 	bl	80025a6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fae9 	bl	8004b6e <USB_DevDisconnect>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	f043 0303 	orr.w	r3, r3, #3
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe ff7c 	bl	80015dc <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe ff78 	bl	80015dc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 fb7f 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fedc 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004ca4 	.word	0x08004ca4
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff0 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	08004cb4 	.word	0x08004cb4

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffdc 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0b5b      	lsrs	r3, r3, #13
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	08004cb4 	.word	0x08004cb4

08002824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08c      	sub	sp, #48	; 0x30
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800285e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002862:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	496c      	ldr	r1, [pc, #432]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800287a:	2301      	movs	r3, #1
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	4960      	ldr	r1, [pc, #384]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80028a8:	2301      	movs	r3, #1
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d017      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4955      	ldr	r1, [pc, #340]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028d6:	d101      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80028e4:	2301      	movs	r3, #1
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028f4:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	4946      	ldr	r1, [pc, #280]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002912:	d101      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002914:	2301      	movs	r3, #1
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002920:	2301      	movs	r3, #1
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 808a 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800293c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800294e:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800295a:	f7fe fe3f 	bl	80015dc <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7fe fe3b 	bl	80015dc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e278      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002988:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d02f      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	429a      	cmp	r2, r3
 800299c:	d028      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800299e:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d114      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe fe09 	bl	80015dc <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fe05 	bl	80015dc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e240      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ee      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fc:	d114      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a12:	4902      	ldr	r1, [pc, #8]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]
 8002a18:	e00c      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42470e40 	.word	0x42470e40
 8002a28:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a32:	6093      	str	r3, [r2, #8]
 8002a34:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	4944      	ldr	r1, [pc, #272]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a5a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	4937      	ldr	r1, [pc, #220]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a8a:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a90:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	492e      	ldr	r1, [pc, #184]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	4926      	ldr	r1, [pc, #152]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	491a      	ldr	r1, [pc, #104]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d011      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	4911      	ldr	r1, [pc, #68]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d005      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b30:	f040 80ff 	bne.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe fd4f 	bl	80015dc <HAL_GetTick>
 8002b3e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b40:	e00e      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b42:	f7fe fd4b 	bl	80015dc <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d907      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e188      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	424711e0 	.word	0x424711e0
 8002b5c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b60:	4b7e      	ldr	r3, [pc, #504]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ea      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d028      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d124      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b94:	4b71      	ldr	r3, [pc, #452]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bac:	0e1b      	lsrs	r3, r3, #24
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	071b      	lsls	r3, r3, #28
 8002bd6:	4961      	ldr	r1, [pc, #388]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d035      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c08:	d130      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c0a:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c22:	0f1b      	lsrs	r3, r3, #28
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	019b      	lsls	r3, r3, #6
 8002c34:	431a      	orrs	r2, r3
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	431a      	orrs	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	071b      	lsls	r3, r3, #28
 8002c4c:	4943      	ldr	r1, [pc, #268]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5a:	f023 021f 	bic.w	r2, r3, #31
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	493d      	ldr	r1, [pc, #244]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d029      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c80:	d124      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c82:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c94:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9a:	0f1b      	lsrs	r3, r3, #28
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	019b      	lsls	r3, r3, #6
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	071b      	lsls	r3, r3, #28
 8002cc4:	4925      	ldr	r1, [pc, #148]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	3b01      	subs	r3, #1
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	4917      	ldr	r1, [pc, #92]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fc66 	bl	80015dc <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d14:	f7fe fc62 	bl	80015dc <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e09f      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f040 8095 	bne.w	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fc4c 	bl	80015dc <HAL_GetTick>
 8002d44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d46:	e00f      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d48:	f7fe fc48 	bl	80015dc <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d908      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e085      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470068 	.word	0x42470068
 8002d64:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d68:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d74:	d0e8      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02b      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d127      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d9e:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	3301      	adds	r3, #1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	4928      	ldr	r1, [pc, #160]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dda:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	3b01      	subs	r3, #1
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	4922      	ldr	r1, [pc, #136]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01d      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e02:	d118      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	0e1b      	lsrs	r3, r3, #24
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	4910      	ldr	r1, [pc, #64]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e36:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fbce 	bl	80015dc <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e44:	f7fe fbca 	bl	80015dc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e007      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e62:	d1ef      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3730      	adds	r7, #48	; 0x30
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	42470070 	.word	0x42470070

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b0ae      	sub	sp, #184	; 0xb8
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9e:	4bcb      	ldr	r3, [pc, #812]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	f200 8206 	bhi.w	80032b8 <HAL_RCC_GetSysClockFreq+0x440>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ee9 	.word	0x08002ee9
 8002eb8:	080032b9 	.word	0x080032b9
 8002ebc:	080032b9 	.word	0x080032b9
 8002ec0:	080032b9 	.word	0x080032b9
 8002ec4:	08002ef1 	.word	0x08002ef1
 8002ec8:	080032b9 	.word	0x080032b9
 8002ecc:	080032b9 	.word	0x080032b9
 8002ed0:	080032b9 	.word	0x080032b9
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	080032b9 	.word	0x080032b9
 8002edc:	080032b9 	.word	0x080032b9
 8002ee0:	080032b9 	.word	0x080032b9
 8002ee4:	080030e9 	.word	0x080030e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4bb9      	ldr	r3, [pc, #740]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002eee:	e1e7      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef0:	4bb8      	ldr	r3, [pc, #736]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ef6:	e1e3      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef8:	4bb4      	ldr	r3, [pc, #720]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f04:	4bb1      	ldr	r3, [pc, #708]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d071      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f10:	4bae      	ldr	r3, [pc, #696]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	f04f 0000 	mov.w	r0, #0
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	0159      	lsls	r1, r3, #5
 8002f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f48:	0150      	lsls	r0, r2, #5
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4621      	mov	r1, r4
 8002f50:	1a51      	subs	r1, r2, r1
 8002f52:	6439      	str	r1, [r7, #64]	; 0x40
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f68:	4649      	mov	r1, r9
 8002f6a:	018b      	lsls	r3, r1, #6
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f72:	4641      	mov	r1, r8
 8002f74:	018a      	lsls	r2, r1, #6
 8002f76:	4641      	mov	r1, r8
 8002f78:	1a51      	subs	r1, r2, r1
 8002f7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f90:	4649      	mov	r1, r9
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4641      	mov	r1, r8
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002faa:	462b      	mov	r3, r5
 8002fac:	460a      	mov	r2, r1
 8002fae:	eb42 0303 	adc.w	r3, r2, r3
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	024b      	lsls	r3, r1, #9
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fca:	4621      	mov	r1, r4
 8002fcc:	024a      	lsls	r2, r1, #9
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fe0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fe4:	f7fd f90e 	bl	8000204 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ff2:	e067      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff4:	4b75      	ldr	r3, [pc, #468]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003000:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003004:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300c:	67bb      	str	r3, [r7, #120]	; 0x78
 800300e:	2300      	movs	r3, #0
 8003010:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003012:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003016:	4622      	mov	r2, r4
 8003018:	462b      	mov	r3, r5
 800301a:	f04f 0000 	mov.w	r0, #0
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	0159      	lsls	r1, r3, #5
 8003024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003028:	0150      	lsls	r0, r2, #5
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4621      	mov	r1, r4
 8003030:	1a51      	subs	r1, r2, r1
 8003032:	62b9      	str	r1, [r7, #40]	; 0x28
 8003034:	4629      	mov	r1, r5
 8003036:	eb63 0301 	sbc.w	r3, r3, r1
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003048:	4649      	mov	r1, r9
 800304a:	018b      	lsls	r3, r1, #6
 800304c:	4641      	mov	r1, r8
 800304e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003052:	4641      	mov	r1, r8
 8003054:	018a      	lsls	r2, r1, #6
 8003056:	4641      	mov	r1, r8
 8003058:	ebb2 0a01 	subs.w	sl, r2, r1
 800305c:	4649      	mov	r1, r9
 800305e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800306e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003076:	4692      	mov	sl, r2
 8003078:	469b      	mov	fp, r3
 800307a:	4623      	mov	r3, r4
 800307c:	eb1a 0303 	adds.w	r3, sl, r3
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	462b      	mov	r3, r5
 8003084:	eb4b 0303 	adc.w	r3, fp, r3
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003096:	4629      	mov	r1, r5
 8003098:	028b      	lsls	r3, r1, #10
 800309a:	4621      	mov	r1, r4
 800309c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a0:	4621      	mov	r1, r4
 80030a2:	028a      	lsls	r2, r1, #10
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ac:	2200      	movs	r2, #0
 80030ae:	673b      	str	r3, [r7, #112]	; 0x70
 80030b0:	677a      	str	r2, [r7, #116]	; 0x74
 80030b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80030b6:	f7fd f8a5 	bl	8000204 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4613      	mov	r3, r2
 80030c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	3301      	adds	r3, #1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030e6:	e0eb      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f4:	4b35      	ldr	r3, [pc, #212]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d06b      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003100:	4b32      	ldr	r3, [pc, #200]	; (80031cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	2200      	movs	r2, #0
 8003108:	66bb      	str	r3, [r7, #104]	; 0x68
 800310a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800310c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800310e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003112:	663b      	str	r3, [r7, #96]	; 0x60
 8003114:	2300      	movs	r3, #0
 8003116:	667b      	str	r3, [r7, #100]	; 0x64
 8003118:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800311c:	4622      	mov	r2, r4
 800311e:	462b      	mov	r3, r5
 8003120:	f04f 0000 	mov.w	r0, #0
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	0159      	lsls	r1, r3, #5
 800312a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800312e:	0150      	lsls	r0, r2, #5
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4621      	mov	r1, r4
 8003136:	1a51      	subs	r1, r2, r1
 8003138:	61b9      	str	r1, [r7, #24]
 800313a:	4629      	mov	r1, r5
 800313c:	eb63 0301 	sbc.w	r3, r3, r1
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800314e:	4659      	mov	r1, fp
 8003150:	018b      	lsls	r3, r1, #6
 8003152:	4651      	mov	r1, sl
 8003154:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003158:	4651      	mov	r1, sl
 800315a:	018a      	lsls	r2, r1, #6
 800315c:	4651      	mov	r1, sl
 800315e:	ebb2 0801 	subs.w	r8, r2, r1
 8003162:	4659      	mov	r1, fp
 8003164:	eb63 0901 	sbc.w	r9, r3, r1
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003174:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003178:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800317c:	4690      	mov	r8, r2
 800317e:	4699      	mov	r9, r3
 8003180:	4623      	mov	r3, r4
 8003182:	eb18 0303 	adds.w	r3, r8, r3
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	462b      	mov	r3, r5
 800318a:	eb49 0303 	adc.w	r3, r9, r3
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800319c:	4629      	mov	r1, r5
 800319e:	024b      	lsls	r3, r1, #9
 80031a0:	4621      	mov	r1, r4
 80031a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031a6:	4621      	mov	r1, r4
 80031a8:	024a      	lsls	r2, r1, #9
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031b2:	2200      	movs	r2, #0
 80031b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031bc:	f7fd f822 	bl	8000204 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ca:	e065      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x420>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d8:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	2200      	movs	r2, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	4611      	mov	r1, r2
 80031e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031e8:	653b      	str	r3, [r7, #80]	; 0x50
 80031ea:	2300      	movs	r3, #0
 80031ec:	657b      	str	r3, [r7, #84]	; 0x54
 80031ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031f2:	4642      	mov	r2, r8
 80031f4:	464b      	mov	r3, r9
 80031f6:	f04f 0000 	mov.w	r0, #0
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	0159      	lsls	r1, r3, #5
 8003200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003204:	0150      	lsls	r0, r2, #5
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4641      	mov	r1, r8
 800320c:	1a51      	subs	r1, r2, r1
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	4649      	mov	r1, r9
 8003212:	eb63 0301 	sbc.w	r3, r3, r1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003224:	4659      	mov	r1, fp
 8003226:	018b      	lsls	r3, r1, #6
 8003228:	4651      	mov	r1, sl
 800322a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322e:	4651      	mov	r1, sl
 8003230:	018a      	lsls	r2, r1, #6
 8003232:	4651      	mov	r1, sl
 8003234:	1a54      	subs	r4, r2, r1
 8003236:	4659      	mov	r1, fp
 8003238:	eb63 0501 	sbc.w	r5, r3, r1
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	00eb      	lsls	r3, r5, #3
 8003246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324a:	00e2      	lsls	r2, r4, #3
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	4643      	mov	r3, r8
 8003252:	18e3      	adds	r3, r4, r3
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	464b      	mov	r3, r9
 8003258:	eb45 0303 	adc.w	r3, r5, r3
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326a:	4629      	mov	r1, r5
 800326c:	028b      	lsls	r3, r1, #10
 800326e:	4621      	mov	r1, r4
 8003270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003274:	4621      	mov	r1, r4
 8003276:	028a      	lsls	r2, r1, #10
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003280:	2200      	movs	r2, #0
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
 8003284:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003286:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800328a:	f7fc ffbb 	bl	8000204 <__aeabi_uldivmod>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4613      	mov	r3, r2
 8003294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0f1b      	lsrs	r3, r3, #28
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80032a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032b6:	e003      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	37b8      	adds	r7, #184	; 0xb8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400

080032d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e28d      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8083 	beq.w	80033fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032f8:	4b94      	ldr	r3, [pc, #592]	; (800354c <HAL_RCC_OscConfig+0x274>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d019      	beq.n	8003338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003304:	4b91      	ldr	r3, [pc, #580]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800330c:	2b08      	cmp	r3, #8
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003310:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331c:	d00c      	beq.n	8003338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b8b      	ldr	r3, [pc, #556]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d112      	bne.n	8003350 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003336:	d10b      	bne.n	8003350 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	4b84      	ldr	r3, [pc, #528]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d05b      	beq.n	80033fc <HAL_RCC_OscConfig+0x124>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d157      	bne.n	80033fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e25a      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d106      	bne.n	8003368 <HAL_RCC_OscConfig+0x90>
 800335a:	4b7c      	ldr	r3, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7b      	ldr	r2, [pc, #492]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xcc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0xb4>
 8003372:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b73      	ldr	r3, [pc, #460]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a72      	ldr	r2, [pc, #456]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xcc>
 800338c:	4b6f      	ldr	r3, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6e      	ldr	r2, [pc, #440]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b6c      	ldr	r3, [pc, #432]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6b      	ldr	r2, [pc, #428]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe f916 	bl	80015dc <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe f912 	bl	80015dc <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e21f      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b61      	ldr	r3, [pc, #388]	; (800354c <HAL_RCC_OscConfig+0x274>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xdc>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe f902 	bl	80015dc <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe f8fe 	bl	80015dc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e20b      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x274>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x104>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06f      	beq.n	80034ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800340a:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d017      	beq.n	8003446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003416:	4b4d      	ldr	r3, [pc, #308]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800341e:	2b08      	cmp	r3, #8
 8003420:	d105      	bne.n	800342e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d11c      	bne.n	8003474 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b44      	ldr	r3, [pc, #272]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x186>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e1d3      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4937      	ldr	r1, [pc, #220]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	e03a      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x278>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe f8ab 	bl	80015dc <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348a:	f7fe f8a7 	bl	80015dc <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1b4      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_RCC_OscConfig+0x274>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4925      	ldr	r1, [pc, #148]	; (800354c <HAL_RCC_OscConfig+0x274>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_OscConfig+0x278>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe f88a 	bl	80015dc <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fe f886 	bl	80015dc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e193      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x274>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fe f86a 	bl	80015dc <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350c:	f7fe f866 	bl	80015dc <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e173      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x234>
 800352a:	e01b      	b.n	8003564 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fe f853 	bl	80015dc <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	e00e      	b.n	8003558 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353a:	f7fe f84f 	bl	80015dc <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d907      	bls.n	8003558 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e15c      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
 800354c:	40023800 	.word	0x40023800
 8003550:	42470000 	.word	0x42470000
 8003554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b8a      	ldr	r3, [pc, #552]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ea      	bne.n	800353a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8097 	beq.w	80036a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b83      	ldr	r3, [pc, #524]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b7f      	ldr	r3, [pc, #508]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a7e      	ldr	r2, [pc, #504]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b7c      	ldr	r3, [pc, #496]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b79      	ldr	r3, [pc, #484]	; (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe f80f 	bl	80015dc <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fe f80b 	bl	80015dc <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e118      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x31e>
 80035e8:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a65      	ldr	r2, [pc, #404]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x358>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x340>
 80035fe:	4b61      	ldr	r3, [pc, #388]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a60      	ldr	r2, [pc, #384]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b5e      	ldr	r3, [pc, #376]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a5d      	ldr	r2, [pc, #372]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x358>
 8003618:	4b5a      	ldr	r3, [pc, #360]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a59      	ldr	r2, [pc, #356]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b57      	ldr	r3, [pc, #348]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a56      	ldr	r2, [pc, #344]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd ffd0 	bl	80015dc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fd ffcc 	bl	80015dc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0d7      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ee      	beq.n	8003640 <HAL_RCC_OscConfig+0x368>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd ffba 	bl	80015dc <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd ffb6 	bl	80015dc <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0c1      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	4b40      	ldr	r3, [pc, #256]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ee      	bne.n	800366c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80ad 	beq.w	8003804 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036aa:	4b36      	ldr	r3, [pc, #216]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d060      	beq.n	8003778 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d145      	bne.n	800374a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b33      	ldr	r3, [pc, #204]	; (800378c <HAL_RCC_OscConfig+0x4b4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd ff8a 	bl	80015dc <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd ff86 	bl	80015dc <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e093      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	071b      	lsls	r3, r3, #28
 8003716:	491b      	ldr	r1, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4b4>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd ff5b 	bl	80015dc <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372a:	f7fd ff57 	bl	80015dc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e064      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x452>
 8003748:	e05c      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCC_OscConfig+0x4b4>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd ff44 	bl	80015dc <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7fd ff40 	bl	80015dc <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e04d      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x480>
 8003776:	e045      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e040      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
 8003784:	40023800 	.word	0x40023800
 8003788:	40007000 	.word	0x40007000
 800378c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_RCC_OscConfig+0x538>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d030      	beq.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d129      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d122      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d119      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	3b01      	subs	r3, #1
 80037da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d10f      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e03f      	b.n	80038a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fcd8 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fc7b 	bl	8004154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800386c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800387c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800388c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b0ba      	sub	sp, #232	; 0xe8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_UART_IRQHandler+0x66>
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fb65 	bl	8003fde <UART_Receive_IT>
      return;
 8003914:	e256      	b.n	8003dc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80de 	beq.w	8003adc <HAL_UART_IRQHandler+0x22c>
 8003920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80d1 	beq.w	8003adc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_UART_IRQHandler+0xae>
 8003946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xd2>
 800396a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0202 	orr.w	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_UART_IRQHandler+0xf6>
 800398e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f043 0204 	orr.w	r2, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d011      	beq.n	80039d6 <HAL_UART_IRQHandler+0x126>
 80039b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f043 0208 	orr.w	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 81ed 	beq.w	8003dba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_UART_IRQHandler+0x14e>
 80039ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 faf0 	bl	8003fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_UART_IRQHandler+0x17a>
 8003a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04f      	beq.n	8003aca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f9f8 	bl	8003e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d141      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3314      	adds	r3, #20
 8003a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3314      	adds	r3, #20
 8003a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1d9      	bne.n	8003a3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	4a7d      	ldr	r2, [pc, #500]	; (8003c8c <HAL_UART_IRQHandler+0x3dc>)
 8003a98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fffc 	bl	8001a9c <HAL_DMA_Abort_IT>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	e00e      	b.n	8003ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f99a 	bl	8003df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	e00a      	b.n	8003ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f996 	bl	8003df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	e006      	b.n	8003ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f992 	bl	8003df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ad6:	e170      	b.n	8003dba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	bf00      	nop
    return;
 8003ada:	e16e      	b.n	8003dba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	f040 814a 	bne.w	8003d7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8143 	beq.w	8003d7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 813c 	beq.w	8003d7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	f040 80b4 	bne.w	8003c90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8140 	beq.w	8003dbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b46:	429a      	cmp	r2, r3
 8003b48:	f080 8139 	bcs.w	8003dbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5e:	f000 8088 	beq.w	8003c72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1d9      	bne.n	8003b62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e1      	bne.n	8003bae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e3      	bne.n	8003bea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c42:	f023 0310 	bic.w	r3, r3, #16
 8003c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c54:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e3      	bne.n	8003c30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fd fea5 	bl	80019bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8c0 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c88:	e099      	b.n	8003dbe <HAL_UART_IRQHandler+0x50e>
 8003c8a:	bf00      	nop
 8003c8c:	08003ee7 	.word	0x08003ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 808b 	beq.w	8003dc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8086 	beq.w	8003dc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cda:	647a      	str	r2, [r7, #68]	; 0x44
 8003cdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e3      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d12:	633a      	str	r2, [r7, #48]	; 0x30
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d58:	61fa      	str	r2, [r7, #28]
 8003d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	69b9      	ldr	r1, [r7, #24]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	617b      	str	r3, [r7, #20]
   return(result);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e3      	bne.n	8003d34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f848 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d78:	e023      	b.n	8003dc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_UART_IRQHandler+0x4ea>
 8003d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8bb 	bl	8003f0e <UART_Transmit_IT>
    return;
 8003d98:	e014      	b.n	8003dc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00e      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x514>
 8003da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8fb 	bl	8003fae <UART_EndTransmit_IT>
    return;
 8003db8:	e004      	b.n	8003dc4 <HAL_UART_IRQHandler+0x514>
    return;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <HAL_UART_IRQHandler+0x514>
      return;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_UART_IRQHandler+0x514>
      return;
 8003dc2:	bf00      	nop
  }
}
 8003dc4:	37e8      	adds	r7, #232	; 0xe8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop

08003dcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b095      	sub	sp, #84	; 0x54
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e48:	643a      	str	r2, [r7, #64]	; 0x40
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d119      	bne.n	8003ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb8:	61ba      	str	r2, [r7, #24]
 8003eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6979      	ldr	r1, [r7, #20]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	; 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff ff77 	bl	8003df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b21      	cmp	r3, #33	; 0x21
 8003f20:	d13e      	bne.n	8003fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	d114      	bne.n	8003f56 <UART_Transmit_IT+0x48>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	1c9a      	adds	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	621a      	str	r2, [r3, #32]
 8003f54:	e008      	b.n	8003f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6211      	str	r1, [r2, #32]
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10f      	bne.n	8003f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fefc 	bl	8003dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	; 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b22      	cmp	r3, #34	; 0x22
 8003ff0:	f040 80ab 	bne.w	800414a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d117      	bne.n	800402e <UART_Receive_IT+0x50>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401c:	b29a      	uxth	r2, r3
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
 800402c:	e026      	b.n	800407c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d007      	beq.n	8004052 <UART_Receive_IT+0x74>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <UART_Receive_IT+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e008      	b.n	8004072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406c:	b2da      	uxtb	r2, r3
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800408c:	2b00      	cmp	r3, #0
 800408e:	d15a      	bne.n	8004146 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d135      	bne.n	800413c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	613b      	str	r3, [r7, #16]
   return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f023 0310 	bic.w	r3, r3, #16
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	623a      	str	r2, [r7, #32]
 80040f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	69f9      	ldr	r1, [r7, #28]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	61bb      	str	r3, [r7, #24]
   return(result);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b10      	cmp	r3, #16
 8004116:	d10a      	bne.n	800412e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fe67 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
 800413a:	e002      	b.n	8004142 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff fe4f 	bl	8003de0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e002      	b.n	800414c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	; 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b0c0      	sub	sp, #256	; 0x100
 800415a:	af00      	add	r7, sp, #0
 800415c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	68d9      	ldr	r1, [r3, #12]
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	ea40 0301 	orr.w	r3, r0, r1
 800417c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	431a      	orrs	r2, r3
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	431a      	orrs	r2, r3
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041ac:	f021 010c 	bic.w	r1, r1, #12
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ba:	430b      	orrs	r3, r1
 80041bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ce:	6999      	ldr	r1, [r3, #24]
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	ea40 0301 	orr.w	r3, r0, r1
 80041da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b8f      	ldr	r3, [pc, #572]	; (8004420 <UART_SetConfig+0x2cc>)
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d005      	beq.n	80041f4 <UART_SetConfig+0xa0>
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b8d      	ldr	r3, [pc, #564]	; (8004424 <UART_SetConfig+0x2d0>)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d104      	bne.n	80041fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7fe fb02 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 80041f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041fc:	e003      	b.n	8004206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fe:	f7fe fae9 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8004202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	f040 810c 	bne.w	800442c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800421e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004226:	4622      	mov	r2, r4
 8004228:	462b      	mov	r3, r5
 800422a:	1891      	adds	r1, r2, r2
 800422c:	65b9      	str	r1, [r7, #88]	; 0x58
 800422e:	415b      	adcs	r3, r3
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004236:	4621      	mov	r1, r4
 8004238:	eb12 0801 	adds.w	r8, r2, r1
 800423c:	4629      	mov	r1, r5
 800423e:	eb43 0901 	adc.w	r9, r3, r1
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004256:	4690      	mov	r8, r2
 8004258:	4699      	mov	r9, r3
 800425a:	4623      	mov	r3, r4
 800425c:	eb18 0303 	adds.w	r3, r8, r3
 8004260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004264:	462b      	mov	r3, r5
 8004266:	eb49 0303 	adc.w	r3, r9, r3
 800426a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800427a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800427e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004282:	460b      	mov	r3, r1
 8004284:	18db      	adds	r3, r3, r3
 8004286:	653b      	str	r3, [r7, #80]	; 0x50
 8004288:	4613      	mov	r3, r2
 800428a:	eb42 0303 	adc.w	r3, r2, r3
 800428e:	657b      	str	r3, [r7, #84]	; 0x54
 8004290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004298:	f7fb ffb4 	bl	8000204 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4b61      	ldr	r3, [pc, #388]	; (8004428 <UART_SetConfig+0x2d4>)
 80042a2:	fba3 2302 	umull	r2, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	011c      	lsls	r4, r3, #4
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80042c4:	415b      	adcs	r3, r3
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042cc:	4641      	mov	r1, r8
 80042ce:	eb12 0a01 	adds.w	sl, r2, r1
 80042d2:	4649      	mov	r1, r9
 80042d4:	eb43 0b01 	adc.w	fp, r3, r1
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ec:	4692      	mov	sl, r2
 80042ee:	469b      	mov	fp, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	eb1a 0303 	adds.w	r3, sl, r3
 80042f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042fa:	464b      	mov	r3, r9
 80042fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004318:	460b      	mov	r3, r1
 800431a:	18db      	adds	r3, r3, r3
 800431c:	643b      	str	r3, [r7, #64]	; 0x40
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
 8004326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800432a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800432e:	f7fb ff69 	bl	8000204 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4611      	mov	r1, r2
 8004338:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <UART_SetConfig+0x2d4>)
 800433a:	fba3 2301 	umull	r2, r3, r3, r1
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2264      	movs	r2, #100	; 0x64
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	1acb      	subs	r3, r1, r3
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <UART_SetConfig+0x2d4>)
 8004350:	fba3 2302 	umull	r2, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800435c:	441c      	add	r4, r3
 800435e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800436c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	1891      	adds	r1, r2, r2
 8004376:	63b9      	str	r1, [r7, #56]	; 0x38
 8004378:	415b      	adcs	r3, r3
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004380:	4641      	mov	r1, r8
 8004382:	1851      	adds	r1, r2, r1
 8004384:	6339      	str	r1, [r7, #48]	; 0x30
 8004386:	4649      	mov	r1, r9
 8004388:	414b      	adcs	r3, r1
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004398:	4659      	mov	r1, fp
 800439a:	00cb      	lsls	r3, r1, #3
 800439c:	4651      	mov	r1, sl
 800439e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a2:	4651      	mov	r1, sl
 80043a4:	00ca      	lsls	r2, r1, #3
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	4642      	mov	r2, r8
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b4:	464b      	mov	r3, r9
 80043b6:	460a      	mov	r2, r1
 80043b8:	eb42 0303 	adc.w	r3, r2, r3
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043d4:	460b      	mov	r3, r1
 80043d6:	18db      	adds	r3, r3, r3
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043da:	4613      	mov	r3, r2
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ea:	f7fb ff0b 	bl	8000204 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <UART_SetConfig+0x2d4>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <UART_SetConfig+0x2d4>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 0207 	and.w	r2, r3, #7
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4422      	add	r2, r4
 800441a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800441c:	e106      	b.n	800462c <UART_SetConfig+0x4d8>
 800441e:	bf00      	nop
 8004420:	40011000 	.word	0x40011000
 8004424:	40011400 	.word	0x40011400
 8004428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004430:	2200      	movs	r2, #0
 8004432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800443a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800443e:	4642      	mov	r2, r8
 8004440:	464b      	mov	r3, r9
 8004442:	1891      	adds	r1, r2, r2
 8004444:	6239      	str	r1, [r7, #32]
 8004446:	415b      	adcs	r3, r3
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
 800444a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800444e:	4641      	mov	r1, r8
 8004450:	1854      	adds	r4, r2, r1
 8004452:	4649      	mov	r1, r9
 8004454:	eb43 0501 	adc.w	r5, r3, r1
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	00eb      	lsls	r3, r5, #3
 8004462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004466:	00e2      	lsls	r2, r4, #3
 8004468:	4614      	mov	r4, r2
 800446a:	461d      	mov	r5, r3
 800446c:	4643      	mov	r3, r8
 800446e:	18e3      	adds	r3, r4, r3
 8004470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004474:	464b      	mov	r3, r9
 8004476:	eb45 0303 	adc.w	r3, r5, r3
 800447a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800448a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800449a:	4629      	mov	r1, r5
 800449c:	008b      	lsls	r3, r1, #2
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a4:	4621      	mov	r1, r4
 80044a6:	008a      	lsls	r2, r1, #2
 80044a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044ac:	f7fb feaa 	bl	8000204 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4b60      	ldr	r3, [pc, #384]	; (8004638 <UART_SetConfig+0x4e4>)
 80044b6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	011c      	lsls	r4, r3, #4
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	61b9      	str	r1, [r7, #24]
 80044d8:	415b      	adcs	r3, r3
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6139      	str	r1, [r7, #16]
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	67bb      	str	r3, [r7, #120]	; 0x78
 800452a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004538:	4649      	mov	r1, r9
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	4641      	mov	r1, r8
 800453e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004542:	4641      	mov	r1, r8
 8004544:	008a      	lsls	r2, r1, #2
 8004546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800454a:	f7fb fe5b 	bl	8000204 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4611      	mov	r1, r2
 8004554:	4b38      	ldr	r3, [pc, #224]	; (8004638 <UART_SetConfig+0x4e4>)
 8004556:	fba3 2301 	umull	r2, r3, r3, r1
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2264      	movs	r2, #100	; 0x64
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	1acb      	subs	r3, r1, r3
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	3332      	adds	r3, #50	; 0x32
 8004568:	4a33      	ldr	r2, [pc, #204]	; (8004638 <UART_SetConfig+0x4e4>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004574:	441c      	add	r4, r3
 8004576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800457a:	2200      	movs	r2, #0
 800457c:	673b      	str	r3, [r7, #112]	; 0x70
 800457e:	677a      	str	r2, [r7, #116]	; 0x74
 8004580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004584:	4642      	mov	r2, r8
 8004586:	464b      	mov	r3, r9
 8004588:	1891      	adds	r1, r2, r2
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	415b      	adcs	r3, r3
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004594:	4641      	mov	r1, r8
 8004596:	1851      	adds	r1, r2, r1
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	4649      	mov	r1, r9
 800459c:	414b      	adcs	r3, r1
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045ac:	4659      	mov	r1, fp
 80045ae:	00cb      	lsls	r3, r1, #3
 80045b0:	4651      	mov	r1, sl
 80045b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b6:	4651      	mov	r1, sl
 80045b8:	00ca      	lsls	r2, r1, #3
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	4642      	mov	r2, r8
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c6:	464b      	mov	r3, r9
 80045c8:	460a      	mov	r2, r1
 80045ca:	eb42 0303 	adc.w	r3, r2, r3
 80045ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	663b      	str	r3, [r7, #96]	; 0x60
 80045da:	667a      	str	r2, [r7, #100]	; 0x64
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045e8:	4649      	mov	r1, r9
 80045ea:	008b      	lsls	r3, r1, #2
 80045ec:	4641      	mov	r1, r8
 80045ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f2:	4641      	mov	r1, r8
 80045f4:	008a      	lsls	r2, r1, #2
 80045f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045fa:	f7fb fe03 	bl	8000204 <__aeabi_uldivmod>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <UART_SetConfig+0x4e4>)
 8004604:	fba3 1302 	umull	r1, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	2164      	movs	r1, #100	; 0x64
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	3332      	adds	r3, #50	; 0x32
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <UART_SetConfig+0x4e4>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4422      	add	r2, r4
 800462a:	609a      	str	r2, [r3, #8]
}
 800462c:	bf00      	nop
 800462e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004632:	46bd      	mov	sp, r7
 8004634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004638:	51eb851f 	.word	0x51eb851f

0800463c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800463c:	b084      	sub	sp, #16
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	f107 001c 	add.w	r0, r7, #28
 800464a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d122      	bne.n	800469a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d105      	bne.n	800468e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa9c 	bl	8004bcc <USB_CoreReset>
 8004694:	4603      	mov	r3, r0
 8004696:	73fb      	strb	r3, [r7, #15]
 8004698:	e01a      	b.n	80046d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa90 	bl	8004bcc <USB_CoreReset>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
 80046c2:	e005      	b.n	80046d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10b      	bne.n	80046ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f043 0206 	orr.w	r2, r3, #6
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046fa:	b004      	add	sp, #16
 80046fc:	4770      	bx	lr

080046fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d115      	bne.n	800476e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800474e:	2001      	movs	r0, #1
 8004750:	f7fc ff50 	bl	80015f4 <HAL_Delay>
      ms++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa28 	bl	8004bb0 <USB_GetMode>
 8004760:	4603      	mov	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d01e      	beq.n	80047a4 <USB_SetCurrentMode+0x84>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b31      	cmp	r3, #49	; 0x31
 800476a:	d9f0      	bls.n	800474e <USB_SetCurrentMode+0x2e>
 800476c:	e01a      	b.n	80047a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d115      	bne.n	80047a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004780:	2001      	movs	r0, #1
 8004782:	f7fc ff37 	bl	80015f4 <HAL_Delay>
      ms++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa0f 	bl	8004bb0 <USB_GetMode>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <USB_SetCurrentMode+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b31      	cmp	r3, #49	; 0x31
 800479c:	d9f0      	bls.n	8004780 <USB_SetCurrentMode+0x60>
 800479e:	e001      	b.n	80047a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e005      	b.n	80047b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b32      	cmp	r3, #50	; 0x32
 80047a8:	d101      	bne.n	80047ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047b8:	b084      	sub	sp, #16
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e009      	b.n	80047ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3340      	adds	r3, #64	; 0x40
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3301      	adds	r3, #1
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0e      	cmp	r3, #14
 80047f0:	d9f2      	bls.n	80047d8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11c      	bne.n	8004832 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e005      	b.n	800483e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004844:	461a      	mov	r2, r3
 8004846:	2300      	movs	r3, #0
 8004848:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004850:	4619      	mov	r1, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	461a      	mov	r2, r3
 800485a:	680b      	ldr	r3, [r1, #0]
 800485c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10c      	bne.n	800487e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800486a:	2100      	movs	r1, #0
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f965 	bl	8004b3c <USB_SetDevSpeed>
 8004872:	e008      	b.n	8004886 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004874:	2101      	movs	r1, #1
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f960 	bl	8004b3c <USB_SetDevSpeed>
 800487c:	e003      	b.n	8004886 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800487e:	2103      	movs	r1, #3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f95b 	bl	8004b3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004886:	2110      	movs	r1, #16
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8f3 	bl	8004a74 <USB_FlushTxFifo>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f91f 	bl	8004adc <USB_FlushRxFifo>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	461a      	mov	r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	461a      	mov	r2, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e043      	b.n	800495a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e8:	d118      	bne.n	800491c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fc:	461a      	mov	r2, r3
 80048fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	e013      	b.n	800492e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	461a      	mov	r2, r3
 8004914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e008      	b.n	800492e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	461a      	mov	r2, r3
 800492a:	2300      	movs	r3, #0
 800492c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	461a      	mov	r2, r3
 800493c:	2300      	movs	r3, #0
 800493e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	461a      	mov	r2, r3
 800494e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3301      	adds	r3, #1
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	429a      	cmp	r2, r3
 8004960:	d3b7      	bcc.n	80048d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	e043      	b.n	80049f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800497a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800497e:	d118      	bne.n	80049b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	461a      	mov	r2, r3
 8004994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e013      	b.n	80049c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	461a      	mov	r2, r3
 80049aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	e008      	b.n	80049c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	461a      	mov	r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d0:	461a      	mov	r2, r3
 80049d2:	2300      	movs	r3, #0
 80049d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	461a      	mov	r2, r3
 80049e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3301      	adds	r3, #1
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d3b7      	bcc.n	8004968 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d105      	bne.n	8004a2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f043 0210 	orr.w	r2, r3, #16
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <USB_DevInit+0x2b8>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f043 0208 	orr.w	r2, r3, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a6c:	b004      	add	sp, #16
 8004a6e:	4770      	bx	lr
 8004a70:	803c3800 	.word	0x803c3800

08004a74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <USB_FlushTxFifo+0x64>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e01b      	b.n	8004acc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	daf2      	bge.n	8004a82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	019b      	lsls	r3, r3, #6
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <USB_FlushTxFifo+0x64>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e006      	b.n	8004acc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d0f0      	beq.n	8004aac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	00030d40 	.word	0x00030d40

08004adc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a11      	ldr	r2, [pc, #68]	; (8004b38 <USB_FlushRxFifo+0x5c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e018      	b.n	8004b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	daf2      	bge.n	8004ae8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2210      	movs	r2, #16
 8004b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <USB_FlushRxFifo+0x5c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e006      	b.n	8004b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d0f0      	beq.n	8004b0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	00030d40 	.word	0x00030d40

08004b3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b88:	f023 0303 	bic.w	r3, r3, #3
 8004b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <USB_CoreReset+0x64>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e01b      	b.n	8004c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	daf2      	bge.n	8004bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f043 0201 	orr.w	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <USB_CoreReset+0x64>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e006      	b.n	8004c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d0f0      	beq.n	8004c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	00030d40 	.word	0x00030d40

08004c34 <memset>:
 8004c34:	4402      	add	r2, r0
 8004c36:	4603      	mov	r3, r0
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <memset+0xa>
 8004c3c:	4770      	bx	lr
 8004c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c42:	e7f9      	b.n	8004c38 <memset+0x4>

08004c44 <__libc_init_array>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	4d0d      	ldr	r5, [pc, #52]	; (8004c7c <__libc_init_array+0x38>)
 8004c48:	4c0d      	ldr	r4, [pc, #52]	; (8004c80 <__libc_init_array+0x3c>)
 8004c4a:	1b64      	subs	r4, r4, r5
 8004c4c:	10a4      	asrs	r4, r4, #2
 8004c4e:	2600      	movs	r6, #0
 8004c50:	42a6      	cmp	r6, r4
 8004c52:	d109      	bne.n	8004c68 <__libc_init_array+0x24>
 8004c54:	4d0b      	ldr	r5, [pc, #44]	; (8004c84 <__libc_init_array+0x40>)
 8004c56:	4c0c      	ldr	r4, [pc, #48]	; (8004c88 <__libc_init_array+0x44>)
 8004c58:	f000 f818 	bl	8004c8c <_init>
 8004c5c:	1b64      	subs	r4, r4, r5
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	2600      	movs	r6, #0
 8004c62:	42a6      	cmp	r6, r4
 8004c64:	d105      	bne.n	8004c72 <__libc_init_array+0x2e>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6c:	4798      	blx	r3
 8004c6e:	3601      	adds	r6, #1
 8004c70:	e7ee      	b.n	8004c50 <__libc_init_array+0xc>
 8004c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c76:	4798      	blx	r3
 8004c78:	3601      	adds	r6, #1
 8004c7a:	e7f2      	b.n	8004c62 <__libc_init_array+0x1e>
 8004c7c:	08004ccc 	.word	0x08004ccc
 8004c80:	08004ccc 	.word	0x08004ccc
 8004c84:	08004ccc 	.word	0x08004ccc
 8004c88:	08004cd0 	.word	0x08004cd0

08004c8c <_init>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr

08004c98 <_fini>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	bf00      	nop
 8004c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9e:	bc08      	pop	{r3}
 8004ca0:	469e      	mov	lr, r3
 8004ca2:	4770      	bx	lr
